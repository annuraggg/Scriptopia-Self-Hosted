var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/utils/logger.ts
import pino, { transport } from "pino";
var pinoLog, logger, logger_default;
var init_logger = __esm({
  "src/utils/logger.ts"() {
    "use strict";
    pinoLog = pino(
      { level: "info" },
      transport({
        targets: [
          {
            target: "@axiomhq/pino",
            options: {
              dataset: process.env.AXIOM_DATASET,
              token: process.env.AXIOM_TOKEN
            }
          }
          // { target: "pino-pretty", options: { colorize: true } },
        ]
      })
    );
    logger = class {
      info(message) {
        const date = /* @__PURE__ */ new Date();
        pinoLog.info(message);
        console.log(
          `\x1B[37m[${date.toISOString()}] \x1B[32mINFO: \x1B[34m${message} \x1B[37m`
        );
      }
      error(message) {
        pinoLog.error(message);
        console.error(
          `\x1B[37m[${(/* @__PURE__ */ new Date()).toISOString()}] \x1B[31mERROR: \x1B[31m${message} \x1B[37m`
        );
        console.trace();
      }
      warn(message) {
        pinoLog.warn(message);
        console.warn(
          `\x1B[37m[${(/* @__PURE__ */ new Date()).toISOString()}] \x1B[33mWARN: \x1B[33m${message} \x1B[37m`
        );
      }
    };
    logger_default = new logger();
  }
});

// src/middlewares/performanceMiddleware.ts
import { createMiddleware } from "hono/factory";
import { hrtime } from "process";
var performanceLogger, performanceMiddleware_default;
var init_performanceMiddleware = __esm({
  "src/middlewares/performanceMiddleware.ts"() {
    "use strict";
    init_logger();
    performanceLogger = createMiddleware(async (c2, next) => {
      const start = hrtime.bigint();
      return next().then(async () => {
        if (c2.req.path.startsWith("/static")) return;
        if (c2.req.path.startsWith("/maintainance")) return;
        if (c2.req.path.startsWith("/backup/backup-with-progress/")) return;
        const end = hrtime.bigint();
        const durationMs = Number((end - start) / BigInt(1e6)).toFixed(2);
        const isAuthenticated = !!c2.get("auth")?.userId;
        const logMessage = [
          `MT: ${c2.req.method}`,
          `PA: ${c2.req.path}`,
          `AU: ${isAuthenticated ? "Authenticated" : "Unauthenticated"}`,
          `ST: ${c2.res.status}`,
          `RT: ${durationMs} ms`
        ].join(" | ");
        logger_default.info(logMessage);
      });
    });
    performanceMiddleware_default = performanceLogger;
  }
});

// src/utils/sendResponse.ts
var sendSuccess, sendError;
var init_sendResponse = __esm({
  "src/utils/sendResponse.ts"() {
    "use strict";
    init_logger();
    sendSuccess = (c2, status, message, data) => {
      return c2.json(
        {
          success: true,
          message,
          data: data || null,
          error: null
        },
        status
      );
    };
    sendError = (c2, status, message, data) => {
      logger_default.warn(message);
      console.error(message);
      return c2.json(
        {
          success: false,
          message,
          data,
          error: data || null
        },
        status
      );
    };
  }
});

// src/middlewares/authMiddleware.ts
import { getAuth } from "@hono/clerk-auth";
import { createMiddleware as createMiddleware2 } from "hono/factory";
var authMiddleware, authMiddleware_default;
var init_authMiddleware = __esm({
  "src/middlewares/authMiddleware.ts"() {
    "use strict";
    init_sendResponse();
    authMiddleware = createMiddleware2(async (c2, next) => {
      const auth = getAuth(c2);
      const credentials = {
        userId: auth?.userId,
        _id: auth?.sessionClaims?._id
      };
      c2.set("auth", credentials);
      if (c2.req.path === "/health") return next();
      if (c2.req.path.startsWith("/submissions")) return next();
      if (c2.req.path.startsWith("/users")) return next();
      if (c2.req.path.startsWith("/ws")) return next();
      if (c2.req.path.startsWith("/socket.io")) return next();
      if (c2.req.path.startsWith("/assessments/verify")) return next();
      if (c2.req.path.startsWith("/assessments/code/submit")) return next();
      if (c2.req.path.startsWith("/assessments/submit/mcq")) return next();
      if (c2.req.path.startsWith("/assessments/code/check-progress")) return next();
      if (c2.req.path.startsWith("/assessments/mcq/check-progress")) return next();
      if (!auth) {
        return sendError(c2, 401, "Request Unauthorized");
      }
      return next();
    });
    authMiddleware_default = authMiddleware;
  }
});

// src/plugins/softDelete.ts
function softDeletePlugin(schema) {
  schema.add({ deletedAt: { type: Date, default: null } });
  schema.methods.softDelete = function() {
    this.deletedAt = /* @__PURE__ */ new Date();
    return this.save();
  };
  schema.statics.findActive = function(filter = {}) {
    return this.find({ ...filter, deletedAt: null });
  };
  schema.statics.findWithDeleted = function(filter = {}) {
    return this.find(filter);
  };
  schema.methods.delete = async function() {
    return this.softDelete();
  };
  schema.statics.deleteMany = async function(filter) {
    const documents = await this.find(filter);
    const promises = documents.map((doc) => doc.softDelete());
    return Promise.all(promises);
  };
  schema.statics.findByIdAndDelete = async function(id) {
    const document = await this.findById(id);
    if (document) {
      return document.softDelete();
    }
    return null;
  };
  const autoExcludeDeleted = function(next) {
    this.where({ deletedAt: null });
    next();
  };
  schema.pre("find", autoExcludeDeleted);
  schema.pre("findOne", autoExcludeDeleted);
  schema.pre("findOne", function(next) {
    if (this.getQuery()._id) {
      this.where({ deletedAt: null });
    }
    next();
  });
}
var init_softDelete = __esm({
  "src/plugins/softDelete.ts"() {
    "use strict";
  }
});

// src/models/Candidate.ts
var Candidate_exports = {};
__export(Candidate_exports, {
  default: () => Candidate_default
});
import mongoose from "mongoose";
import { Schema } from "mongoose";
var socialLinkSchema, educationSchema, workSchema, skillSchema, languageSchema, subjectSchema, responsibilitySchema, projectSchema, awardSchema, certificateSchema, competitionSchema, conferenceSchema, patentSchema, scholarshipSchema, volunteerSchema, extraCurricularSchema, notificationSchema, candidateSchema, Candidate, Candidate_default;
var init_Candidate = __esm({
  "src/models/Candidate.ts"() {
    "use strict";
    init_softDelete();
    socialLinkSchema = new Schema({
      platform: {
        type: String,
        required: true,
        enum: [
          "linkedin",
          "github",
          "twitter",
          "facebook",
          "instagram",
          "portfolio",
          "other"
        ]
      },
      url: { type: String, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    educationSchema = new Schema({
      school: { type: String, required: true },
      degree: { type: String, required: true },
      board: { type: String, required: true },
      branch: { type: String, required: true },
      startYear: { type: Number, required: true },
      endYear: { type: Number, required: false },
      current: { type: Boolean, required: true },
      type: {
        type: String,
        required: true,
        enum: ["fulltime", "parttime", "distance"]
      },
      percentage: { type: Number, required: true },
      // New fields for backlogs
      activeBacklogs: { type: Number, default: 0 },
      totalBacklogs: { type: Number, default: 0 },
      clearedBacklogs: { type: Number, default: 0 },
      backlogHistory: [
        {
          subject: { type: String, required: true },
          semester: { type: Number, required: true },
          cleared: { type: Boolean, default: false },
          attemptCount: { type: Number, default: 1 },
          clearedDate: { type: Date, required: false }
        }
      ],
      createdAt: { type: Date, default: Date.now }
    });
    workSchema = new Schema({
      company: { type: String, required: true },
      sector: { type: String, required: true },
      title: { type: String, required: true },
      location: { type: String, required: true },
      type: {
        type: String,
        required: true,
        enum: ["fulltime", "parttime", "internship", "contract", "freelance"]
      },
      jobFunction: { type: String, required: true },
      startDate: { type: Date, required: true },
      endDate: { type: Date, required: false },
      current: { type: Boolean, required: true },
      description: { type: String, required: false },
      createdAt: { type: Date, default: Date.now }
    });
    skillSchema = new Schema({
      skill: { type: String, required: true },
      proficiency: { type: Number, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    languageSchema = new Schema({
      language: { type: String, required: true },
      proficiency: { type: Number, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    subjectSchema = new Schema({
      subject: { type: String, required: true },
      proficiency: { type: Number, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    responsibilitySchema = new Schema({
      title: { type: String, required: true },
      organization: { type: String, required: true },
      startDate: { type: Date, required: true },
      endDate: { type: Date, required: false },
      current: { type: Boolean, required: true },
      description: { type: String, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    projectSchema = new Schema({
      title: { type: String, required: true },
      domain: { type: String, required: true },
      startDate: { type: Date, required: true },
      endDate: { type: Date, required: false },
      current: { type: Boolean, required: true },
      associatedWith: {
        type: String,
        required: true,
        enum: ["personal", "academic", "professional"]
      },
      description: { type: String, required: true },
      url: { type: String, required: false },
      createdAt: { type: Date, default: Date.now }
    });
    awardSchema = new Schema({
      title: { type: String, required: true },
      issuer: { type: String, required: true },
      associatedWith: {
        type: String,
        required: true,
        enum: ["personal", "academic", "professional"]
      },
      date: { type: Date, required: true },
      description: { type: String, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    certificateSchema = new Schema({
      title: { type: String, required: true },
      issuer: { type: String, required: true },
      url: { type: String, required: false },
      licenseNumber: { type: String, required: false },
      issueDate: { type: Date, required: true },
      doesExpire: { type: Boolean, required: true },
      expiryDate: { type: Date, required: false },
      hasScore: { type: Boolean, required: true },
      score: { type: Number, required: false },
      description: { type: String, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    competitionSchema = new Schema({
      title: { type: String, required: true },
      position: { type: String, required: true },
      organizer: { type: String, required: true },
      associatedWith: {
        type: String,
        required: true,
        enum: ["personal", "academic", "professional"]
      },
      date: { type: Date, required: true },
      description: { type: String, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    conferenceSchema = new Schema({
      title: { type: String, required: true },
      organizer: { type: String, required: true },
      eventLocation: { type: String, required: true },
      eventDate: { type: Date, required: true },
      link: { type: String, required: false },
      description: { type: String, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    patentSchema = new Schema({
      title: { type: String, required: true },
      patentOffice: { type: String, required: true },
      patentNumber: { type: String, required: true },
      status: {
        type: String,
        required: true,
        enum: ["pending", "granted", "rejected"]
      },
      filingDate: { type: Date, required: true },
      issueDate: { type: Date, required: false },
      description: { type: String, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    scholarshipSchema = new Schema({
      title: { type: String, required: true },
      organization: { type: String, required: true },
      grantDate: { type: Date, required: true },
      description: { type: String, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    volunteerSchema = new Schema({
      organization: { type: String, required: true },
      role: { type: String, required: true },
      cause: { type: String, required: true },
      startDate: { type: Date, required: true },
      endDate: { type: Date, required: false },
      current: { type: Boolean, required: true },
      description: { type: String, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    extraCurricularSchema = new Schema({
      title: { type: String, required: true },
      category: { type: String, required: true },
      startDate: { type: Date, required: true },
      endDate: { type: Date, required: false },
      current: { type: Boolean, required: true },
      description: { type: String, required: true },
      createdAt: { type: Date, default: Date.now }
    });
    notificationSchema = new Schema({
      message: { type: String, required: true },
      type: { type: String, required: true },
      read: { type: Boolean, default: false },
      createdAt: { type: Date, default: Date.now }
    });
    candidateSchema = new Schema(
      {
        userId: { type: mongoose.Types.ObjectId, ref: "User" },
        name: { type: String, required: true },
        dob: { type: Date, required: true },
        gender: { type: String, required: true },
        email: { type: String, required: true },
        phone: { type: String, required: true },
        address: { type: String, required: true },
        // Optional profile fields
        summary: { type: String, required: false },
        profileImage: { type: String, required: false },
        // Academic aggregates for quick filtering
        academicAggregates: {
          overallCGPA: { type: Number, required: false },
          hasBacklogs: { type: Boolean, default: false },
          activeBacklogs: { type: Number, default: 0 },
          totalBacklogs: { type: Number, default: 0 }
        },
        socialLinks: { type: [socialLinkSchema], required: false },
        education: { type: [educationSchema], required: false },
        workExperience: { type: [workSchema], required: false },
        technicalSkills: { type: [skillSchema], required: false },
        languages: { type: [languageSchema], required: false },
        subjects: { type: [subjectSchema], required: false },
        responsibilities: { type: [responsibilitySchema], required: false },
        projects: { type: [projectSchema], required: false },
        awards: { type: [awardSchema], required: false },
        certificates: { type: [certificateSchema], required: false },
        competitions: { type: [competitionSchema], required: false },
        conferences: { type: [conferenceSchema], required: false },
        patents: { type: [patentSchema], required: false },
        scholarships: { type: [scholarshipSchema], required: false },
        volunteerings: { type: [volunteerSchema], required: false },
        extraCurriculars: { type: [extraCurricularSchema], required: false },
        resumeUrl: { type: String, required: false },
        resumeExtract: { type: String },
        appliedPostings: [
          { type: mongoose.Schema.Types.ObjectId, ref: "AppliedPosting" }
        ],
        appliedDrives: [
          { type: mongoose.Schema.Types.ObjectId, ref: "AppliedDrive" }
        ],
        notifications: [notificationSchema],
        institute: { type: mongoose.Schema.Types.ObjectId, ref: "Institute" },
        instituteUid: { type: String, required: false },
        instituteDepartment: { type: String, required: false },
        // Profile completion metadata
        profileCompletionPercentage: { type: Number, default: 0 },
        lastProfileUpdate: { type: Date, default: Date.now },
        isSample: { type: Boolean, default: false }
      },
      { timestamps: true }
    );
    candidateSchema.index({ email: 1 });
    candidateSchema.index({ userId: 1 });
    candidateSchema.index({ "appliedPostings.postingId": 1 });
    candidateSchema.index({ "appliedDrives.driveId": 1 });
    candidateSchema.index({ instituteUid: 1 });
    candidateSchema.index({ institute: 1 });
    candidateSchema.index({ "academicAggregates.hasBacklogs": 1 });
    candidateSchema.index({ "academicAggregates.activeBacklogs": 1 });
    candidateSchema.plugin(softDeletePlugin);
    Candidate = mongoose.model("Candidate", candidateSchema);
    Candidate_default = Candidate;
  }
});

// src/config/db.ts
import mongoose2 from "mongoose";
var init_db = __esm({
  "src/config/db.ts"() {
    "use strict";
    init_logger();
    Promise.resolve().then(() => init_Candidate());
    mongoose2.connect(process.env.MONGO_URI, {
      dbName: process.env.MONGO_DB
    }).then(() => logger_default.info("Connected to MongoDB")).catch((err) => logger_default.error(err));
  }
});

// src/config/loops.ts
import { LoopsClient } from "loops";
var loops, loops_default;
var init_loops = __esm({
  "src/config/loops.ts"() {
    "use strict";
    init_logger();
    loops = new LoopsClient(process.env.LOOPS_API_KEY);
    logger_default.info("Loops client initialized");
    loops_default = loops;
  }
});

// src/config/clerk.ts
import { createClerkClient } from "@clerk/backend";
var clerkClient, clerk_default;
var init_clerk = __esm({
  "src/config/clerk.ts"() {
    "use strict";
    init_logger();
    clerkClient = createClerkClient({
      secretKey: process.env.CLERK_SECRET_KEY
    });
    logger_default.info("Clerk client created");
    clerk_default = clerkClient;
  }
});

// src/models/Problem.ts
import mongoose3 from "mongoose";
var testCaseSchema, customStubSchema, problemSchema, Problem, Problem_default;
var init_Problem = __esm({
  "src/models/Problem.ts"() {
    "use strict";
    init_softDelete();
    testCaseSchema = new mongoose3.Schema({
      input: { type: [String], required: true },
      output: { type: String, required: true },
      difficulty: {
        type: String,
        enum: ["easy", "medium", "hard"],
        required: true
      },
      isSample: { type: Boolean, required: true }
    });
    customStubSchema = new mongoose3.Schema({
      language: { type: String, required: true },
      stub: { type: String, required: true }
    });
    problemSchema = new mongoose3.Schema(
      {
        title: { type: String, required: true },
        description: { type: Object, required: true },
        author: { type: mongoose3.Schema.Types.ObjectId, ref: "User" },
        difficulty: {
          type: String,
          enum: ["easy", "medium", "hard"],
          required: true
        },
        tags: { type: [String], required: true },
        isPrivate: { type: Boolean, default: false },
        sdsl: { type: [String], required: true },
        customStubs: { type: [customStubSchema], required: false },
        testCases: { type: [testCaseSchema], required: true },
        totalSubmissions: { type: Number, default: 0 },
        successfulSubmissions: { type: Number, default: 0 },
        acceptanceRate: { type: Number, default: 0 }
      },
      { timestamps: true }
    );
    problemSchema.plugin(softDeletePlugin);
    Problem = mongoose3.model("Problem", problemSchema);
    Problem_default = Problem;
  }
});

// src/models/User.ts
import mongoose4 from "mongoose";
var TransactionSchema, WalletSchema, userSchema, User, User_default;
var init_User = __esm({
  "src/models/User.ts"() {
    "use strict";
    init_softDelete();
    TransactionSchema = new mongoose4.Schema(
      {
        amount: { type: Number, required: true },
        problemId: { type: String, required: true }
      },
      { timestamps: true }
    );
    WalletSchema = new mongoose4.Schema({
      address: { type: String, required: true },
      privateKey: { type: String, required: true, select: false },
      balance: { type: Number, default: 0 },
      transactions: { type: [TransactionSchema], required: false }
    });
    userSchema = new mongoose4.Schema(
      {
        clerkId: { type: String, required: true },
        email: { type: String, required: true },
        streak: { type: [Date] },
        wallet: { type: WalletSchema, default: null },
        isSample: { type: Boolean, default: false },
        sampleInstituteId: { type: mongoose4.Schema.Types.ObjectId, ref: "Institute" }
      },
      { timestamps: true }
    );
    userSchema.plugin(softDeletePlugin);
    User = mongoose4.model("User", userSchema);
    User_default = User;
  }
});

// src/controllers/code/homeController.ts
var getHome, homeController_default;
var init_homeController = __esm({
  "src/controllers/code/homeController.ts"() {
    "use strict";
    init_sendResponse();
    init_Problem();
    init_User();
    getHome = async (c2) => {
      try {
        const problems = await Problem_default.find().limit(20).lean();
        const dupTabs = problems.map((problem) => problem.tags).flat();
        const tags = [...new Set(dupTabs)];
        const user = await User_default.findOne({ clerkId: c2.get("auth").userId }).lean();
        if (!user) {
          return sendError(c2, 401, "Unauthorized");
        }
        let easyCount = 0;
        let mediumCount = 0;
        let hardCount = 0;
        const solvedProblems = [];
        const response = {
          problems,
          tags,
          streak: user.streak,
          solvedProblems,
          problemsCount: { easy: easyCount, medium: mediumCount, hard: hardCount }
        };
        return sendSuccess(c2, 200, "Success", response);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    homeController_default = {
      getHome
    };
  }
});

// src/routes/homeRoute.ts
import { Hono } from "hono";
var app, homeRoute_default;
var init_homeRoute = __esm({
  "src/routes/homeRoute.ts"() {
    "use strict";
    init_homeController();
    app = new Hono();
    app.get("/", homeController_default.getHome);
    homeRoute_default = app;
  }
});

// src/models/Submission.ts
import mongoose5 from "mongoose";
var ResultSchema, DriverMetaSchema, submissionSchema, Submission, Submission_default;
var init_Submission = __esm({
  "src/models/Submission.ts"() {
    "use strict";
    init_softDelete();
    ResultSchema = new mongoose5.Schema({
      caseNo: { type: Number, required: true },
      caseId: { type: String, required: true },
      output: { type: String, required: true },
      isSample: { type: Boolean, required: true },
      memory: { type: Number, required: true },
      time: { type: Number, required: true },
      passed: { type: Boolean, required: true },
      console: { type: String, default: "" }
    });
    DriverMetaSchema = new mongoose5.Schema({
      driver: { type: String, required: true },
      timestamp: { type: Date, required: true }
    });
    submissionSchema = new mongoose5.Schema(
      {
        problem: { type: mongoose5.Schema.Types.ObjectId, ref: "Problem" },
        user: { type: mongoose5.Schema.Types.ObjectId, ref: "User" },
        code: { type: String, required: true },
        language: { type: String, required: true },
        status: {
          type: String,
          enum: ["FAILED", "SUCCESS"],
          required: true
        },
        avgMemory: { type: Number, required: true },
        avgTime: { type: Number, required: true },
        failedCaseNumber: { type: Number, required: true, default: -1 },
        results: { type: [ResultSchema], required: true },
        meta: { type: DriverMetaSchema, required: true }
      },
      { timestamps: true }
    );
    submissionSchema.plugin(softDeletePlugin);
    Submission = mongoose5.model("Submission", submissionSchema);
    Submission_default = Submission;
  }
});

// src/controllers/code/problemController.ts
import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold
} from "@google/generative-ai";
var LIMIT_PER_PAGE, getProblems, getUserGeneratedProblems, getMyProblems, getProblem, createProblem, MODEL_NAME, API_KEY, genAI, model, generationConfig, safetySettings, explain, deleteProblem, problemController_default;
var init_problemController = __esm({
  "src/controllers/code/problemController.ts"() {
    "use strict";
    init_Problem();
    init_sendResponse();
    init_Submission();
    LIMIT_PER_PAGE = 20;
    getProblems = async (c2) => {
      try {
        const page = parseInt(c2.req.param("page")) || 1;
        const auth = c2.get("auth");
        const userId = auth?._id;
        const problems = await Problem_default.find().skip((page - 1) * LIMIT_PER_PAGE).limit(LIMIT_PER_PAGE).lean();
        let userSolvedProblems = [];
        if (userId) {
          const successfulSubmissions = await Submission_default.distinct("problem", {
            user: userId,
            status: "SUCCESS"
          });
          userSolvedProblems = successfulSubmissions.filter(
            (submission) => submission !== null
          ).map((submission) => submission.toString());
        }
        const problemsWithStatus = problems.map((problem) => {
          const acceptanceRate = problem.totalSubmissions > 0 ? problem.successfulSubmissions / problem.totalSubmissions * 100 : 0;
          return {
            ...problem,
            acceptanceRate,
            solved: userId ? userSolvedProblems.includes(problem._id.toString()) : false
          };
        });
        return sendSuccess(c2, 200, "Success", problemsWithStatus);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getUserGeneratedProblems = async (c2) => {
      try {
        const page = parseInt(c2.req.param("page")) || 1;
        const auth = c2.get("auth");
        const userId = auth?._id;
        const problems = await Problem_default.find({
          author: { $ne: process.env.SCRIPTOPIA_USER_ID }
        }).skip((page - 1) * LIMIT_PER_PAGE).limit(LIMIT_PER_PAGE).lean();
        let userSolvedProblems = [];
        if (userId) {
          const successfulSubmissions = await Submission_default.distinct("problem", {
            user: userId,
            status: "SUCCESS"
          });
          userSolvedProblems = successfulSubmissions.filter(
            (submission) => submission !== null && submission !== void 0
          ).map((submission) => submission.toString());
        }
        const problemsWithStatus = problems.map((problem) => {
          const acceptanceRate = problem.totalSubmissions > 0 ? problem.successfulSubmissions / problem.totalSubmissions * 100 : 0;
          return {
            ...problem,
            acceptanceRate,
            solved: userId ? userSolvedProblems.includes(problem._id.toString()) : false
          };
        });
        return sendSuccess(c2, 200, "Success", problemsWithStatus);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getMyProblems = async (c2) => {
      try {
        const page = parseInt(c2.req.param("page")) || 1;
        const auth = c2.get("auth");
        if (!auth?._id) {
          return sendError(c2, 401, "Unauthorized");
        }
        const problems = await Problem_default.find({ author: auth?._id }).skip((page - 1) * LIMIT_PER_PAGE).limit(LIMIT_PER_PAGE).lean();
        const successfulSubmissions = await Submission_default.distinct("problem", {
          user: auth?._id,
          status: "SUCCESS"
        });
        const problemsWithStatus = problems.map((problem) => {
          const acceptanceRate = problem.totalSubmissions > 0 ? problem.successfulSubmissions / problem.totalSubmissions * 100 : 0;
          return {
            ...problem,
            acceptanceRate,
            solved: successfulSubmissions.includes(problem._id)
          };
        });
        return sendSuccess(c2, 200, "Success", problemsWithStatus);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getProblem = async (c2) => {
      try {
        const id = c2.req.param("id");
        const userId = c2.get("auth")?._id;
        const problem = await Problem_default.findById(id).lean();
        if (!problem) {
          return sendSuccess(c2, 404, "Problem not found");
        }
        if (!userId) return sendSuccess(c2, 200, "Success", { problem });
        const submissions = await Submission_default.find({
          problem: id,
          user: userId
        }).lean();
        return sendSuccess(c2, 200, "Success", { problem, submissions });
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    createProblem = async (c2) => {
      try {
        const auth = c2.get("auth");
        if (!auth?._id) {
          return sendError(c2, 401, "Unauthorized");
        }
        const body = await c2.req.json();
        const problem = new Problem_default({
          ...body,
          isPrivate: auth?._id === process.env.SCRIPTOPIA_USER_ID ? false : true,
          author: auth._id
        });
        await problem.save();
        return sendSuccess(c2, 200, "Success", problem);
      } catch (error) {
        console.error(error);
        if (error.name === "ValidationError") {
          return sendError(c2, 400, "Invalid Data", error.message);
        }
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    MODEL_NAME = "gemini-1.5-flash-8b";
    API_KEY = process.env.GEMINI_API_KEY;
    genAI = new GoogleGenerativeAI(API_KEY);
    model = genAI.getGenerativeModel({ model: MODEL_NAME });
    generationConfig = {
      temperature: 0,
      topK: 1,
      topP: 1,
      maxOutputTokens: 2048,
      stopSequences: ["Note"]
    };
    safetySettings = [
      {
        category: HarmCategory.HARM_CATEGORY_HARASSMENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
      },
      {
        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
      },
      {
        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
      },
      {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE
      }
    ];
    explain = async (c2) => {
      const { code } = await c2.req.json();
      const appendTemplate = "Just Explain the Following Code DO NOT COMPLETE IT: ";
      try {
        if (code) {
          const chat = model.startChat({
            generationConfig,
            safetySettings,
            history: []
          });
          const result = await chat.sendMessage(`${appendTemplate} ${code}`);
          const response = result.response;
          const toText = response.text();
          return sendSuccess(c2, 200, "Success", toText);
        }
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    deleteProblem = async (c2) => {
      try {
        const id = c2.req.param("id");
        const userId = c2.get("auth")?._id;
        if (!userId) {
          return sendError(c2, 401, "Unauthorized");
        }
        const problem = await Problem_default.findOneAndDelete({
          _id: id,
          author: userId
        });
        if (!problem) {
          return sendError(c2, 404, "Problem not found");
        }
        return sendSuccess(c2, 200, "Success", problem);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    problemController_default = {
      getProblems,
      getUserGeneratedProblems,
      getMyProblems,
      getProblem,
      createProblem,
      explain,
      deleteProblem
    };
  }
});

// src/routes/problemsRoute.ts
import { Hono as Hono2 } from "hono";
var app2, problemsRoute_default;
var init_problemsRoute = __esm({
  "src/routes/problemsRoute.ts"() {
    "use strict";
    init_problemController();
    app2 = new Hono2();
    app2.get("/all/:page", problemController_default.getProblems);
    app2.get("/user-generated/:page", problemController_default.getUserGeneratedProblems);
    app2.get("/my-problems/:page", problemController_default.getMyProblems);
    app2.get("/:id", problemController_default.getProblem);
    app2.delete("/:id", problemController_default.deleteProblem);
    app2.post("/", problemController_default.createProblem);
    app2.post("/explain", problemController_default.explain);
    problemsRoute_default = app2;
  }
});

// src/utils/runCode.ts
import { LambdaClient, InvokeCommand } from "@aws-sdk/client-lambda";
var REGION, runCode;
var init_runCode = __esm({
  "src/utils/runCode.ts"() {
    "use strict";
    REGION = "ap-south-1";
    runCode = async (language, sdsl, code, testCases) => {
      const lambdaClient = new LambdaClient({
        region: REGION,
        credentials: {
          accessKeyId: process.env.AWS_LAMBDA_ACCESS_KEY_ID,
          secretAccessKey: process.env.AWS_LAMBDA_SECRET_ACCESS_KEY
        }
      });
      const data = {
        testCases,
        sdsl: sdsl.join("\n"),
        code
      };
      const params = {
        FunctionName: `${language}-driver`,
        Payload: JSON.stringify(data)
      };
      try {
        const data2 = await lambdaClient.send(new InvokeCommand(params));
        if (data2.FunctionError) {
          console.error("Error Running Code: ", data2.FunctionError);
          return { status: "ERROR", error: data2.FunctionError };
        }
        if (data2.Payload) {
          const d2 = JSON.parse(new TextDecoder().decode(data2.Payload));
          return d2;
        }
        return { status: "ERROR" };
      } catch (err) {
        console.error(err);
        return { status: "ERROR" };
      }
    };
  }
});

// src/models/Posting.ts
import mongoose6 from "mongoose";
var Schema2, StepType, StepStatus, scheduleSchema, atsLogSchema, atsSchema, workflowStepSchema, workflowSchema, salarySchema, assignmentSchema, CodeAssessmentSchema, McqAssessmentSchema, additionalFieldConfigSchema, InterviewSchema, postingSchema, Posting, Posting_default;
var init_Posting = __esm({
  "src/models/Posting.ts"() {
    "use strict";
    init_softDelete();
    ({ Schema: Schema2 } = mongoose6);
    StepType = {
      RESUME_SCREENING: "RESUME_SCREENING",
      MCQ_ASSESSMENT: "MCQ_ASSESSMENT",
      CODING_ASSESSMENT: "CODING_ASSESSMENT",
      ASSIGNMENT: "ASSIGNMENT",
      INTERVIEW: "INTERVIEW",
      CUSTOM: "CUSTOM"
    };
    StepStatus = {
      PENDING: "pending",
      IN_PROGRESS: "in-progress",
      COMPLETED: "completed",
      FAILED: "failed"
    };
    scheduleSchema = new Schema2({
      startTime: { type: Date, default: null, required: false },
      endTime: { type: Date, default: null, required: false },
      actualCompletionTime: { type: Date }
    });
    atsLogSchema = new Schema2({
      level: {
        type: String,
        enum: ["INFO", "ERROR", "WARNING"],
        required: true
      },
      stage: {
        type: String,
        enum: ["INIT", "PROCESSING", "EMAIL", "RESUME_PROCESSING", "DATABASE"],
        required: true
      },
      timestamp: {
        type: Date,
        required: true,
        default: Date.now
      },
      message: {
        type: String,
        required: true
      },
      error: {
        name: String,
        message: String,
        stack: String
      },
      metadata: {
        candidateId: String,
        resumeId: String,
        apiResponse: Schema2.Types.Mixed,
        processingTime: Number,
        retryCount: Number
      }
    });
    atsSchema = new Schema2(
      {
        _id: {
          type: mongoose6.Schema.Types.ObjectId,
          default: mongoose6.Types.ObjectId
        },
        minimumScore: {
          type: Number,
          required: true
        },
        negativePrompts: {
          type: [String],
          default: ["none"]
        },
        positivePrompts: {
          type: [String],
          default: ["none"]
        },
        status: {
          type: String,
          enum: ["pending", "processing", "finished", "failed"],
          default: "pending"
        },
        startTime: {
          type: Date,
          required: false
        },
        endTime: {
          type: Date,
          required: false
        },
        failedCount: {
          type: Number,
          default: 0,
          required: false
        },
        successCount: {
          type: Number,
          default: 0,
          required: false
        },
        error: {
          type: String,
          required: false
        },
        logs: { type: [atsLogSchema], required: false },
        summary: {
          totalProcessed: Number,
          successfulProcessing: Number,
          failedProcessing: Number,
          totalTime: Number,
          // in milliseconds
          averageProcessingTime: Number
          // in milliseconds
        }
      },
      {
        timestamps: true
      }
    );
    workflowStepSchema = new Schema2({
      name: { type: String, required: true },
      type: { type: String, required: true, enum: Object.values(StepType) },
      status: {
        type: String,
        required: true,
        enum: Object.values(StepStatus),
        default: StepStatus.PENDING
      },
      schedule: { type: scheduleSchema },
      startedBy: { type: mongoose6.Schema.Types.ObjectId, ref: "User" }
    });
    workflowSchema = new Schema2({
      steps: { type: [workflowStepSchema], required: true }
    });
    salarySchema = new Schema2({ min: Number, max: Number, currency: String });
    assignmentSchema = new Schema2({
      name: { type: String, required: true },
      workflowId: {
        type: mongoose6.Schema.Types.ObjectId,
        required: true,
        ref: "Workflow"
      },
      description: { type: String, required: true },
      submissionType: {
        type: String,
        enum: ["file", "text", "link"],
        required: true
      },
      submissions: { type: [mongoose6.Schema.Types.ObjectId], ref: "AssignmentSubmission" }
    });
    CodeAssessmentSchema = new Schema2({
      assessmentId: {
        type: mongoose6.Schema.Types.ObjectId,
        required: true,
        ref: "CodeAssessment"
      },
      workflowId: {
        type: mongoose6.Schema.Types.ObjectId,
        required: true,
        ref: "Workflow"
      }
    });
    McqAssessmentSchema = new Schema2({
      assessmentId: {
        type: mongoose6.Schema.Types.ObjectId,
        required: true,
        ref: "MCQAssessment"
      },
      workflowId: {
        type: mongoose6.Schema.Types.ObjectId,
        required: true,
        ref: "Workflow"
      }
    });
    additionalFieldConfigSchema = new Schema2(
      {
        required: { type: Boolean, required: true },
        allowEmpty: { type: Boolean, required: true }
      },
      { _id: false }
    );
    InterviewSchema = new Schema2({
      interview: { type: mongoose6.Schema.Types.ObjectId, ref: "Meet" },
      workflowId: { type: mongoose6.Schema.Types.ObjectId, ref: "Workflow" }
    });
    postingSchema = new Schema2(
      {
        organizationId: {
          type: mongoose6.Schema.Types.ObjectId,
          ref: "Organization"
        },
        title: { type: String, required: true },
        description: { type: Object, required: true },
        department: { type: mongoose6.Schema.Types.ObjectId, ref: "Department" },
        location: { type: String, required: true },
        type: {
          type: String,
          enum: ["full_time", "part_time", "internship", "contract", "temporary"],
          required: true
        },
        url: { type: String },
        openings: { type: Number, required: true },
        salary: { type: salarySchema, required: true },
        applicationRange: { start: Date, end: Date },
        skills: { type: [String], required: true },
        workflow: { type: workflowSchema },
        assignments: { type: [assignmentSchema], ref: "Assignment" },
        ats: { type: atsSchema },
        mcqAssessments: { type: [McqAssessmentSchema] },
        codeAssessments: { type: [CodeAssessmentSchema] },
        interviews: { type: [InterviewSchema], ref: "Meet" },
        candidates: { type: [mongoose6.Schema.Types.ObjectId], ref: "Candidate" },
        additionalDetails: {
          type: {
            basic: {
              summary: { type: additionalFieldConfigSchema }
            },
            links: {
              socialLinks: { type: additionalFieldConfigSchema }
            },
            background: {
              education: { type: additionalFieldConfigSchema },
              workExperience: { type: additionalFieldConfigSchema }
            },
            skills: {
              technicalSkills: { type: additionalFieldConfigSchema },
              languages: { type: additionalFieldConfigSchema },
              subjects: { type: additionalFieldConfigSchema }
            },
            experience: {
              responsibilities: { type: additionalFieldConfigSchema },
              projects: { type: additionalFieldConfigSchema }
            },
            achievements: {
              awards: { type: additionalFieldConfigSchema },
              certificates: { type: additionalFieldConfigSchema },
              competitions: { type: additionalFieldConfigSchema }
            },
            professional: {
              conferences: { type: additionalFieldConfigSchema },
              patents: { type: additionalFieldConfigSchema },
              scholarships: { type: additionalFieldConfigSchema }
            },
            activities: {
              volunteerings: { type: additionalFieldConfigSchema },
              extraCurriculars: { type: additionalFieldConfigSchema }
            }
          },
          required: false
        },
        published: { type: Boolean, default: false },
        publishedOn: { type: Date }
      },
      { timestamps: true }
    );
    postingSchema.index({ organizationId: 1 });
    postingSchema.index({ department: 1 });
    postingSchema.index({ title: 1 });
    postingSchema.index({ "ats.status": 1 });
    postingSchema.plugin(softDeletePlugin);
    Posting = mongoose6.model("Posting", postingSchema);
    Posting_default = Posting;
  }
});

// src/models/MCQAssessment.ts
import mongoose7 from "mongoose";
var optionSchema, questionSchema, sectionSchema, candidateSchema2, openRangeSchema, securitySchema, mcqAssessmentSchema, MCQAssessment, MCQAssessment_default;
var init_MCQAssessment = __esm({
  "src/models/MCQAssessment.ts"() {
    "use strict";
    init_softDelete();
    optionSchema = new mongoose7.Schema({
      option: { type: String, required: false },
      isCorrect: { type: Boolean, required: false },
      matchingPairText: { type: String, required: false }
    });
    questionSchema = new mongoose7.Schema({
      question: { type: String, required: true },
      grade: { type: Number, default: 1 },
      type: {
        type: String,
        enum: [
          "single-select",
          "multi-select",
          "true-false",
          "short-answer",
          "long-answer",
          "visual",
          "peer-review",
          "output",
          "fill-in-blanks",
          "matching"
        ],
        required: true
      },
      options: { type: [optionSchema], required: false },
      codeSnippet: { type: String, required: false },
      imageSource: { type: String, required: false },
      maxCharactersAllowed: { type: Number, required: false },
      fillInBlankAnswers: { type: [String], required: false },
      correct: { type: String, required: false }
      // allowPartialGrading: { type: Boolean, default: false },
    });
    sectionSchema = new mongoose7.Schema({
      name: { type: String, required: true },
      questions: { type: [questionSchema], required: true }
    });
    candidateSchema2 = new mongoose7.Schema({
      name: { type: String, required: true },
      email: { type: String, required: true }
    });
    openRangeSchema = new mongoose7.Schema({
      start: { type: Date },
      end: { type: Date }
      // timeZone: { type: String },
    });
    securitySchema = new mongoose7.Schema({
      sessionPlayback: { type: Boolean, default: false },
      tabChangeDetection: { type: Boolean, default: false },
      copyPasteDetection: { type: Boolean, default: false }
      // fullScreenEnforcement: { type: Boolean, default: false },
      // cameraProctoring: { type: Boolean, default: false },
      // ipLogging: { type: Boolean, default: false },
    });
    mcqAssessmentSchema = new mongoose7.Schema(
      {
        name: { type: String, required: true },
        description: { type: String, required: true },
        author: { type: mongoose7.Schema.Types.ObjectId, required: true },
        timeLimit: { type: Number, required: true },
        passingPercentage: { type: Number, required: true },
        openRange: { type: openRangeSchema },
        sections: { type: [sectionSchema], required: true },
        candidates: { type: [candidateSchema2], required: true },
        public: { type: Boolean, default: false },
        instructions: { type: String, required: true },
        security: { type: securitySchema, required: true },
        feedbackEmail: { type: String, required: true },
        obtainableScore: { type: Number, required: true },
        autoObtainableScore: { type: Number, required: true },
        isEnterprise: { type: Boolean, default: false },
        isCampus: { type: Boolean, default: false },
        requiresManualReview: { type: Boolean, default: false },
        postingId: { type: mongoose7.Schema.Types.ObjectId, ref: "Posting" },
        driveId: { type: mongoose7.Schema.Types.ObjectId, ref: "Drive" }
      },
      { timestamps: true }
    );
    mcqAssessmentSchema.index({ name: 1 });
    mcqAssessmentSchema.index({ author: 1 });
    mcqAssessmentSchema.index({ "candidates.email": 1 });
    mcqAssessmentSchema.index({ postingId: 1 });
    mcqAssessmentSchema.plugin(softDeletePlugin);
    MCQAssessment = mongoose7.model("MCQAssessment", mcqAssessmentSchema);
    MCQAssessment_default = MCQAssessment;
  }
});

// src/models/CodeAssessment.ts
import mongoose8 from "mongoose";
var openRangeSchema2, testcasesSchema, problemSchema2, gradingSchema, candidateSchema3, securitySchema2, codeAssessmentSchema, CodeAssessment, CodeAssessment_default;
var init_CodeAssessment = __esm({
  "src/models/CodeAssessment.ts"() {
    "use strict";
    init_softDelete();
    openRangeSchema2 = new mongoose8.Schema({
      start: { type: Date, required: false },
      end: { type: Date, required: false }
    });
    testcasesSchema = new mongoose8.Schema({
      easy: { type: Number, required: true },
      medium: { type: Number, required: true },
      hard: { type: Number, required: true }
    });
    problemSchema2 = new mongoose8.Schema({
      problemId: {
        type: mongoose8.Schema.Types.ObjectId,
        ref: "Problem",
        required: true
      },
      points: { type: Number, required: true }
    });
    gradingSchema = new mongoose8.Schema({
      type: { type: String, enum: ["testcase", "problem"], required: true },
      testcases: { type: testcasesSchema, required: false },
      // Only applicable when type = "testcase"
      problem: { type: [problemSchema2], required: false }
      // Only applicable when type = "problem"
    });
    candidateSchema3 = new mongoose8.Schema({
      name: { type: String, required: true },
      email: { type: String, required: true }
    });
    securitySchema2 = new mongoose8.Schema({
      codePlayback: { type: Boolean, required: true, default: false },
      codeExecution: { type: Boolean, required: true, default: false },
      tabChangeDetection: { type: Boolean, required: true, default: false },
      copyPasteDetection: { type: Boolean, required: true, default: false },
      allowAutoComplete: { type: Boolean, required: true, default: false },
      allowRunningCode: { type: Boolean, required: true, default: false },
      enableSyntaxHighlighting: { type: Boolean, required: true, default: false }
    });
    codeAssessmentSchema = new mongoose8.Schema(
      {
        name: { type: String, required: true },
        description: { type: String, required: true },
        author: {
          type: mongoose8.Schema.Types.ObjectId,
          ref: "User",
          required: true
        },
        timeLimit: { type: Number, required: true },
        passingPercentage: { type: Number, required: true },
        openRange: { type: openRangeSchema2, default: null },
        languages: { type: [String], required: true },
        problems: [
          {
            type: mongoose8.Schema.Types.ObjectId,
            ref: "Problem",
            required: true
          }
        ],
        grading: { type: gradingSchema },
        candidates: { type: [candidateSchema3], default: [] },
        instructions: { type: String, required: true },
        security: { type: securitySchema2, required: true },
        feedbackEmail: { type: String, required: true },
        obtainableScore: { type: Number, required: true },
        isEnterprise: { type: Boolean, required: true, default: false },
        isCampus: { type: Boolean, required: true, default: false },
        postingId: {
          type: mongoose8.Schema.Types.ObjectId,
          ref: "Posting",
          required: false
        },
        driveId: {
          type: mongoose8.Schema.Types.ObjectId,
          ref: "Drive",
          required: false
        }
      },
      { timestamps: true }
    );
    codeAssessmentSchema.plugin(softDeletePlugin);
    codeAssessmentSchema.index({ author: 1 });
    codeAssessmentSchema.index({ postingId: 1 });
    CodeAssessment = mongoose8.model("CodeAssessment", codeAssessmentSchema);
    CodeAssessment_default = CodeAssessment;
  }
});

// src/models/MCQAssessmentSubmission.ts
import mongoose9, { Schema as Schema3 } from "mongoose";
var offenseSchema, McqSubmissionSchema, obtainedGradeSchema, mcqAssessmentSubmissionsSchema, MCQAssessmentSubmissions, MCQAssessmentSubmission_default;
var init_MCQAssessmentSubmission = __esm({
  "src/models/MCQAssessmentSubmission.ts"() {
    "use strict";
    init_softDelete();
    offenseSchema = new Schema3({
      tabChange: { type: Number },
      copyPaste: { type: Number }
    });
    McqSubmissionSchema = new Schema3({
      mcqId: { type: Schema3.Types.ObjectId, ref: "Mcq", required: true },
      selectedOptions: { type: [String], required: true }
    });
    obtainedGradeSchema = new Schema3({
      mcq: {
        type: [
          {
            mcqId: { type: Schema3.Types.ObjectId, required: true },
            obtainedMarks: { type: Number, required: true }
          }
        ],
        required: false
      },
      total: { type: Number, required: true }
    });
    mcqAssessmentSubmissionsSchema = new Schema3(
      {
        assessmentId: {
          type: Schema3.Types.ObjectId,
          ref: "MCQAssessment",
          required: true
        },
        status: {
          type: String,
          enum: ["in-progress", "completed"],
          required: false
        },
        name: { type: String, required: true },
        email: { type: String, required: true },
        offenses: { type: offenseSchema, required: false },
        mcqSubmissions: { type: [McqSubmissionSchema], required: false },
        timer: { type: Number, required: true },
        sessionRewindUrl: { type: String, required: false },
        obtainedGrades: { type: obtainedGradeSchema, required: false },
        cheatingStatus: {
          type: String,
          enum: ["No Copying", "Light Copying", "Heavy Copying"],
          required: false
        },
        isReviewed: { type: Boolean, default: false },
        reviewedBy: { type: [Schema3.Types.ObjectId], ref: "User", required: false }
      },
      { timestamps: true }
    );
    mcqAssessmentSubmissionsSchema.index({ assessmentId: 1 });
    mcqAssessmentSubmissionsSchema.index({ email: 1 });
    mcqAssessmentSubmissionsSchema.index({ status: 1 });
    mcqAssessmentSubmissionsSchema.plugin(softDeletePlugin);
    MCQAssessmentSubmissions = mongoose9.model(
      "MCQAssessmentSubmissions",
      mcqAssessmentSubmissionsSchema
    );
    MCQAssessmentSubmission_default = MCQAssessmentSubmissions;
  }
});

// src/models/CodeAssessmentSubmission.ts
import mongoose10, { Schema as Schema4 } from "mongoose";
var offenseSchema2, ResultSchema2, ProblemSubmissionSchema, obtainedGradeSchema2, codeAssessmentSubmissionsSchema, CodeAssessmentSubmissions, CodeAssessmentSubmission_default;
var init_CodeAssessmentSubmission = __esm({
  "src/models/CodeAssessmentSubmission.ts"() {
    "use strict";
    init_softDelete();
    offenseSchema2 = new Schema4({
      tabChange: {
        type: [{ problemId: Schema4.Types.ObjectId, times: Number }],
        required: false
      },
      copyPaste: {
        type: [{ problemId: Schema4.Types.ObjectId, times: Number }],
        required: false
      }
    });
    ResultSchema2 = new mongoose10.Schema({
      caseNo: { type: Number, required: true },
      caseId: { type: String, required: true },
      output: { type: String, default: "" },
      isSample: { type: Boolean, required: true },
      memory: { type: Number, required: true },
      time: { type: Number, required: true },
      passed: { type: Boolean, required: true },
      console: { type: String, default: "" },
      errorMessage: { type: String, default: "" }
      // Store runtime errors
    });
    ProblemSubmissionSchema = new Schema4({
      problemId: { type: Schema4.Types.ObjectId, ref: "Problem", required: true },
      code: { type: String, required: true },
      language: { type: String, required: true },
      results: { type: [ResultSchema2], required: false },
      submittedAt: { type: Date, default: Date.now }
    });
    obtainedGradeSchema2 = new Schema4({
      problem: {
        type: [
          {
            problemId: {
              type: Schema4.Types.ObjectId,
              ref: "Problem",
              required: true
            },
            obtainedMarks: { type: Number, required: true }
          }
        ],
        required: false
      },
      total: { type: Number, required: true }
    });
    codeAssessmentSubmissionsSchema = new Schema4(
      {
        assessmentId: {
          type: Schema4.Types.ObjectId,
          ref: "CodeAssessment",
          required: true
        },
        status: {
          type: String,
          enum: ["in-progress", "completed"],
          required: false
        },
        name: { type: String, required: true },
        email: { type: String, required: true },
        offenses: { type: offenseSchema2, required: false },
        submissions: { type: [ProblemSubmissionSchema], required: false },
        timer: { type: Number, required: true },
        sessionRewindUrl: { type: String, required: false },
        obtainedGrades: { type: obtainedGradeSchema2, required: false },
        reviewedBy: { type: [Schema4.Types.ObjectId], ref: "User", required: false },
        cheatingStatus: {
          type: String,
          enum: ["No Copying", "Light Copying", "Heavy Copying"],
          required: false
        }
      },
      { timestamps: true }
    );
    codeAssessmentSubmissionsSchema.index({ assessmentId: 1 });
    codeAssessmentSubmissionsSchema.index({ email: 1 });
    codeAssessmentSubmissionsSchema.index({ status: 1 });
    codeAssessmentSubmissionsSchema.plugin(softDeletePlugin);
    CodeAssessmentSubmissions = mongoose10.model(
      "CodeAssessmentSubmission",
      codeAssessmentSubmissionsSchema
    );
    CodeAssessmentSubmission_default = CodeAssessmentSubmissions;
  }
});

// src/utils/calculateMCQScore.ts
var calculateMCQScore, calculateMCQScore_default;
var init_calculateMCQScore = __esm({
  "src/utils/calculateMCQScore.ts"() {
    "use strict";
    calculateMCQScore = (mcqSubmissions, assessment) => {
      let total = 0;
      let mcq = [];
      for (const section of assessment.sections) {
        for (const question of section.questions) {
          const mcqSubmission = mcqSubmissions.find(
            (sub) => sub.mcqId.toString() === question?._id?.toString()
          );
          if (!mcqSubmission) continue;
          let grade = 0;
          switch (question.type) {
            case "single-select":
              const correctOption = question?.options?.find((opt) => opt.isCorrect);
              if (correctOption && mcqSubmission.selectedOptions[0] === correctOption.option) {
                grade = question?.grade || 0;
              }
              break;
            case "multi-select":
              const correctOptions = question?.options?.filter((opt) => opt.isCorrect).map((opt) => opt.option) || [];
              const selectedOptions = mcqSubmission.selectedOptions;
              if (correctOptions.length === selectedOptions.length && correctOptions.every((opt) => selectedOptions.includes(opt)) && selectedOptions.every((opt) => correctOptions.includes(opt))) {
                grade = question?.grade || 0;
              }
              break;
            case "true-false":
              const correctAnswer = question?.options?.find((opt) => opt.isCorrect);
              if (correctAnswer && mcqSubmission.selectedOptions[0].toLowerCase() === correctAnswer.option.toLowerCase()) {
                grade = question?.grade || 0;
              }
              break;
            case "matching":
              const allAnswers = question?.options?.map(
                (opt) => opt.matchingPairText
              );
              const userAnswers = mcqSubmission.selectedOptions;
              const allPairsCorrect = allAnswers?.every(
                (answer, index) => answer === userAnswers[index]
              );
              if (allPairsCorrect) {
                grade = question?.grade || 0;
              }
              break;
            case "fill-in-blanks":
              if (question.fillInBlankAnswers && mcqSubmission.selectedOptions.length === question.fillInBlankAnswers.length) {
                const allCorrect = mcqSubmission.selectedOptions.every(
                  (answer, index) => answer.toLowerCase().trim() === question?.fillInBlankAnswers?.[index].toLowerCase().trim()
                );
                if (allCorrect) {
                  grade = question?.grade || 0;
                }
              }
              break;
            case "long-answer":
            case "peer-review":
              grade = 0;
              break;
            case "output":
              const correctOutput = question.correct;
              if (correctOutput && mcqSubmission.selectedOptions[0].trim() === correctOutput.trim()) {
                grade = question?.grade || 0;
              }
              break;
            case "visual":
              const correct = question.correct;
              const selected = mcqSubmission.selectedOptions[0];
              if (correct === selected) {
                grade = question?.grade || 0;
              }
              break;
            case "short-answer":
              const correctShort = question.correct;
              const selectedAnswer = mcqSubmission.selectedOptions[0];
              if (correctShort === selectedAnswer) {
                grade = question?.grade || 0;
              }
              break;
          }
          mcq.push({
            mcqId: question?._id?.toString() || "",
            obtainedMarks: grade
          });
          total += grade;
        }
      }
      return {
        mcq,
        total
      };
    };
    calculateMCQScore_default = calculateMCQScore;
  }
});

// src/utils/calculateCodeScore.ts
var getCodeScore, calculateCodeScore_default;
var init_calculateCodeScore = __esm({
  "src/utils/calculateCodeScore.ts"() {
    "use strict";
    init_Problem();
    getCodeScore = async (problemSubmissions, assessment) => {
      let total = 0;
      let problem = [];
      if (!assessment.grading) return { problem, total };
      for (const submission of problemSubmissions) {
        let grade = 0;
        const problemId = submission.problemId;
        const problemExists = assessment.problems.some((p3) => p3._id?.toString() === problemId.toString());
        if (!problemExists) continue;
        if (assessment.grading.type === "testcase") {
          if (!assessment.grading.testcases) continue;
          const problemDoc = await Problem_default.findById(problemId);
          if (!problemDoc) continue;
          for (const testCase of problemDoc.testCases) {
            if (!testCase?._id) continue;
            const passed = submission.results?.find(
              (result) => result.caseId === testCase._id?.toString() && result.passed && !result.isSample
              // Exclude sample test cases from scoring
            );
            if (!passed) continue;
            switch (testCase.difficulty) {
              case "easy":
                grade += assessment.grading.testcases.easy;
                break;
              case "medium":
                grade += assessment.grading.testcases.medium;
                break;
              case "hard":
                grade += assessment.grading.testcases.hard;
                break;
            }
          }
        }
        if (assessment.grading.type === "problem") {
          const gradingProblemObj = assessment.grading.problem?.find(
            (p3) => p3.problemId.toString() === problemId.toString()
          );
          if (!gradingProblemObj) continue;
          const nonSampleResults = submission.results?.filter(
            (result) => !result.isSample
          );
          const allPassed = nonSampleResults && nonSampleResults.length > 0 && nonSampleResults.every((result) => result.passed);
          if (allPassed) {
            grade = gradingProblemObj.points;
          }
        }
        problem.push({
          problemId,
          obtainedMarks: grade
        });
        total += grade;
      }
      return {
        problem,
        total
      };
    };
    calculateCodeScore_default = getCodeScore;
  }
});

// src/models/Organization.ts
import mongoose11 from "mongoose";
var Schema5, notificationSchema2, membersSchema, rolesSchema, departmentsSchema, auditLogSchema, subscriptionSchema, organizationSchema, Organization, Organization_default;
var init_Organization = __esm({
  "src/models/Organization.ts"() {
    "use strict";
    init_softDelete();
    ({ Schema: Schema5 } = mongoose11);
    notificationSchema2 = new Schema5({
      title: { type: String, required: true },
      description: { type: String, required: true },
      date: { type: Date, default: Date.now },
      read: { type: Boolean, default: false }
    });
    membersSchema = new Schema5(
      {
        user: { type: Schema5.Types.ObjectId, ref: "User" },
        email: { type: String, required: true },
        role: { type: String, required: true },
        addedOn: { type: Date, default: Date.now },
        notifications: { type: [notificationSchema2] },
        status: { type: String, enum: ["pending", "active"], default: "pending" }
      },
      { timestamps: true }
    );
    rolesSchema = new mongoose11.Schema(
      {
        name: { type: String, required: true },
        slug: { type: String, required: true },
        default: { type: Boolean, default: true },
        description: { type: String },
        permissions: [{ type: String, required: true }]
      },
      { timestamps: true }
    );
    departmentsSchema = new Schema5({
      name: { type: String, required: true },
      description: { type: String, required: true }
    });
    auditLogSchema = new Schema5(
      {
        action: { type: String, required: true },
        user: { type: String, required: true },
        userId: { type: String, required: true },
        type: {
          type: String,
          enum: ["info", "warning", "error", "success"],
          default: "info",
          required: true
        }
      },
      { timestamps: true }
    );
    subscriptionSchema = new Schema5({
      type: {
        type: String,
        enum: ["quarterly", "annual", "trial"],
        required: true
      },
      status: { type: String, enum: ["active", "inactive"], default: "inactive" },
      startedOn: { type: Date, default: Date.now, required: true },
      endsOn: { type: Date, required: true }
    });
    organizationSchema = new Schema5(
      {
        name: { required: true, type: String },
        email: { required: true, type: String },
        website: { required: true, type: String },
        logo: { type: String },
        members: [membersSchema],
        roles: [{ type: rolesSchema }],
        departments: [{ type: departmentsSchema }],
        auditLogs: [{ type: auditLogSchema }],
        subscription: {
          type: subscriptionSchema,
          required: true
        },
        candidates: { type: [Schema5.Types.ObjectId], ref: "Candidate" },
        postings: [{ type: Schema5.Types.ObjectId, ref: "Posting" }],
        isDeleted: { type: Boolean, default: false }
      },
      { timestamps: true }
    );
    organizationSchema.index({ email: 1 }, { unique: true });
    organizationSchema.index({ name: 1 });
    organizationSchema.index({ "members.email": 1 });
    organizationSchema.index({ "subscription.status": 1 });
    organizationSchema.plugin(softDeletePlugin);
    Organization = mongoose11.model("Organization", organizationSchema);
    Organization_default = Organization;
  }
});

// src/middlewares/checkOrganizationPermission.ts
import { getAuth as getAuth2 } from "@hono/clerk-auth";
var checkOrganizationPermission, checkOrganizationPermission_default;
var init_checkOrganizationPermission = __esm({
  "src/middlewares/checkOrganizationPermission.ts"() {
    "use strict";
    init_sendResponse();
    init_clerk();
    init_logger();
    checkOrganizationPermission = class _checkOrganizationPermission {
      static async getUserMeta(userId) {
        try {
          const user = await clerk_default.users.getUser(userId);
          const perms = user.publicMetadata;
          return perms;
        } catch (error) {
          throw new Error("Error retrieving or verifying user Meta");
        }
      }
      static all = async (c2, permissions) => {
        const auth = getAuth2(c2);
        if (!auth?.userId) {
          sendError(c2, 401, "Unauthorized in checkPermission");
          return { allowed: false, data: null };
        }
        try {
          const userMeta = await _checkOrganizationPermission.getUserMeta(
            auth.userId
          );
          const hasPermission = permissions.every(
            (permission) => userMeta.organization?.role?.permissions.includes(permission)
          );
          return { allowed: hasPermission, data: userMeta };
        } catch (error) {
          logger_default.error(error);
          return { allowed: false, data: null };
        }
      };
      static some = async (c2, permissions) => {
        const auth = getAuth2(c2);
        if (!auth?.userId) {
          sendError(c2, 401, "Unauthorized in checkPermission");
          return { allowed: false, data: null };
        }
        try {
          const userMeta = await _checkOrganizationPermission.getUserMeta(
            auth.userId
          );
          const hasPermission = permissions.some(
            (permission) => userMeta.organization?.role?.permissions.includes(permission)
          );
          return { allowed: hasPermission, data: userMeta };
        } catch (error) {
          logger_default.error(error);
          return { allowed: false, data: null };
        }
      };
    };
    checkOrganizationPermission_default = checkOrganizationPermission;
  }
});

// src/models/AppliedPosting.ts
import mongoose12, { Schema as Schema6 } from "mongoose";
var appliedPostingSchema, AppliedPosting, AppliedPosting_default;
var init_AppliedPosting = __esm({
  "src/models/AppliedPosting.ts"() {
    "use strict";
    init_softDelete();
    appliedPostingSchema = new Schema6(
      {
        posting: { type: Schema6.Types.ObjectId, required: true, ref: "Posting" },
        user: { type: Schema6.Types.ObjectId, required: true, ref: "Candidate" },
        disqualifiedStage: { type: String },
        disqualifiedReason: { type: String },
        scores: [
          {
            stageId: { type: Schema6.Types.ObjectId, required: true },
            score: { type: Number },
            reason: { type: String }
          }
        ],
        status: {
          type: String,
          enum: ["applied", "inprogress", "rejected", "hired"],
          default: "applied"
        }
      },
      { timestamps: true }
    );
    appliedPostingSchema.plugin(softDeletePlugin);
    AppliedPosting = mongoose12.model("AppliedPosting", appliedPostingSchema);
    AppliedPosting_default = AppliedPosting;
  }
});

// src/config/s3.ts
import { S3Client } from "@aws-sdk/client-s3";
var r2Config, r2Client, s3_default;
var init_s3 = __esm({
  "src/config/s3.ts"() {
    "use strict";
    r2Config = {
      endpoint: process.env.R2_S3_URL,
      region: "auto",
      credentials: {
        accessKeyId: process.env.R2_ACCESS_KEY,
        secretAccessKey: process.env.R2_ACCESS_SECRET
      }
    };
    r2Client = new S3Client(r2Config);
    s3_default = r2Client;
  }
});

// src/models/AppliedDrive.ts
import mongoose13, { Schema as Schema7 } from "mongoose";
var appliedDriveSchema, AppliedDrive, AppliedDrive_default;
var init_AppliedDrive = __esm({
  "src/models/AppliedDrive.ts"() {
    "use strict";
    init_softDelete();
    appliedDriveSchema = new Schema7(
      {
        drive: { type: Schema7.Types.ObjectId, required: true, ref: "Drive" },
        user: { type: Schema7.Types.ObjectId, required: true, ref: "Candidate" },
        disqualifiedStage: { type: String },
        disqualifiedReason: { type: String },
        scores: [
          {
            stageId: { type: Schema7.Types.ObjectId, required: true },
            score: { type: Number },
            reason: { type: String }
          }
        ],
        status: {
          type: String,
          enum: ["applied", "inprogress", "rejected", "hired"],
          default: "applied"
        },
        salary: {
          type: Number,
          required: false
        },
        offerLetterKey: { type: String, required: false },
        offerLetterUploadedAt: { type: Date, required: false },
        isSample: { type: Boolean, default: false }
      },
      { timestamps: true }
    );
    appliedDriveSchema.plugin(softDeletePlugin);
    AppliedDrive = mongoose13.model("AppliedDrive", appliedDriveSchema);
    AppliedDrive_default = AppliedDrive;
  }
});

// src/middlewares/checkInstitutePermission.ts
import { getAuth as getAuth3 } from "@hono/clerk-auth";
var checkInstitutePermission, checkInstitutePermission_default;
var init_checkInstitutePermission = __esm({
  "src/middlewares/checkInstitutePermission.ts"() {
    "use strict";
    init_sendResponse();
    init_clerk();
    init_logger();
    checkInstitutePermission = class _checkInstitutePermission {
      static async getUserMeta(userId) {
        try {
          const user = await clerk_default.users.getUser(userId);
          const perms = user.publicMetadata;
          return perms;
        } catch (error) {
          throw new Error("Error retrieving or verifying user Meta");
        }
      }
      static all = async (c2, permissions) => {
        const auth = getAuth3(c2);
        if (!auth?.userId) {
          sendError(c2, 401, "Unauthorized in checkPermission");
          return { allowed: false, data: null };
        }
        try {
          const userMeta = await _checkInstitutePermission.getUserMeta(
            auth.userId
          );
          const hasPermission = permissions.every(
            (permission) => userMeta.institute?.role?.permissions.includes(permission)
          );
          return { allowed: hasPermission, data: userMeta };
        } catch (error) {
          logger_default.error(error);
          return { allowed: false, data: null };
        }
      };
      static some = async (c2, permissions) => {
        const auth = getAuth3(c2);
        if (!auth?.userId) {
          sendError(c2, 401, "Unauthorized in checkPermission");
          return { allowed: false, data: null };
        }
        try {
          const userMeta = await _checkInstitutePermission.getUserMeta(
            auth.userId
          );
          const hasPermission = permissions.some(
            (permission) => userMeta.institute?.role?.permissions.includes(permission)
          );
          return { allowed: hasPermission, data: userMeta };
        } catch (error) {
          logger_default.error(error);
          return { allowed: false, data: null };
        }
      };
    };
    checkInstitutePermission_default = checkInstitutePermission;
  }
});

// src/models/Drive.ts
import mongoose14 from "mongoose";
var Schema8, StepType2, StepStatus2, scheduleSchema2, atsLogSchema2, atsSchema2, workflowStepSchema2, workflowSchema2, salarySchema2, assignmentSchema2, CodeAssessmentSchema2, McqAssessmentSchema2, additionalFieldConfigSchema2, InterviewSchema2, driveSchema, Drive, Drive_default;
var init_Drive = __esm({
  "src/models/Drive.ts"() {
    "use strict";
    init_softDelete();
    ({ Schema: Schema8 } = mongoose14);
    StepType2 = {
      RESUME_SCREENING: "RESUME_SCREENING",
      MCQ_ASSESSMENT: "MCQ_ASSESSMENT",
      CODING_ASSESSMENT: "CODING_ASSESSMENT",
      ASSIGNMENT: "ASSIGNMENT",
      INTERVIEW: "INTERVIEW",
      CUSTOM: "CUSTOM"
    };
    StepStatus2 = {
      PENDING: "pending",
      IN_PROGRESS: "in-progress",
      COMPLETED: "completed",
      FAILED: "failed"
    };
    scheduleSchema2 = new Schema8({
      startTime: { type: Date, default: null, required: false },
      endTime: { type: Date, default: null, required: false },
      actualCompletionTime: { type: Date }
    });
    atsLogSchema2 = new Schema8({
      level: {
        type: String,
        enum: ["INFO", "ERROR", "WARNING"],
        required: true
      },
      stage: {
        type: String,
        enum: ["INIT", "PROCESSING", "EMAIL", "RESUME_PROCESSING", "DATABASE"],
        required: true
      },
      timestamp: {
        type: Date,
        required: true,
        default: Date.now
      },
      message: {
        type: String,
        required: true
      },
      error: {
        name: String,
        message: String,
        stack: String
      },
      metadata: {
        candidateId: String,
        resumeId: String,
        apiResponse: Schema8.Types.Mixed,
        processingTime: Number,
        retryCount: Number
      }
    });
    atsSchema2 = new Schema8(
      {
        _id: {
          type: mongoose14.Schema.Types.ObjectId,
          default: mongoose14.Types.ObjectId
        },
        minimumScore: {
          type: Number,
          required: true
        },
        negativePrompts: {
          type: [String],
          default: ["none"]
        },
        positivePrompts: {
          type: [String],
          default: ["none"]
        },
        status: {
          type: String,
          enum: ["pending", "processing", "finished", "failed"],
          default: "pending"
        },
        startTime: {
          type: Date,
          required: false
        },
        endTime: {
          type: Date,
          required: false
        },
        failedCount: {
          type: Number,
          default: 0,
          required: false
        },
        successCount: {
          type: Number,
          default: 0,
          required: false
        },
        error: {
          type: String,
          required: false
        },
        logs: { type: [atsLogSchema2], required: false },
        summary: {
          totalProcessed: Number,
          successfulProcessing: Number,
          failedProcessing: Number,
          totalTime: Number,
          // in milliseconds
          averageProcessingTime: Number
          // in milliseconds
        }
      },
      {
        timestamps: true
      }
    );
    workflowStepSchema2 = new Schema8({
      name: { type: String, required: true },
      type: { type: String, required: true, enum: Object.values(StepType2) },
      status: {
        type: String,
        required: true,
        enum: Object.values(StepStatus2),
        default: StepStatus2.PENDING
      },
      schedule: { type: scheduleSchema2 },
      startedBy: { type: mongoose14.Schema.Types.ObjectId, ref: "User" }
    });
    workflowSchema2 = new Schema8({
      steps: { type: [workflowStepSchema2], required: true }
    });
    salarySchema2 = new Schema8({ min: Number, max: Number, currency: String });
    assignmentSchema2 = new Schema8({
      name: { type: String, required: true },
      workflowId: {
        type: mongoose14.Schema.Types.ObjectId,
        required: true,
        ref: "Workflow"
      },
      description: { type: String, required: true },
      submissionType: {
        type: String,
        enum: ["file", "text", "link"],
        required: true
      },
      submissions: {
        type: [mongoose14.Schema.Types.ObjectId],
        ref: "AssignmentSubmission"
      }
    });
    CodeAssessmentSchema2 = new Schema8({
      assessmentId: {
        type: mongoose14.Schema.Types.ObjectId,
        required: true,
        ref: "CodeAssessment"
      },
      workflowId: {
        type: mongoose14.Schema.Types.ObjectId,
        required: true,
        ref: "Workflow"
      }
    });
    McqAssessmentSchema2 = new Schema8({
      assessmentId: {
        type: mongoose14.Schema.Types.ObjectId,
        required: true,
        ref: "MCQAssessment"
      },
      workflowId: {
        type: mongoose14.Schema.Types.ObjectId,
        required: true,
        ref: "Workflow"
      }
    });
    additionalFieldConfigSchema2 = new Schema8(
      {
        required: { type: Boolean, required: true },
        allowEmpty: { type: Boolean, required: true }
      },
      { _id: false }
    );
    InterviewSchema2 = new Schema8({
      interview: { type: mongoose14.Schema.Types.ObjectId, ref: "Meet" },
      workflowId: { type: mongoose14.Schema.Types.ObjectId, ref: "Workflow" }
    });
    driveSchema = new Schema8(
      {
        institute: {
          type: mongoose14.Schema.Types.ObjectId,
          ref: "Institute"
        },
        title: { type: String, required: true },
        link: { type: String, required: false },
        description: { type: Object, required: true },
        company: { type: mongoose14.Schema.Types.ObjectId, ref: "Company" },
        location: { type: String, required: true },
        type: {
          type: String,
          enum: ["full_time", "part_time", "internship", "contract", "temporary"],
          required: true
        },
        url: { type: String },
        openings: { type: Number, required: true },
        salary: { type: salarySchema2, required: true },
        applicationRange: { start: Date, end: Date },
        skills: { type: [String], required: true },
        workflow: { type: workflowSchema2 },
        assignments: { type: [assignmentSchema2], ref: "Assignment" },
        ats: { type: atsSchema2 },
        mcqAssessments: { type: [McqAssessmentSchema2] },
        codeAssessments: { type: [CodeAssessmentSchema2] },
        interviews: { type: [InterviewSchema2], ref: "Meet" },
        candidates: { type: [mongoose14.Schema.Types.ObjectId], ref: "Candidate" },
        additionalDetails: {
          type: {
            basic: {
              summary: { type: additionalFieldConfigSchema2 }
            },
            links: {
              socialLinks: { type: additionalFieldConfigSchema2 }
            },
            background: {
              education: { type: additionalFieldConfigSchema2 },
              workExperience: { type: additionalFieldConfigSchema2 }
            },
            skills: {
              technicalSkills: { type: additionalFieldConfigSchema2 },
              languages: { type: additionalFieldConfigSchema2 },
              subjects: { type: additionalFieldConfigSchema2 }
            },
            experience: {
              responsibilities: { type: additionalFieldConfigSchema2 },
              projects: { type: additionalFieldConfigSchema2 }
            },
            achievements: {
              awards: { type: additionalFieldConfigSchema2 },
              certificates: { type: additionalFieldConfigSchema2 },
              competitions: { type: additionalFieldConfigSchema2 }
            },
            professional: {
              conferences: { type: additionalFieldConfigSchema2 },
              patents: { type: additionalFieldConfigSchema2 },
              scholarships: { type: additionalFieldConfigSchema2 }
            },
            activities: {
              volunteerings: { type: additionalFieldConfigSchema2 },
              extraCurriculars: { type: additionalFieldConfigSchema2 }
            }
          },
          required: false
        },
        placementGroup: {
          type: mongoose14.Schema.Types.ObjectId,
          ref: "PlacementGroup"
        },
        published: { type: Boolean, default: false },
        publishedOn: { type: Date },
        hasEnded: { type: Boolean, default: false },
        hiredCandidates: {
          type: [mongoose14.Schema.Types.ObjectId],
          ref: "Candidate"
        },
        offerLetters: {
          type: [mongoose14.Schema.Types.ObjectId],
          ref: "Candidate",
          required: false
        },
        isSample: { type: Boolean, default: false }
      },
      { timestamps: true }
    );
    driveSchema.index({ organizationId: 1 });
    driveSchema.index({ department: 1 });
    driveSchema.index({ title: 1 });
    driveSchema.index({ "ats.status": 1 });
    driveSchema.plugin(softDeletePlugin);
    Drive = mongoose14.model("Drive", driveSchema);
    Drive_default = Drive;
  }
});

// src/controllers/code/assessmentController.ts
import mongoose15 from "mongoose";
import { Upload } from "@aws-sdk/lib-storage";
import { GetObjectCommand, ListObjectsV2Command } from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
async function getIoServer() {
  const { ioServer: ioServer2 } = await Promise.resolve().then(() => (init_init(), init_exports));
  return ioServer2;
}
var createMcqAssessment, createCodeAssessment, submitMcqAssessment, submitIndividualProblem, codeSubmit, getMcqAssessment, getCodeAssessment, deleteMcqAssessment, deleteCodeAssessment, getCreatedCodeAssessments, getCreatedMcqAssessments, verifyAccess, checkCodeProgress, checkMcqProgress, getTakenMcqAssessments, getTakenCodeAssessments, getAssessmentSubmissions, getAssessmentSubmission, getPostingMCQAssessments, getPostingCodeAssessments, getDriveMCQAssessments, getDriveCodeAssessments, getMcqAssessmentSubmissions, getCodeAssessmentSubmissions, getMcqAssessmentSubmission, getCodeAssessmentSubmission, capture, getCaptures, gradeMCQAnswer, gradeCodeAnswer, saveReview, assessmentController_default;
var init_assessmentController = __esm({
  "src/controllers/code/assessmentController.ts"() {
    "use strict";
    init_sendResponse();
    init_Problem();
    init_runCode();
    init_Posting();
    init_logger();
    init_MCQAssessment();
    init_CodeAssessment();
    init_MCQAssessmentSubmission();
    init_CodeAssessmentSubmission();
    init_calculateMCQScore();
    init_calculateCodeScore();
    init_Organization();
    init_clerk();
    init_checkOrganizationPermission();
    init_AppliedPosting();
    init_s3();
    init_AppliedDrive();
    init_checkInstitutePermission();
    init_Drive();
    init_Candidate();
    getIoServer().then((server2) => {
      server2.on("connection", (socket) => {
        logger_default.info("A user connected with id: " + socket.id);
        socket.on("disconnect", () => {
          logger_default.info("User disconnected");
        });
        socket.on("start-code-assessment", async (data) => {
          const newSubmission = new CodeAssessmentSubmission_default(data);
          newSubmission.status = "in-progress";
          await newSubmission.save();
        });
        socket.on("start-mcq-assessment", async (data) => {
          const newSubmission = new MCQAssessmentSubmission_default(data);
          newSubmission.status = "in-progress";
          await newSubmission.save();
        });
        socket.on("timeSync-code", async (data) => {
          const submission = await CodeAssessmentSubmission_default.findOne({
            email: data.email,
            assessmentId: data.assessmentId
          });
          if (!submission) {
            return;
          }
          if (submission.status === "completed") {
            return;
          }
          submission.timer = data.time;
          await submission.save();
        });
        socket.on("timeSync-mcq", async (data) => {
          const submission = await MCQAssessmentSubmission_default.findOne({
            email: data.email,
            assessmentId: data.assessmentId
          });
          if (!submission) {
            return;
          }
          if (submission.status === "completed") {
            return;
          }
          submission.timer = data.time;
          await submission.save();
        });
        socket.on("tab-change-code", async ({ assessmentId, email, problem }) => {
          if (!assessmentId || !email || !problem) return;
          const submission = await CodeAssessmentSubmission_default.findOne({
            email,
            assessmentId
          });
          if (!submission) return;
          if (!submission?.offenses) {
            submission.offenses = {};
          }
          if (!submission?.offenses?.tabChange) {
            submission.offenses.tabChange = new mongoose15.Types.DocumentArray([]);
          }
          const { tabChange } = submission.offenses;
          const problemEntry = tabChange?.find(
            (p3) => p3?.problemId?.toString() === problem.toString()
          );
          if (problemEntry) {
            problemEntry.times = (problemEntry.times || 0) + 1;
          } else {
            tabChange?.push({ problemId: problem, times: 1 });
          }
          await submission.save();
        });
        socket.on("tab-change-mcq", async ({ assessmentId, email }) => {
          if (!assessmentId || !email) return;
          const submission = await MCQAssessmentSubmission_default.findOne({
            email,
            assessmentId
          });
          if (!submission) return;
          if (!submission?.offenses) {
            submission.offenses = {};
          }
          if (!submission?.offenses?.tabChange) {
            submission.offenses.tabChange = 0;
          }
          submission.offenses.tabChange += 1;
          await submission.save();
        });
        socket.on(
          "external-paste-code",
          async ({ assessmentId, email, problem }) => {
            if (!assessmentId || !email || !problem) return;
            const submission = await CodeAssessmentSubmission_default.findOne({
              email,
              assessmentId
            });
            if (!submission) return;
            if (!submission?.offenses) {
              submission.offenses = {};
            }
            if (!submission?.offenses?.copyPaste) {
              submission.offenses.copyPaste = new mongoose15.Types.DocumentArray([]);
            }
            const { copyPaste } = submission.offenses;
            const problemEntry = copyPaste?.find(
              (p3) => p3?.problemId?.toString() === problem.toString()
            );
            if (problemEntry) {
              problemEntry.times = (problemEntry.times || 0) + 1;
            } else {
              copyPaste?.push({ problemId: problem, times: 1 });
            }
            await submission.save();
          }
        );
        socket.on("external-paste-mcq", async ({ assessmentId, email, mcq }) => {
          if (!assessmentId || !email || !mcq) return;
          const submission = await MCQAssessmentSubmission_default.findOne({
            email,
            assessmentId
          });
          if (!submission) return;
          if (!submission?.offenses) {
            submission.offenses = {};
          }
          if (!submission?.offenses?.copyPaste) {
            submission.offenses.copyPaste = 0;
          }
          submission.offenses.copyPaste += 1;
          await submission.save();
        });
        socket.on(
          "session-url-code",
          async ({ assessmentId, email, sessionUrl }) => {
            console.log("Session URL Code");
            console.log(assessmentId, email, sessionUrl);
            if (!assessmentId || !email || !sessionUrl) return;
            const submission = await CodeAssessmentSubmission_default.findOne({
              email,
              assessmentId
            });
            if (!submission) return;
            submission.sessionRewindUrl = sessionUrl;
            await submission.save();
          }
        );
        socket.on(
          "session-url-mcq",
          async ({ assessmentId, email, sessionUrl }) => {
            console.log("Session URL MCQ");
            console.log(assessmentId, email, sessionUrl);
            if (!assessmentId || !email || !sessionUrl) return;
            const submission = await MCQAssessmentSubmission_default.findOne({
              email,
              assessmentId
            });
            if (!submission) return;
            submission.sessionRewindUrl = sessionUrl;
            await submission.save();
          }
        );
        socket.on("auto-save-mcq", async ({ assessmentId, email, submissions }) => {
          console.log("Auto Save MCQ");
          console.log(assessmentId, email, submissions);
          if (!assessmentId || !email || !submissions) return;
          const submission = await MCQAssessmentSubmission_default.findOne({
            email,
            assessmentId
          });
          if (!submission) return;
          if (!submission.mcqSubmissions) {
            submission.mcqSubmissions = new mongoose15.Types.DocumentArray([]);
          }
          submission.mcqSubmissions = submissions;
          await submission.save();
        });
      });
    });
    createMcqAssessment = async (c2) => {
      try {
        const body = await c2.req.json();
        const userid = c2.get("auth")?._id;
        const isEnterprise = body.isEnterprise;
        const isCampus = body.isCampus;
        const newAssessment = new MCQAssessment_default();
        if (isEnterprise) {
          const perms = await checkOrganizationPermission_default.all(c2, ["manage_job"]);
          if (!perms.allowed) {
            return sendError(c2, 401, "Unauthorized");
          }
          const { postingId, step } = body;
          const posting = await Posting_default.findOne({
            _id: postingId
          }).populate("mcqAssessments");
          console.log("posting got");
          if (!posting) {
            return sendError(c2, 404, "job not found");
          }
          if (!posting.workflow) {
            return sendError(c2, 400, "Workflow not found");
          }
          const isAssessmentStep = (step2) => step2.type === "MCQ_ASSESSMENT" || step2.type === "CODING_ASSESSMENT";
          const assessmentstep = parseInt(step);
          console.log("assessment step", assessmentstep);
          const workflowId = (
            // @ts-expect-error
            posting.workflow.steps?.filter(isAssessmentStep)?.[assessmentstep]
          );
          console.log("workflowId", workflowId);
          await Posting_default.findByIdAndUpdate(postingId, {
            $push: {
              mcqAssessments: {
                assessmentId: newAssessment._id,
                workflowId: workflowId._id
              }
            },
            updatedOn: /* @__PURE__ */ new Date()
          });
          const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
          const auditLog = {
            user: clerkUser.firstName + " " + clerkUser.lastName,
            userId: clerkUser.publicMetadata?._id,
            action: `Created New Assessment for Job Posting: ${posting.title}`,
            type: "info"
          };
          await Organization_default.findByIdAndUpdate(perms.data.organization?._id, {
            $push: { auditLogs: auditLog }
          });
        }
        if (isCampus) {
          const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
          if (!perms.allowed) {
            return sendError(c2, 401, "Unauthorized");
          }
          const { driveId, step } = body;
          const drive = await Drive_default.findOne({
            _id: driveId
          }).populate("mcqAssessments");
          if (!drive) {
            return sendError(c2, 404, "Drive not found");
          }
          const assessmentstep = parseInt(step);
          const workflowId = drive.workflow?.steps[assessmentstep]?._id;
          await Drive_default.findByIdAndUpdate(driveId, {
            $push: {
              mcqAssessments: {
                assessmentId: newAssessment._id,
                workflowId
              }
            },
            updatedOn: /* @__PURE__ */ new Date()
          });
        }
        if (!userid) {
          return sendError(c2, 401, "Unauthorized");
        }
        const manualTypes = ["long-answer", "output"];
        let totalScore = 0;
        let totalAutoScore = 0;
        const assessment = body;
        assessment.sections.forEach((section) => {
          section.questions.forEach((question) => {
            totalScore += question?.grade || 0;
            if (!manualTypes.includes(question.type)) {
              totalAutoScore += question?.grade || 0;
            }
          });
        });
        const assessmentObj = {
          ...body,
          author: userid,
          obtainableScore: totalScore,
          autoObtainableScore: totalAutoScore,
          requiresManualReview: totalAutoScore !== totalScore
        };
        newAssessment.set(assessmentObj);
        await newAssessment.save();
        return sendSuccess(c2, 200, "Success", newAssessment);
      } catch (error) {
        console.error(error);
        if (error.name === "ValidationError") {
          return sendError(c2, 400, "Invalid Data", error.message);
        }
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    createCodeAssessment = async (c2) => {
      try {
        const body = await c2.req.json();
        const userid = c2.get("auth")?._id;
        if (!userid) {
          return sendError(c2, 401, "Unauthorized");
        }
        let totalScore = 0;
        const assessment = body;
        const gradingType = assessment?.grading?.type;
        const isEnterprise = body.isEnterprise;
        const isCampus = body.isCampus;
        console.log("isEnterprise", isEnterprise);
        console.log("isCampus", isCampus);
        const newAssessment = new CodeAssessment_default();
        if (isEnterprise) {
          const perms = await checkOrganizationPermission_default.all(c2, ["manage_job"]);
          if (!perms.allowed) {
            return sendError(c2, 401, "Unauthorized");
          }
          const { postingId, step } = body;
          console.log("Enterprise Assessment");
          console.log(postingId, step);
          const posting = await Posting_default.findOne({
            _id: postingId
          }).populate("codeAssessments");
          if (!posting) {
            return sendError(c2, 404, "job not found");
          }
          if (!posting.workflow) {
            return sendError(c2, 400, "Workflow not found");
          }
          const isAssessmentStep = (step2) => step2.type === "MCQ_ASSESSMENT" || step2.type === "CODING_ASSESSMENT";
          const assessmentstep = parseInt(step);
          console.log("assessment step", assessmentstep);
          const workflowId = (
            // @ts-expect-error
            posting.workflow.steps?.filter(isAssessmentStep)?.[assessmentstep]
          );
          console.log("workflowId", workflowId);
          await Posting_default.findByIdAndUpdate(postingId, {
            $push: {
              codeAssessments: {
                assessmentId: newAssessment._id,
                workflowId: workflowId._id
              }
            },
            updatedOn: /* @__PURE__ */ new Date()
          });
          const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
          const auditLog = {
            user: clerkUser.firstName + " " + clerkUser.lastName,
            userId: clerkUser.publicMetadata?._id,
            action: `Created New Assessment for Job Posting: ${posting.title}`,
            type: "info"
          };
          await Organization_default.findByIdAndUpdate(perms.data.organization?._id, {
            $push: { auditLogs: auditLog }
          });
        }
        if (isCampus) {
          const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
          if (!perms.allowed) {
            return sendError(c2, 401, "Unauthorized");
          }
          const { driveId, step } = body;
          console.log("Campus Assessment" + driveId);
          const drive = await Drive_default.findOne({
            _id: driveId
          }).populate("codeAssessments");
          if (!drive) {
            return sendError(c2, 404, "Drive not found");
          }
          const assessmentstep = parseInt(step);
          const workflowId = drive.workflow?.steps[assessmentstep]?._id;
          await Drive_default.findByIdAndUpdate(driveId, {
            $push: {
              codeAssessments: {
                assessmentId: newAssessment._id,
                workflowId
              }
            },
            updatedOn: /* @__PURE__ */ new Date()
          });
        }
        if (gradingType === "testcase") {
          const problems = assessment.problems;
          for (const problem of problems) {
            const p3 = await Problem_default.findById(problem).select("testCases").lean();
            if (!p3) {
              return sendError(c2, 404, "Problem not found");
            }
            if (!assessment?.grading?.testcases) {
              return sendError(c2, 400, "Grading not found");
            }
            for (const testCase of p3.testCases) {
              if (testCase.difficulty === "easy") {
                totalScore += assessment?.grading?.testcases.easy;
              } else if (testCase.difficulty === "medium") {
                totalScore += assessment?.grading?.testcases.medium;
              } else {
                totalScore += assessment?.grading?.testcases.hard;
              }
            }
          }
        }
        if (gradingType === "problem") {
          assessment?.grading?.problem?.forEach((problem) => {
            totalScore += problem.points;
          });
        }
        const assessmentObj = {
          ...body,
          author: userid,
          obtainableScore: totalScore
        };
        newAssessment.set(assessmentObj);
        await newAssessment.save();
        return sendSuccess(c2, 200, "Success", newAssessment);
      } catch (error) {
        console.error(error);
        if (error.name === "ValidationError") {
          return sendError(c2, 400, "Invalid Data", error.message);
        }
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    submitMcqAssessment = async (c2) => {
      try {
        const { assessmentId, email, timer, assessmentSub } = await c2.req.json();
        const assessment = await MCQAssessment_default.findById(assessmentId).lean();
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        const submission = await MCQAssessmentSubmission_default.findOne({
          assessmentId,
          email
        });
        const receivedSub = assessmentSub;
        if (!submission || !receivedSub) {
          return sendError(c2, 404, "Submission not found");
        }
        const offenses = submission.offenses;
        const getCheatingStatus = (offenses2) => {
          if (!offenses2) {
            return "No Copying";
          }
          if (offenses2.tabChange > 5) {
            return "Heavy Copying";
          }
          return "No Copying";
        };
        const grades = calculateMCQScore_default(receivedSub.mcqSubmissions, assessment);
        submission.obtainedGrades = grades;
        submission.timer = timer;
        submission.status = "completed";
        submission.cheatingStatus = getCheatingStatus(offenses);
        if (assessment?.isEnterprise || assessment?.isCampus) {
          const totalMarks = grades?.total || 0;
          const obtaintableMarks = assessment?.obtainableScore || 0;
          const passPercentage = assessment?.passingPercentage || 0;
          const passMarks = passPercentage / 100 * obtaintableMarks;
          const isPassed = totalMarks >= passMarks;
          const user = await Candidate_default.findOne({
            email
          });
          if (!user) {
            return sendError(c2, 404, "User not found");
          }
          if (assessment?.isEnterprise) {
            const appliedPosting = await AppliedPosting_default.findOne({
              user: user._id,
              postingId: assessment.postingId
            });
            if (!appliedPosting) {
              return sendError(c2, 404, "Applied Posting not found");
            }
            appliedPosting.status = isPassed ? "inprogress" : "rejected";
            await appliedPosting.save();
          }
          if (assessment?.isCampus) {
            const appliedDrive = await AppliedDrive_default.findOne({
              user: user._id,
              drive: assessment.driveId
            });
            if (!appliedDrive) {
              return sendError(c2, 404, "Applied Drive not found");
            }
            appliedDrive.status = isPassed ? "inprogress" : "rejected";
            await appliedDrive.save();
          }
        }
        await submission.save();
        return sendSuccess(c2, 200, "Success", grades);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    submitIndividualProblem = async (c2) => {
      try {
        const data = await c2.req.json();
        const problem = await Problem_default.findById(data.problemId);
        if (!problem) {
          return;
        }
        const result = await runCode(
          data.language,
          problem.sdsl,
          data.code,
          problem.testCases
        );
        if (result?.status === "ERROR") {
          console.error(result.error);
          return;
        }
        const r2 = result?.results?.map((r3) => ({
          caseNo: r3?.caseNo,
          caseId: r3?._id,
          output: r3?.output,
          isSample: r3?.isSample,
          memory: r3?.memory,
          time: r3?.time,
          passed: r3?.passed,
          console: r3?.console
        }));
        const submission = await CodeAssessmentSubmission_default.findOne({
          email: data?.email,
          assessmentId: data?.assessmentId
        });
        if (!submission) {
          return;
        }
        const problemSubmission = {
          problemId: data?.problemId,
          code: data?.code,
          language: data?.language,
          results: r2
        };
        const existingSubmission = submission.submissions.find(
          (s2) => s2?.problemId?.toString() === data?.problemId
        );
        if (existingSubmission) {
          existingSubmission.code = data?.code;
          existingSubmission.language = data?.language;
          existingSubmission.results = r2;
        } else {
          submission.submissions.push(problemSubmission);
        }
        await submission.save();
        return sendSuccess(c2, 200, "Success", submission);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    codeSubmit = async (c2) => {
      try {
        console.log("Code Submit");
        const { assessmentId, email, timer } = await c2.req.json();
        const assessment = await CodeAssessment_default.findById(assessmentId).populate(
          "problems"
        );
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        const submission = await CodeAssessmentSubmission_default.findOne({
          assessmentId,
          email
        });
        if (!submission) {
          return sendError(c2, 404, "Submission not found");
        }
        const grades = await calculateCodeScore_default(
          // @ts-expect-error - TS doesn't know that the obtainedGrades field is added in the schema
          submission?.submissions || [],
          assessment
        );
        submission.obtainedGrades = grades;
        submission.timer = timer;
        submission.status = "completed";
        if (assessment?.isEnterprise || assessment?.isCampus) {
          const totalMarks = grades?.total || 0;
          const obtaintableMarks = assessment?.obtainableScore || 0;
          const passPercentage = assessment?.passingPercentage || 0;
          const passMarks = passPercentage / 100 * obtaintableMarks;
          const isPassed = totalMarks >= passMarks;
          if (assessment?.isEnterprise) {
            const appliedPosting = await AppliedPosting_default.findOne({
              email,
              postingId: assessment.postingId
            });
            if (!appliedPosting) {
              return sendError(c2, 404, "Applied Posting not found");
            }
            appliedPosting.status = isPassed ? "inprogress" : "rejected";
            await appliedPosting.save();
          }
          if (assessment?.isCampus) {
            const appliedDrive = await AppliedDrive_default.findOne({
              email,
              drive: assessment.driveId
            });
            if (!appliedDrive) {
              return sendError(c2, 404, "Applied Posting not found");
            }
            appliedDrive.status = isPassed ? "inprogress" : "rejected";
            await appliedDrive.save();
          }
        }
        await submission.save();
        return sendSuccess(c2, 200, "Success", grades);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getMcqAssessment = async (c2) => {
      try {
        const id = c2.req.param("id");
        const assessment = await MCQAssessment_default.findById(id).lean();
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        return sendSuccess(c2, 200, "Success", assessment);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getCodeAssessment = async (c2) => {
      try {
        const id = c2.req.param("id");
        const assessment = await CodeAssessment_default.findById(id).lean();
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        return sendSuccess(c2, 200, "Success", assessment);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    deleteMcqAssessment = async (c2) => {
      try {
        const id = c2.req.param("id");
        const auth = c2.get("auth");
        const assessment = await MCQAssessment_default.findById(id);
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        if (assessment.author?.toString() !== auth?._id) {
          return sendError(c2, 403, "Unauthorized");
        }
        await MCQAssessment_default.findByIdAndDelete(id);
        return sendSuccess(c2, 200, "Assessment deleted successfully");
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    deleteCodeAssessment = async (c2) => {
      try {
        const id = c2.req.param("id");
        const auth = c2.get("auth");
        const assessment = await CodeAssessment_default.findById(id);
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        if (assessment.author?.toString() !== auth?._id) {
          return sendError(c2, 403, "Unauthorized");
        }
        await CodeAssessment_default.findByIdAndDelete(id);
        return sendSuccess(c2, 200, "Assessment deleted successfully");
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getCreatedCodeAssessments = async (c2) => {
      try {
        const auth = c2.get("auth");
        const assessments = await CodeAssessment_default.find({ author: auth?._id });
        return sendSuccess(c2, 200, "Success", assessments);
      } catch (error) {
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getCreatedMcqAssessments = async (c2) => {
      try {
        const auth = c2.get("auth");
        const assessments = await MCQAssessment_default.find({ author: auth?._id });
        return sendSuccess(c2, 200, "Success", assessments);
      } catch (error) {
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    verifyAccess = async (c2) => {
      try {
        const body = await c2.req.json();
        const [result1, result2] = await Promise.all([
          CodeAssessment_default.findOne({ _id: body.id }).populate("problems").lean(),
          MCQAssessment_default.findOne({ _id: body.id }).lean()
        ]);
        const assessment = (
          // @ts-expect-error
          result1 || result2
        );
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        if (assessment.isEnterprise) {
          let currentAssessmentId = null;
          const posting = await Posting_default.findOne({
            _id: assessment.postingId
          }).populate("candidates");
          if (!posting) {
            return sendError(c2, 404, "Posting not found");
          }
          const workflow = posting.workflow;
          if (!workflow) {
            return sendError(c2, 400, "No workflow found");
          }
          const currentStepIndex = workflow.steps.findIndex((step) => step.status === "in-progress") ?? 0;
          const currentStep = workflow.steps[currentStepIndex];
          console.log(currentStep);
          if (currentStep.type === "CODING_ASSESSMENT") {
            currentAssessmentId = posting?.codeAssessments.find(
              (assessment2) => assessment2.workflowId.toString() === currentStep._id?.toString()
            )?.assessmentId;
          } else if (currentStep.type === "MCQ_ASSESSMENT") {
            currentAssessmentId = posting?.mcqAssessments.find(
              (assessment2) => assessment2.workflowId?.toString() === currentStep._id?.toString()
            )?.assessmentId;
          }
          console.log(currentAssessmentId, assessment._id);
          if (currentAssessmentId?.toString() !== assessment?._id?.toString()) {
            return sendError(c2, 403, "Assessment not active", {
              allowedForTest: false,
              testActive: false
            });
          }
          const candidates = posting.candidates;
          if (!candidates.some((candidate2) => candidate2.email === body.email)) {
            return sendError(
              c2,
              403,
              "You are not allowed to take this assessment",
              {
                allowedForTest: false,
                testActive: true
              }
            );
          }
        } else if (assessment.isCampus) {
          const drive = await Drive_default.findOne({
            _id: assessment.driveId
          }).populate("candidates");
          if (!drive) {
            return sendError(c2, 404, "Drive not found");
          }
          const candidates = drive.candidates;
          if (!candidates.some((candidate2) => candidate2.email === body.email)) {
            return sendError(
              c2,
              403,
              "You are not allowed to take this assessment",
              {
                allowedForTest: false,
                testActive: true
              }
            );
          }
        } else {
          const assessmentStartTime = new Date(
            assessment?.openRange?.start
          ).getTime();
          const assessmentEndTime = new Date(assessment?.openRange?.end).getTime();
          const currentTime = (/* @__PURE__ */ new Date()).getTime();
          if (currentTime < assessmentStartTime) {
            return sendError(c2, 403, "Assessment not started yet", {
              allowedForTest: false,
              testActive: false
            });
          }
          if (currentTime > assessmentEndTime) {
            return sendError(c2, 403, "Assessment has ended", {
              allowedForTest: false,
              testActive: false
            });
          }
        }
        const codeTakenAssessment = await CodeAssessmentSubmission_default.findOne({
          assessmentId: body.id,
          email: body.email
        });
        const mcqTakenAssessment = await MCQAssessmentSubmission_default.findOne({
          assessmentId: body.id,
          email: body.email
        });
        if (codeTakenAssessment || mcqTakenAssessment) {
          return sendError(c2, 403, "You have already taken this assessment", {
            allowedForTest: false,
            testActive: true
          });
        }
        if (assessment) {
          return sendSuccess(c2, 200, "Access Granted", {
            instructions: assessment.instructions,
            type: result1 ? "code" : "mcq",
            assessment
          });
        }
        const candidate = assessment.candidates.find((candidate2) => candidate2.email === body.email);
        if (!candidate) {
          return sendError(c2, 403, "You are not allowed to take this assessment", {
            allowedForTest: false,
            testActive: true
          });
        }
        return sendSuccess(c2, 200, "Access Granted", {
          // @ts-expect-error
          instructions: assessment.instructions,
          assessment
        });
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    checkCodeProgress = async (c2) => {
      try {
        const body = await c2.req.json();
        const [result1, result2] = await Promise.all([
          CodeAssessment_default.findOne({ _id: body.assessmentId }).populate("problems").lean(),
          MCQAssessment_default.findOne({ _id: body.assessmentId }).lean()
        ]);
        const assessment = result1 || result2;
        const type = result1 ? "code" : "mcq";
        let submission;
        if (type === "code") {
          submission = await CodeAssessmentSubmission_default.findOne({
            email: body.email,
            assessmentId: body.assessmentId
          });
        } else {
          submission = await MCQAssessmentSubmission_default.findOne({
            email: body.email,
            assessmentId: body.assessmentId
          });
        }
        if (!submission) {
          return sendSuccess(c2, 200, "Submission not found", { exists: false });
        }
        if (submission.status === "completed") {
          return sendSuccess(c2, 200, "Submission completed", {
            exists: false,
            status: "completed",
            type
          });
        }
        return sendSuccess(c2, 200, "Success", {
          assessment,
          submission,
          type
        });
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    checkMcqProgress = async (c2) => {
      try {
        const body = await c2.req.json();
        const assessment = await MCQAssessment_default.findOne({
          _id: body.assessmentId
        }).lean();
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        const submission = await MCQAssessmentSubmission_default.findOne({
          email: body.email,
          assessmentId: body.assessmentId
        });
        if (!submission) {
          return sendSuccess(c2, 200, "Submission not found", { exists: false });
        }
        if (submission.status === "completed") {
          return sendSuccess(c2, 200, "Submission completed", {
            exists: false,
            status: "completed"
          });
        }
        return sendSuccess(c2, 200, "Success", { assessment, submission });
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getTakenMcqAssessments = async (c2) => {
      try {
        const auth = c2.get("auth");
        const submissions = await MCQAssessmentSubmission_default.find({
          email: auth?.email
        });
        const takenAssessments = [];
        for (const submission of submissions) {
          const assessment = await MCQAssessment_default.findById(submission.assessmentId);
          if (!assessment) {
            continue;
          }
          takenAssessments.push({
            assessment,
            submission
          });
        }
        return sendSuccess(c2, 200, "Success", takenAssessments);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getTakenCodeAssessments = async (c2) => {
      try {
        const auth = c2.get("auth");
        const submissions = await CodeAssessmentSubmission_default.find({
          email: auth?.email
        });
        const takenAssessments = [];
        for (const submission of submissions) {
          const assessment = await CodeAssessment_default.findById(submission.assessmentId);
          if (!assessment) {
            continue;
          }
          takenAssessments.push({
            assessment,
            submission
          });
        }
        return sendSuccess(c2, 200, "Success", takenAssessments);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getAssessmentSubmissions = async (c2) => {
      try {
        const auth = c2.get("auth");
        const id = c2.req.param("id");
        const postingId = c2.req.param("postingId");
        const driveId = c2.req.param("driveId");
        const queries = await Promise.all([
          CodeAssessment_default.findById(id).lean(),
          MCQAssessment_default.findById(id).lean()
        ]);
        const assessment = (
          // @ts-expect-error
          queries[0] || queries[1]
        );
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        if (assessment.isEnterprise && postingId) {
          if (assessment?.postingId?.toString() !== postingId) {
            return sendError(c2, 403, "Unauthorized");
          }
        } else if (assessment.isCampus) {
          if (assessment?.driveId?.toString() !== driveId) {
            return sendError(c2, 403, "Unauthorized");
          }
        } else {
          if (assessment.author !== auth?._id) {
            return sendError(c2, 403, "Unauthorized");
          }
        }
        const subQueries = await Promise.all([
          CodeAssessmentSubmission_default.find({
            assessmentId: id
          }).lean(),
          MCQAssessmentSubmission_default.find({
            assessmentId: id
          }).lean()
        ]);
        const submissions = subQueries[0].length ? subQueries[0] : subQueries[1];
        const finalSubmissions = [];
        const getTimeUsed = (time) => {
          const totalTime = assessment.timeLimit * 60;
          const timeTaken = totalTime - time;
          return timeTaken;
        };
        const checkPassed = async (submission) => {
          const score = submission?.obtainedGrades?.total || 0;
          const totalScore = assessment.obtainableScore;
          const passingPercentage = assessment.passingPercentage;
          const percentage = score / totalScore * 100;
          return percentage >= passingPercentage;
        };
        if (!postingId) {
          for (const submission of submissions) {
            finalSubmissions.push({
              _id: submission._id,
              name: submission.name,
              email: submission.email,
              timer: getTimeUsed(submission.timer),
              createdAt: submission.createdAt,
              cheating: submission.cheatingStatus,
              score: submission.obtainedGrades,
              passed: await checkPassed(submission)
            });
          }
        } else {
          for (const submission of submissions) {
            const posting = await Posting_default.findById(postingId).populate(
              "candidates"
            );
            if (!posting) {
              return sendError(c2, 404, "Posting not found");
            }
            const candidate = posting.candidates.find(
              (candidate2) => candidate2.email === submission.email
            );
            if (!candidate) {
              return sendError(c2, 404, "Candidate not found");
            }
            const appliedPostings = AppliedPosting_default.find({
              candidateId: candidate._id
            });
            if (!appliedPostings) {
              return sendError(c2, 404, "Applied Postings not found");
            }
            const status = appliedPostings.find(
              (ap) => ap.posting.toString() === postingId
            );
            finalSubmissions.push({
              _id: submission._id,
              name: submission.name,
              email: submission.email,
              timer: getTimeUsed(submission.timer),
              createdAt: submission.createdAt,
              cheating: submission.cheatingStatus,
              score: submission.obtainedGrades,
              passed: await checkPassed(submission),
              status
            });
          }
        }
        const qualified = finalSubmissions.filter((s2) => s2.passed === true).length;
        const totalSubmissions = finalSubmissions.length;
        const noCopy = finalSubmissions.filter(
          (s2) => s2.cheating === "No Copying"
        ).length;
        const lightCopy = finalSubmissions.filter(
          (s2) => s2.cheating === "Light Copying"
        ).length;
        const heavyCopy = finalSubmissions.filter(
          (s2) => s2.cheating === "Heavy Copying"
        ).length;
        const resObj = {
          totalSubmissions,
          qualified,
          cheating: {
            no: noCopy,
            light: lightCopy,
            heavy: heavyCopy
          },
          submissions: finalSubmissions
        };
        return sendSuccess(c2, 200, "Success", resObj);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getAssessmentSubmission = async (c2) => {
      try {
        const auth = c2.get("auth");
        const id = c2.req.param("id");
        const submissionId = c2.req.param("submissionId");
        const postingId = c2.req.param("postingId");
        const queries = await Promise.all([
          CodeAssessment_default.findById(id).lean(),
          MCQAssessment_default.findById(id).lean()
        ]);
        const assessment = queries[0] ? queries[0] : queries[1];
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        const subQueries = await Promise.all([
          CodeAssessmentSubmission_default.findById(submissionId).lean(),
          MCQAssessmentSubmission_default.findById(submissionId).lean()
        ]);
        const submission = subQueries[0] ? subQueries[0] : subQueries[1];
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        if (assessment.isEnterprise && postingId) {
          if (assessment?.postingId?.toString() !== postingId) {
            return sendError(c2, 403, "Unauthorized in Posts");
          }
        } else if (assessment.isCampus) {
          if (assessment?.driveId?.toString() !== postingId) {
            return sendError(c2, 403, "Unauthorized in Drive");
          }
        } else {
          if (assessment.author !== auth?._id) {
            return sendError(c2, 403, "Unauthorized");
          }
        }
        if (!submission) {
          return sendError(c2, 404, "Submission not found");
        }
        return sendSuccess(c2, 200, "Success", { submission, assessment });
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getPostingMCQAssessments = async (c2) => {
      try {
        const auth = c2.get("auth");
        const postingId = c2.req.param("postingId");
        const perms = await checkOrganizationPermission_default.all(c2, ["view_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const posting = await Posting_default.findById(postingId).populate("mcqAssessments.assessmentId").populate("organizationId");
        if (!posting) {
          return sendError(c2, 404, "Posting not found");
        }
        if (
          // @ts-expect-error
          posting?.organizationId?.members?.filter(
            (member) => member?.user?.toString() === auth?._id.toString()
          ).length === 0
        ) {
          return sendError(c2, 401, "Unauthorized");
        }
        const assessments = posting.mcqAssessments.map(
          (assessment) => assessment.assessmentId
        );
        return sendSuccess(c2, 200, "Success", assessments);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getPostingCodeAssessments = async (c2) => {
      try {
        const auth = c2.get("auth");
        const postingId = c2.req.param("postingId");
        const perms = await checkOrganizationPermission_default.all(c2, ["view_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const posting = await Posting_default.findById(postingId).populate("codeAssessments.assessmentId").populate("organizationId");
        if (!posting) {
          return sendError(c2, 404, "Posting not found");
        }
        if (
          // @ts-expect-error
          posting?.organizationId?.members?.filter(
            (member) => member?.user?.toString() === auth?._id.toString()
          ).length === 0
        ) {
          return sendError(c2, 401, "Unauthorized");
        }
        const assessments = posting.codeAssessments.map(
          (assessment) => assessment.assessmentId
        );
        return sendSuccess(c2, 200, "Success", assessments);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getDriveMCQAssessments = async (c2) => {
      try {
        const auth = c2.get("auth");
        const driveId = c2.req.param("driveId");
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findById(driveId).populate("mcqAssessments.assessmentId").populate("institute");
        if (!drive) {
          return sendError(c2, 404, "Drive not found");
        }
        if (
          // @ts-expect-error
          drive?.institute?.members?.filter(
            (member) => member?.user?.toString() === auth?._id.toString()
          ).length === 0
        ) {
          return sendError(c2, 401, "Unauthorized");
        }
        const assessments = drive.mcqAssessments.map(
          (assessment) => assessment.assessmentId
        );
        return sendSuccess(c2, 200, "Success", assessments);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getDriveCodeAssessments = async (c2) => {
      try {
        const auth = c2.get("auth");
        const driveId = c2.req.param("driveId");
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findById(driveId).populate("codeAssessments.assessmentId").populate("institute");
        if (!drive) {
          return sendError(c2, 404, "Drive not found");
        }
        if (
          // @ts-expect-error
          drive?.institute?.members?.filter(
            (member) => member?.user?.toString() === auth?._id.toString()
          ).length === 0
        ) {
          return sendError(c2, 401, "Unauthorized");
        }
        const assessments = drive.codeAssessments.map(
          (assessment) => assessment.assessmentId
        );
        return sendSuccess(c2, 200, "Success", assessments);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getMcqAssessmentSubmissions = async (c2) => {
      try {
        const auth = c2.get("auth");
        const assessmentId = c2.req.param("id");
        const assessment = await MCQAssessment_default.findById(assessmentId);
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        if (assessment.author !== auth?._id) {
          if (assessment.isEnterprise) {
            const perms = await checkOrganizationPermission_default.all(c2, ["view_job"]);
            if (!perms.allowed) {
              return sendError(c2, 401, "Unauthorized");
            }
          } else if (assessment.isCampus) {
            const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
            if (!perms.allowed) {
              return sendError(c2, 401, "Unauthorized");
            }
          } else return sendError(c2, 403, "Unauthorized");
        }
        const submissions = await MCQAssessmentSubmission_default.find({
          assessmentId
        });
        return sendSuccess(c2, 200, "Success", { submissions, assessment });
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getCodeAssessmentSubmissions = async (c2) => {
      try {
        const auth = c2.get("auth");
        const assessmentId = c2.req.param("id");
        console.log(assessmentId);
        const assessment = await CodeAssessment_default.findById(assessmentId);
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        if (assessment.author !== auth?._id) {
          if (assessment.isEnterprise) {
            const perms = await checkOrganizationPermission_default.all(c2, ["view_job"]);
            if (!perms.allowed) {
              return sendError(c2, 401, "Unauthorized");
            }
          } else if (assessment.isCampus) {
            const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
            if (!perms.allowed) {
              return sendError(c2, 401, "Unauthorized");
            }
          } else return sendError(c2, 403, "Unauthorized");
        }
        const submissions = await CodeAssessmentSubmission_default.find({
          assessmentId
        });
        return sendSuccess(c2, 200, "Success", { submissions, assessment });
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getMcqAssessmentSubmission = async (c2) => {
      try {
        const auth = c2.get("auth");
        const submissionId = c2.req.param("submissionId");
        const submission = await MCQAssessmentSubmission_default.findById(
          submissionId
        ).populate("assessmentId");
        if (!submission) {
          return sendError(c2, 404, "Submission not found");
        }
        const assessment = await MCQAssessment_default.findById(submission.assessmentId);
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        if (assessment.author !== auth?._id) {
          if (assessment.isEnterprise) {
            const perms = await checkOrganizationPermission_default.all(c2, ["view_job"]);
            if (!perms.allowed) {
              return sendError(c2, 401, "Unauthorized");
            }
          } else if (assessment.isCampus) {
            const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
            if (!perms.allowed) {
              return sendError(c2, 401, "Unauthorized");
            }
          } else return sendError(c2, 403, "Unauthorized");
        }
        return sendSuccess(c2, 200, "Success", submission);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getCodeAssessmentSubmission = async (c2) => {
      try {
        const auth = c2.get("auth");
        const submissionId = c2.req.param("submissionId");
        const submission = await CodeAssessmentSubmission_default.findById(submissionId).populate("assessmentId").populate("submissions.problemId");
        if (!submission) {
          return sendError(c2, 404, "Submission not found");
        }
        const assessment = await CodeAssessment_default.findById(submission.assessmentId);
        if (!assessment) {
          return sendError(c2, 404, "Assessment not found");
        }
        if (assessment.author !== auth?._id) {
          if (assessment.isEnterprise) {
            const perms = await checkOrganizationPermission_default.all(c2, ["view_job"]);
            if (!perms.allowed) {
              return sendError(c2, 401, "Unauthorized");
            }
          } else if (assessment.isCampus) {
            const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
            if (!perms.allowed) {
              return sendError(c2, 401, "Unauthorized");
            }
          } else return sendError(c2, 403, "Unauthorized");
        }
        return sendSuccess(c2, 200, "Success", submission);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    capture = async (c2) => {
      try {
        const formData = await c2.req.formData();
        const image = formData.get("image");
        const timestamp = (/* @__PURE__ */ new Date()).getTime();
        const assessmentId = formData.get("assessmentId");
        const assessmentType = formData.get("assessmentType");
        const email = formData.get("email");
        if (!image || !(image instanceof File)) {
          return sendError(c2, 400, "Invalid image file");
        }
        const uploadParams = {
          Bucket: process.env.R2_S3_ASSESSMENT_CAMERA_CAPTURE_BUCKET,
          Key: `${assessmentType}/${assessmentId}/${email}/${timestamp}.png`,
          Body: image,
          ContentType: image.type
        };
        const upload = new Upload({
          client: s3_default,
          params: uploadParams
        });
        await upload.done();
        return sendSuccess(c2, 200, "Success");
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    getCaptures = async (c2) => {
      const assessmentId = c2.req.param("id");
      const assessmentType = c2.req.param("type");
      const email = c2.req.param("email");
      const folderPrefix = `${assessmentType}/${assessmentId}/${email}/`;
      console.log(folderPrefix);
      try {
        const command = new ListObjectsV2Command({
          Bucket: process.env.R2_S3_ASSESSMENT_CAMERA_CAPTURE_BUCKET,
          Prefix: folderPrefix
        });
        const response = await s3_default.send(command);
        if (!response.Contents) {
          return sendSuccess(c2, 200, "Success", []);
        }
        const imageUrls = [];
        for (const content of response.Contents) {
          const command2 = new GetObjectCommand({
            Bucket: process.env.R2_S3_ASSESSMENT_CAMERA_CAPTURE_BUCKET,
            Key: content.Key
          });
          const url = await getSignedUrl(s3_default, command2, { expiresIn: 600 });
          imageUrls.push({
            url,
            timestamp: content?.Key?.split("/")?.pop()?.split(".")[0] || ""
          });
        }
        console.log(imageUrls);
        return sendSuccess(c2, 200, "Success", imageUrls);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    gradeMCQAnswer = async (c2) => {
      try {
        const auth = c2.get("auth");
        const body = await c2.req.json();
        const { submissionId, mcqId, grade } = body;
        console.log(body);
        const submission = await MCQAssessmentSubmission_default.findById(submissionId);
        if (!submission) {
          return sendError(c2, 404, "Submission not found");
        }
        if (!submission.obtainedGrades)
          return sendError(c2, 400, "Grades not found");
        if (!submission.obtainedGrades?.mcq) {
          submission.obtainedGrades.mcq = [];
        }
        const mcq = submission?.obtainedGrades?.mcq?.find(
          (mcq2) => mcq2.mcqId.toString() === mcqId.toString()
        );
        if (mcq) {
          submission.obtainedGrades.total += grade - mcq.obtainedMarks;
          mcq.obtainedMarks = grade;
        } else {
          const newMCQ = {
            mcqId,
            obtainedMarks: grade
          };
          submission.obtainedGrades.total += grade;
          submission.obtainedGrades?.mcq?.push(newMCQ);
        }
        if (!submission.reviewedBy?.includes(auth?._id)) {
          submission?.reviewedBy?.push(auth?._id);
        }
        await submission.save();
        return sendSuccess(c2, 200, "Success", submission);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    gradeCodeAnswer = async (c2) => {
      try {
        const auth = c2.get("auth");
        const body = await c2.req.json();
        const { submissionId, problemId, grade } = body;
        const submission = await CodeAssessmentSubmission_default.findById(submissionId);
        if (!submission) {
          return sendError(c2, 404, "Submission not found");
        }
        if (!submission.obtainedGrades)
          return sendError(c2, 400, "Grades not found");
        if (!submission.obtainedGrades) {
          submission.obtainedGrades = [];
        }
        const code = submission?.obtainedGrades?.problem?.find(
          (p3) => p3.problemId.toString() === problemId.toString()
        );
        console.log(code);
        console.log(grade);
        if (code) {
          submission.obtainedGrades.total += grade - code.obtainedMarks;
          code.obtainedMarks = grade;
        } else {
          const newCode = {
            problemId,
            obtainedMarks: grade
          };
          submission.obtainedGrades.total += grade;
          submission.obtainedGrades?.problem?.push(newCode);
        }
        if (!submission.reviewedBy?.includes(auth?._id)) {
          submission?.reviewedBy?.push(auth?._id);
        }
        await submission.save();
        return sendSuccess(c2, 200, "Success", submission);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    saveReview = async (c2) => {
      try {
        const body = await c2.req.json();
        const { submissionId } = body;
        const submission = await MCQAssessmentSubmission_default.findById(submissionId);
        if (!submission) {
          return sendError(c2, 404, "Submission not found");
        }
        submission.isReviewed = true;
        await submission.save();
        return sendSuccess(c2, 200, "Success", submission);
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    assessmentController_default = {
      checkCodeProgress,
      codeSubmit,
      submitIndividualProblem,
      createMcqAssessment,
      createCodeAssessment,
      getMcqAssessment,
      getCodeAssessment,
      deleteMcqAssessment,
      deleteCodeAssessment,
      getCreatedCodeAssessments,
      getCreatedMcqAssessments,
      getTakenMcqAssessments,
      getTakenCodeAssessments,
      verifyAccess,
      checkMcqProgress,
      submitMcqAssessment,
      getAssessmentSubmissions,
      getAssessmentSubmission,
      getPostingMCQAssessments,
      getPostingCodeAssessments,
      getMcqAssessmentSubmissions,
      getCodeAssessmentSubmissions,
      getMcqAssessmentSubmission,
      getCodeAssessmentSubmission,
      capture,
      getCaptures,
      gradeMCQAnswer,
      gradeCodeAnswer,
      saveReview,
      getDriveMCQAssessments,
      getDriveCodeAssessments
    };
  }
});

// src/routes/assessmentRoute.ts
import { Hono as Hono3 } from "hono";
var app3, assessmentRoute_default;
var init_assessmentRoute = __esm({
  "src/routes/assessmentRoute.ts"() {
    "use strict";
    init_assessmentController();
    app3 = new Hono3();
    app3.post("/mcq", assessmentController_default.createMcqAssessment);
    app3.post("/code", assessmentController_default.createCodeAssessment);
    app3.get("/mcq/created", assessmentController_default.getCreatedMcqAssessments);
    app3.get("/code/created", assessmentController_default.getCreatedCodeAssessments);
    app3.get("/mcq/created/enterprise/:postingId", assessmentController_default.getPostingMCQAssessments);
    app3.get("/code/created/enterprise/:postingId", assessmentController_default.getPostingCodeAssessments);
    app3.get("/mcq/created/campus/:driveId", assessmentController_default.getDriveMCQAssessments);
    app3.get("/code/created/campus/:driveId", assessmentController_default.getDriveCodeAssessments);
    app3.get("/mcq/taken", assessmentController_default.getTakenMcqAssessments);
    app3.get("/code/taken", assessmentController_default.getTakenCodeAssessments);
    app3.get("/mcq/:id", assessmentController_default.getMcqAssessment);
    app3.get("/code/:id", assessmentController_default.getCodeAssessment);
    app3.delete("/mcq/:id", assessmentController_default.deleteMcqAssessment);
    app3.delete("/code/:id", assessmentController_default.deleteCodeAssessment);
    app3.post("/verify", assessmentController_default.verifyAccess);
    app3.post("/code/check-progress", assessmentController_default.checkCodeProgress);
    app3.post("/submit/code/individual", assessmentController_default.submitIndividualProblem);
    app3.post("/submit/code", assessmentController_default.codeSubmit);
    app3.post("/mcq/check-progress", assessmentController_default.checkMcqProgress);
    app3.post("/submit/mcq", assessmentController_default.submitMcqAssessment);
    app3.get("/:id/get-submissions", assessmentController_default.getAssessmentSubmissions);
    app3.get("/:id/get-submissions/:submissionId", assessmentController_default.getAssessmentSubmission);
    app3.get("/:id/get-mcq-submissions", assessmentController_default.getMcqAssessmentSubmissions);
    app3.get("/:id/get-code-submissions", assessmentController_default.getCodeAssessmentSubmissions);
    app3.get("/:id/get-mcq-submissions/:submissionId", assessmentController_default.getMcqAssessmentSubmission);
    app3.get("/:id/get-code-submissions/:submissionId", assessmentController_default.getCodeAssessmentSubmission);
    app3.post("/capture", assessmentController_default.capture);
    app3.get("/:type/:id/captures/:email", assessmentController_default.getCaptures);
    app3.post("/mcq/grade", assessmentController_default.gradeMCQAnswer);
    app3.post("/code/grade", assessmentController_default.gradeCodeAnswer);
    app3.post("/mcq/save-review", assessmentController_default.saveReview);
    assessmentRoute_default = app3;
  }
});

// src/config/blockchainService.ts
import Web3 from "web3";
var web3, adminPrivateKey, adminWallet, ScryptoTokenABI, tokenContractAddress, tokenContract, getRewardChance, shouldRewardUser, getTokenBalance, sendTokenReward, createWallet;
var init_blockchainService = __esm({
  "src/config/blockchainService.ts"() {
    "use strict";
    web3 = new Web3(
      new Web3.providers.HttpProvider(
        process.env.ETHEREUM_RPC_URL || "https://sepolia.infura.io/v3/5db8670c94514ff19dec306e8867bbc6"
      )
    );
    adminPrivateKey = process.env.ADMIN_WALLET_PRIVATE_KEY;
    if (!adminPrivateKey || !/^0x[0-9a-fA-F]{64}$/.test(adminPrivateKey)) {
      throw new Error(
        'Invalid or missing ADMIN_WALLET_PRIVATE_KEY in environment variables. It must be a 64-character hexadecimal string starting with "0x".'
      );
    }
    adminWallet = web3.eth.accounts.privateKeyToAccount(adminPrivateKey);
    web3.eth.accounts.wallet.add(adminWallet);
    ScryptoTokenABI = [
      {
        inputs: [
          {
            internalType: "uint256",
            name: "initialSupply",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "   "
          },
          {
            internalType: "uint256",
            name: "allowance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "needed",
            type: "uint256"
          }
        ],
        name: "ERC20InsufficientAllowance",
        type: "error"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "sender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "needed",
            type: "uint256"
          }
        ],
        name: "ERC20InsufficientBalance",
        type: "error"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "approver",
            type: "address"
          }
        ],
        name: "ERC20InvalidApprover",
        type: "error"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "receiver",
            type: "address"
          }
        ],
        name: "ERC20InvalidReceiver",
        type: "error"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "sender",
            type: "address"
          }
        ],
        name: "ERC20InvalidSender",
        type: "error"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          }
        ],
        name: "ERC20InvalidSpender",
        type: "error"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "OwnableInvalidOwner",
        type: "error"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          }
        ],
        name: "OwnableUnauthorizedAccount",
        type: "error"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Approval",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "previousOwner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "address",
            name: "spender",
            type: "address"
          }
        ],
        name: "allowance",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "spender",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "approve",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "decimals",
        outputs: [
          {
            internalType: "uint8",
            name: "",
            type: "uint8"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "mint",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "name",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "symbol",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "transfer",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "from",
            type: "address"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          }
        ],
        name: "transferFrom",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "newOwner",
            type: "address"
          }
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    tokenContractAddress = process.env.TOKEN_CONTRACT_ADDRESS;
    if (!tokenContractAddress) {
      throw new Error("Missing TOKEN_CONTRACT_ADDRESS in environment variables.");
    }
    tokenContract = new web3.eth.Contract(
      ScryptoTokenABI,
      tokenContractAddress
    );
    getRewardChance = (difficulty) => {
      switch (difficulty.toLowerCase()) {
        case "easy":
          return 0.9;
        case "medium":
          return 0.9;
        case "hard":
          return 0.9;
        default:
          return 0;
      }
    };
    shouldRewardUser = (difficulty, problemId, userId) => {
      const isRewarded = userId.wallet?.transactions?.some(
        (some) => some.problemId === problemId
      );
      if (isRewarded) {
        console.log("user is already rewarded");
        return false;
      }
      const chance = getRewardChance(difficulty);
      return Math.random() < chance;
    };
    getTokenBalance = async (address) => {
      try {
        const balance = await tokenContract.methods.balanceOf(address).call();
        if (balance) {
          return web3.utils.fromWei(balance.toString(), "ether");
        } else {
          return "0";
        }
      } catch (error) {
        console.error("Error getting token balance:", error);
        return "0";
      }
    };
    sendTokenReward = async (toAddress, amount) => {
      try {
        const amountInWei = web3.utils.toWei(amount, "ether");
        const gasPrice = await web3.eth.getGasPrice();
        const gas = await tokenContract.methods.transfer(toAddress, amountInWei).estimateGas({ from: adminWallet.address }).catch((error) => {
          console.error("Gas estimation failed:", error);
          return 5e5;
        });
        const receipt = await tokenContract.methods.transfer(toAddress, amountInWei).send({
          from: adminWallet.address,
          gas: gas.toString(),
          gasPrice: gasPrice.toString()
        });
        console.log(
          `Tokens sent to ${toAddress}. Transaction hash: ${receipt.transactionHash}`
        );
        return true;
      } catch (error) {
        console.error("Error sending token reward:", error);
        return false;
      }
    };
    createWallet = () => {
      const account = web3.eth.accounts.create();
      return {
        address: account.address,
        privateKey: account.privateKey
      };
    };
  }
});

// src/controllers/code/submissionController.ts
import Web32 from "web3";
var runCode2, submitCode, submissionController_default;
var init_submissionController = __esm({
  "src/controllers/code/submissionController.ts"() {
    "use strict";
    init_sendResponse();
    init_Problem();
    init_runCode();
    init_User();
    init_Submission();
    init_blockchainService();
    runCode2 = async (c2) => {
      try {
        const body = await c2.req.json();
        const prob = await Problem_default.findOne({ _id: body.problemId });
        if (!prob) {
          return sendError(c2, 404, "Problem Not Found");
        }
        if (!prob) {
          return sendError(c2, 404, "Problem Not Found");
        }
        const result = await runCode(
          body.language,
          prob.sdsl,
          body.code,
          prob.testCases
        );
        if (!result) {
          return sendSuccess(c2, 200, "Success", result);
        }
        if (result?.status === "ERROR") {
          console.error(result.error);
        }
        return sendSuccess(c2, 200, "Success", result);
      } catch (error) {
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    submitCode = async (c2) => {
      try {
        const body = await c2.req.json();
        const prob = await Problem_default.findOne({ _id: body.problemId });
        if (!prob) {
          return sendError(c2, 404, "Problem Not Found");
        }
        const result = await runCode(
          body.language,
          prob.sdsl,
          body.code,
          prob.testCases
        );
        const results = result.results.map((r2) => ({
          caseNo: r2.caseNo,
          caseId: r2._id,
          output: r2.output,
          isSample: r2.isSample,
          memory: r2.memory,
          time: r2.time,
          passed: r2.passed,
          console: r2.console
        }));
        const auth = c2.get("auth");
        const u2 = auth?._id;
        if (!u2) {
          return sendError(c2, 401, "Unauthorized");
        }
        const submission = new Submission_default({
          problem: body.problemId,
          user: u2,
          code: body.code,
          language: body.language,
          status: result.failedCaseNo === -1 ? "SUCCESS" : "FAILED",
          avgMemory: result.avgMemory,
          avgTime: result.avgTime,
          failedCaseNumber: result.failedCaseNo,
          results,
          meta: {
            driver: result.driver,
            timestamp: result.timestamp
          }
        });
        let rewardResult = null;
        if (result.failedCaseNo === -1) {
          const date = /* @__PURE__ */ new Date();
          const user = await User_default.findOne({ _id: u2 });
          if (user) {
            user.streak.push(date);
            const shouldReward = shouldRewardUser(
              prob.difficulty,
              prob._id?.toString(),
              user
            );
            if (shouldReward && user.wallet?.address) {
              const rewardAmount = prob.difficulty === "easy" ? "1" : prob.difficulty === "medium" ? "2" : "3";
              const amountInWei = Web32.utils.toWei(
                rewardAmount.toString(),
                "ether"
              );
              console.log(amountInWei);
              try {
                const rewardSent = await sendTokenReward(
                  user.wallet.address,
                  rewardAmount
                );
                if (rewardSent) {
                  user.wallet.balance += parseFloat(rewardAmount);
                  rewardResult = {
                    earned: true,
                    amount: rewardAmount
                  };
                  const newDbTransaction = {
                    amount: rewardAmount,
                    problemId: prob._id
                  };
                  if (!user.wallet.transactions) {
                    user.wallet.transactions = [];
                  }
                  user.wallet.transactions?.push(newDbTransaction);
                } else {
                  rewardResult = {
                    earned: false,
                    reason: "Token transfer failed"
                  };
                }
              } catch (error) {
                console.error("Error sending token reward:", error);
                rewardResult = {
                  earned: false,
                  reason: "Token transfer error"
                };
              }
            } else {
              rewardResult = {
                earned: false,
                reason: shouldReward ? "No wallet found" : "Luck not in your favor"
              };
            }
            await user.save();
          } else {
            console.error("User not found for reward:", u2);
            rewardResult = {
              earned: false,
              reason: "User not found"
            };
          }
        }
        prob.totalSubmissions += 1;
        if (result.failedCaseNo === -1) {
          console.log("Success");
          prob.successfulSubmissions += 1;
          const acceptanceRate = prob.successfulSubmissions / prob.totalSubmissions * 100;
          prob.acceptanceRate = acceptanceRate;
        }
        await prob.save();
        console.log(result.STATUS);
        if (result.STATUS === "PASSED") {
          await submission.save();
        } else {
          return sendError(c2, 400, "Submission Failed", result);
        }
        return sendSuccess(c2, 200, "Success", {
          submission,
          result,
          reward: rewardResult
        });
      } catch (error) {
        console.log(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    submissionController_default = { runCode: runCode2, submitCode };
  }
});

// src/routes/submissionRoute.ts
import { Hono as Hono4 } from "hono";
var app4, submissionRoute_default;
var init_submissionRoute = __esm({
  "src/routes/submissionRoute.ts"() {
    "use strict";
    init_submissionController();
    app4 = new Hono4();
    app4.post("/run", submissionController_default.runCode);
    app4.post("/submit", submissionController_default.submitCode);
    submissionRoute_default = app4;
  }
});

// src/data/defaultOrganizationRoles.ts
var defaultOrganizationRoles, defaultOrganizationRoles_default;
var init_defaultOrganizationRoles = __esm({
  "src/data/defaultOrganizationRoles.ts"() {
    "use strict";
    defaultOrganizationRoles = [
      {
        name: "Administrator",
        slug: "administrator",
        default: true,
        description: "Administrator role",
        permissions: [
          "manage_job",
          "view_job",
          "view_organization",
          "manage_organization",
          "view_billing",
          "manage_billing",
          "view_analytics",
          "interviewer"
        ]
      },
      {
        name: "Read Only",
        slug: "read_only",
        default: true,
        description: "Read Only role",
        permissions: [
          "view_job",
          "view_organization",
          "view_billing",
          "view_analytics"
        ]
      },
      {
        name: "Finance",
        slug: "finance",
        default: true,
        description: "Finance role",
        permissions: ["view_billing", "manage_billing"]
      },
      {
        name: "Hiring Manager",
        slug: "hiring_manager",
        default: true,
        description: "Hiring Manager role",
        permissions: ["manage_job", "view_job"]
      }
    ];
    defaultOrganizationRoles_default = defaultOrganizationRoles;
  }
});

// src/data/organizationPermissions.ts
var organizationPermissions, organizationPermissions_default;
var init_organizationPermissions = __esm({
  "src/data/organizationPermissions.ts"() {
    "use strict";
    organizationPermissions = [
      "manage_job",
      "view_job",
      "view_organization",
      "manage_organization",
      "view_billing",
      "manage_billing",
      "view_analytics",
      "interviewer"
    ];
    organizationPermissions_default = organizationPermissions;
  }
});

// src/controllers/enterprise/organization/organizationController.ts
import jwt from "jsonwebtoken";
import { Upload as Upload2 } from "@aws-sdk/lib-storage";
import { GetObjectCommand as GetObjectCommand2 } from "@aws-sdk/client-s3";
var createOrganization, verifyInvite, joinOrganization, getSettings, updateOrganization, updateGeneralSettings, updateLogo, updateMembers, updateRoles, getCandidates, getDepartments, updateDepartments, permissionFieldMap, getOrganization, organizationController_default;
var init_organizationController = __esm({
  "src/controllers/enterprise/organization/organizationController.ts"() {
    "use strict";
    init_sendResponse();
    init_Organization();
    init_User();
    init_loops();
    init_clerk();
    init_logger();
    init_s3();
    init_defaultOrganizationRoles();
    init_organizationPermissions();
    init_checkOrganizationPermission();
    init_Posting();
    createOrganization = async (c2) => {
      try {
        const { name, email, website, members } = await c2.req.json();
        const clerkUserId = c2.get("auth").userId;
        const clerkUser = await clerk_default.users.getUser(clerkUserId);
        const fName = clerkUser.firstName;
        const lName = clerkUser.lastName;
        const uid = clerkUser.publicMetadata._id;
        const emailRegex2 = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const websiteRegex = /(http|https):\/\/[^ "]*/;
        if (!name || !email || !website || !members) {
          return sendError(c2, 400, "Please fill all fields");
        }
        if (!emailRegex2.test(email)) {
          return sendError(c2, 400, "Invalid email address");
        }
        if (!websiteRegex.test(website)) {
          return sendError(c2, 400, "Invalid website address");
        }
        const existingOrg = await Organization_default.findOne({ email });
        if (existingOrg) {
          return sendError(c2, 400, "Organization with this email already exists");
        }
        const userInOrg = await Organization_default.findOne({
          members: { $elemMatch: { user: uid } }
        });
        if (userInOrg) {
          return sendError(c2, 400, "User is already part of an organization");
        }
        const membersArr = [];
        for (const member of members) {
          if (!member.email || !member.role) {
            return sendError(c2, 400, "Please fill all fields");
          }
          if (!emailRegex2.test(member.email)) {
            return sendError(c2, 400, "Invalid email address");
          }
          const user = await User_default.findOne({ email });
          const role2 = defaultOrganizationRoles_default.find(
            (r2) => r2.slug === member.role.toLowerCase()
          );
          const mem = {
            user: user?._id || null,
            email: member.email,
            role: role2?.slug,
            addedOn: /* @__PURE__ */ new Date(),
            status: "pending"
          };
          membersArr.push(mem);
        }
        const creator = await clerk_default.users.getUser(clerkUserId);
        if (!creator) {
          return sendError(c2, 404, "User not found");
        }
        const adminRole = defaultOrganizationRoles_default.find(
          (role2) => role2.slug === "administrator"
        );
        membersArr.push({
          user: uid,
          email: creator.emailAddresses[0].emailAddress,
          role: adminRole?.slug,
          addedOn: /* @__PURE__ */ new Date(),
          status: "active"
        });
        const auditLog = {
          user: fName + " " + lName,
          userId: uid,
          action: "Organization Created",
          type: "info"
        };
        const org = await Organization_default.create({
          name,
          email,
          website,
          members: membersArr,
          subscription: {
            type: "trial",
            status: "active",
            startedOn: /* @__PURE__ */ new Date(),
            endsOn: new Date((/* @__PURE__ */ new Date()).setDate((/* @__PURE__ */ new Date()).getDate() + 15)),
            lemonSqueezyId: " "
          },
          roles: defaultOrganizationRoles_default,
          auditLogs: [auditLog]
        });
        const role = org.roles.find((r2) => r2.slug === "administrator");
        clerk_default.users.updateUser(clerkUserId, {
          publicMetadata: {
            ...clerkUser.publicMetadata,
            organization: {
              _id: org._id,
              name: org.name,
              role
            }
          }
        });
        for (const member of members) {
          const role2 = defaultOrganizationRoles_default.find(
            (r2) => r2.slug === member.role.toLowerCase()
          );
          const reqObj = {
            email: member.email,
            role: role2?.slug,
            organization: org._id,
            inviter: fName || "",
            inviterId: uid,
            organizationname: name
          };
          const token = jwt.sign(reqObj, process.env.JWT_SECRET);
          await loops_default.sendTransactionalEmail({
            transactionalId: process.env.LOOPS_INVITE_EMAIL,
            email: member.email,
            dataVariables: {
              inviter: fName || "",
              joinlink: process.env.ENTERPRISE_FRONTEND_URL + "/join?token=" + token,
              organizationname: name
            }
          });
        }
        return sendSuccess(c2, 201, "Organization created successfully", {
          org: org._id
        });
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to create organization", error);
      }
    };
    verifyInvite = async (c2) => {
      try {
        const { token } = await c2.req.json();
        const cid = c2.get("auth").userId;
        const clerkUser = await clerk_default.users.getUser(cid);
        const email = clerkUser.emailAddresses[0].emailAddress;
        if (!token) {
          return sendError(c2, 400, "Invalid token");
        }
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const org = await Organization_default.findById(decoded.organization);
        if (!org) {
          return sendError(c2, 404, "Organization not found");
        }
        const organization = await Organization_default.findOne({
          _id: decoded.organization,
          members: { $elemMatch: { email, status: "pending" } }
        });
        if (!organization) {
          logger_default.warn("No organization found");
          return sendError(c2, 400, "Invalid Invite");
        }
        return sendSuccess(c2, 200, "Token verified", decoded);
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to verify token", error);
      }
    };
    joinOrganization = async (c2) => {
      try {
        const { status, token } = await c2.req.json();
        const userId = c2.get("auth")._id;
        const cid = c2.get("auth").userId;
        const clerkUser = await clerk_default.users.getUser(cid);
        const email = clerkUser.emailAddresses[0].emailAddress;
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const org = await Organization_default.findById(decoded.organization);
        if (!org) {
          return sendError(c2, 404, "Organization not found");
        }
        const organization = await Organization_default.findOne({
          _id: decoded.organization,
          members: { $elemMatch: { email, status: "pending" } }
        });
        if (!organization) {
          return sendError(c2, 400, "Invalid Invite");
        }
        if (organization._id.toString() !== decoded.organization) {
          return sendError(c2, 400, "Invalid Invite");
        }
        const role = org.roles.find((r2) => r2.slug === decoded.role);
        if (status === "accept") {
          clerk_default.users.updateUser(cid, {
            publicMetadata: {
              ...clerkUser.publicMetadata,
              organization: {
                _id: decoded.organization,
                name: org.name,
                role
              }
            }
          });
          const inviterUser = await User_default.findById(decoded.inviterId);
          if (!inviterUser) {
            return sendError(c2, 404, "Inviter not found");
          }
          const inviterClerk = await clerk_default.users.getUser(
            inviterUser?.clerkId
          );
          const auditLog = {
            user: clerkUser.firstName + " " + clerkUser.lastName,
            userId,
            action: `User Joined Organization. Invited By: ${inviterClerk.firstName + " " + inviterClerk.lastName}`,
            type: "info"
          };
          await Organization_default.updateOne(
            { _id: decoded.organization, "members.email": email },
            { $set: { "members.$.status": "active", "members.$.user": userId } },
            { $push: { auditLogs: auditLog } }
          );
        } else {
          await Organization_default.updateOne(
            { _id: decoded.organization, "members.email": email },
            { $pull: { members: { email } } }
          );
        }
        return sendSuccess(c2, 200, "Joined Organization", {
          id: decoded.organization
        });
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to join organization", error);
      }
    };
    getSettings = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, [
          "view_organization"
        ]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const org = await Organization_default.findById(perms.data?.organization?._id).populate("auditLogs.user").populate("members.user").lean();
        if (!org) {
          return sendError(c2, 404, "Organization not found");
        }
        const logoUrl = org.logo;
        try {
          if (logoUrl) {
            const command = new GetObjectCommand2({
              Bucket: process.env.R2_S3_BUCKET,
              Key: logoUrl
            });
            const data = await s3_default.send(command);
            const buffer = await data.Body?.transformToByteArray();
            const base64 = Buffer.from(buffer).toString(
              "base64"
            );
            org.logo = `data:image/png;base64,${base64}`;
          }
        } catch (e2) {
          console.log("Failed to fetch logo", e2);
          console.log(e2);
        }
        return sendSuccess(c2, 200, "Success", {
          ...org,
          permissions: organizationPermissions_default
        });
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to fetch organization settings", error);
      }
    };
    updateOrganization = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, [
          "manage_organization"
        ]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const orgId = perms.data?.organization?._id;
        const body = await c2.req.json();
        const org = await Organization_default.findById(orgId).lean();
        if (!org) {
          logger_default.error("Organization not found:");
          return sendError(c2, 404, "Organization not found");
        }
        const currentUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const inviterName = `${currentUser.firstName || ""} ${currentUser.lastName || ""}`.trim();
        const oldMembers = org.members || [];
        const newMembers = body.members || [];
        const oldEmails = oldMembers.map((m3) => m3.email);
        const newEmails = newMembers.map((m3) => m3.email);
        const removedEmails = oldEmails.filter(
          (email) => !newEmails.includes(email)
        );
        if (removedEmails.length > 0) {
          const removedMembers = oldMembers.filter(
            (member) => removedEmails.includes(member.email) && member.user
          );
          await Promise.all(
            removedMembers.map(async (member) => {
              if (!member.user) return;
              try {
                const user = await User_default.findById(member.user);
                if (!user?.clerkId) return;
                const clerkUserToUpdate = await clerk_default.users.getUser(
                  user.clerkId
                );
                const currentMetadata = clerkUserToUpdate.publicMetadata;
                if (currentMetadata.organization?._id === orgId) {
                  await clerk_default.users.updateUser(user.clerkId, {
                    publicMetadata: {
                      ...currentMetadata,
                      organization: null
                    }
                  });
                }
              } catch (error) {
                logger_default.error(
                  `Failed to update Clerk metadata for removed user: ${member.user}`
                );
              }
            })
          );
        }
        const existingMembers = newMembers.filter(
          (member) => oldEmails.includes(member.email) && member.status === "active"
        );
        await Promise.all(
          existingMembers.map(async (newMember) => {
            const oldMember = oldMembers.find((m3) => m3.email === newMember.email);
            if (!oldMember?.user || oldMember.role === newMember.role) return;
            try {
              const user = await User_default.findById(oldMember.user);
              if (!user?.clerkId) return;
              const clerkUserToUpdate = await clerk_default.users.getUser(
                user.clerkId
              );
              const currentMetadata = clerkUserToUpdate.publicMetadata;
              if (currentMetadata.organization?._id === orgId) {
                const role = org.roles.find(
                  (r2) => r2.slug === newMember.role
                );
                if (!role) return;
                await clerk_default.users.updateUser(user.clerkId, {
                  publicMetadata: {
                    ...currentMetadata,
                    organization: {
                      ...currentMetadata.organization,
                      role
                    }
                  }
                });
              }
            } catch (error) {
              logger_default.error(
                `Failed to update role in Clerk metadata for user: ${oldMember.user}`
              );
            }
          })
        );
        const oldPendingEmails = oldMembers.filter((member) => member.status === "pending").map((member) => member.email);
        const newPendingMembers = newMembers.filter(
          (member) => member.status === "pending" && !oldPendingEmails.includes(member.email)
        );
        await Promise.all(
          newPendingMembers.map(async (member) => {
            const role = org.roles.find((r2) => r2.slug === member.role);
            if (!role) {
              logger_default.error(`Role not found for member: ${member.email}`);
              return;
            }
            const reqObj = {
              email: member.email,
              role: role.slug,
              organization: orgId,
              inviter: inviterName,
              inviterId: currentUser?.publicMetadata?._id,
              organizationname: body.name || org.name
            };
            const token = jwt.sign(reqObj, process.env.JWT_SECRET);
            try {
              await loops_default.sendTransactionalEmail({
                transactionalId: process.env.LOOPS_INVITE_EMAIL,
                email: member.email,
                dataVariables: {
                  inviter: inviterName,
                  joinlink: `${process.env.ENTERPRISE_FRONTEND_URL}/join?token=${token}`,
                  organizationname: body.name || org.name
                }
              });
              logger_default.info(`Invite sent to: ${member.email}`);
            } catch (error) {
              logger_default.error(`Failed to send invite to: ${member.email}`);
            }
          })
        );
        const auditLog = {
          user: inviterName,
          userId: currentUser?.publicMetadata?._id,
          action: "Organization Updated",
          type: "info"
        };
        const updatedOrg = await Organization_default.findByIdAndUpdate(
          orgId,
          {
            ...body,
            $push: { auditLog }
          },
          { new: true }
        );
        if (!updatedOrg) {
          return sendError(c2, 404, "Organization not found");
        }
        return sendSuccess(
          c2,
          200,
          "Organization settings updated successfully",
          updatedOrg
        );
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to update organization settings", error);
      }
    };
    updateGeneralSettings = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, [
          "manage_organization"
        ]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const { name, email, website } = await c2.req.json();
        const orgId = perms.data?.organization?._id;
        const emailRegex2 = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const websiteRegex = /(http|https):\/\/[^ "]*/;
        if (!name || !email || !website) {
          return sendError(c2, 400, "Please fill all required fields");
        }
        if (!emailRegex2.test(email)) {
          return sendError(c2, 400, "Invalid email address");
        }
        if (!websiteRegex.test(website)) {
          return sendError(c2, 400, "Invalid website address");
        }
        const user = await clerk_default.users.getUser(c2.get("auth").userId);
        const auditLog = {
          user: user.firstName + " " + user.lastName,
          userId: c2.get("auth")._id,
          action: "Organization General Settings Updated",
          type: "info"
        };
        const org = await Organization_default.findById(orgId).populate("members.user");
        if (!org) {
          return sendError(c2, 404, "Organization not found");
        }
        if (name !== org.name) {
          for (const member of org.members) {
            if (!member.user) continue;
            const userDoc = await User_default.findById(member.user);
            if (!userDoc) continue;
            const u2 = await clerk_default.users.getUser(userDoc?.clerkId);
            const publicMetadata = u2.publicMetadata;
            publicMetadata.organization.name = name;
            await clerk_default.users.updateUser(userDoc.clerkId, {
              publicMetadata
            });
          }
        }
        org.name = name;
        org.email = email;
        org.website = website;
        org.auditLogs.push(auditLog);
        await org.save();
        return sendSuccess(
          c2,
          200,
          "Organization settings updated successfully",
          org
        );
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to update organization settings", error);
      }
    };
    updateLogo = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, [
          "manage_organization"
        ]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const file = await c2.req.json();
        if (!file.logo) {
          return sendError(c2, 400, "Please provide a file");
        }
        const buffer = Buffer.from(
          file.logo.replace(/^data:image\/\w+;base64,/, ""),
          "base64"
        );
        const orgId = perms.data?.organization?._id;
        const uploadParams = {
          Bucket: process.env.R2_S3_BUCKET,
          Key: `org-logos/${orgId}.png`,
          Body: buffer,
          ContentEncoding: "base64",
          ContentType: "image/png"
        };
        const upload = new Upload2({
          client: s3_default,
          params: uploadParams
        });
        await upload.done();
        const user = await clerk_default.users.getUser(c2.get("auth").userId);
        const auditLog = {
          user: user.firstName + " " + user.lastName,
          userId: c2.get("auth")._id,
          action: "Organization Logo Updated",
          type: "info"
        };
        const updatedOrg = await Organization_default.findByIdAndUpdate(orgId, {
          $set: { logo: `org-logos/${orgId}.png` },
          $push: { auditLogs: auditLog }
        });
        if (!updatedOrg) {
          return sendError(c2, 404, "Organization not found");
        }
        return c2.json({ message: "Logo updated successfully" });
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to update organization logo", error);
      }
    };
    updateMembers = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, [
          "manage_organization"
        ]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const { members } = await c2.req.json();
        const orgId = perms.data?.organization?._id;
        const organization = await Organization_default.findById(orgId);
        if (!organization) {
          return sendError(c2, 404, "Organization not found");
        }
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const fullName = `${clerkUser.firstName || ""} ${clerkUser.lastName || ""}`.trim();
        const oldMemberEmails = organization.members.map((member) => member.email);
        const newMemberEmails = members.map((member) => member.email);
        const removedMemberEmails = oldMemberEmails.filter(
          (email) => !newMemberEmails.includes(email)
        );
        const metadataUpdates = [];
        if (removedMemberEmails.length > 0) {
          const removedMembers = organization.members.filter(
            (member) => removedMemberEmails.includes(member.email) && member.user
          );
          metadataUpdates.push(
            ...removedMembers.map(async (member) => {
              if (!member.user) return;
              try {
                const user = await User_default.findById(member.user);
                if (!user?.clerkId) return;
                const clerkUserToUpdate = await clerk_default.users.getUser(
                  user.clerkId
                );
                const currentMetadata = clerkUserToUpdate.publicMetadata;
                if (currentMetadata.organization?._id === orgId) {
                  await clerk_default.users.updateUser(user.clerkId, {
                    publicMetadata: {
                      ...currentMetadata,
                      organization: null
                    }
                  });
                }
              } catch (error) {
                logger_default.error(
                  `Failed to update Clerk metadata for user: ${member.user}`
                );
              }
            })
          );
        }
        const existingMembers = members.filter(
          (member) => oldMemberEmails.includes(member.email) && member.status === "active"
        );
        existingMembers.forEach((newMember) => {
          const oldMember = organization.members.find(
            (m3) => m3.email === newMember.email
          );
          if (!oldMember || !oldMember.user) return;
          if (oldMember.role !== newMember.role) {
            metadataUpdates.push(async () => {
              try {
                const user = await User_default.findById(oldMember.user);
                if (!user?.clerkId) return;
                const clerkUserToUpdate = await clerk_default.users.getUser(
                  user.clerkId
                );
                const currentMetadata = clerkUserToUpdate.publicMetadata;
                if (currentMetadata.organization?._id === orgId) {
                  const role = organization.roles.find(
                    (r2) => r2.slug === newMember.role
                  );
                  await clerk_default.users.updateUser(user.clerkId, {
                    publicMetadata: {
                      ...currentMetadata,
                      organization: {
                        ...currentMetadata.organization,
                        role
                      }
                    }
                  });
                }
              } catch (error) {
                logger_default.error(
                  `Failed to update role in Clerk metadata for user: ${oldMember.user}`
                );
              }
            });
          }
        });
        await Promise.all(metadataUpdates);
        const oldPendingMembers = organization.members.filter(
          (member) => member.status === "pending"
        );
        const newPendingMembers = members.filter(
          (member) => member.status === "pending"
        );
        if (oldPendingMembers.length !== newPendingMembers.length) {
          const newPendingEmails = newPendingMembers.map((m3) => m3.email);
          const oldPendingEmails = oldPendingMembers.map((m3) => m3.email);
          const newInviteEmails = newPendingEmails.filter(
            (email) => !oldPendingEmails.includes(email)
          );
          await Promise.all(
            newInviteEmails.map(async (email) => {
              const member = members.find((m3) => m3.email === email);
              const reqObj = {
                email,
                role: member.role.name,
                roleId: member.role._id,
                organization: orgId,
                inviter: clerkUser.firstName || "",
                inviterId: c2.get("auth")._id,
                organizationname: organization.name
              };
              const token = jwt.sign(reqObj, process.env.JWT_SECRET);
              return loops_default.sendTransactionalEmail({
                transactionalId: process.env.LOOPS_INVITE_EMAIL,
                email,
                dataVariables: {
                  inviter: clerkUser.firstName || "",
                  joinlink: `${process.env.ENTERPRISE_FRONTEND_URL}/join?token=${token}`,
                  organizationname: organization.name
                }
              });
            })
          );
        }
        const finalMembers = members.map((member) => ({
          user: member.user?.id,
          email: member.email,
          role: member.role,
          status: member.status
        }));
        const auditLog = {
          user: fullName,
          userId: c2.get("auth")._id,
          action: "Organization Members Updated",
          type: "info"
        };
        const updatedOrg = await Organization_default.findByIdAndUpdate(
          orgId,
          {
            $set: { members: finalMembers },
            $push: { auditLogs: auditLog }
          },
          { new: true }
        );
        if (!updatedOrg) {
          return sendError(c2, 404, "Organization not found");
        }
        return sendSuccess(
          c2,
          200,
          "Organization settings updated successfully",
          members
        );
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to update organization settings", error);
      }
    };
    updateRoles = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, [
          "manage_organization"
        ]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const { roles } = await c2.req.json();
        const finalRoles = [];
        for (const role of roles) {
          const roleObj = {
            name: role.name,
            slug: role.slug,
            description: role.description,
            permissions: role.permissions,
            default: role.default
          };
          finalRoles.push(roleObj);
        }
        const orgId = perms.data?.organization?._id;
        const organization = await Organization_default.findById(orgId);
        if (!organization) {
          return sendError(c2, 404, "Organization not found");
        }
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const fName = clerkUser.firstName;
        const lName = clerkUser.lastName;
        const auditLog = {
          user: fName + " " + lName,
          userId: c2.get("auth")._id,
          action: "Organization Roles Updated",
          type: "info"
        };
        finalRoles.push(...defaultOrganizationRoles_default);
        const updatedOrg = await Organization_default.findByIdAndUpdate(orgId, {
          $set: { roles: finalRoles },
          $push: { auditLogs: auditLog }
        });
        if (!updatedOrg) {
          return sendError(c2, 404, "Organization not found");
        }
        return sendSuccess(
          c2,
          200,
          "Organization settings updated successfully",
          updatedOrg
        );
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to update organization settings", error);
      }
    };
    getCandidates = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, ["view_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const orgId = perms.data?.organization?._id;
        const posting = await Posting_default.find({ organizationId: orgId }).populate("candidates").lean();
        const candidates = /* @__PURE__ */ new Set();
        const emails = /* @__PURE__ */ new Set();
        for (const post of posting) {
          const postCandidates = post.candidates;
          for (const candidate of postCandidates) {
            const cand = candidate;
            if (!emails.has(cand.email)) {
              emails.add(cand.email);
              candidates.add(cand);
            }
          }
        }
        return sendSuccess(
          c2,
          200,
          "Candidates fetched successfully",
          Array.from(candidates)
        );
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to fetch candidates", error);
      }
    };
    getDepartments = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, [
          "view_organization"
        ]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const orgId = perms.data?.organization?._id;
        const org = await Organization_default.findById(orgId).lean();
        if (!org) {
          return sendError(c2, 404, "Organization not found");
        }
        return sendSuccess(
          c2,
          200,
          "Departments fetched successfully",
          org.departments
        );
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to fetch departments", error);
      }
    };
    updateDepartments = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, [
          "manage_organization"
        ]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const { departments } = await c2.req.json();
        const orgId = perms.data?.organization?._id;
        const user = await clerk_default.users.getUser(c2.get("auth").userId);
        const fName = user.firstName;
        const lName = user.lastName;
        const organization = await Organization_default.findById(orgId);
        if (!organization) {
          return sendError(c2, 404, "Organization not found");
        }
        organization.departments = departments;
        organization.auditLogs.push({
          user: fName + " " + lName,
          userId: c2.get("auth")._id,
          action: "Departments Updated",
          type: "info"
        });
        await organization.save();
        return sendSuccess(c2, 200, "Departments updated successfully", {
          departments: organization.departments
        });
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to update departments", error);
      }
    };
    permissionFieldMap = {
      manage_job: [
        "name",
        "email",
        "website",
        "logo",
        "departments",
        "candidates",
        "postings"
      ],
      view_job: [
        "name",
        "email",
        "website",
        "logo",
        "departments",
        "candidates",
        "postings"
      ],
      view_organization: [
        "name",
        "email",
        "website",
        "logo",
        "members",
        "roles",
        "departments",
        "auditLogs",
        "subscriptions",
        "candidates",
        "postings"
      ],
      manage_organization: [
        "name",
        "email",
        "website",
        "logo",
        "members",
        "roles",
        "departments",
        "auditLogs",
        "subscriptions",
        "candidates",
        "postings"
      ],
      view_billing: ["name", "email", "website", "subscriptions"],
      manage_billing: ["name", "email", "website", "subscriptions"],
      view_analytics: [
        "name",
        "email",
        "website",
        "logo",
        "departments",
        "candidates",
        "postings"
      ],
      interviewer: [
        "name",
        "email",
        "website",
        "logo",
        "departments",
        "candidates",
        "postings"
      ]
    };
    getOrganization = async (c2) => {
      try {
        const userId = c2.get("auth")._id;
        const org = await Organization_default.findOne({
          "members.user": userId
        }).populate("postings").populate("members.user").lean();
        if (!org) {
          return sendError(c2, 404, "Organization not found");
        }
        const member = org.members.find(
          (m3) => m3?.user?._id?.toString() === userId?.toString()
        );
        if (!member?.role) {
          return sendError(c2, 403, "Invalid member access");
        }
        const role = defaultOrganizationRoles_default.find((r2) => r2.slug === member.role);
        if (!role?.permissions?.length) {
          return sendError(c2, 403, "No permissions found for role");
        }
        const fieldsToSelect = [
          ...new Set(
            role.permissions.flatMap(
              // @ts-expect-error - TS doesn't like flatMap
              (permission) => permissionFieldMap[permission] || []
            )
          )
        ];
        const [selectedOrg, userDetails] = await Promise.all([
          Organization_default.findById(org._id).populate("postings").select(fieldsToSelect.join(" ")),
          User_default.findOne({ _id: member.user }).lean()
        ]);
        if (!selectedOrg || !userDetails) {
          return sendError(c2, 404, "Required data not found");
        }
        const user = {
          ...member,
          // @ts-expect-error - TS sucks
          userInfo: userDetails,
          permissions: role.permissions
        };
        const logoUrl = selectedOrg.logo;
        try {
          if (logoUrl) {
            const command = new GetObjectCommand2({
              Bucket: process.env.R2_S3_BUCKET,
              Key: logoUrl
            });
            let data = null;
            try {
              data = await s3_default.send(command);
              const buffer = await data?.Body?.transformToByteArray();
              const base64 = Buffer.from(buffer)?.toString(
                "base64"
              );
              selectedOrg.logo = `data:image/png;base64,${base64}`;
            } catch (e2) {
            }
          }
        } catch (e2) {
          console.log("Failed to fetch logo", e2);
          console.log(e2);
        }
        console.log("Selected Org", selectedOrg.departments);
        return sendSuccess(c2, 200, "Organization fetched successfully", {
          organization: selectedOrg,
          user
        });
      } catch (error) {
        logger_default.error("Failed to fetch organization: " + error);
        return sendError(c2, 500, "Failed to fetch organization", error);
      }
    };
    organizationController_default = {
      createOrganization,
      verifyInvite,
      joinOrganization,
      getSettings,
      updateGeneralSettings,
      getCandidates,
      updateLogo,
      updateMembers,
      updateRoles,
      getDepartments,
      updateDepartments,
      getOrganization,
      updateOrganization
    };
  }
});

// src/controllers/enterprise/notification/notifcationController.ts
var getNotifications, readNotification, notifcationController_default;
var init_notifcationController = __esm({
  "src/controllers/enterprise/notification/notifcationController.ts"() {
    "use strict";
    init_sendResponse();
    init_Organization();
    init_clerk();
    init_logger();
    getNotifications = async (c2) => {
      try {
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const organization = await Organization_default.findOne({
          _id: clerkUser.publicMetadata.orgId
        });
        if (!organization) {
          return sendError(c2, 404, "Organization not found");
        }
        const user = organization.members.find(
          (member) => member.user === clerkUser.id
        );
        if (!user) {
          return sendError(c2, 401, "Unauthorized");
        }
        const notifications = user.notifications;
        return sendSuccess(
          c2,
          200,
          "Notifications fetched successfully",
          notifications
        );
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Internal Server Error");
      }
    };
    readNotification = async (c2) => {
      try {
        const { id } = await c2.req.json();
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const organization = await Organization_default.findOne({
          _id: clerkUser.publicMetadata.orgId
        });
        if (!organization) {
          return sendError(c2, 404, "Organization not found");
        }
        const user = organization.members.find(
          (member) => member.user === clerkUser.id
        );
        if (!user) {
          return sendError(c2, 401, "Unauthorized");
        }
        const notification = user.notifications.find((notif) => notif._id?.toString() === id.toString());
        if (!notification) {
          return sendError(c2, 404, "Notification not found");
        }
        notification.read = true;
        await organization.save();
        return sendSuccess(c2, 200, "Notification marked as read");
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Internal Server Error");
      }
    };
    notifcationController_default = {
      getNotifications,
      readNotification
    };
  }
});

// src/controllers/enterprise/candidates/candidatesController.ts
import { GetObjectCommand as GetObjectCommand3 } from "@aws-sdk/client-s3";
import { getSignedUrl as getSignedUrl2 } from "@aws-sdk/s3-request-presigner";
var getCandidate, getResume, qualifyCandidate, disqualifyCandidate, bulkQualify, bulkDisqualify, qualifyCandidateInCampus, disqualifyCandidateInCampus, bulkQualifyInCampus, bulkDisqualifyInCampus, candidatesController_default;
var init_candidatesController = __esm({
  "src/controllers/enterprise/candidates/candidatesController.ts"() {
    "use strict";
    init_s3();
    init_checkInstitutePermission();
    init_checkOrganizationPermission();
    init_AppliedDrive();
    init_AppliedPosting();
    init_Candidate();
    init_Drive();
    init_Posting();
    init_logger();
    init_sendResponse();
    getCandidate = async (c2) => {
      try {
        const { id } = c2.req.param();
        const candidate = await Candidate_default.findOne({ userId: id });
        let exists = false;
        let candId = "";
        if (!candidate) {
          return sendSuccess(c2, 200, "Candidate not found", { exists, candId });
        }
        let name = candidate.name;
        let phone = candidate.phone;
        exists = true;
        candId = candidate._id.toString();
        return sendSuccess(c2, 200, "Candidate fetched successfully", {
          exists,
          name,
          phone,
          candId,
          posted: candidate.appliedPostings
        });
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    getResume = async (c2) => {
      const checkPerms = await checkOrganizationPermission_default.some(c2, [
        "view_job",
        "view_organization"
      ]);
      if (!checkPerms.allowed) {
        return sendError(c2, 403, "Unauthorized");
      }
      const { id } = c2.req.param();
      const command = new GetObjectCommand3({
        Bucket: process.env.R2_S3_RESUME_BUCKET,
        Key: `${id}.pdf`
      });
      const url = await getSignedUrl2(s3_default, command, { expiresIn: 600 });
      return sendSuccess(c2, 200, "Resume URL", { url });
    };
    qualifyCandidate = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.some(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 403, "Unauthorized");
        }
        const { postingId, _id } = await c2.req.json();
        console.log(postingId, _id);
        const appliedPosting = await AppliedPosting_default.findOne({
          user: _id,
          posting: postingId
        });
        if (!appliedPosting) {
          return sendError(c2, 404, "Applied posting not found");
        }
        appliedPosting.status = "inprogress";
        appliedPosting.disqualifiedStage = null;
        await appliedPosting.save();
        return sendSuccess(c2, 200, "Candidate qualified successfully");
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    disqualifyCandidate = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.some(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 403, "Unauthorized");
        }
        const { _id, postingId, reason } = await c2.req.json();
        console.log(_id, postingId, reason);
        const appliedPosting = await AppliedPosting_default.findOne({
          user: _id,
          posting: postingId
        });
        if (!appliedPosting) {
          return sendError(c2, 404, "Applied posting not found");
        }
        appliedPosting.status = "rejected";
        const posting = await Posting_default.findOne({ _id: postingId });
        if (!posting) {
          return sendError(c2, 404, "Posting not found");
        }
        const stage = posting?.workflow?.steps?.find(
          (step) => step.status === "in-progress"
        )?._id;
        console.log("stage", stage);
        appliedPosting.disqualifiedStage = stage?.toString();
        appliedPosting.disqualifiedReason = reason;
        await appliedPosting.save();
        return sendSuccess(c2, 200, "Candidate disqualified successfully");
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    bulkQualify = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.some(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 403, "Unauthorized");
        }
        const { postingId, candidateIds } = await c2.req.json();
        const appliedPostings = await AppliedPosting_default.find({
          user: { $in: candidateIds },
          posting: postingId
        });
        for (const appliedPosting of appliedPostings) {
          appliedPosting.status = "inprogress";
          appliedPosting.disqualifiedStage = null;
          await appliedPosting.save();
        }
        return sendSuccess(c2, 200, "Candidates qualified successfully");
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    bulkDisqualify = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.some(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 403, "Unauthorized");
        }
        const { postingId, candidateIds, reason } = await c2.req.json();
        const appliedPostings = await AppliedPosting_default.find({
          user: { $in: candidateIds },
          posting: postingId
        });
        const posting = await Posting_default.findOne({ _id: postingId });
        if (!posting) {
          return sendError(c2, 404, "Posting not found");
        }
        const stage = posting?.workflow?.steps?.find(
          (step) => step.status === "in-progress"
        )?._id;
        for (const appliedPosting of appliedPostings) {
          appliedPosting.status = "rejected";
          appliedPosting.disqualifiedStage = stage?.toString();
          appliedPosting.disqualifiedReason = reason;
          await appliedPosting.save();
        }
        return sendSuccess(c2, 200, "Candidates disqualified successfully");
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    qualifyCandidateInCampus = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.some(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 403, "Unauthorized");
        }
        const { driveId, _id } = await c2.req.json();
        console.log(driveId, _id);
        const appliedDrive = await AppliedDrive_default.findOne({
          user: _id,
          drive: driveId
        });
        if (!appliedDrive) {
          return sendError(c2, 404, "Applied drive not found");
        }
        appliedDrive.status = "inprogress";
        appliedDrive.disqualifiedStage = null;
        await appliedDrive.save();
        return sendSuccess(c2, 200, "Candidate qualified successfully");
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    disqualifyCandidateInCampus = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.some(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 403, "Unauthorized");
        }
        const { _id, driveId, reason } = await c2.req.json();
        console.log(_id, driveId, reason);
        const appliedDrive = await AppliedDrive_default.findOne({
          user: _id,
          drive: driveId
        });
        if (!appliedDrive) {
          return sendError(c2, 404, "Applied drive not found");
        }
        appliedDrive.status = "rejected";
        const posting = await Drive_default.findOne({ _id: driveId });
        if (!posting) {
          return sendError(c2, 404, "Posting not found");
        }
        const stage = posting?.workflow?.steps?.find(
          (step) => step.status === "in-progress"
        )?._id;
        console.log("stage", stage);
        appliedDrive.disqualifiedStage = stage?.toString();
        appliedDrive.disqualifiedReason = reason;
        await appliedDrive.save();
        return sendSuccess(c2, 200, "Candidate disqualified successfully");
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    bulkQualifyInCampus = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.some(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 403, "Unauthorized");
        }
        const { driveId, candidateIds } = await c2.req.json();
        const appliedDrives = await AppliedDrive_default.find({
          user: { $in: candidateIds },
          drive: driveId
        });
        for (const appliedDrive of appliedDrives) {
          appliedDrive.status = "inprogress";
          appliedDrive.disqualifiedStage = null;
          await appliedDrive.save();
        }
        return sendSuccess(c2, 200, "Candidates qualified successfully");
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    bulkDisqualifyInCampus = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.some(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 403, "Unauthorized");
        }
        const { driveId, candidateIds, reason } = await c2.req.json();
        const appliedDrives = await AppliedDrive_default.find({
          user: { $in: candidateIds },
          drive: driveId
        });
        const posting = await Drive_default.findOne({ _id: driveId });
        if (!posting) {
          return sendError(c2, 404, "Posting not found");
        }
        const stage = posting?.workflow?.steps?.find(
          (step) => step.status === "in-progress"
        )?._id;
        for (const appliedDrive of appliedDrives) {
          appliedDrive.status = "rejected";
          appliedDrive.disqualifiedStage = stage?.toString();
          appliedDrive.disqualifiedReason = reason;
          await appliedDrive.save();
        }
        return sendSuccess(c2, 200, "Candidates disqualified successfully");
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    candidatesController_default = {
      getCandidate,
      getResume,
      qualifyCandidate,
      disqualifyCandidate,
      bulkQualify,
      bulkDisqualify,
      qualifyCandidateInCampus,
      disqualifyCandidateInCampus,
      bulkQualifyInCampus,
      bulkDisqualifyInCampus
    };
  }
});

// src/routes/organizationRoute.ts
import { Hono as Hono5 } from "hono";
var app5, organizationRoute_default;
var init_organizationRoute = __esm({
  "src/routes/organizationRoute.ts"() {
    "use strict";
    init_organizationController();
    init_notifcationController();
    init_candidatesController();
    app5 = new Hono5();
    app5.get("/notifications", notifcationController_default.getNotifications);
    app5.post("/notifications/read", notifcationController_default.readNotification);
    app5.post("/create", organizationController_default.createOrganization);
    app5.post("/verify", organizationController_default.verifyInvite);
    app5.post("/join", organizationController_default.joinOrganization);
    app5.get("/settings", organizationController_default.getSettings);
    app5.post("/settings/general", organizationController_default.updateGeneralSettings);
    app5.post("/settings/logo", organizationController_default.updateLogo);
    app5.post("/settings/members", organizationController_default.updateMembers);
    app5.post("/settings/roles", organizationController_default.updateRoles);
    app5.get("/candidates", organizationController_default.getCandidates);
    app5.get("/settings", organizationController_default.getDepartments);
    app5.post("/settings/departments", organizationController_default.updateDepartments);
    app5.get("/", organizationController_default.getOrganization);
    app5.put("/", organizationController_default.updateOrganization);
    app5.get("/candidate/:id", candidatesController_default.getCandidate);
    app5.get("/candidate/:id/resume", candidatesController_default.getResume);
    organizationRoute_default = app5;
  }
});

// src/models/Institute.ts
import mongoose16 from "mongoose";
var Schema9, notificationSchema3, roleSchema, memberSchema, departmentSchema, auditLogSchema2, subscriptionSchema2, instituteSchema, Institute, Institute_default;
var init_Institute = __esm({
  "src/models/Institute.ts"() {
    "use strict";
    init_softDelete();
    ({ Schema: Schema9 } = mongoose16);
    notificationSchema3 = new Schema9({
      title: { type: String, required: true },
      description: { type: String, required: true },
      date: { type: Date, default: Date.now },
      read: { type: Boolean, default: false }
    });
    roleSchema = new Schema9(
      {
        name: { type: String, required: true },
        slug: { type: String, required: true },
        default: { type: Boolean, default: false },
        description: { type: String },
        permissions: [{ type: String, required: true }]
      },
      { timestamps: true }
    );
    memberSchema = new Schema9(
      {
        user: { type: Schema9.Types.ObjectId, ref: "User" },
        email: { type: String, required: true },
        role: { type: String, required: true },
        notifications: [{ type: notificationSchema3 }],
        status: {
          type: String,
          enum: ["pending", "active", "inactive"],
          default: "pending"
        }
      },
      { timestamps: true }
    );
    departmentSchema = new Schema9({
      name: { type: String, required: true },
      description: { type: String, required: true }
    });
    auditLogSchema2 = new Schema9(
      {
        action: { type: String, required: true },
        user: { type: String, required: true },
        userId: { type: String, required: true },
        type: {
          type: String,
          enum: ["info", "warning", "error", "success"],
          default: "info",
          required: true
        }
      },
      { timestamps: true }
    );
    subscriptionSchema2 = new Schema9({
      type: {
        type: String,
        enum: ["quarterly", "annual", "trial"],
        required: true
      },
      status: { type: String, enum: ["active", "inactive"], default: "inactive" },
      startedOn: { type: Date, default: Date.now, required: true },
      endsOn: { type: Date, required: true },
      maxStudents: { type: Number, required: true },
      maxFaculty: { type: Number, required: true },
      features: [{ type: String }]
    });
    instituteSchema = new Schema9(
      {
        name: { required: true, type: String },
        email: { required: true, type: String },
        website: { required: true, type: String },
        logo: { type: String },
        address: {
          street: { type: String, required: true },
          city: { type: String, required: true },
          state: { type: String, required: true },
          country: { type: String, required: true },
          zipCode: { type: String, required: true }
        },
        members: [memberSchema],
        roles: [roleSchema],
        departments: [departmentSchema],
        auditLogs: [auditLogSchema2],
        subscription: {
          type: subscriptionSchema2,
          required: true
        },
        drives: [{ type: Schema9.Types.ObjectId, ref: "Drive" }],
        companies: [{ type: Schema9.Types.ObjectId, ref: "Company" }],
        placementGroups: [{ type: Schema9.Types.ObjectId, ref: "PlacementGroup" }],
        candidates: { type: [Schema9.Types.ObjectId], ref: "Candidate" },
        pendingCandidates: { type: [Schema9.Types.ObjectId], ref: "Candidate" },
        code: { type: String, required: true },
        createdBy: { type: Schema9.Types.ObjectId, ref: "User", required: true },
        isDeleted: { type: Boolean, default: false },
        isSample: { type: Boolean, default: false },
        samplePassword: { type: String, default: null },
        sampleSalt: { type: String, default: null }
      },
      { timestamps: true }
    );
    instituteSchema.index({ email: 1 }, { unique: true });
    instituteSchema.index({ name: 1 });
    instituteSchema.index({ "members.email": 1 });
    instituteSchema.index({ "subscription.status": 1 });
    instituteSchema.index({ isDeleted: 1 });
    instituteSchema.plugin(softDeletePlugin);
    Institute = mongoose16.model("Institute", instituteSchema);
    Institute_default = Institute;
  }
});

// ../common/data/defaultInstituteRoles.ts
var defaultInstituteRoles, defaultInstituteRoles_default;
var init_defaultInstituteRoles = __esm({
  "../common/data/defaultInstituteRoles.ts"() {
    "use strict";
    defaultInstituteRoles = [
      {
        name: "Administrator",
        slug: "administrator",
        default: true,
        description: "Administrator role",
        permissions: [
          "manage_drive",
          "view_drive",
          "verify_candidates",
          "view_institute",
          "manage_institute",
          "view_billing",
          "manage_billing"
        ]
      },
      {
        name: "Read Only",
        slug: "read-only",
        default: true,
        description: "Read Only role",
        permissions: ["view_drive", "view_institute", "view_billing"]
      },
      {
        name: "Finance",
        slug: "finance",
        default: true,
        description: "Finance role",
        permissions: ["view_billing", "manage_billing"]
      },
      {
        name: "Drive Manager",
        slug: "drive-manager",
        default: true,
        description: "Drive Manager role",
        permissions: ["manage_drive", "view_drive"]
      },
      {
        name: "Profile Verification Officer",
        slug: "profile-verification-officer",
        default: true,
        description: "Profile Verification Officer role",
        permissions: ["verify_candidates", "view_candidates"]
      }
    ];
    defaultInstituteRoles_default = defaultInstituteRoles;
  }
});

// src/data/institutePermissions.ts
var institutePermissions, institutePermissions_default;
var init_institutePermissions = __esm({
  "src/data/institutePermissions.ts"() {
    "use strict";
    institutePermissions = [
      "manage_drive",
      "view_drive",
      "verify_candidate",
      "view_institute",
      "manage_institute",
      "view_billing",
      "manage_billing"
    ];
    institutePermissions_default = institutePermissions;
  }
});

// src/utils/validation.ts
var sanitizeInput, validateEmail, validateWebsite;
var init_validation = __esm({
  "src/utils/validation.ts"() {
    "use strict";
    sanitizeInput = (input) => {
      if (input === null || input === void 0) {
        return "";
      }
      const str = String(input).trim();
      return str.replace(/<[^>]*>/g, "").replace(/javascript:/gi, "").replace(/on\w+=/gi, "").replace(/['";]/g, "").replace(/--/g, "").replace(/\/\*/g, "").replace(/\*\//g, "").replace(/union\s+select/gi, "").replace(/exec\s*\(/gi, "");
    };
    validateEmail = (email) => {
      if (!email) return false;
      const emailRegex2 = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return emailRegex2.test(String(email).toLowerCase());
    };
    validateWebsite = (website) => {
      if (!website) return false;
      try {
        const url = new URL(website);
        if (url.protocol !== "http:" && url.protocol !== "https:") {
          return false;
        }
        if (!url.hostname.includes(".")) {
          return false;
        }
        const tld = url.hostname.split(".").pop() || "";
        if (tld.length < 2) {
          return false;
        }
        return true;
      } catch (error) {
        return false;
      }
    };
  }
});

// src/utils/getUserWithPermission.ts
var getCampusUsersWithPermission, getUserWithPermission_default;
var init_getUserWithPermission = __esm({
  "src/utils/getUserWithPermission.ts"() {
    "use strict";
    getCampusUsersWithPermission = async ({
      institute,
      permissions
    }) => {
      const instituteWithType = institute;
      const roles = instituteWithType.roles.filter(
        (role) => role.permissions.some((permission) => permissions.includes(permission))
      );
      console.log("permissions", permissions);
      console.log("instituteWithType", instituteWithType.roles);
      console.log("roles", roles);
      const members = instituteWithType.members.filter(
        (member) => roles.some((role) => role.slug?.toString() === member.role.toString())
      );
      console.log("members", members);
      const users = members.map((member) => member?.user).filter(Boolean);
      return users;
    };
    getUserWithPermission_default = getCampusUsersWithPermission;
  }
});

// src/models/Notification.ts
import mongoose17 from "mongoose";
var notificationSchema4, Notification, Notification_default;
var init_Notification = __esm({
  "src/models/Notification.ts"() {
    "use strict";
    init_softDelete();
    notificationSchema4 = new mongoose17.Schema({
      userIds: [
        { type: mongoose17.Schema.Types.ObjectId, ref: "User", required: true }
      ],
      title: { type: String, required: true },
      message: { type: String, required: true },
      platform: {
        type: String,
        enum: ["enterprise", "campus", "code", "candidate", "meet"],
        required: true
      },
      readBy: [{ type: mongoose17.Schema.Types.ObjectId, ref: "User" }],
      createdAt: { type: Date, default: Date.now }
    });
    notificationSchema4.plugin(softDeletePlugin);
    Notification = mongoose17.model("Notification", notificationSchema4);
    Notification_default = Notification;
  }
});

// src/utils/sendNotification.ts
async function sendNotificationToCandidate({
  candidateIds,
  title,
  message
}) {
  try {
    const notification = new Notification_default({
      userIds: candidateIds,
      title,
      message,
      platform: "candidate"
    });
    await notification.save();
    return notification;
  } catch (err) {
    console.error("Error sending notification:", err);
    throw err;
  }
}
async function sendNotificationToCampus({
  userIds,
  title,
  message
}) {
  try {
    const notification = new Notification_default({
      userIds,
      title,
      message,
      platform: "campus"
    });
    await notification.save();
    return notification;
  } catch (err) {
    console.error("Error sending notification:", err);
    throw err;
  }
}
var init_sendNotification = __esm({
  "src/utils/sendNotification.ts"() {
    "use strict";
    init_Notification();
  }
});

// node_modules/@faker-js/faker/dist/chunk-KERBADJJ.js
var e, a, r, Za, o, n, i, t, l, s, d, u, c, m, h, y, p, g, b, C, S, _a, k, f, v, A, Qa, B, T, M, w, L, D, R, Xa, P, H, $a, W, G, er, F, N, E, J, ar, I, K, O, x, z, V, Y, j, q, rr, U, Z, or, _, Q, X, nr, $, ee, ae, re, oe, ne, ie, te, ir, le, se, de, ue, tr, ce, me, he, ye, pe, ge, be, Ce, Se, ke, fe, lr, ve, Ae, Be, Te, Me, we, sr, Le, De, Re, Pe, dr, He, We, Ge, Fe, Ne, Ee, Je, Ie, Ke, Oe, xe, ze, Ve, Ye, je, qe, Ue, Ze, _e, ur, Qe, Xe, cr, $e, mr, ea, aa, ra, oa, na, hr, ia, ta, la, sa, da, ua, ca, ma, ha, ya, pa, ga, ba, Ca, Sa, ka, fa, va, yr, Aa, Ba, Ta, Ma, pr, wa, gr, La, Da, Ra, br, Pa, Ha, Wa, Cr, Ga, Fa, Na, Ea, Ja, Ia, Sr, Ka, Oa, xa, za, Va, Ya, ja, qa, kr, Ua, fr, ys;
var init_chunk_KERBADJJ = __esm({
  "node_modules/@faker-js/faker/dist/chunk-KERBADJJ.js"() {
    "use strict";
    e = [{ name: "Aegean Airlines", iataCode: "A3" }, { name: "Aeroflot", iataCode: "SU" }, { name: "Aerolineas Argentinas", iataCode: "AR" }, { name: "Aeromexico", iataCode: "AM" }, { name: "Air Algerie", iataCode: "AH" }, { name: "Air Arabia", iataCode: "G9" }, { name: "Air Canada", iataCode: "AC" }, { name: "Air China", iataCode: "CA" }, { name: "Air Europa", iataCode: "UX" }, { name: "Air France", iataCode: "AF" }, { name: "Air India", iataCode: "AI" }, { name: "Air Mauritius", iataCode: "MK" }, { name: "Air New Zealand", iataCode: "NZ" }, { name: "Air Niugini", iataCode: "PX" }, { name: "Air Tahiti", iataCode: "VT" }, { name: "Air Tahiti Nui", iataCode: "TN" }, { name: "Air Transat", iataCode: "TS" }, { name: "AirAsia X", iataCode: "D7" }, { name: "AirAsia", iataCode: "AK" }, { name: "Aircalin", iataCode: "SB" }, { name: "Alaska Airlines", iataCode: "AS" }, { name: "Alitalia", iataCode: "AZ" }, { name: "All Nippon Airways", iataCode: "NH" }, { name: "Allegiant Air", iataCode: "G4" }, { name: "American Airlines", iataCode: "AA" }, { name: "Asiana Airlines", iataCode: "OZ" }, { name: "Avianca", iataCode: "AV" }, { name: "Azul Linhas Aereas Brasileiras", iataCode: "AD" }, { name: "Azur Air", iataCode: "ZF" }, { name: "Beijing Capital Airlines", iataCode: "JD" }, { name: "Boliviana de Aviacion", iataCode: "OB" }, { name: "British Airways", iataCode: "BA" }, { name: "Cathay Pacific", iataCode: "CX" }, { name: "Cebu Pacific Air", iataCode: "5J" }, { name: "China Airlines", iataCode: "CI" }, { name: "China Eastern Airlines", iataCode: "MU" }, { name: "China Southern Airlines", iataCode: "CZ" }, { name: "Condor", iataCode: "DE" }, { name: "Copa Airlines", iataCode: "CM" }, { name: "Delta Air Lines", iataCode: "DL" }, { name: "Easyfly", iataCode: "VE" }, { name: "EasyJet", iataCode: "U2" }, { name: "EcoJet", iataCode: "8J" }, { name: "Egyptair", iataCode: "MS" }, { name: "El Al", iataCode: "LY" }, { name: "Emirates Airlines", iataCode: "EK" }, { name: "Ethiopian Airlines", iataCode: "ET" }, { name: "Etihad Airways", iataCode: "EY" }, { name: "EVA Air", iataCode: "BR" }, { name: "Fiji Airways", iataCode: "FJ" }, { name: "Finnair", iataCode: "AY" }, { name: "Flybondi", iataCode: "FO" }, { name: "Flydubai", iataCode: "FZ" }, { name: "FlySafair", iataCode: "FA" }, { name: "Frontier Airlines", iataCode: "F9" }, { name: "Garuda Indonesia", iataCode: "GA" }, { name: "Go First", iataCode: "G8" }, { name: "Gol Linhas Aereas Inteligentes", iataCode: "G3" }, { name: "Hainan Airlines", iataCode: "HU" }, { name: "Hawaiian Airlines", iataCode: "HA" }, { name: "IndiGo Airlines", iataCode: "6E" }, { name: "Japan Airlines", iataCode: "JL" }, { name: "Jeju Air", iataCode: "7C" }, { name: "Jet2", iataCode: "LS" }, { name: "JetBlue Airways", iataCode: "B6" }, { name: "JetSMART", iataCode: "JA" }, { name: "Juneyao Airlines", iataCode: "HO" }, { name: "Kenya Airways", iataCode: "KQ" }, { name: "KLM Royal Dutch Airlines", iataCode: "KL" }, { name: "Korean Air", iataCode: "KE" }, { name: "Kulula.com", iataCode: "MN" }, { name: "LATAM Airlines", iataCode: "LA" }, { name: "Lion Air", iataCode: "JT" }, { name: "LOT Polish Airlines", iataCode: "LO" }, { name: "Lufthansa", iataCode: "LH" }, { name: "Libyan Airlines", iataCode: "LN" }, { name: "Linea Aerea Amaszonas", iataCode: "Z8" }, { name: "Malaysia Airlines", iataCode: "MH" }, { name: "Nordwind Airlines", iataCode: "N4" }, { name: "Norwegian Air Shuttle", iataCode: "DY" }, { name: "Oman Air", iataCode: "WY" }, { name: "Pakistan International Airlines", iataCode: "PK" }, { name: "Pegasus Airlines", iataCode: "PC" }, { name: "Philippine Airlines", iataCode: "PR" }, { name: "Qantas Group", iataCode: "QF" }, { name: "Qatar Airways", iataCode: "QR" }, { name: "Republic Airways", iataCode: "YX" }, { name: "Royal Air Maroc", iataCode: "AT" }, { name: "Ryanair", iataCode: "FR" }, { name: "S7 Airlines", iataCode: "S7" }, { name: "SAS", iataCode: "SK" }, { name: "Satena", iataCode: "9R" }, { name: "Saudia", iataCode: "SV" }, { name: "Shandong Airlines", iataCode: "SC" }, { name: "Sichuan Airlines", iataCode: "3U" }, { name: "Singapore Airlines", iataCode: "SQ" }, { name: "Sky Airline", iataCode: "H2" }, { name: "SkyWest Airlines", iataCode: "OO" }, { name: "South African Airways", iataCode: "SA" }, { name: "Southwest Airlines", iataCode: "WN" }, { name: "SpiceJet", iataCode: "SG" }, { name: "Spirit Airlines", iataCode: "NK" }, { name: "Spring Airlines", iataCode: "9S" }, { name: "SriLankan Airlines", iataCode: "UL" }, { name: "Star Peru", iataCode: "2I" }, { name: "Sun Country Airlines", iataCode: "SY" }, { name: "SunExpress", iataCode: "XQ" }, { name: "TAP Air Portugal", iataCode: "TP" }, { name: "Thai AirAsia", iataCode: "FD" }, { name: "Thai Airways", iataCode: "TG" }, { name: "TUI Airways", iataCode: "BY" }, { name: "Tunisair", iataCode: "TU" }, { name: "Turkish Airlines", iataCode: "TK" }, { name: "Ukraine International", iataCode: "PS" }, { name: "United Airlines", iataCode: "UA" }, { name: "Ural Airlines", iataCode: "U6" }, { name: "VietJet Air", iataCode: "VJ" }, { name: "Vietnam Airlines", iataCode: "VN" }, { name: "Virgin Atlantic Airways", iataCode: "VS" }, { name: "Virgin Australia", iataCode: "VA" }, { name: "VivaAerobus", iataCode: "VB" }, { name: "VOEPASS Linhas Aereas", iataCode: "2Z" }, { name: "Volaris", iataCode: "Y4" }, { name: "WestJet", iataCode: "WS" }, { name: "Wingo", iataCode: "P5" }, { name: "Wizz Air", iataCode: "W6" }];
    a = [{ name: "Aerospatiale/BAC Concorde", iataTypeCode: "SSC" }, { name: "Airbus A300", iataTypeCode: "AB3" }, { name: "Airbus A310", iataTypeCode: "310" }, { name: "Airbus A310-200", iataTypeCode: "312" }, { name: "Airbus A310-300", iataTypeCode: "313" }, { name: "Airbus A318", iataTypeCode: "318" }, { name: "Airbus A319", iataTypeCode: "319" }, { name: "Airbus A319neo", iataTypeCode: "31N" }, { name: "Airbus A320", iataTypeCode: "320" }, { name: "Airbus A320neo", iataTypeCode: "32N" }, { name: "Airbus A321", iataTypeCode: "321" }, { name: "Airbus A321neo", iataTypeCode: "32Q" }, { name: "Airbus A330", iataTypeCode: "330" }, { name: "Airbus A330-200", iataTypeCode: "332" }, { name: "Airbus A330-300", iataTypeCode: "333" }, { name: "Airbus A330-800neo", iataTypeCode: "338" }, { name: "Airbus A330-900neo", iataTypeCode: "339" }, { name: "Airbus A340", iataTypeCode: "340" }, { name: "Airbus A340-200", iataTypeCode: "342" }, { name: "Airbus A340-300", iataTypeCode: "343" }, { name: "Airbus A340-500", iataTypeCode: "345" }, { name: "Airbus A340-600", iataTypeCode: "346" }, { name: "Airbus A350", iataTypeCode: "350" }, { name: "Airbus A350-900", iataTypeCode: "359" }, { name: "Airbus A350-1000", iataTypeCode: "351" }, { name: "Airbus A380", iataTypeCode: "380" }, { name: "Airbus A380-800", iataTypeCode: "388" }, { name: "Antonov An-12", iataTypeCode: "ANF" }, { name: "Antonov An-24", iataTypeCode: "AN4" }, { name: "Antonov An-26", iataTypeCode: "A26" }, { name: "Antonov An-28", iataTypeCode: "A28" }, { name: "Antonov An-30", iataTypeCode: "A30" }, { name: "Antonov An-32", iataTypeCode: "A32" }, { name: "Antonov An-72", iataTypeCode: "AN7" }, { name: "Antonov An-124 Ruslan", iataTypeCode: "A4F" }, { name: "Antonov An-140", iataTypeCode: "A40" }, { name: "Antonov An-148", iataTypeCode: "A81" }, { name: "Antonov An-158", iataTypeCode: "A58" }, { name: "Antonov An-225 Mriya", iataTypeCode: "A5F" }, { name: "Boeing 707", iataTypeCode: "703" }, { name: "Boeing 717", iataTypeCode: "717" }, { name: "Boeing 720B", iataTypeCode: "B72" }, { name: "Boeing 727", iataTypeCode: "727" }, { name: "Boeing 727-100", iataTypeCode: "721" }, { name: "Boeing 727-200", iataTypeCode: "722" }, { name: "Boeing 737 MAX 7", iataTypeCode: "7M7" }, { name: "Boeing 737 MAX 8", iataTypeCode: "7M8" }, { name: "Boeing 737 MAX 9", iataTypeCode: "7M9" }, { name: "Boeing 737 MAX 10", iataTypeCode: "7MJ" }, { name: "Boeing 737", iataTypeCode: "737" }, { name: "Boeing 737-100", iataTypeCode: "731" }, { name: "Boeing 737-200", iataTypeCode: "732" }, { name: "Boeing 737-300", iataTypeCode: "733" }, { name: "Boeing 737-400", iataTypeCode: "734" }, { name: "Boeing 737-500", iataTypeCode: "735" }, { name: "Boeing 737-600", iataTypeCode: "736" }, { name: "Boeing 737-700", iataTypeCode: "73G" }, { name: "Boeing 737-800", iataTypeCode: "738" }, { name: "Boeing 737-900", iataTypeCode: "739" }, { name: "Boeing 747", iataTypeCode: "747" }, { name: "Boeing 747-100", iataTypeCode: "741" }, { name: "Boeing 747-200", iataTypeCode: "742" }, { name: "Boeing 747-300", iataTypeCode: "743" }, { name: "Boeing 747-400", iataTypeCode: "744" }, { name: "Boeing 747-400D", iataTypeCode: "74J" }, { name: "Boeing 747-8", iataTypeCode: "748" }, { name: "Boeing 747SP", iataTypeCode: "74L" }, { name: "Boeing 747SR", iataTypeCode: "74R" }, { name: "Boeing 757", iataTypeCode: "757" }, { name: "Boeing 757-200", iataTypeCode: "752" }, { name: "Boeing 757-300", iataTypeCode: "753" }, { name: "Boeing 767", iataTypeCode: "767" }, { name: "Boeing 767-200", iataTypeCode: "762" }, { name: "Boeing 767-300", iataTypeCode: "763" }, { name: "Boeing 767-400", iataTypeCode: "764" }, { name: "Boeing 777", iataTypeCode: "777" }, { name: "Boeing 777-200", iataTypeCode: "772" }, { name: "Boeing 777-200LR", iataTypeCode: "77L" }, { name: "Boeing 777-300", iataTypeCode: "773" }, { name: "Boeing 777-300ER", iataTypeCode: "77W" }, { name: "Boeing 787", iataTypeCode: "787" }, { name: "Boeing 787-8", iataTypeCode: "788" }, { name: "Boeing 787-9", iataTypeCode: "789" }, { name: "Boeing 787-10", iataTypeCode: "781" }, { name: "Canadair Challenger", iataTypeCode: "CCJ" }, { name: "Canadair CL-44", iataTypeCode: "CL4" }, { name: "Canadair Regional Jet 100", iataTypeCode: "CR1" }, { name: "Canadair Regional Jet 200", iataTypeCode: "CR2" }, { name: "Canadair Regional Jet 700", iataTypeCode: "CR7" }, { name: "Canadair Regional Jet 705", iataTypeCode: "CRA" }, { name: "Canadair Regional Jet 900", iataTypeCode: "CR9" }, { name: "Canadair Regional Jet 1000", iataTypeCode: "CRK" }, { name: "De Havilland Canada DHC-2 Beaver", iataTypeCode: "DHP" }, { name: "De Havilland Canada DHC-2 Turbo-Beaver", iataTypeCode: "DHR" }, { name: "De Havilland Canada DHC-3 Otter", iataTypeCode: "DHL" }, { name: "De Havilland Canada DHC-4 Caribou", iataTypeCode: "DHC" }, { name: "De Havilland Canada DHC-6 Twin Otter", iataTypeCode: "DHT" }, { name: "De Havilland Canada DHC-7 Dash 7", iataTypeCode: "DH7" }, { name: "De Havilland Canada DHC-8-100 Dash 8 / 8Q", iataTypeCode: "DH1" }, { name: "De Havilland Canada DHC-8-200 Dash 8 / 8Q", iataTypeCode: "DH2" }, { name: "De Havilland Canada DHC-8-300 Dash 8 / 8Q", iataTypeCode: "DH3" }, { name: "De Havilland Canada DHC-8-400 Dash 8Q", iataTypeCode: "DH4" }, { name: "De Havilland DH.104 Dove", iataTypeCode: "DHD" }, { name: "De Havilland DH.114 Heron", iataTypeCode: "DHH" }, { name: "Douglas DC-3", iataTypeCode: "D3F" }, { name: "Douglas DC-6", iataTypeCode: "D6F" }, { name: "Douglas DC-8-50", iataTypeCode: "D8T" }, { name: "Douglas DC-8-62", iataTypeCode: "D8L" }, { name: "Douglas DC-8-72", iataTypeCode: "D8Q" }, { name: "Douglas DC-9-10", iataTypeCode: "D91" }, { name: "Douglas DC-9-20", iataTypeCode: "D92" }, { name: "Douglas DC-9-30", iataTypeCode: "D93" }, { name: "Douglas DC-9-40", iataTypeCode: "D94" }, { name: "Douglas DC-9-50", iataTypeCode: "D95" }, { name: "Douglas DC-10", iataTypeCode: "D10" }, { name: "Douglas DC-10-10", iataTypeCode: "D1X" }, { name: "Douglas DC-10-30", iataTypeCode: "D1Y" }, { name: "Embraer 170", iataTypeCode: "E70" }, { name: "Embraer 175", iataTypeCode: "E75" }, { name: "Embraer 190", iataTypeCode: "E90" }, { name: "Embraer 195", iataTypeCode: "E95" }, { name: "Embraer E190-E2", iataTypeCode: "290" }, { name: "Embraer E195-E2", iataTypeCode: "295" }, { name: "Embraer EMB.110 Bandeirante", iataTypeCode: "EMB" }, { name: "Embraer EMB.120 Brasilia", iataTypeCode: "EM2" }, { name: "Embraer Legacy 600", iataTypeCode: "ER3" }, { name: "Embraer Phenom 100", iataTypeCode: "EP1" }, { name: "Embraer Phenom 300", iataTypeCode: "EP3" }, { name: "Embraer RJ135", iataTypeCode: "ER3" }, { name: "Embraer RJ140", iataTypeCode: "ERD" }, { name: "Embraer RJ145 Amazon", iataTypeCode: "ER4" }, { name: "Ilyushin IL18", iataTypeCode: "IL8" }, { name: "Ilyushin IL62", iataTypeCode: "IL6" }, { name: "Ilyushin IL76", iataTypeCode: "IL7" }, { name: "Ilyushin IL86", iataTypeCode: "ILW" }, { name: "Ilyushin IL96-300", iataTypeCode: "I93" }, { name: "Ilyushin IL114", iataTypeCode: "I14" }, { name: "Lockheed L-182 / 282 / 382 (L-100) Hercules", iataTypeCode: "LOH" }, { name: "Lockheed L-188 Electra", iataTypeCode: "LOE" }, { name: "Lockheed L-1011 Tristar", iataTypeCode: "L10" }, { name: "Lockheed L-1049 Super Constellation", iataTypeCode: "L49" }, { name: "McDonnell Douglas MD11", iataTypeCode: "M11" }, { name: "McDonnell Douglas MD80", iataTypeCode: "M80" }, { name: "McDonnell Douglas MD81", iataTypeCode: "M81" }, { name: "McDonnell Douglas MD82", iataTypeCode: "M82" }, { name: "McDonnell Douglas MD83", iataTypeCode: "M83" }, { name: "McDonnell Douglas MD87", iataTypeCode: "M87" }, { name: "McDonnell Douglas MD88", iataTypeCode: "M88" }, { name: "McDonnell Douglas MD90", iataTypeCode: "M90" }, { name: "Sukhoi Superjet 100-95", iataTypeCode: "SU9" }, { name: "Tupolev Tu-134", iataTypeCode: "TU3" }, { name: "Tupolev Tu-154", iataTypeCode: "TU5" }, { name: "Tupolev Tu-204", iataTypeCode: "T20" }, { name: "Yakovlev Yak-40", iataTypeCode: "YK4" }, { name: "Yakovlev Yak-42", iataTypeCode: "YK2" }];
    r = [{ name: "Adelaide International Airport", iataCode: "ADL" }, { name: "Adolfo Suarez Madrid-Barajas Airport", iataCode: "MAD" }, { name: "Aeroparque Jorge Newbery Airport", iataCode: "AEP" }, { name: "Afonso Pena International Airport", iataCode: "CWB" }, { name: "Alfonso Bonilla Aragon International Airport", iataCode: "CLO" }, { name: "Amsterdam Airport Schiphol", iataCode: "AMS" }, { name: "Arturo Merino Benitez International Airport", iataCode: "SCL" }, { name: "Auckland International Airport", iataCode: "AKL" }, { name: "Beijing Capital International Airport", iataCode: "PEK" }, { name: "Belem Val de Cans International Airport", iataCode: "BEL" }, { name: "Belo Horizonte Tancredo Neves International Airport", iataCode: "CNF" }, { name: "Berlin-Tegel Airport", iataCode: "TXL" }, { name: "Bole International Airport", iataCode: "ADD" }, { name: "Brasilia-Presidente Juscelino Kubitschek International Airport", iataCode: "BSB" }, { name: "Brisbane International Airport", iataCode: "BNE" }, { name: "Brussels Airport", iataCode: "BRU" }, { name: "Cairns Airport", iataCode: "CNS" }, { name: "Cairo International Airport", iataCode: "CAI" }, { name: "Canberra Airport", iataCode: "CBR" }, { name: "Capetown International Airport", iataCode: "CPT" }, { name: "Charles de Gaulle International Airport", iataCode: "CDG" }, { name: "Charlotte Douglas International Airport", iataCode: "CLT" }, { name: "Chengdu Shuangliu International Airport", iataCode: "CTU" }, { name: "Chhatrapati Shivaji International Airport", iataCode: "BOM" }, { name: "Chicago O'Hare International Airport", iataCode: "ORD" }, { name: "Chongqing Jiangbei International Airport", iataCode: "CKG" }, { name: "Christchurch International Airport", iataCode: "CHC" }, { name: "Copenhagen Kastrup Airport", iataCode: "CPH" }, { name: "Dallas Fort Worth International Airport", iataCode: "DFW" }, { name: "Daniel K. Inouye International Airport", iataCode: "HNL" }, { name: "Denver International Airport", iataCode: "DEN" }, { name: "Don Mueang International Airport", iataCode: "DMK" }, { name: "Dubai International Airport", iataCode: "DXB" }, { name: "Dublin Airport", iataCode: "DUB" }, { name: "Dusseldorf Airport", iataCode: "DUS" }, { name: "El Dorado International Airport", iataCode: "BOG" }, { name: "Eleftherios Venizelos International Airport", iataCode: "ATH" }, { name: "Faa'a International Airport", iataCode: "PPT" }, { name: "Fort Lauderdale Hollywood International Airport", iataCode: "FLL" }, { name: "Fortaleza Pinto Martins International Airport", iataCode: "FOR" }, { name: "Frankfurt am Main Airport", iataCode: "FRA" }, { name: "George Bush Intercontinental Houston Airport", iataCode: "IAH" }, { name: "Gold Coast Airport", iataCode: "OOL" }, { name: "Guarulhos - Governador Andre Franco Montoro International Airport", iataCode: "GRU" }, { name: "Hartsfield-Jackson Atlanta International Airport", iataCode: "ATL" }, { name: "Helsinki Vantaa Airport", iataCode: "HEL" }, { name: "Hobart International Airport", iataCode: "HBA" }, { name: "Hong Kong International Airport", iataCode: "HKG" }, { name: "Houari Boumediene Airport", iataCode: "ALG" }, { name: "Hurgada International Airport", iataCode: "HRG" }, { name: "Incheon International Airport", iataCode: "ICN" }, { name: "Indira Gandhi International Airport", iataCode: "DEL" }, { name: "Istanbul Airport", iataCode: "IST" }, { name: "Jacksons International Airport", iataCode: "POM" }, { name: "Jeju International Airport", iataCode: "CJU" }, { name: "John F Kennedy International Airport", iataCode: "JFK" }, { name: "Jorge Chavez International Airport", iataCode: "LIM" }, { name: "Jose Maria Cordova International Airport", iataCode: "MDE" }, { name: "Josep Tarradellas Barcelona-El Prat Airport", iataCode: "BCN" }, { name: "Kahului Airport", iataCode: "OGG" }, { name: "King Abdulaziz International Airport", iataCode: "JED" }, { name: "Kuala Lumpur International Airport", iataCode: "KUL" }, { name: "Kunming Changshui International Airport", iataCode: "KMG" }, { name: "La Tontouta International Airport", iataCode: "NOU" }, { name: "Leonardo da Vinci-Fiumicino Airport", iataCode: "FCO" }, { name: "London Heathrow Airport", iataCode: "LHR" }, { name: "Los Angeles International Airport", iataCode: "LAX" }, { name: "McCarran International Airport", iataCode: "LAS" }, { name: "Melbourne International Airport", iataCode: "MEL" }, { name: "Mexico City International Airport", iataCode: "MEX" }, { name: "Miami International Airport", iataCode: "MIA" }, { name: "Ministro Pistarini International Airport", iataCode: "EZE" }, { name: "Minneapolis-St Paul International/Wold-Chamberlain Airport", iataCode: "MSP" }, { name: "Mohammed V International Airport", iataCode: "CMN" }, { name: "Moscow Domodedovo Airport", iataCode: "DME" }, { name: "Munich Airport", iataCode: "MUC" }, { name: "Murtala Muhammed International Airport", iataCode: "LOS" }, { name: "Nadi International Airport", iataCode: "NAN" }, { name: "Nairobi Jomo Kenyatta International Airport", iataCode: "NBO" }, { name: "Narita International Airport", iataCode: "NRT" }, { name: "Newark Liberty International Airport", iataCode: "EWR" }, { name: "Ninoy Aquino International Airport", iataCode: "MNL" }, { name: "Noumea Magenta Airport", iataCode: "GEA" }, { name: "O. R. Tambo International Airport", iataCode: "JNB" }, { name: "Orlando International Airport", iataCode: "MCO" }, { name: "Oslo Lufthavn", iataCode: "OSL" }, { name: "Perth Airport", iataCode: "PER" }, { name: "Phoenix Sky Harbor International Airport", iataCode: "PHX" }, { name: "Recife Guararapes-Gilberto Freyre International Airport", iataCode: "REC" }, { name: "Rio de Janeiro Galeao International Airport", iataCode: "GIG" }, { name: "Salgado Filho International Airport", iataCode: "POA" }, { name: "Salvador Deputado Luis Eduardo Magalhaes International Airport", iataCode: "SSA" }, { name: "San Francisco International Airport", iataCode: "SFO" }, { name: "Santos Dumont Airport", iataCode: "SDU" }, { name: "Sao Paulo-Congonhas Airport", iataCode: "CGH" }, { name: "Seattle Tacoma International Airport", iataCode: "SEA" }, { name: "Shanghai Hongqiao International Airport", iataCode: "SHA" }, { name: "Shanghai Pudong International Airport", iataCode: "PVG" }, { name: "Shenzhen Bao'an International Airport", iataCode: "SZX" }, { name: "Sheremetyevo International Airport", iataCode: "SVO" }, { name: "Singapore Changi Airport", iataCode: "SIN" }, { name: "Soekarno-Hatta International Airport", iataCode: "CGK" }, { name: 'Stockholm-Arlanda Airport"', iataCode: "ARN" }, { name: "Suvarnabhumi Airport", iataCode: "BKK" }, { name: "Sydney Kingsford Smith International Airport", iataCode: "SYD" }, { name: "Taiwan Taoyuan International Airport", iataCode: "TPE" }, { name: "Tan Son Nhat International Airport", iataCode: "SGN" }, { name: "Tokyo Haneda International Airport", iataCode: "HND" }, { name: "Toronto Pearson International Airport", iataCode: "YYZ" }, { name: "Tunis Carthage International Airport", iataCode: "TUN" }, { name: "Vancouver International Airport", iataCode: "YVR" }, { name: "Vienna International Airport", iataCode: "VIE" }, { name: "Viracopos International Airport", iataCode: "VCP" }, { name: "Vnukovo International Airport", iataCode: "VKO" }, { name: "Wellington International Airport", iataCode: "WLG" }, { name: "Xi'an Xianyang International Airport", iataCode: "XIY" }, { name: "Zhukovsky International Airport", iataCode: "ZIA" }, { name: "Zurich Airport", iataCode: "ZRH" }];
    Za = { airline: e, airplane: a, airport: r };
    o = Za;
    n = ["American black bear", "Asian black bear", "Brown bear", "Giant panda", "Polar bear", "Sloth bear", "Spectacled bear", "Sun bear"];
    i = ["Abert's Towhee", "Acadian Flycatcher", "Acorn Woodpecker", "Alder Flycatcher", "Aleutian Tern", "Allen's Hummingbird", "Altamira Oriole", "American Avocet", "American Bittern", "American Black Duck", "American Coot", "American Crow", "American Dipper", "American Golden-Plover", "American Goldfinch", "American Kestrel", "American Oystercatcher", "American Pipit", "American Redstart", "American Robin", "American Tree Sparrow", "American White Pelican", "American Wigeon", "American Woodcock", "Ancient Murrelet", "Anhinga", "Anna's Hummingbird", "Antillean Nighthawk", "Antillean Palm Swift", "Aplomado Falcon", "Arctic Loon", "Arctic Tern", "Arctic Warbler", "Ash-throated Flycatcher", "Ashy Storm-Petrel", "Asian Brown Flycatcher", "Atlantic Puffin", "Audubon's Oriole", "Audubon's Shearwater", "Aztec Thrush", "Azure Gallinule", "Bachman's Sparrow", "Bachman's Warbler", "Bahama Mockingbird", "Bahama Swallow", "Bahama Woodstar", "Baikal Teal", "Baird's Sandpiper", "Baird's Sparrow", "Bald Eagle", "Baltimore Oriole", "Bananaquit", "Band-rumped Storm-Petrel", "Band-tailed Gull", "Band-tailed Pigeon", "Bank Swallow", "Bar-tailed Godwit", "Barn Owl", "Barn Swallow", "Barnacle Goose", "Barred Owl", "Barrow's Goldeneye", "Bay-breasted Warbler", "Bean Goose", "Bell's Vireo", "Belted Kingfisher", "Bendire's Thrasher", "Berylline Hummingbird", "Bewick's Wren", "Bicknell's Thrush", "Black Catbird", "Black Guillemot", "Black Noddy", "Black Oystercatcher", "Black Phoebe", "Black Rail", "Black Rosy-Finch", "Black Scoter", "Black Skimmer", "Black Storm-Petrel", "Black Swift", "Black Tern", "Black Turnstone", "Black Vulture", "Black-and-white Warbler", "Black-backed Wagtail", "Black-backed Woodpecker", "Black-bellied Plover", "Black-bellied Whistling-Duck", "Black-billed Cuckoo", "Black-billed Magpie", "Black-browed Albatross", "Black-capped Chickadee", "Black-capped Gnatcatcher", "Black-capped Petrel", "Black-capped Vireo", "Black-chinned Hummingbird", "Black-chinned Sparrow", "Black-crowned Night-Heron", "Black-faced Grassquit", "Black-footed Albatross", "Black-headed Grosbeak", "Black-headed Gull", "Black-legged Kittiwake", "Black-necked Stilt", "Black-tailed Gnatcatcher", "Black-tailed Godwit", "Black-tailed Gull", "Black-throated Blue Warbler", "Black-throated Gray Warbler", "Black-throated Green Warbler", "Black-throated Sparrow", "Black-vented Oriole", "Black-vented Shearwater", "Black-whiskered Vireo", "Black-winged Stilt", "Blackburnian Warbler", "Blackpoll Warbler", "Blue Bunting", "Blue Grosbeak", "Blue Grouse", "Blue Jay", "Blue Mockingbird", "Blue-footed Booby", "Blue-gray Gnatcatcher", "Blue-headed Vireo", "Blue-throated Hummingbird", "Blue-winged Teal", "Blue-winged Warbler", "Bluethroat", "Boat-tailed Grackle", "Bobolink", "Bohemian Waxwing", "Bonaparte's Gull", "Boreal Chickadee", "Boreal Owl", "Botteri's Sparrow", "Brambling", "Brandt's Cormorant", "Brant", "Brewer's Blackbird", "Brewer's Sparrow", "Bridled Tern", "Bridled Titmouse", "Bristle-thighed Curlew", "Broad-billed Hummingbird", "Broad-billed Sandpiper", "Broad-tailed Hummingbird", "Broad-winged Hawk", "Bronzed Cowbird", "Brown Booby", "Brown Creeper", "Brown Jay", "Brown Noddy", "Brown Pelican", "Brown Shrike", "Brown Thrasher", "Brown-capped Rosy-Finch", "Brown-chested Martin", "Brown-crested Flycatcher", "Brown-headed Cowbird", "Brown-headed Nuthatch", "Budgerigar", "Buff-bellied Hummingbird", "Buff-breasted Flycatcher", "Buff-breasted Sandpiper", "Buff-collared Nightjar", "Bufflehead", "Buller's Shearwater", "Bullock's Oriole", "Bumblebee Hummingbird", "Burrowing Owl", "Bushtit", "Cactus Wren", "California Condor", "California Gnatcatcher", "California Gull", "California Quail", "California Thrasher", "California Towhee", "Calliope Hummingbird", "Canada Goose", "Canada Warbler", "Canvasback", "Canyon Towhee", "Canyon Wren", "Cape May Warbler", "Caribbean Elaenia", "Carolina Chickadee", "Carolina Parakeet", "Carolina Wren", "Caspian Tern", "Cassin's Auklet", "Cassin's Finch", "Cassin's Kingbird", "Cassin's Sparrow", "Cassin's Vireo", "Cattle Egret", "Cave Swallow", "Cedar Waxwing", "Cerulean Warbler", "Chestnut-backed Chickadee", "Chestnut-collared Longspur", "Chestnut-sided Warbler", "Chihuahuan Raven", "Chimney Swift", "Chinese Egret", "Chipping Sparrow", "Chuck-will's-widow", "Chukar", "Cinnamon Hummingbird", "Cinnamon Teal", "Citrine Wagtail", "Clapper Rail", "Clark's Grebe", "Clark's Nutcracker", "Clay-colored Robin", "Clay-colored Sparrow", "Cliff Swallow", "Colima Warbler", "Collared Forest-Falcon", "Collared Plover", "Common Black-Hawk", "Common Chaffinch", "Common Crane", "Common Cuckoo", "Common Eider", "Common Goldeneye", "Common Grackle", "Common Greenshank", "Common Ground-Dove", "Common House-Martin", "Common Loon", "Common Merganser", "Common Moorhen", "Common Murre", "Common Nighthawk", "Common Pauraque", "Common Pochard", "Common Poorwill", "Common Raven", "Common Redpoll", "Common Ringed Plover", "Common Rosefinch", "Common Sandpiper", "Common Snipe", "Common Swift", "Common Tern", "Common Yellowthroat", "Connecticut Warbler", "Cook's Petrel", "Cooper's Hawk", "Cordilleran Flycatcher", "Corn Crake", "Cory's Shearwater", "Costa's Hummingbird", "Couch's Kingbird", "Crane Hawk", "Craveri's Murrelet", "Crescent-chested Warbler", "Crested Auklet", "Crested Caracara", "Crested Myna", "Crimson-collared Grosbeak", "Crissal Thrasher", "Cuban Martin", "Curlew Sandpiper", "Curve-billed Thrasher", "Dark-eyed Junco", "Dickcissel", "Double-crested Cormorant", "Double-striped Thick-knee", "Dovekie", "Downy Woodpecker", "Dunlin", "Dusky Flycatcher", "Dusky Thrush", "Dusky Warbler", "Dusky-capped Flycatcher", "Eared Grebe", "Eared Trogon", "Eastern Bluebird", "Eastern Kingbird", "Eastern Meadowlark", "Eastern Phoebe", "Eastern Screech-Owl", "Eastern Towhee", "Eastern Wood-Pewee", "Elegant Tern", "Elegant Trogon", "Elf Owl", "Emperor Goose", "Eskimo Curlew", "Eurasian Blackbird", "Eurasian Bullfinch", "Eurasian Collared-Dove", "Eurasian Coot", "Eurasian Curlew", "Eurasian Dotterel", "Eurasian Hobby", "Eurasian Jackdaw", "Eurasian Kestrel", "Eurasian Oystercatcher", "Eurasian Siskin", "Eurasian Tree Sparrow", "Eurasian Wigeon", "Eurasian Woodcock", "Eurasian Wryneck", "European Golden-Plover", "European Starling", "European Storm-Petrel", "European Turtle-Dove", "Evening Grosbeak", "Eyebrowed Thrush", "Falcated Duck", "Fan-tailed Warbler", "Far Eastern Curlew", "Ferruginous Hawk", "Ferruginous Pygmy-Owl", "Field Sparrow", "Fieldfare", "Fish Crow", "Five-striped Sparrow", "Flame-colored Tanager", "Flammulated Owl", "Flesh-footed Shearwater", "Florida Scrub-Jay", "Fork-tailed Flycatcher", "Fork-tailed Storm-Petrel", "Fork-tailed Swift", "Forster's Tern", "Fox Sparrow", "Franklin's Gull", "Fulvous Whistling-Duck", "Gadwall", "Gambel's Quail", "Garganey", "Gila Woodpecker", "Gilded Flicker", "Glaucous Gull", "Glaucous-winged Gull", "Glossy Ibis", "Golden Eagle", "Golden-cheeked Warbler", "Golden-crowned Kinglet", "Golden-crowned Sparrow", "Golden-crowned Warbler", "Golden-fronted Woodpecker", "Golden-winged Warbler", "Grace's Warbler", "Grasshopper Sparrow", "Gray Bunting", "Gray Catbird", "Gray Flycatcher", "Gray Hawk", "Gray Jay", "Gray Kingbird", "Gray Partridge", "Gray Silky-flycatcher", "Gray Vireo", "Gray Wagtail", "Gray-breasted Martin", "Gray-cheeked Thrush", "Gray-crowned Rosy-Finch", "Gray-crowned Yellowthroat", "Gray-headed Chickadee", "Gray-spotted Flycatcher", "Gray-tailed Tattler", "Great Auk", "Great Black-backed Gull", "Great Blue Heron", "Great Cormorant", "Great Crested Flycatcher", "Great Egret", "Great Frigatebird", "Great Gray Owl", "Great Horned Owl", "Great Kiskadee", "Great Knot", "Great Skua", "Great Spotted Woodpecker", "Great-tailed Grackle", "Greater Flamingo", "Greater Pewee", "Greater Prairie-chicken", "Greater Roadrunner", "Greater Scaup", "Greater Shearwater", "Greater White-fronted Goose", "Greater Yellowlegs", "Green Heron", "Green Jay", "Green Kingfisher", "Green Sandpiper", "Green Violet-ear", "Green-breasted Mango", "Green-tailed Towhee", "Green-winged Teal", "Greenish Elaenia", "Groove-billed Ani", "Gull-billed Tern", "Gyrfalcon", "Hairy Woodpecker", "Hammond's Flycatcher", "Harlequin Duck", "Harris's Hawk", "Harris's Sparrow", "Hawfinch", "Heermann's Gull", "Henslow's Sparrow", "Hepatic Tanager", "Herald Petrel", "Hermit Thrush", "Hermit Warbler", "Herring Gull", "Himalayan Snowcock", "Hoary Redpoll", "Hooded Merganser", "Hooded Oriole", "Hooded Warbler", "Hook-billed Kite", "Hoopoe", "Horned Grebe", "Horned Lark", "Horned Puffin", "House Finch", "House Sparrow", "House Wren", "Hudsonian Godwit", "Hutton's Vireo", "Iceland Gull", "Inca Dove", "Indigo Bunting", "Island Scrub-Jay", "Ivory Gull", "Ivory-billed Woodpecker", "Jabiru", "Jack Snipe", "Jungle Nightjar", "Juniper Titmouse", "Kentucky Warbler", "Key West Quail-Dove", "Killdeer", "King Eider", "King Rail", "Kirtland's Warbler", "Kittlitz's Murrelet", "La Sagra's Flycatcher", "Labrador Duck", "Ladder-backed Woodpecker", "Lanceolated Warbler", "Lapland Longspur", "Large-billed Tern", "Lark Bunting", "Lark Sparrow", "Laughing Gull", "Lawrence's Goldfinch", "Laysan Albatross", "Lazuli Bunting", "Le Conte's Sparrow", "Le Conte's Thrasher", "Leach's Storm-Petrel", "Least Auklet", "Least Bittern", "Least Flycatcher", "Least Grebe", "Least Sandpiper", "Least Storm-Petrel", "Least Tern", "Lesser Black-backed Gull", "Lesser Frigatebird", "Lesser Goldfinch", "Lesser Nighthawk", "Lesser Prairie-chicken", "Lesser Scaup", "Lesser White-fronted Goose", "Lesser Yellowlegs", "Lewis's Woodpecker", "Limpkin", "Lincoln's Sparrow", "Little Blue Heron", "Little Bunting", "Little Curlew", "Little Egret", "Little Gull", "Little Ringed Plover", "Little Shearwater", "Little Stint", "Loggerhead Kingbird", "Loggerhead Shrike", "Long-billed Curlew", "Long-billed Dowitcher", "Long-billed Murrelet", "Long-billed Thrasher", "Long-eared Owl", "Long-tailed Jaeger", "Long-toed Stint", "Louisiana Waterthrush", "Lucifer Hummingbird", "Lucy's Warbler", "MacGillivray's Warbler", "Magnificent Frigatebird", "Magnificent Hummingbird", "Magnolia Warbler", "Mallard", "Mangrove Cuckoo", "Manx Shearwater", "Marbled Godwit", "Marbled Murrelet", "Marsh Sandpiper", "Marsh Wren", "Masked Booby", "Masked Duck", "Masked Tityra", "McCown's Longspur", "McKay's Bunting", "Merlin", "Mew Gull", "Mexican Chickadee", "Mexican Jay", "Middendorff's Grasshopper-Warbler", "Mississippi Kite", "Mongolian Plover", "Monk Parakeet", "Montezuma Quail", "Mottled Duck", "Mottled Owl", "Mottled Petrel", "Mountain Bluebird", "Mountain Chickadee", "Mountain Plover", "Mountain Quail", "Mourning Dove", "Mourning Warbler", "Mugimaki Flycatcher", "Murphy's Petrel", "Muscovy Duck", "Mute Swan", "Narcissus Flycatcher", "Nashville Warbler", "Nelson's Sharp-tailed Sparrow", "Neotropic Cormorant", "Northern Beardless-Tyrannulet", "Northern Bobwhite", "Northern Cardinal", "Northern Flicker", "Northern Fulmar", "Northern Gannet", "Northern Goshawk", "Northern Harrier", "Northern Hawk Owl", "Northern Jacana", "Northern Lapwing", "Northern Mockingbird", "Northern Parula", "Northern Pintail", "Northern Pygmy-Owl", "Northern Rough-winged Swallow", "Northern Saw-whet Owl", "Northern Shoveler", "Northern Shrike", "Northern Waterthrush", "Northern Wheatear", "Northwestern Crow", "Nuttall's Woodpecker", "Nutting's Flycatcher", "Oak Titmouse", "Oldsquaw", "Olive Sparrow", "Olive Warbler", "Olive-backed Pipit", "Olive-sided Flycatcher", "Orange-crowned Warbler", "Orchard Oriole", "Oriental Cuckoo", "Oriental Greenfinch", "Oriental Pratincole", "Oriental Scops-Owl", "Oriental Turtle-Dove", "Osprey", "Ovenbird", "Pacific Golden-Plover", "Pacific Loon", "Pacific-slope Flycatcher", "Paint-billed Crake", "Painted Bunting", "Painted Redstart", "Pallas's Bunting", "Palm Warbler", "Parakeet Auklet", "Parasitic Jaeger", "Passenger Pigeon", "Pechora Pipit", "Pectoral Sandpiper", "Pelagic Cormorant", "Peregrine Falcon", "Phainopepla", "Philadelphia Vireo", "Pied-billed Grebe", "Pigeon Guillemot", "Pileated Woodpecker", "Pin-tailed Snipe", "Pine Bunting", "Pine Grosbeak", "Pine Siskin", "Pine Warbler", "Pink-footed Goose", "Pink-footed Shearwater", "Pinyon Jay", "Piping Plover", "Plain Chachalaca", "Plain-capped Starthroat", "Plumbeous Vireo", "Pomarine Jaeger", "Prairie Falcon", "Prairie Warbler", "Prothonotary Warbler", "Purple Finch", "Purple Gallinule", "Purple Martin", "Purple Sandpiper", "Pygmy Nuthatch", "Pyrrhuloxia", "Razorbill", "Red Crossbill", "Red Knot", "Red Phalarope", "Red-bellied Woodpecker", "Red-billed Pigeon", "Red-billed Tropicbird", "Red-breasted Flycatcher", "Red-breasted Merganser", "Red-breasted Nuthatch", "Red-breasted Sapsucker", "Red-cockaded Woodpecker", "Red-crowned Parrot", "Red-eyed Vireo", "Red-faced Cormorant", "Red-faced Warbler", "Red-flanked Bluetail", "Red-footed Booby", "Red-headed Woodpecker", "Red-legged Kittiwake", "Red-naped Sapsucker", "Red-necked Grebe", "Red-necked Phalarope", "Red-necked Stint", "Red-shouldered Hawk", "Red-tailed Hawk", "Red-tailed Tropicbird", "Red-throated Loon", "Red-throated Pipit", "Red-whiskered Bulbul", "Red-winged Blackbird", "Reddish Egret", "Redhead", "Redwing", "Reed Bunting", "Rhinoceros Auklet", "Ring-billed Gull", "Ring-necked Duck", "Ring-necked Pheasant", "Ringed Kingfisher", "Roadside Hawk", "Rock Dove", "Rock Ptarmigan", "Rock Sandpiper", "Rock Wren", "Rose-breasted Grosbeak", "Rose-throated Becard", "Roseate Spoonbill", "Roseate Tern", "Ross's Goose", "Ross's Gull", "Rough-legged Hawk", "Royal Tern", "Ruby-crowned Kinglet", "Ruby-throated Hummingbird", "Ruddy Duck", "Ruddy Ground-Dove", "Ruddy Quail-Dove", "Ruddy Turnstone", "Ruff", "Ruffed Grouse", "Rufous Hummingbird", "Rufous-backed Robin", "Rufous-capped Warbler", "Rufous-crowned Sparrow", "Rufous-winged Sparrow", "Rustic Bunting", "Rusty Blackbird", "Sabine's Gull", "Sage Grouse", "Sage Sparrow", "Sage Thrasher", "Saltmarsh Sharp-tailed Sparrow", "Sanderling", "Sandhill Crane", "Sandwich Tern", "Savannah Sparrow", "Say's Phoebe", "Scaled Quail", "Scaly-naped Pigeon", "Scarlet Ibis", "Scarlet Tanager", "Scissor-tailed Flycatcher", "Scott's Oriole", "Seaside Sparrow", "Sedge Wren", "Semipalmated Plover", "Semipalmated Sandpiper", "Sharp-shinned Hawk", "Sharp-tailed Grouse", "Sharp-tailed Sandpiper", "Shiny Cowbird", "Short-billed Dowitcher", "Short-eared Owl", "Short-tailed Albatross", "Short-tailed Hawk", "Short-tailed Shearwater", "Shy Albatross", "Siberian Accentor", "Siberian Blue Robin", "Siberian Flycatcher", "Siberian Rubythroat", "Sky Lark", "Slate-throated Redstart", "Slaty-backed Gull", "Slender-billed Curlew", "Smew", "Smith's Longspur", "Smooth-billed Ani", "Snail Kite", "Snow Bunting", "Snow Goose", "Snowy Egret", "Snowy Owl", "Snowy Plover", "Solitary Sandpiper", "Song Sparrow", "Sooty Shearwater", "Sooty Tern", "Sora", "South Polar Skua", "Southern Martin", "Spectacled Eider", "Spoonbill Sandpiper", "Spot-billed Duck", "Spot-breasted Oriole", "Spotted Dove", "Spotted Owl", "Spotted Rail", "Spotted Redshank", "Spotted Sandpiper", "Spotted Towhee", "Sprague's Pipit", "Spruce Grouse", "Stejneger's Petrel", "Steller's Eider", "Steller's Jay", "Steller's Sea-Eagle", "Stilt Sandpiper", "Stonechat", "Streak-backed Oriole", "Streaked Shearwater", "Strickland's Woodpecker", "Stripe-headed Tanager", "Sulphur-bellied Flycatcher", "Summer Tanager", "Surf Scoter", "Surfbird", "Swainson's Hawk", "Swainson's Thrush", "Swainson's Warbler", "Swallow-tailed Kite", "Swamp Sparrow", "Tamaulipas Crow", "Tawny-shouldered Blackbird", "Temminck's Stint", "Tennessee Warbler", "Terek Sandpiper", "Thayer's Gull", "Thick-billed Kingbird", "Thick-billed Murre", "Thick-billed Parrot", "Thick-billed Vireo", "Three-toed Woodpecker", "Townsend's Solitaire", "Townsend's Warbler", "Tree Pipit", "Tree Swallow", "Tricolored Blackbird", "Tricolored Heron", "Tropical Kingbird", "Tropical Parula", "Trumpeter Swan", "Tufted Duck", "Tufted Flycatcher", "Tufted Puffin", "Tufted Titmouse", "Tundra Swan", "Turkey Vulture", "Upland Sandpiper", "Varied Bunting", "Varied Thrush", "Variegated Flycatcher", "Vaux's Swift", "Veery", "Verdin", "Vermilion Flycatcher", "Vesper Sparrow", "Violet-crowned Hummingbird", "Violet-green Swallow", "Virginia Rail", "Virginia's Warbler", "Wandering Albatross", "Wandering Tattler", "Warbling Vireo", "Wedge-rumped Storm-Petrel", "Wedge-tailed Shearwater", "Western Bluebird", "Western Grebe", "Western Gull", "Western Kingbird", "Western Meadowlark", "Western Reef-Heron", "Western Sandpiper", "Western Screech-Owl", "Western Scrub-Jay", "Western Tanager", "Western Wood-Pewee", "Whimbrel", "Whip-poor-will", "Whiskered Auklet", "Whiskered Screech-Owl", "Whiskered Tern", "White Ibis", "White Wagtail", "White-breasted Nuthatch", "White-cheeked Pintail", "White-chinned Petrel", "White-collared Seedeater", "White-collared Swift", "White-crowned Pigeon", "White-crowned Sparrow", "White-eared Hummingbird", "White-eyed Vireo", "White-faced Ibis", "White-faced Storm-Petrel", "White-headed Woodpecker", "White-rumped Sandpiper", "White-tailed Eagle", "White-tailed Hawk", "White-tailed Kite", "White-tailed Ptarmigan", "White-tailed Tropicbird", "White-throated Needletail", "White-throated Robin", "White-throated Sparrow", "White-throated Swift", "White-tipped Dove", "White-winged Crossbill", "White-winged Dove", "White-winged Parakeet", "White-winged Scoter", "White-winged Tern", "Whooper Swan", "Whooping Crane", "Wild Turkey", "Willet", "Williamson's Sapsucker", "Willow Flycatcher", "Willow Ptarmigan", "Wilson's Phalarope", "Wilson's Plover", "Wilson's Storm-Petrel", "Wilson's Warbler", "Winter Wren", "Wood Duck", "Wood Sandpiper", "Wood Stork", "Wood Thrush", "Wood Warbler", "Worm-eating Warbler", "Worthen's Sparrow", "Wrentit", "Xantus's Hummingbird", "Xantus's Murrelet", "Yellow Bittern", "Yellow Grosbeak", "Yellow Rail", "Yellow Wagtail", "Yellow Warbler", "Yellow-bellied Flycatcher", "Yellow-bellied Sapsucker", "Yellow-billed Cuckoo", "Yellow-billed Loon", "Yellow-billed Magpie", "Yellow-breasted Bunting", "Yellow-breasted Chat", "Yellow-crowned Night-Heron", "Yellow-eyed Junco", "Yellow-faced Grassquit", "Yellow-footed Gull", "Yellow-green Vireo", "Yellow-headed Blackbird", "Yellow-legged Gull", "Yellow-nosed Albatross", "Yellow-rumped Warbler", "Yellow-throated Vireo", "Yellow-throated Warbler", "Yucatan Vireo", "Zenaida Dove", "Zone-tailed Hawk"];
    t = ["Abyssinian", "American Bobtail", "American Curl", "American Shorthair", "American Wirehair", "Balinese", "Bengal", "Birman", "Bombay", "British Shorthair", "Burmese", "Chartreux", "Chausie", "Cornish Rex", "Devon Rex", "Donskoy", "Egyptian Mau", "Exotic Shorthair", "Havana", "Highlander", "Himalayan", "Japanese Bobtail", "Korat", "Kurilian Bobtail", "LaPerm", "Maine Coon", "Manx", "Minskin", "Munchkin", "Nebelung", "Norwegian Forest Cat", "Ocicat", "Ojos Azules", "Oriental", "Persian", "Peterbald", "Pixiebob", "Ragdoll", "Russian Blue", "Savannah", "Scottish Fold", "Selkirk Rex", "Serengeti", "Siamese", "Siberian", "Singapura", "Snowshoe", "Sokoke", "Somali", "Sphynx", "Thai", "Tonkinese", "Toyger", "Turkish Angora", "Turkish Van"];
    l = ["Amazon River Dolphin", "Arnoux's Beaked Whale", "Atlantic Humpbacked Dolphin", "Atlantic Spotted Dolphin", "Atlantic White-Sided Dolphin", "Australian Snubfin Dolphin", "Australian humpback Dolphin", "Blue Whale", "Bottlenose Dolphin", "Bryde\u2019s whale", "Burrunan Dolphin", "Chilean Dolphin", "Chinese River Dolphin", "Chinese White Dolphin", "Clymene Dolphin", "Commerson\u2019s Dolphin", "Costero", "Dusky Dolphin", "False Killer Whale", "Fin Whale", "Fraser\u2019s Dolphin", "Ganges River Dolphin", "Guiana Dolphin", "Heaviside\u2019s Dolphin", "Hector\u2019s Dolphin", "Hourglass Dolphin", "Humpback whale", "Indo-Pacific Bottlenose Dolphin", "Indo-Pacific Hump-backed Dolphin", "Irrawaddy Dolphin", "Killer Whale (Orca)", "La Plata Dolphin", "Long-Beaked Common Dolphin", "Long-finned Pilot Whale", "Longman's Beaked Whale", "Melon-headed Whale", "Northern Rightwhale Dolphin", "Omura\u2019s whale", "Pacific White-Sided Dolphin", "Pantropical Spotted Dolphin", "Peale\u2019s Dolphin", "Pygmy Killer Whale", "Risso\u2019s Dolphin", "Rough-Toothed Dolphin", "Sei Whale", "Short-Beaked Common Dolphin", "Short-finned Pilot Whale", "Southern Bottlenose Whale", "Southern Rightwhale Dolphin", "Sperm Whale", "Spinner Dolphin", "Striped Dolphin", "Tucuxi", "White-Beaked Dolphin"];
    s = ["Aberdeen Angus", "Abergele", "Abigar", "Abondance", "Abyssinian Shorthorned Zebu", "Aceh", "Achham", "Adamawa", "Adaptaur", "Afar", "Africangus", "Afrikaner", "Agerolese", "Alambadi", "Alatau", "Albanian", "Albera", "Alderney", "Alentejana", "Aleutian wild cattle", "Aliad Dinka", "Alistana-Sanabresa", "Allmogekor", "Alur", "American", "American Angus", "American Beef Friesian", "American Brown Swiss", "American Milking Devon", "American White Park", "Amerifax", "Amrit Mahal", "Amsterdam Island cattle", "Anatolian Black", "Andalusian Black", "Andalusian Blond", "Andalusian Grey", "Angeln", "Angoni", "Ankina", "Ankole", "Ankole-Watusi", "Aracena", "Arado", "Argentine Criollo", "Argentine Friesian", "Armorican", "Arouquesa", "Arsi", "Asturian Mountain", "Asturian Valley", "Aubrac", "Aulie-Ata", "Aure et Saint-Girons", "Australian Braford", "Australian Brangus", "Australian Charbray", "Australian Friesian Sahiwal", "Australian Lowline", "Australian Milking Zebu", "Australian Shorthorn", "Austrian Simmental", "Austrian Yellow", "Avile\xF1a-Negra Ib\xE9rica", "Av\xE9tonou", "Aweil Dinka", "Ayrshire", "Azaouak", "Azebuado", "Azerbaijan Zebu", "Azores", "Bachaur cattle", "Baherie cattle", "Bakosi cattle", "Balancer", "Baoule", "Bargur cattle", "Barros\xE3", "Barzona", "Bazadaise", "Beef Freisian", "Beefalo", "Beefmaker", "Beefmaster", "Begayt", "Belgian Blue", "Belgian Red", "Belgian Red Pied", "Belgian White-and-Red", "Belmont Red", "Belted Galloway", "Bernese", "Berrenda cattle", "Betizu", "Bianca Modenese", "Blaarkop", "Black Angus", "Black Baldy", "Black Hereford", "Blanca Cacere\xF1a", "Blanco Orejinegro BON", "Blonde d'Aquitaine", "Blue Albion", "Blue Grey", "Bohuskulla", "Bonsmara", "Boran", "Bo\u0161karin", "Braford", "Brahman", "Brahmousin", "Brangus", "Braunvieh", "Brava", "Breed", "British Friesian", "British White", "Brown Carpathian", "Brown Caucasian", "Brown Swiss", "Bue Lingo", "Burlina", "Bushuyev", "Butana cattle", "Bu\u0161a cattle", "Cachena", "Caldelana", "Camargue", "Campbell Island cattle", "Canadian Speckle Park", "Canadienne", "Canaria", "Canchim", "Caracu", "Carinthian Blondvieh", "Carora", "Charbray", "Charolais", "Chateaubriand", "Chiangus", "Chianina", "Chillingham cattle", "Chinese Black Pied", "Cholistani", "Coloursided White Back", "Commercial", "Corriente", "Corsican cattle", "Coste\xF1o con Cuernos", "Crioulo Lageano", "C\xE1rdena Andaluza", "Dajal", "Dangi cattle", "Danish Black-Pied", "Danish Jersey", "Danish Red", "Deep Red cattle", "Deoni", "Devon", "Dexter cattle", "Dhanni", "Doayo cattle", "Doela", "Drakensberger", "Droughtmaster", "Dulong'", "Dutch Belted", "Dutch Friesian", "Dwarf Lulu", "D\xF8lafe", "East Anatolian Red", "Eastern Finncattle", "Eastern Red Polled", "Enderby Island cattle", "English Longhorn", "Ennstaler Bergscheck", "Estonian Holstein", "Estonian Native", "Estonian Red cattle", "Finncattle", "Finnish Ayrshire", "Finnish Holstein-Friesian", "Fj\xE4ll", "Fleckvieh", "Florida Cracker cattle", "Fogera", "French Simmental", "Fribourgeoise", "Friesian Red and White", "Fulani Sudanese", "F\u0113ng Cattle", "Galician Blond", "Galloway cattle", "Gangatiri", "Gaolao", "Garvonesa", "Gascon cattle", "Gelbvieh", "Georgian Mountain cattle", "German Angus", "German Black Pied Dairy", "German Black Pied cattle", "German Red Pied", "Gir", "Glan cattle", "Gloucester", "Gobra", "Greek Shorthorn", "Greek Steppe", "Greyman cattle", "Gudali", "Guernsey cattle", "Guzer\xE1", "Hallikar4", "Hanwoo", "Hariana cattle", "Hart\xF3n del Valle", "Harzer Rotvieh", "Hays Converter", "Heck cattle", "Hereford", "Herens", "Highland cattle", "Hinterwald", "Holando-Argentino", "Holstein Friesian cattle", "Horro", "Hungarian Grey", "Hu\xE1ng Cattle", "Hybridmaster", "Iberian cattle", "Icelandic", "Illawarra cattle", "Improved Red and White", "Indo-Brazilian", "Irish Moiled", "Israeli Holstein", "Israeli Red", "Istoben cattle", "Istrian cattle", "Jamaica Black", "Jamaica Hope", "Jamaica Red", "Japanese Brown", "Jarmelista", "Javari cattle", "Jersey cattle", "Jutland cattle", "Kabin Buri cattle", "Kalmyk cattle", "Kamphaeng Saen cattle", "Kangayam", "Kankrej", "Karan Swiss", "Kasaragod Dwarf cattle", "Kathiawadi", "Kazakh Whiteheaded", "Kenana cattle", "Kenkatha cattle", "Kerry cattle", "Kherigarh", "Khillari cattle", "Kholomogory", "Korat Wagyu", "Kostroma cattle", "Krishna Valley cattle", "Kurgan cattle", "Kuri", "La Reina cattle", "Lakenvelder cattle", "Lampurger", "Latvian Blue", "Latvian Brown", "Latvian Danish Red", "Lebedyn", "Levantina", "Limia cattle", "Limousin", "Limpurger", "Lincoln Red", "Lineback", "Lithuanian Black-and-White", "Lithuanian Light Grey", "Lithuanian Red", "Lithuanian White-Backed", "Lohani cattle", "Lourdais", "Lucerna cattle", "Luing", "Madagascar Zebu", "Madura", "Maine-Anjou", "Malnad Gidda", "Malvi", "Mandalong Special", "Mantequera Leonesa", "Maramure\u015F Brown", "Marchigiana", "Maremmana", "Marinhoa", "Maronesa", "Masai", "Mashona", "Menorquina", "Mertolenga", "Meuse-Rhine-Issel", "Mewati", "Milking Shorthorn", "Minhota", "Mirandesa", "Mirkadim", "Moc\u0103ni\u0163\u0103", "Mollie", "Monchina", "Mongolian", "Montb\xE9liarde", "Morucha", "Murboden", "Murnau-Werdenfels", "Murray Grey", "Muturu", "N'Dama", "Nagori", "Negra Andaluza", "Nelore", "Nguni", "Nimari", "Normande", "North Bengal Grey", "Northern Finncattle", "Northern Shorthorn", "Norwegian Red", "Ongole", "Original Simmental", "Pajuna", "Palmera", "Pantaneiro", "Parda Alpina", "Parthenaise", "Pasiega", "Pembroke", "Philippine Native", "Pie Rouge des Plaines", "Piedmontese cattle", "Pineywoods", "Pinzgauer", "Pirenaica", "Podolac", "Podolica", "Polish Black-and-White", "Polish Red", "Poll Shorthorn", "Polled Hereford", "Polled Shorthorn", "Ponwar", "Preta", "Pulikulam", "Punganur", "Pustertaler Sprinzen", "Qinchaun", "Queensland Miniature Boran", "RX3", "Ramo Grande", "Randall", "Raramuri Criollo", "Rathi", "Raya", "Red Angus", "Red Brangus", "Red Chittagong", "Red Fulani", "Red Gorbatov", "Red Holstein", "Red Kandhari", "Red Mingrelian", "Red Poll", "Red Polled \xD8stland", "Red Sindhi", "Retinta", "Riggit Galloway", "Ringam\xE5la", "Rohjan", "Romagnola", "Romanian B\u0103l\u0163ata", "Romanian Steppe Gray", "Romosinuano", "Russian Black Pied", "R\xE4tisches Grauvieh", "Sahiwal", "Salers", "Salorn", "Sanga", "Sanhe", "Santa Cruz", "Santa Gertrudis", "Sayaguesa", "Schwyz", "Selembu", "Senepol", "Serbian Pied", "Serbian Steppe", "Sheko", "Shetland", "Shorthorn", "Siboney de Cuba", "Simbrah", "Simford", "Simmental", "Siri", "South Devon", "Spanish Fighting Bull", "Speckle Park", "Square Meater", "Sussex", "Swedish Friesian", "Swedish Polled", "Swedish Red Pied", "Swedish Red Polled", "Swedish Red-and-White", "Tabapu\xE3", "Tarentaise", "Tasmanian Grey", "Tauros", "Telemark", "Texas Longhorn", "Texon", "Thai Black", "Thai Fighting Bull", "Thai Friesian", "Thai Milking Zebu", "Tharparkar", "Tswana", "Tudanca", "Tuli", "Tulim", "Turkish Grey Steppe", "Tux-Zillertal", "Tyrol Grey", "Ukrainian Grey", "Umblachery", "Valdostana Castana", "Valdostana Pezzata Nera", "Valdostana Pezzata Rossa", "Vaynol", "Vechur8", "Vestland Fjord", "Vestland Red Polled", "Vianesa", "Volinian Beef", "Vorderwald", "Vosgienne", "V\xE4neko", "Waguli", "Wagyu", "Wangus", "Welsh Black", "Western Finncattle", "White C\xE1ceres", "White Fulani", "White Lamphun", "White Park", "Whitebred Shorthorn", "Xingjiang Brown", "Yakutian", "Yanbian", "Yanhuang", "Yurino", "Zebu", "\xC9vol\xE8ne cattle", "\u017Bubro\u0144"];
    d = ["African Slender-snouted Crocodile", "Alligator mississippiensis", "American Crocodile", "Australian Freshwater Crocodile", "Black Caiman", "Broad-snouted Caiman", "Chinese Alligator", "Cuban Crocodile", "Cuvier\u2019s Dwarf Caiman", "Dwarf Crocodile", "Gharial", "Morelet\u2019s Crocodile", "Mugger Crocodile", "New Guinea Freshwater Crocodile", "Nile Crocodile", "Orinoco Crocodile", "Philippine Crocodile", "Saltwater Crocodile", "Schneider\u2019s Smooth-fronted Caiman", "Siamese Crocodile", "Spectacled Caiman", "Tomistoma", "West African Crocodile", "Yacare Caiman"];
    u = ["Affenpinscher", "Afghan Hound", "Aidi", "Airedale Terrier", "Akbash", "Akita", "Alano Espa\xF1ol", "Alapaha Blue Blood Bulldog", "Alaskan Husky", "Alaskan Klee Kai", "Alaskan Malamute", "Alopekis", "Alpine Dachsbracke", "American Bulldog", "American Bully", "American Cocker Spaniel", "American English Coonhound", "American Foxhound", "American Hairless Terrier", "American Pit Bull Terrier", "American Staffordshire Terrier", "American Water Spaniel", "Andalusian Hound", "Anglo-Fran\xE7ais de Petite V\xE9nerie", "Appenzeller Sennenhund", "Ariegeois", "Armant", "Armenian Gampr dog", "Artois Hound", "Australian Cattle Dog", "Australian Kelpie", "Australian Shepherd", "Australian Stumpy Tail Cattle Dog", "Australian Terrier", "Austrian Black and Tan Hound", "Austrian Pinscher", "Azawakh", "Bakharwal dog", "Banjara Hound", "Barbado da Terceira", "Barbet", "Basenji", "Basque Shepherd Dog", "Basset Art\xE9sien Normand", "Basset Bleu de Gascogne", "Basset Fauve de Bretagne", "Basset Hound", "Bavarian Mountain Hound", "Beagle", "Beagle-Harrier", "Bearded Collie", "Beauceron", "Bedlington Terrier", "Belgian Shepherd", "Bergamasco Shepherd", "Berger Picard", "Bernese Mountain Dog", "Bhotia", "Bichon Fris\xE9", "Billy", "Black Mouth Cur", "Black Norwegian Elkhound", "Black Russian Terrier", "Black and Tan Coonhound", "Bloodhound", "Blue Lacy", "Blue Picardy Spaniel", "Bluetick Coonhound", "Boerboel", "Bohemian Shepherd", "Bolognese", "Border Collie", "Border Terrier", "Borzoi", "Bosnian Coarse-haired Hound", "Boston Terrier", "Bouvier des Ardennes", "Bouvier des Flandres", "Boxer", "Boykin Spaniel", "Bracco Italiano", "Braque Francais", "Braque Saint-Germain", "Braque d'Auvergne", "Braque de l'Ari\xE8ge", "Braque du Bourbonnais", "Briard", "Briquet Griffon Vend\xE9en", "Brittany", "Broholmer", "Bruno Jura Hound", "Brussels Griffon", "Bucovina Shepherd Dog", "Bull Arab", "Bull Terrier", "Bulldog", "Bullmastiff", "Bully Kutta", "Burgos Pointer", "Cairn Terrier", "Campeiro Bulldog", "Can de Chira", "Canaan Dog", "Canadian Eskimo Dog", "Cane Corso", "Cane Paratore", "Cane di Oropa", "Cantabrian Water Dog", "Cardigan Welsh Corgi", "Carea Castellano Manchego", "Carolina Dog", "Carpathian Shepherd Dog", "Catahoula Leopard Dog", "Catalan Sheepdog", "Caucasian Shepherd Dog", "Cavalier King Charles Spaniel", "Central Asian Shepherd Dog", "Cesky Fousek", "Cesky Terrier", "Chesapeake Bay Retriever", "Chien Fran\xE7ais Blanc et Noir", "Chien Fran\xE7ais Blanc et Orange", "Chien Fran\xE7ais Tricolore", "Chihuahua", "Chilean Terrier", "Chinese Chongqing Dog", "Chinese Crested Dog", "Chinook", "Chippiparai", "Chongqing dog", "Chortai", "Chow Chow", "Cimarr\xF3n Uruguayo", "Cirneco dell'Etna", "Clumber Spaniel", "Colombian fino hound", "Coton de Tulear", "Cretan Hound", "Croatian Sheepdog", "Curly-Coated Retriever", "Cursinu", "Czechoslovakian Wolfdog", "C\xE3o Fila de S\xE3o Miguel", "C\xE3o da Serra de Aires", "C\xE3o de Castro Laboreiro", "C\xE3o de Gado Transmontano", "Dachshund", "Dalmatian", "Dandie Dinmont Terrier", "Danish-Swedish Farmdog", "Denmark Feist", "Dingo", "Doberman Pinscher", "Dogo Argentino", "Dogo Guatemalteco", "Dogo Sardesco", "Dogue Brasileiro", "Dogue de Bordeaux", "Drentse Patrijshond", "Drever", "Dunker", "Dutch Shepherd", "Dutch Smoushond", "East European Shepherd", "East Siberian Laika", "English Cocker Spaniel", "English Foxhound", "English Mastiff", "English Setter", "English Shepherd", "English Springer Spaniel", "English Toy Terrier", "Entlebucher Mountain Dog", "Estonian Hound", "Estrela Mountain Dog", "Eurasier", "Field Spaniel", "Fila Brasileiro", "Finnish Hound", "Finnish Lapphund", "Finnish Spitz", "Flat-Coated Retriever", "French Bulldog", "French Spaniel", "Galgo Espa\xF1ol", "Galician Shepherd Dog", "Garafian Shepherd", "Gascon Saintongeois", "Georgian Shepherd", "German Hound", "German Longhaired Pointer", "German Pinscher", "German Roughhaired Pointer", "German Shepherd Dog", "German Shorthaired Pointer", "German Spaniel", "German Spitz", "German Wirehaired Pointer", "Giant Schnauzer", "Glen of Imaal Terrier", "Golden Retriever", "Gordon Setter", "Go\u0144czy Polski", "Grand Anglo-Fran\xE7ais Blanc et Noir", "Grand Anglo-Fran\xE7ais Blanc et Orange", "Grand Anglo-Fran\xE7ais Tricolore", "Grand Basset Griffon Vend\xE9en", "Grand Bleu de Gascogne", "Grand Griffon Vend\xE9en", "Great Dane", "Greater Swiss Mountain Dog", "Greek Harehound", "Greek Shepherd", "Greenland Dog", "Greyhound", "Griffon Bleu de Gascogne", "Griffon Fauve de Bretagne", "Griffon Nivernais", "Gull Dong", "Gull Terrier", "Hamiltonst\xF6vare", "Hanover Hound", "Harrier", "Havanese", "Hierran Wolfdog", "Hokkaido", "Hovawart", "Huntaway", "Hygen Hound", "H\xE4llefors Elkhound", "Ibizan Hound", "Icelandic Sheepdog", "Indian Spitz", "Indian pariah dog", "Irish Red and White Setter", "Irish Setter", "Irish Terrier", "Irish Water Spaniel", "Irish Wolfhound", "Istrian Coarse-haired Hound", "Istrian Shorthaired Hound", "Italian Greyhound", "Jack Russell Terrier", "Jagdterrier", "Japanese Chin", "Japanese Spitz", "Japanese Terrier", "Jindo", "Jonangi", "Kai Ken", "Kaikadi", "Kangal Shepherd Dog", "Kanni", "Karakachan dog", "Karelian Bear Dog", "Kars", "Karst Shepherd", "Keeshond", "Kerry Beagle", "Kerry Blue Terrier", "King Charles Spaniel", "King Shepherd", "Kintamani", "Kishu", "Kokoni", "Kombai", "Komondor", "Kooikerhondje", "Koolie", "Koyun dog", "Kromfohrl\xE4nder", "Kuchi", "Kuvasz", "Labrador Retriever", "Lagotto Romagnolo", "Lakeland Terrier", "Lancashire Heeler", "Landseer", "Lapponian Herder", "Large M\xFCnsterl\xE4nder", "Leonberger", "Levriero Sardo", "Lhasa Apso", "Lithuanian Hound", "Lupo Italiano", "L\xF6wchen", "Mackenzie River Husky", "Magyar ag\xE1r", "Mahratta Greyhound", "Maltese", "Manchester Terrier", "Maremmano-Abruzzese Sheepdog", "McNab dog", "Miniature American Shepherd", "Miniature Bull Terrier", "Miniature Fox Terrier", "Miniature Pinscher", "Miniature Schnauzer", "Molossus of Epirus", "Montenegrin Mountain Hound", "Mountain Cur", "Mountain Feist", "Mucuchies", "Mudhol Hound", "Mudi", "Neapolitan Mastiff", "New Guinea Singing Dog", "New Zealand Heading Dog", "Newfoundland", "Norfolk Terrier", "Norrbottenspets", "Northern Inuit Dog", "Norwegian Buhund", "Norwegian Elkhound", "Norwegian Lundehund", "Norwich Terrier", "Nova Scotia Duck Tolling Retriever", "Old Croatian Sighthound", "Old Danish Pointer", "Old English Sheepdog", "Old English Terrier", "Olde English Bulldogge", "Otterhound", "Pachon Navarro", "Paisley Terrier", "Pampas Deerhound", "Papillon", "Parson Russell Terrier", "Pastore della Lessinia e del Lagorai", "Patagonian Sheepdog", "Patterdale Terrier", "Pekingese", "Pembroke Welsh Corgi", "Perro Majorero", "Perro de Pastor Mallorquin", "Perro de Presa Canario", "Perro de Presa Mallorquin", "Peruvian Inca Orchid", "Petit Basset Griffon Vend\xE9en", "Petit Bleu de Gascogne", "Phal\xE8ne", "Pharaoh Hound", "Phu Quoc Ridgeback", "Picardy Spaniel", "Plott Hound", "Plummer Terrier", "Podenco Canario", "Podenco Valenciano", "Pointer", "Poitevin", "Polish Greyhound", "Polish Hound", "Polish Lowland Sheepdog", "Polish Tatra Sheepdog", "Pomeranian", "Pont-Audemer Spaniel", "Poodle", "Porcelaine", "Portuguese Podengo", "Portuguese Pointer", "Portuguese Water Dog", "Posavac Hound", "Pra\u017Esk\xFD Krysa\u0159\xEDk", "Pshdar Dog", "Pudelpointer", "Pug", "Puli", "Pumi", "Pungsan Dog", "Pyrenean Mastiff", "Pyrenean Mountain Dog", "Pyrenean Sheepdog", "Rafeiro do Alentejo", "Rajapalayam", "Rampur Greyhound", "Rat Terrier", "Ratonero Bodeguero Andaluz", "Ratonero Mallorquin", "Ratonero Murciano de Huerta", "Ratonero Valenciano", "Redbone Coonhound", "Rhodesian Ridgeback", "Romanian Mioritic Shepherd Dog", "Romanian Raven Shepherd Dog", "Rottweiler", "Rough Collie", "Russian Spaniel", "Russian Toy", "Russo-European Laika", "Saarloos Wolfdog", "Sabueso Espa\xF1ol", "Saint Bernard", "Saint Hubert Jura Hound", "Saint-Usuge Spaniel", "Saluki", "Samoyed", "Sapsali", "Sarabi dog", "Sardinian Shepherd Dog", "Schapendoes", "Schillerst\xF6vare", "Schipperke", "Schweizer Laufhund", "Schweizerischer Niederlaufhund", "Scottish Deerhound", "Scottish Terrier", "Sealyham Terrier", "Segugio Italiano", "Segugio Maremmano", "Segugio dell'Appennino", "Seppala Siberian Sleddog", "Serbian Hound", "Serbian Tricolour Hound", "Serrano Bulldog", "Shar Pei", "Shetland Sheepdog", "Shiba Inu", "Shih Tzu", "Shikoku", "Shiloh Shepherd", "Siberian Husky", "Silken Windhound", "Silky Terrier", "Sinhala Hound", "Skye Terrier", "Sloughi", "Slovakian Wirehaired Pointer", "Slovensk\xFD Cuvac", "Slovensk\xFD Kopov", "Smalandst\xF6vare", "Small Greek domestic dog", "Small M\xFCnsterl\xE4nder", "Smooth Collie", "Smooth Fox Terrier", "Soft-Coated Wheaten Terrier", "South Russian Ovcharka", "Spanish Mastiff", "Spanish Water Dog", "Spinone Italiano", "Sporting Lucas Terrier", "Stabyhoun", "Staffordshire Bull Terrier", "Standard Schnauzer", "Stephens Stock", "Styrian Coarse-haired Hound", "Sussex Spaniel", "Swedish Elkhound", "Swedish Lapphund", "Swedish Vallhund", "Swedish White Elkhound", "Taigan", "Taiwan Dog", "Tamaskan Dog", "Teddy Roosevelt Terrier", "Telomian", "Tenterfield Terrier", "Terrier Brasileiro", "Thai Bangkaew Dog", "Thai Ridgeback", "Tibetan Mastiff", "Tibetan Spaniel", "Tibetan Terrier", "Tornjak", "Tosa", "Toy Fox Terrier", "Toy Manchester Terrier", "Transylvanian Hound", "Treeing Cur", "Treeing Feist", "Treeing Tennessee Brindle", "Treeing Walker Coonhound", "Trigg Hound", "Tyrolean Hound", "Vikhan", "Villano de Las Encartaciones", "Villanuco de Las Encartaciones", "Vizsla", "Volpino Italiano", "Weimaraner", "Welsh Sheepdog", "Welsh Springer Spaniel", "Welsh Terrier", "West Highland White Terrier", "West Siberian Laika", "Westphalian Dachsbracke", "Wetterhoun", "Whippet", "White Shepherd", "White Swiss Shepherd Dog", "Wire Fox Terrier", "Wirehaired Pointing Griffon", "Wirehaired Vizsla", "Xiasi Dog", "Xoloitzcuintli", "Yakutian Laika", "Yorkshire Terrier", "\u0160arplaninac"];
    c = ["Alaska pollock", "Albacore", "Amur catfish", "Araucanian herring", "Argentine hake", "Asari", "Asian swamp eel", "Atlantic cod", "Atlantic herring", "Atlantic horse mackerel", "Atlantic mackerel", "Atlantic menhaden", "Atlantic salmon", "Bigeye scad", "Bigeye tuna", "Bighead carp", "Black carp", "Blood cockle", "Blue swimming crab", "Blue whiting", "Bombay-duck", "Bonga shad", "California pilchard", "Cape horse mackerel", "Capelin", "Catla", "Channel catfish", "Chilean jack mackerel", "Chinese perch", "Chinese softshell turtle", "Chub mackerel", "Chum salmon", "Common carp", "Crucian carp", "Daggertooth pike conger", "European anchovy", "European pilchard", "European sprat", "Filipino Venus", "Gazami crab", "Goldstripe sardinella", "Grass carp", "Gulf menhaden", "Haddock", "Hilsa shad", "Indian mackerel", "Indian oil sardine", "Iridescent shark", "Japanese anchovy", "Japanese cockle", "Japanese common catfish", "Japanese flying squid", "Japanese jack mackerel", "Japanese littleneck", "Japanese pilchard", "Jumbo flying squid", "Kawakawa", "Korean bullhead", "Largehead hairtail", "Longtail tuna", "Madeiran sardinella", "Mandarin fish", "Milkfish", "Mrigal carp", "Narrow-barred Spanish mackerel", "Nile perch", "Nile tilapia", "North Pacific hake", "Northern snakehead", "Pacific anchoveta", "Pacific cod", "Pacific herring", "Pacific sand lance", "Pacific sandlance", "Pacific saury", "Pacific thread herring", "Peruvian anchoveta", "Pink salmon", "Pollock", "Pond loach", "Rainbow trout", "Rohu", "Round sardinella", "Short mackerel", "Silver carp", "Silver cyprinid", "Skipjack tuna", "Southern African anchovy", "Southern rough shrimp", "Whiteleg shrimp", "Wuchang bream", "Yellow croaker", "Yellowfin tuna", "Yellowhead catfish", "Yellowstripe scad"];
    m = ["Abaco Barb", "Abtenauer", "Abyssinian", "Aegidienberger", "Akhal-Teke", "Albanian Horse", "Altai Horse", "Alt\xE8r Real", "American Albino", "American Cream Draft", "American Indian Horse", "American Paint Horse", "American Quarter Horse", "American Saddlebred", "American Warmblood", "Andalusian Horse", "Andravida Horse", "Anglo-Arabian", "Anglo-Arabo-Sardo", "Anglo-Kabarda", "Appaloosa", "AraAppaloosa", "Arabian Horse", "Ardennes Horse", "Arenberg-Nordkirchen", "Argentine Criollo", "Asian wild Horse", "Assateague Horse", "Asturc\xF3n", "Augeron", "Australian Brumby", "Australian Draught Horse", "Australian Stock Horse", "Austrian Warmblood", "Auvergne Horse", "Auxois", "Azerbaijan Horse", "Azteca Horse", "Baise Horse", "Bale", "Balearic Horse", "Balikun Horse", "Baluchi Horse", "Banker Horse", "Barb Horse", "Bardigiano", "Bashkir Curly", "Basque Mountain Horse", "Bavarian Warmblood", "Belgian Half-blood", "Belgian Horse", "Belgian Warmblood", "Bhutia Horse", "Black Forest Horse", "Blazer Horse", "Boerperd", "Borana", "Boulonnais Horse", "Brabant", "Brandenburger", "Brazilian Sport Horse", "Breton Horse", "Brumby", "Budyonny Horse", "Burguete Horse", "Burmese Horse", "Byelorussian Harness Horse", "Calabrese Horse", "Camargue Horse", "Camarillo White Horse", "Campeiro", "Campolina", "Canadian Horse", "Canadian Pacer", "Carolina Marsh Tacky", "Carthusian Horse", "Caspian Horse", "Castilian Horse", "Castillonnais", "Catria Horse", "Cavallo Romano della Maremma Laziale", "Cerbat Mustang", "Chickasaw Horse", "Chilean Corralero", "Choctaw Horse", "Cleveland Bay", "Clydesdale Horse", "Cob", "Coldblood Trotter", "Colonial Spanish Horse", "Colorado Ranger", "Comtois Horse", "Corsican Horse", "Costa Rican Saddle Horse", "Cretan Horse", "Criollo Horse", "Croatian Coldblood", "Cuban Criollo", "Cumberland Island Horse", "Curly Horse", "Czech Warmblood", "Daliboz", "Danish Warmblood", "Danube Delta Horse", "Dole Gudbrandsdal", "Don", "Dongola Horse", "Draft Trotter", "Dutch Harness Horse", "Dutch Heavy Draft", "Dutch Warmblood", "Dzungarian Horse", "East Bulgarian", "East Friesian Horse", "Estonian Draft", "Estonian Horse", "Falabella", "Faroese", "Finnhorse", "Fjord Horse", "Fleuve", "Florida Cracker Horse", "Foutank\xE9", "Frederiksborg Horse", "Freiberger", "French Trotter", "Friesian Cross", "Friesian Horse", "Friesian Sporthorse", "Furioso-North Star", "Galice\xF1o", "Galician Pony", "Gelderland Horse", "Georgian Grande Horse", "German Warmblood", "Giara Horse", "Gidran", "Groningen Horse", "Gypsy Horse", "Hackney Horse", "Haflinger", "Hanoverian Horse", "Heck Horse", "Heihe Horse", "Henson Horse", "Hequ Horse", "Hirzai", "Hispano-Bret\xF3n", "Holsteiner Horse", "Horro", "Hungarian Warmblood", "Icelandic Horse", "Iomud", "Irish Draught", "Irish Sport Horse sometimes called Irish Hunter", "Italian Heavy Draft", "Italian Trotter", "Jaca Navarra", "Jeju Horse", "Jutland Horse", "Kabarda Horse", "Kafa", "Kaimanawa Horses", "Kalmyk Horse", "Karabair", "Karabakh Horse", "Karachai Horse", "Karossier", "Kathiawari", "Kazakh Horse", "Kentucky Mountain Saddle Horse", "Kiger Mustang", "Kinsky Horse", "Kisber Felver", "Kiso Horse", "Kladruber", "Knabstrupper", "Konik", "Kundudo", "Kustanair", "Kyrgyz Horse", "Latvian Horse", "Lipizzan", "Lithuanian Heavy Draught", "Lokai", "Losino Horse", "Lusitano", "Lyngshest", "M'Bayar", "M'Par", "Mallorqu\xEDn", "Malopolski", "Mangalarga", "Mangalarga Marchador", "Maremmano", "Marisme\xF1o Horse", "Marsh Tacky", "Marwari Horse", "Mecklenburger", "Menorqu\xEDn", "Messara Horse", "Metis Trotter", "Mez\u0151hegyesi Sport Horse", "Me\u0111imurje Horse", "Miniature Horse", "Misaki Horse", "Missouri Fox Trotter", "Monchina", "Mongolian Horse", "Mongolian Wild Horse", "Monterufolino", "Morab", "Morgan Horse", "Mountain Pleasure Horse", "Moyle Horse", "Murakoz Horse", "Murgese", "Mustang Horse", "M\xE9rens Horse", "Namib Desert Horse", "Nangchen Horse", "National Show Horse", "Nez Perce Horse", "Nivernais Horse", "Nokota Horse", "Noma", "Nonius Horse", "Nooitgedachter", "Nordlandshest", "Noriker Horse", "Norman Cob", "North American Single-Footer Horse", "North Swedish Horse", "Norwegian Coldblood Trotter", "Norwegian Fjord", "Novokirghiz", "Oberlander Horse", "Ogaden", "Oldenburg Horse", "Orlov trotter", "Ostfriesen", "Paint", "Pampa Horse", "Paso Fino", "Pentro Horse", "Percheron", "Persano Horse", "Peruvian Paso", "Pintabian", "Pleven Horse", "Poitevin Horse", "Posavac Horse", "Pottok", "Pryor Mountain Mustang", "Przewalski's Horse", "Pura Raza Espa\xF1ola", "Purosangue Orientale", "Qatgani", "Quarab", "Quarter Horse", "Racking Horse", "Retuerta Horse", "Rhenish German Coldblood", "Rhinelander Horse", "Riwoche Horse", "Rocky Mountain Horse", "Romanian Sporthorse", "Rottaler", "Russian Don", "Russian Heavy Draft", "Russian Trotter", "Saddlebred", "Salerno Horse", "Samolaco Horse", "San Fratello Horse", "Sarcidano Horse", "Sardinian Anglo-Arab", "Schleswig Coldblood", "Schwarzw\xE4lder Kaltblut", "Selale", "Sella Italiano", "Selle Fran\xE7ais", "Shagya Arabian", "Shan Horse", "Shire Horse", "Siciliano Indigeno", "Silesian Horse", "Sokolsky Horse", "Sorraia", "South German Coldblood", "Soviet Heavy Draft", "Spanish Anglo-Arab", "Spanish Barb", "Spanish Jennet Horse", "Spanish Mustang", "Spanish Tarpan", "Spanish-Norman Horse", "Spiti Horse", "Spotted Saddle Horse", "Standardbred Horse", "Suffolk Punch", "Swedish Ardennes", "Swedish Warmblood", "Swedish coldblood trotter", "Swiss Warmblood", "Taish\u016B Horse", "Takhi", "Tawleed", "Tchernomor", "Tennessee Walking Horse", "Tersk Horse", "Thoroughbred", "Tiger Horse", "Tinker Horse", "Tolfetano", "Tori Horse", "Trait Du Nord", "Trakehner", "Tsushima", "Tuigpaard", "Ukrainian Riding Horse", "Unmol Horse", "Uzunyayla", "Ventasso Horse", "Virginia Highlander", "Vlaamperd", "Vladimir Heavy Draft", "Vyatka", "Waler", "Waler Horse", "Walkaloosa", "Warlander", "Warmblood", "Welsh Cob", "Westphalian Horse", "Wielkopolski", "W\xFCrttemberger", "Xilingol Horse", "Yakutian Horse", "Yili Horse", "Yonaguni Horse", "Zaniskari", "Zhemaichu", "Zweibr\xFCcker", "\u017Demaitukas"];
    h = ["Acacia-ants", "Acorn-plum gall", "Aerial yellowjacket", "Africanized honey bee", "Allegheny mound ant", "Almond stone wasp", "Ant", "Arboreal ant", "Argentine ant", "Asian paper wasp", "Baldfaced hornet", "Bee", "Bigheaded ant", "Black and yellow mud dauber", "Black carpenter ant", "Black imported fire ant", "Blue horntail woodwasp", "Blue orchard bee", "Braconid wasp", "Bumble bee", "Carpenter ant", "Carpenter wasp", "Chalcid wasp", "Cicada killer", "Citrus blackfly parasitoid", "Common paper wasp", "Crazy ant", "Cuckoo wasp", "Cynipid gall wasp", "Eastern Carpenter bee", "Eastern yellowjacket", "Elm sawfly", "Encyrtid wasp", "Erythrina gall wasp", "Eulophid wasp", "European hornet", "European imported fire ant", "False honey ant", "Fire ant", "Forest bachac", "Forest yellowjacket", "German yellowjacket", "Ghost ant", "Giant ichneumon wasp", "Giant resin bee", "Giant wood wasp", "Golden northern bumble bee", "Golden paper wasp", "Gouty oak gall", "Grass Carrying Wasp", "Great black wasp", "Great golden digger wasp", "Hackberry nipple gall parasitoid", "Honey bee", "Horned oak gall", "Horse guard wasp", "Hunting wasp", "Ichneumonid wasp", "Keyhole wasp", "Knopper gall", "Large garden bumble bee", "Large oak-apple gall", "Leafcutting bee", "Little fire ant", "Little yellow ant", "Long-horned bees", "Long-legged ant", "Macao paper wasp", "Mallow bee", "Marble gall", "Mossyrose gall wasp", "Mud-daubers", "Multiflora rose seed chalcid", "Oak apple gall wasp", "Oak rough bulletgall wasp", "Oak saucer gall", "Oak shoot sawfly", "Odorous house ant", "Orange-tailed bumble bee", "Orangetailed potter wasp", "Oriental chestnut gall wasp", "Paper wasp", "Pavement ant", "Pigeon tremex", "Pip gall wasp", "Prairie yellowjacket", "Pteromalid wasp", "Pyramid ant", "Raspberry Horntail", "Red ant", "Red carpenter ant", "Red harvester ant", "Red imported fire ant", "Red wasp", "Red wood ant", "Red-tailed wasp", "Reddish carpenter ant", "Rough harvester ant", "Sawfly parasitic wasp", "Scale parasitoid", "Silky ant", "Sirex woodwasp", "Siricid woodwasp", "Smaller yellow ant", "Southeastern blueberry bee", "Southern fire ant", "Southern yellowjacket", "Sphecid wasp", "Stony gall", "Sweat bee", "Texas leafcutting ant", "Tiphiid wasp", "Torymid wasp", "Tramp ant", "Valentine ant", "Velvet ant", "Vespid wasp", "Weevil parasitoid", "Western harvester ant", "Western paper wasp", "Western thatching ant", "Western yellowjacket", "White-horned horntail", "Willow shoot sawfly", "Woodwasp", "Wool sower gall maker", "Yellow Crazy Ant", "Yellow and black potter wasp", "Yellow-horned horntail"];
    y = ["Asiatic Lion", "Barbary Lion", "Cape lion", "Masai Lion", "Northeast Congo Lion", "Transvaal lion", "West African Lion"];
    p = ["Ace", "Archie", "Bailey", "Bandit", "Bella", "Bentley", "Bruno", "Buddy", "Charlie", "Coco", "Cookie", "Cooper", "Daisy", "Dixie", "Finn", "Ginger", "Gracie", "Gus", "Hank", "Jack", "Jax", "Joey", "Kobe", "Leo", "Lola", "Louie", "Lucy", "Maggie", "Max", "Mia", "Milo", "Molly", "Murphey", "Nala", "Nova", "Ollie", "Oreo", "Rosie", "Scout", "Stella", "Teddy", "Tuffy"];
    g = ["American", "American Chinchilla", "American Fuzzy Lop", "American Sable", "Argente Brun", "Belgian Hare", "Beveren", "Blanc de Hotot", "Britannia Petite", "Californian", "Champagne D\u2019Argent", "Checkered Giant", "Cinnamon", "Cr\xE8me D\u2019Argent", "Dutch", "Dwarf Hotot", "English Angora", "English Lop", "English Spot", "Flemish Giant", "Florida White", "French Angora", "French Lop", "Giant Angora", "Giant Chinchilla", "Harlequin", "Havana", "Himalayan", "Holland Lop", "Jersey Wooly", "Lilac", "Lionhead", "Mini Lop", "Mini Rex", "Mini Satin", "Netherland Dwarf", "New Zealand", "Palomino", "Polish", "Rex", "Rhinelander", "Satin", "Satin Angora", "Silver", "Silver Fox", "Silver Marten", "Standard Chinchilla", "Tan", "Thrianta"];
    b = ["Abrocoma", "Abrocoma schistacea", "Aconaemys", "Aconaemys porteri", "African brush-tailed porcupine", "Andean mountain cavy", "Argentine tuco-tuco", "Ashy chinchilla rat", "Asiatic brush-tailed porcupine", "Atherurus", "Azara's agouti", "Azara's tuco-tuco", "Bahia porcupine", "Bathyergus", "Bathyergus janetta", "Bathyergus suillus", "Bennett's chinchilla rat", "Bicolored-spined porcupine", "Black agouti", "Black dwarf porcupine", "Black-rumped agouti", "Black-tailed hairy dwarf porcupine", "Bolivian chinchilla rat", "Bolivian tuco-tuco", "Bonetto's tuco-tuco", "Brandt's yellow-toothed cavy", "Brazilian guinea pig", "Brazilian porcupine", "Brazilian tuco-tuco", "Bridge's degu", "Brown hairy dwarf porcupine", "Budin's chinchilla rat, A. budini", "Cape porcupine", "Catamarca tuco-tuco", "Cavia", "Central American agouti", "Chacoan tuco-tuco", "Chilean rock rat", "Chinchilla", "Coendou", "Coiban agouti", "Colburn's tuco-tuco", "Collared tuco-tuco", "Common degu", "Common yellow-toothed cavy", "Conover's tuco-tuco", "Coruro", "Crested agouti", "Crested porcupine", "Cryptomys", "Cryptomys bocagei", "Cryptomys damarensis", "Cryptomys foxi", "Cryptomys hottentotus", "Cryptomys mechowi", "Cryptomys ochraceocinereus", "Cryptomys zechi", "Ctenomys", "Cuniculus", "Cuscomys", "Cuscomys ashanika", "Dactylomys", "Dactylomys boliviensis", "Dactylomys dactylinus", "Dactylomys peruanus", "Dasyprocta", "Domestic guinea pig", "Emily's tuco-tuco", "Erethizon", "Famatina chinchilla rat", "Frosted hairy dwarf porcupine", "Fukomys", "Fukomys amatus", "Fukomys anselli", "Fukomys bocagei", "Fukomys damarensis", "Fukomys darlingi", "Fukomys foxi", "Fukomys ilariae", "Fukomys kafuensis", "Fukomys mechowii", "Fukomys micklemi", "Fukomys occlusus", "Fukomys ochraceocinereus", "Fukomys whytei", "Fukomys zechi", "Furtive tuco-tuco", "Galea", "Georychus", "Georychus capensis", "Golden viscacha-rat", "Goya tuco-tuco", "Greater guinea pig", "Green acouchi", "Haig's tuco-tuco", "Heliophobius", "Heliophobius argenteocinereus", "Heterocephalus", "Heterocephalus glaber", "Highland tuco-tuco", "Hystrix", "Indian porcupine", "Isla Mocha degu", "Kalinowski agouti", "Kannabateomys", "Kannabateomys amblyonyx", "Lagidium", "Lagostomus", "Lewis' tuco-tuco", "Long-tailed chinchilla", "Long-tailed porcupine", "Los Chalchaleros' viscacha-rat", "Lowland paca", "Magellanic tuco-tuco", "Malayan porcupine", "Maule tuco-tuco", "Mendoza tuco-tuco", "Mexican agouti", "Mexican hairy dwarf porcupine", "Microcavia", "Montane guinea pig", "Moon-toothed degu", "Mottled tuco-tuco", "Mountain degu", "Mountain paca", "Mountain viscacha-rat", "Myoprocta", "Natterer's tuco-tuco", "North American porcupine", "Northern viscacha", "Octodon", "Octodontomys", "Octomys", "Olallamys", "Olallamys albicauda", "Olallamys edax", "Orinoco agouti", "Paraguaian hairy dwarf porcupine", "Pearson's tuco-tuco", "Peruvian tuco-tuco", "Philippine porcupine", "Pipanacoctomys", "Plains viscacha", "Plains viscacha-rat", "Porteous' tuco-tuco", "Punta de Vacas chinchilla rat", "Red acouchi", "Red-rumped agouti", "Reddish tuco-tuco", "Rio Negro tuco-tuco", "Robust tuco-tuco", "Roosmalen's dwarf porcupine", "Rothschild's porcupine", "Ruatan Island agouti", "Sage's rock rat", "Salinoctomys", "Salta tuco-tuco", "San Luis tuco-tuco", "Santa Catarina's guinea pig", "Shiny guinea pig", "Shipton's mountain cavy", "Short-tailed chinchilla", "Silky tuco-tuco", "Social tuco-tuco", "Southern mountain cavy", "Southern tuco-tuco", "Southern viscacha", "Spalacopus", "Spix's yellow-toothed cavy", "Steinbach's tuco-tuco", "Streaked dwarf porcupine", "Strong tuco-tuco", "Stump-tailed porcupine", "Sumatran porcupine", "Sunda porcupine", "Talas tuco-tuco", "Tawny tuco-tuco", "Thick-spined porcupine", "Tiny tuco-tuco", "Trichys", "Tucuman tuco-tuco", "Tympanoctomys", "Uspallata chinchilla rat", "White-toothed tuco-tuco", "Wolffsohn's viscacha"];
    C = ["Abaco Island boa", "Aesculapian snake", "African beaked snake", "African puff adder", "African rock python", "African twig snake", "African wolf snake", "Amazon tree boa", "Amazonian palm viper", "American Vine Snake", "American copperhead", "Amethystine python", "Anaconda", "Andaman cat snake", "Andaman cobra", "Angolan python", "Annulated sea snake", "Arabian cobra", "Arafura file snake", "Arizona black rattlesnake", "Arizona coral snake", "Aruba rattlesnake", "Asian Vine Snake, Whip Snake", "Asian cobra", "Asian keelback", "Asian pipe snake", "Asp", "Asp viper", "Assam keelback", "Australian copperhead", "Australian scrub python", "Baird's rat snake", "Baja California lyresnake", "Ball Python", "Ball python", "Bamboo pitviper", "Bamboo viper", "Banded Flying Snake", "Banded cat-eyed snake", "Banded krait", "Banded pitviper", "Banded water cobra", "Barbour's pit viper", "Barred wolf snake", "Beaked sea snake", "Beauty rat snake", "Beddome's cat snake", "Beddome's coral snake", "Bimini racer", "Bird snake", "Bismarck ringed python", "Black headed python", "Black krait", "Black mamba", "Black rat snake", "Black snake", "Black tree cobra", "Black-banded trinket snake", "Black-headed snake", "Black-necked cobra", "Black-necked spitting cobra", "Black-speckled palm-pitviper", "Black-striped keelback", "Black-tailed horned pit viper", "Blanding's tree snake", "Blind snake", "Blonde hognose snake", "Blood python", "Blue krait", "Blunt-headed tree snake", "Bluntnose viper", "Boa", "Boa constrictor", "Bocourt's water snake", "Boelen python", "Boiga", "Bolivian anaconda", "Boomslang", "Bornean pitviper", "Borneo short-tailed python", "Brahminy blind snake", "Brazilian coral snake", "Brazilian mud Viper", "Brazilian smooth snake", "Bredl's python", "Brongersma's pitviper", "Brown snake", "Brown spotted pitviper[4]", "Brown tree snake", "Brown water python", "Brown white-lipped python", "Buff striped keelback", "Bull snake", "Burmese keelback", "Burmese krait", "Burmese python", "Burrowing cobra", "Burrowing viper", "Bush viper", "Bushmaster", "Buttermilk racer", "Calabar python", "California kingsnake", "Canebrake", "Cantil", "Cantor's pitviper", "Cape cobra", "Cape coral snake", "Cape gopher snake", "Carpet viper", "Cascabel", "Caspian cobra", "Cat snake", "Cat-eyed night snake", "Cat-eyed snake", "Central American lyre snake", "Central ranges taipan", "Centralian carpet python", "Ceylon krait", "Chappell Island tiger snake", "Checkered garter snake", "Checkered keelback", "Chicken snake", "Chihuahuan ridge-nosed rattlesnake", "Children's python", "Chinese tree viper", "Coachwhip snake", "Coastal carpet python", "Coastal taipan", "Cobra", "Collett's snake", "Colorado desert sidewinder", "Common adder", "Common cobra", "Common garter snake", "Common ground snake", "Common keelback", "Common lancehead", "Common tiger snake", "Common worm snake", "Congo snake", "Congo water cobra", "Copperhead", "Coral snake", "Corn snake", "Coronado Island rattlesnake", "Cottonmouth", "Crossed viper", "Crowned snake", "Cuban boa", "Cuban wood snake", "Cyclades blunt-nosed viper", "Dauan Island water python", "De Schauensee's anaconda", "Death Adder", "Desert death adder", "Desert kingsnake", "Desert woma python", "Diamond python", "Dog-toothed cat snake", "Down's tiger snake", "Dubois's sea snake", "Dumeril's boa", "Durango rock rattlesnake", "Dusky pigmy rattlesnake", "Dusty hognose snake", "Dwarf beaked snake", "Dwarf boa", "Dwarf pipe snake", "Dwarf sand adder", "Eastern brown snake", "Eastern coral snake", "Eastern diamondback rattlesnake", "Eastern green mamba", "Eastern hognose snake", "Eastern lyre snake", "Eastern mud snake", "Eastern racer", "Eastern tiger snake", "Eastern water cobra", "Eastern yellowbelly sad racer", "Egg-eater", "Egyptian asp", "Egyptian cobra", "Elegant pitviper", "Emerald tree boa", "Equatorial spitting cobra", "European asp", "European smooth snake", "Eyelash palm-pitviper", "Eyelash pit viper", "Eyelash viper", "False cobra", "False horned viper", "False water cobra", "Fan-Si-Pan horned pitviper", "Fea's viper", "Fer-de-lance", "Fierce snake", "Fifty pacer", "Fishing snake", "Flat-nosed pitviper", "Flinders python", "Flying snake", "Forest cobra", "Forest flame snake", "Forsten's cat snake", "Fox snake, three species of Pantherophis", "Gaboon viper", "Garter snake", "Giant Malagasy hognose snake", "Godman's pit viper", "Gold tree cobra", "Gold-ringed cat snake", "Golden tree snake", "Grand Canyon rattlesnake", "Grass snake", "Gray cat snake", "Great Basin rattlesnake", "Great Lakes bush viper", "Great Plains rat snake", "Green anaconda", "Green cat-eyed snake", "Green mamba", "Green palm viper", "Green rat snake", "Green snake", "Green tree pit viper", "Green tree python", "Grey Lora", "Grey-banded kingsnake", "Ground snake", "Guatemalan palm viper", "Guatemalan tree viper", "Habu", "Habu pit viper", "Hagen's pitviper", "Hairy bush viper", "Halmahera python", "Hardwicke's sea snake", "Harlequin coral snake", "High Woods coral snake", "Hill keelback", "Himalayan keelback", "Hogg Island boa", "Hognose snake", "Hognosed viper", "Honduran palm viper", "Hook Nosed Sea Snake", "Hopi rattlesnake", "Horned adder", "Horned desert viper", "Horned viper", "Horseshoe pitviper", "Hundred pacer", "Hutton's tree viper", "Ikaheka snake", "Indian cobra", "Indian flying snake", "Indian krait", "Indian python", "Indian tree viper", "Indigo snake", "Indochinese spitting cobra", "Indonesian water python", "Inland carpet python", "Inland taipan", "Jamaican Tree Snake", "Jamaican boa", "Jan's hognose snake", "Japanese forest rat snake", "Japanese rat snake", "Japanese striped snake", "Javan spitting cobra", "Jerdon's pitviper", "Jumping viper", "Jungle carpet python", "Kanburian pit viper", "Kaulback's lance-headed pitviper", "Kayaudi dwarf reticulated python", "Kaznakov's viper", "Keelback", "Kham Plateau pitviper", "Khasi Hills keelback", "King Island tiger snake", "King brown", "King cobra", "King rat snake", "King snake", "Krait", "Krefft's tiger snake", "Lance-headed rattlesnake", "Lancehead", "Large shield snake", "Large-eyed pitviper", "Large-scaled tree viper", "Leaf viper", "Leaf-nosed viper", "Lesser black krait", "Levant viper", "Long-nosed adder", "Long-nosed tree snake", "Long-nosed viper", "Long-nosed whip snake", "Long-tailed rattlesnake", "Longnosed worm snake", "Lora", "Lyre snake", "Machete savane", "Macklot's python", "Madagascar ground boa", "Madagascar tree boa", "Malabar rock pitviper", "Malayan krait", "Malayan long-glanded coral snake", "Malayan pit viper", "Malcolm's tree viper", "Mamba", "Mamushi", "Manchurian Black Water Snake", "Mandalay cobra", "Mandarin rat snake", "Mangrove pit viper", "Mangrove snake", "Mangshan pitviper", "Many-banded krait", "Many-banded tree snake", "Many-horned adder", "Many-spotted cat snake", "Massasauga rattlesnake", "McMahon's viper", "Mexican black kingsnake", "Mexican green rattlesnake", "Mexican hognose snake", "Mexican palm-pitviper", "Mexican parrot snake", "Mexican racer", "Mexican vine snake", "Mexican west coast rattlesnake", "Midget faded rattlesnake", "Milk snake", "Moccasin snake", "Modest keelback", "Mojave desert sidewinder", "Mojave rattlesnake", "Mole viper", "Mollucan python", "Moluccan flying snake", "Montpellier snake", "Motuo bamboo pitviper", "Mountain adder", "Mozambique spitting cobra", "Mud adder", "Mud snake", "Mussurana", "Namaqua dwarf adder", "Namib dwarf sand adder", "Narrowhead Garter Snake", "New Guinea carpet python", "Nichell snake", "Nicobar Island keelback", "Nicobar bamboo pitviper", "Night snake", "Nightingale adder", "Nilgiri keelback", "Nitsche's bush viper", "Nitsche's tree viper", "North Philippine cobra", "North eastern king snake", "Northeastern hill krait", "Northern black-tailed rattlesnake", "Northern tree snake", "Northern water snake", "Northern white-lipped python", "Northwestern carpet python", "Nose-horned viper", "Nubian spitting cobra", "Oaxacan small-headed rattlesnake", "Oenpelli python", "Olive python", "Olive sea snake", "Orange-collared keelback", "Ornate flying snake", "Palestine viper", "Pallas' viper", "Palm viper", "Papuan python", "Paradise flying snake", "Parrot snake", "Patchnose snake", "Paupan taipan", "Pelagic sea snake", "Peninsula tiger snake", "Peringuey's adder", "Perrotet's shieldtail snake", "Persian rat snake", "Philippine cobra", "Philippine pitviper", "Pine snake", "Pipe snake", "Pit viper", "Pointed-scaled pit viper[5]", "Pope's tree viper", "Portuguese viper", "Prairie kingsnake", "Puerto Rican boa", "Puff adder", "Pygmy python", "Python", "Queen snake", "Racer", "Raddysnake", "Rainbow boa", "Rat snake", "Rattler", "Rattlesnake", "Red blood python", "Red diamond rattlesnake", "Red spitting cobra", "Red-backed rat snake", "Red-bellied black snake", "Red-headed krait", "Red-necked keelback", "Red-tailed bamboo pitviper", "Red-tailed boa", "Red-tailed pipe snake", "Reticulated python", "Rhinoceros viper", "Rhombic night adder", "Ribbon snake", "Rinkhals", "Rinkhals cobra", "River jack", "Rosy boa", "Rough green snake", "Rough-scaled bush viper", "Rough-scaled python", "Rough-scaled tree viper", "Royal python", "Rubber boa", "Rufous beaked snake", "Rungwe tree viper", "San Francisco garter snake", "Sand adder", "Sand boa", "Savu python", "Saw-scaled viper", "Scarlet kingsnake", "Schlegel's viper", "Schultze's pitviper", "Sea snake", "Sedge viper", "Selayer reticulated python", "Sharp-nosed viper", "Shield-nosed cobra", "Shield-tailed snake", "Siamese palm viper", "Side-striped palm-pitviper", "Sidewinder", "Sikkim keelback", "Sinai desert cobra", "Sind krait", "Small-eyed snake", "Smooth green snake", "Smooth snake", "Snorkel viper", "Snouted cobra", "Sonoran sidewinder", "South American hognose snake", "South eastern corn snake", "Southern Indonesian spitting cobra", "Southern Pacific rattlesnake", "Southern Philippine cobra", "Southern black racer", "Southern white-lipped python", "Southwestern black spitting cobra", "Southwestern blackhead snake", "Southwestern carpet python", "Southwestern speckled rattlesnake", "Speckle-bellied keelback", "Speckled kingsnake", "Spectacled cobra", "Spiny bush viper", "Spitting cobra", "Spotted python", "Sri Lankan pit viper", "Stejneger's bamboo pitviper", "Stiletto snake", "Stimson's python", "Stoke's sea snake", "Storm water cobra", "Striped snake", "Sumatran short-tailed python", "Sumatran tree viper", "Sunbeam snake", "Taipan", "Taiwan cobra", "Tan racer", "Tancitaran dusky rattlesnake", "Tanimbar python", "Tasmanian tiger snake", "Tawny cat snake", "Temple pit viper", "Temple viper", "Tentacled snake", "Texas Coral Snake", "Texas blind snake", "Texas garter snake", "Texas lyre snake", "Texas night snake", "Thai cobra", "Three-lined ground snake", "Tibetan bamboo pitviper", "Tic polonga", "Tiger pit viper", "Tiger rattlesnake", "Tiger snake", "Tigre snake", "Timber rattlesnake", "Timor python", "Titanboa", "Tree boa", "Tree snake", "Tree viper", "Trinket snake", "Tropical rattlesnake", "Twig snake", "Twin Headed King Snake", "Twin-Barred tree snake", "Twin-spotted rat snake", "Twin-spotted rattlesnake", "Undulated pit viper", "Uracoan rattlesnake", "Ursini's viper", "Urutu", "Vine snake", "Viper", "Viper Adder", "Vipera ammodytes", "Wagler's pit viper", "Wart snake", "Water adder", "Water moccasin", "Water snake", "West Indian racer", "Western blind snake", "Western carpet python", "Western coral snake", "Western diamondback rattlesnake", "Western green mamba", "Western ground snake", "Western hog-nosed viper", "Western mud snake", "Western tiger snake", "Western woma python", "Wetar Island python", "Whip snake", "White-lipped keelback", "White-lipped python", "White-lipped tree viper", "Wirot's pit viper", "Wolf snake", "Woma python", "Worm snake", "Wutu", "Wynaad keelback", "Yarara", "Yellow anaconda", "Yellow-banded sea snake", "Yellow-bellied sea snake", "Yellow-lined palm viper", "Yellow-lipped sea snake", "Yellow-striped rat snake", "Yunnan keelback", "Zebra snake", "Zebra spitting cobra"];
    S = ["bat", "bear", "bee", "bird", "butterfly", "cat", "cow", "crocodile", "deer", "dog", "dolphin", "eagle", "elephant", "fish", "flamingo", "fox", "frog", "gecko", "giraffe", "gorilla", "hamster", "hippopotamus", "horse", "kangaroo", "koala", "lion", "monkey", "ostrich", "panda", "parrot", "peacock", "penguin", "polar bear", "rabbit", "rhinoceros", "sea lion", "shark", "snake", "squirrel", "tiger", "turtle", "whale", "wolf", "zebra"];
    _a = { bear: n, bird: i, cat: t, cetacean: l, cow: s, crocodilia: d, dog: u, fish: c, horse: m, insect: h, lion: y, pet_name: p, rabbit: g, rodent: b, snake: C, type: S };
    k = _a;
    f = ["{{person.name}}", "{{company.name}}"];
    v = ["Redhold", "Treeflex", "Trippledex", "Kanlam", "Bigtax", "Daltfresh", "Toughjoyfax", "Mat Lam Tam", "Otcom", "Tres-Zap", "Y-Solowarm", "Tresom", "Voltsillam", "Biodex", "Greenlam", "Viva", "Matsoft", "Temp", "Zoolab", "Subin", "Rank", "Job", "Stringtough", "Tin", "It", "Home Ing", "Zamit", "Sonsing", "Konklab", "Alpha", "Latlux", "Voyatouch", "Alphazap", "Holdlamis", "Zaam-Dox", "Sub-Ex", "Quo Lux", "Bamity", "Ventosanzap", "Lotstring", "Hatity", "Tempsoft", "Overhold", "Fixflex", "Konklux", "Zontrax", "Tampflex", "Span", "Namfix", "Transcof", "Stim", "Fix San", "Sonair", "Stronghold", "Fintone", "Y-find", "Opela", "Lotlux", "Ronstring", "Zathin", "Duobam", "Keylex"];
    A = ["0.#.#", "0.##", "#.##", "#.#", "#.#.#"];
    Qa = { author: f, name: v, version: A };
    B = Qa;
    T = ["A.A. Milne", "Agatha Christie", "Alan Moore and Dave Gibbons", "Albert Camus", "Aldous Huxley", "Alexander Pope", "Alexandre Dumas", "Alice Walker", "Andrew Lang", "Anne Frank", "Anthony Burgess", "Anthony Trollope", "Antoine de Saint-Exup\xE9ry", "Anton Chekhov", "Anton Pavlovich Chekhov", "Arthur Conan Doyle", "Arthur Schopenhauer", "Aylmer Maude", "Ayn Rand", "Beatrix Potter", "Benjamin Disraeli", "Benjamin Jowett", "Bernard Shaw", "Bertrand Russell", "Bhagavanlal Indrajit", "Boris Pasternak", "Bram Stoker", "Brian Evenson", "C.E. Brock", "C.S. Lewis", "Carson McCallers", "Charles Dickens", "Charles E. Derbyshire", "Charlotte Bront\xEB", "Charlotte Perkins Gilman", "Chinua Achebe", "Clifford R. Adams", "Constance Garnett", "Cormac McCarthy", "D.H. Lawrence", "Dan Brown", "Daniel Defoe", "Dante Alighieri", "Dashiell Hammett", "David Widger", "David Wyllie", "Dean Koontz", "Don DeLillo", "E.M. Forster", "Edgar Allan Poe", "Edgar Rice Burroughs", "Elizabeth Cleghorn Gaskell", "Elizabeth Von Arnim", "Emily Bront\xEB", "Erich Remarque", "Ernest Hemingway", "Evelyn Waugh", "F. Scott Fitzgerald", "Ford Madox Ford", "Frances Hodgson Burnett", "Frank Herbert", "Frank T. Merrill", "Franz Kafka", "Friedrich Wilhelm Nietzsche", "Fyodor Dostoyevsky", "G.K. Chesterton", "Gabriel Garcia Marquez", "Geoffrey Chaucer", "George Eliot", "George Grossmith", "George Orwell", "George R. R. Martin", "George Saunders", "Grady Ward", "Graham Greene", "Gustave Dor\xE9", "Gustave Flaubert", "Guy de Maupassant", "G\xFCnter Grass", "H.G. Wells", "H.P. Lovecraft", "Harper Lee", "Harriet Beecher Stowe", "Haruki Murakami", "Henrik Ibsen", "Henry David Thoreau", "Henry Fielding", "Henry James", "Henry Miller", "Henry Morley", "Herman Melville", "Hermann Broch", "Homer", "Honor\xE9 de Balzac", "Ian McEwan", "Isabel Florence Hapgood", "Italo Calvino", "J.D. Salinger", "J.K. Rowling", "J.M. Barrie", "J.R.R. Tolkien", "Jack Kerouac", "Jack London", "Jacob Grimm", "Jacqueline Crooks", "James Baldwin", "James Dickey", "James Ellroy", "James Joyce", "James Patterson", "Jane Austen", "Johann Wolfgang von Goethe", "John Bunyan", "John Camden Hotten", "John Dos Passos", "John Green", "John Grisham", "John Kennedy Toole", "John Milton", "John Ormsby", "John Steinbeck", "John Updike", "Jonathan Franzen", "Jonathan Swift", "Joseph Conrad", "Joseph Heller", "Jos\xE9 Rizal", "Judy Blume", "Jules Verne", "Junot Diaz", "Karl Marx", "Kazuo Ishiguro", "Ken Follett", "Ken Kesey", "Kenneth Grahame", "Khaled Hosseini", "Kingsley Amis", "Kurt Vonnegut", "L. Frank Baum", "L.M. Montgomery", "Laurence Sterne", "Leo Tolstoy", "Lewis Carroll", "Louisa May Alcott", "Louise Maude", "Malcolm Lowry", "Marcel Proust", "Margaret Atwood", "Margaret Mitchell", "Marilynne Robinson", "Mark Twain", "Martin Amis", "Mary Shelley", "Michael Chabon", "Miguel de Cervantes", "Mikhail Bulgakov", "Muriel Spark", "Nancy Mitford", "Nathanael West", "Nathaniel Hawthorne", "Neil Gaiman", "Niccolo Machiavelli", "Norman Mailer", "Oscar Levy", "Oscar Wilde", "P.G. Wodehouse", "Paulo Coelho", "Peter Carey", "Philip Pullman", "Philip Roth", "Plato", "R.L. Stine", "Rachel Kushner", "Ralph Ellison", "Ray Bradbury", "Raymond Chandler", "Richard Wagner", "Richard Wright", "Richard Yates", "Roald Dahl", "Robert Graves", "Robert Louis Stevenson", "Robert Penn Warren", "Rudyard Kipling", "Salman Rushdie", "Samuel Beckett", "Samuel Butler", "Samuel Richardson", "Saul Bellow", "Shivaram Parashuram Bhide", "Sir Arthur Conan Doyle", "Sir Richard Francis Burton", "Stendhal", "Stephen Hawking", "Stephen King", "Sun Tzu", "Suzanne Collins", "T. Smollett", "T.S. Eliot", "Theodore Alois Buckley", "Theodore Dreiser", "Thomas Hardy", "Thomas Love Peacock", "Thomas Mann", "Toni Morrison", "Truman Capote", "V.S. Naipaul", "Vance Packard", "Vatsyayana", "Victor Hugo", "Virgil", "Virginia Woolf", "Vladimir Nabokov", "Voltaire", "W.G. Sebald", "W.K. Marriott", "Walker Percy", "Walt Whitman", "Walter Scott", "Wilhelm Grimm", "Wilkie Collins", "William Faulkner", "William Gibson", "William Golding", "William Makepeace Thackeray", "William Shakespeare", "Zadie Smith"];
    M = ["Audiobook", "Ebook", "Hardcover", "Paperback"];
    w = ["Adventure", "Biography", "Business", "Children's Literature", "Classic", "Comedy", "Comic", "Detective", "Drama", "Fantasy", "Graphic Novel", "Historical Fiction", "Horror", "Memoir", "Mystery", "Mythology", "Philosophy", "Poetry", "Psychology", "Religion", "Romance", "Science Fiction", "Thriller", "Western", "Young Adult"];
    L = ["Academic Press", "Ace Books", "Addison-Wesley", "Adis International", "Airiti Press", "Allen Ltd", "Andrews McMeel Publishing", "Anova Books", "Anvil Press Poetry", "Applewood Books", "Apress", "Athabasca University Press", "Atheneum Books", "Atheneum Publishers", "Atlantic Books", "Atlas Press", "BBC Books", "Ballantine Books", "Banner of Truth Trust", "Bantam Books", "Bantam Spectra", "Barrie & Jenkins", "Basic Books", "Belknap Press", "Bella Books", "Bellevue Literary Press", "Berg Publishers", "Berkley Books", "Bison Books", "Black Dog Publishing", "Black Library", "Black Sparrow Books", "Blackie and Son Limited", "Blackstaff Press", "Blackwell Publishing", "Bloodaxe Books", "Bloomsbury Publishing Plc", "Blue Ribbon Books", "Book League of America", "Book Works", "Booktrope", "Borgo Press", "Bowes & Bowes", "Boydell & Brewer", "Breslov Research Institute", "Brill", "Brimstone Press", "Broadview Press", "Burns & Oates", "Butterworth-Heinemann", "Caister Academic Press", "Cambridge University Press", "Candlewick Press", "Canongate Books", "Carcanet Press", "Carlton Books", "Carlton Publishing Group", "Carnegie Mellon University Press", "Casemate Publishers", "Cengage Learning", "Central European University Press", "Chambers Harrap", "Charles Scribner's Sons", "Chatto and Windus", "Chick Publications", "Chronicle Books", "Churchill Livingstone", "Cisco Press", "City Lights Publishers", "Cloverdale Corporation", "D. Appleton & Company", "D. Reidel", "DAW Books", "Da Capo Press", "Daedalus Publishing", "Dalkey Archive Press", "Darakwon Press", "David & Charles", "Dedalus Books", "Del Rey Books", "E. P. Dutton", "ECW Press", "Earthscan", "Edupedia Publications", "Eel Pie Publishing", "Eerdmans Publishing", "Ellora's Cave", "Elsevier", "Emerald Group Publishing", "Etruscan Press", "FabJob", "Faber and Faber", "Fairview Press", "Farrar, Straus & Giroux", "Fearless Books", "Felony & Mayhem Press", "Firebrand Books", "Flame Tree Publishing", "Focal Press", "G-Unit Books", "G. P. Putnam's Sons", "Gaspereau Press", "Gay Men's Press", "Gefen Publishing House", "George H. Doran Company", "George Newnes", "George Routledge & Sons", "Godwit Press", "Golden Cockerel Press", "HMSO", "Hachette Book Group USA", "Hackett Publishing Company", "Hamish Hamilton", "Happy House", "Harcourt Assessment", "Harcourt Trade Publishers", "Harlequin Enterprises Ltd", "Harper & Brothers", "Harper & Row", "HarperCollins", "HarperPrism", "HarperTrophy", "Harry N. Abrams, Inc.", "Harvard University Press", "Harvest House", "Harvill Press at Random House", "Hawthorne Books", "Hay House", "Haynes Manuals", "Heyday Books", "Hodder & Stoughton", "Hodder Headline", "Hogarth Press", "Holland Park Press", "Holt McDougal", "Horizon Scientific Press", "Ian Allan Publishing", "Ignatius Press", "Imperial War Museum", "Indiana University Press", "J. M. Dent", "Jaico Publishing House", "Jarrolds Publishing", "John Blake Publishing", "Karadi Tales", "Kensington Books", "Kessinger Publishing", "Kodansha", "Kogan Page", "Koren Publishers Jerusalem", "Ladybird Books", "Leaf Books", "Leafwood Publishers", "Left Book Club", "Legend Books", "Lethe Press", "Libertas Academica", "Liberty Fund", "Library of America", "Lion Hudson", "Macmillan Publishers", "Mainstream Publishing", "Manchester University Press", "Mandrake Press", "Mandrake of Oxford", "Manning Publications", "Manor House Publishing", "Mapin Publishing", "Marion Boyars Publishers", "Mark Batty Publisher", "Marshall Cavendish", "Marshall Pickering", "Martinus Nijhoff Publishers", "Mascot Books", "Matthias Media", "McClelland and Stewart", "McFarland & Company", "McGraw Hill Financial", "McGraw-Hill Education", "Medknow Publications", "Naiad Press", "Nauka", "NavPress", "New Directions Publishing", "New English Library", "New Holland Publishers", "New Village Press", "Newnes", "No Starch Press", "Nonesuch Press", "O'Reilly Media", "Oberon Books", "Open Court Publishing Company", "Open University Press", "Orchard Books", "Orion Books", "Packt Publishing", "Palgrave Macmillan", "Pan Books", "Pantheon Books at Random House", "Papadakis Publisher", "Parachute Publishing", "Parragon", "Pathfinder Press", "Paulist Press", "Pavilion Books", "Peace Hill Press", "Pecan Grove Press", "Pen and Sword Books", "Penguin Books", "Random House", "Reed Elsevier", "Reed Publishing", "SAGE Publications", "Salt Publishing", "Sams Publishing", "Schocken Books", "Scholastic Press", "Seagull Books", "Secker & Warburg", "Shambhala Publications", "Shire Books", "Shoemaker & Hoard Publishers", "Shuter & Shooter Publishers", "Sidgwick & Jackson", "Signet Books", "Simon & Schuster", "St. Martin's Press", "T & T Clark", "Tachyon Publications", "Tammi", "Target Books", "Tarpaulin Sky Press", "Tartarus Press", "Tate Publishing & Enterprises", "Taunton Press", "Taylor & Francis", "Ten Speed Press", "UCL Press", "Unfinished Monument Press", "United States Government Publishing Office", "University of Akron Press", "University of Alaska Press", "University of California Press", "University of Chicago Press", "University of Michigan Press", "University of Minnesota Press", "University of Nebraska Press", "Velazquez Press", "Verso Books", "Victor Gollancz Ltd", "Viking Press", "Vintage Books", "Vintage Books at Random House", "Virago Press", "Virgin Publishing", "Voyager Books", "Zed Books", "Ziff Davis Media", "Zondervan"];
    D = ["A Song of Ice and Fire", "Anna Karenina", "Colonel Race", "Discworld", "Dune", "Harry Potter", "Hercule Poirot", "His Dark Materials", "Jane Austen Murder Mysteries", "Little Women", "Outlander", "Percy Jackson", "Sherlock Holmes", "The Arc of a Scythe", "The Bartimaeus Trilogy", "The Border Trilogy", "The Chronicles of Narnia", "The Dark Tower", "The Dresden Files", "The Eighth Life", "The Foundation Series", "The Hitchhiker's Guide to the Galaxy", "The Hunger Games", "The Infinity Cycle", "The Inheritance Cycle", "The Lord of the Rings", "The Maze Runner", "The Prison Healer", "The Red Rising Saga", "The Southern Reach", "The Wheel of Time", "Thursday Next Series", "Twilight", "War and Peace"];
    R = ["1984", "20,000 Leagues Under the Sea", "A Bend in the River", "A Brief History of Time", "A Clockwork Orange", "A Confederacy of Dunces", "A Doll's House", "A Handful of Dust", "A Modest Proposal", "A Passage to India", "A Portrait of the Artist as a Young Man", "A Room with a View", "A Study in Scarlet", "A Tale of Two Cities", "A Wrinkle in Time", "Absalom, Absalom!", "Adventures of Huckleberry Finn", "Alice's Adventures in Wonderland", "All Quiet on the Western Front", "All the King's Men", "American Pastoral", "An American Tragedy", "And Then There Were None", "Animal Farm", "Anna Karenina", "Anne of Green Gables", "Are You There God? It's Me, Margaret", "As I Lay Dying", "Atlas Shrugged", "Atonement", "Austerlitz", "Beloved", "Beyond Good and Evil", "Bible", "Bleak House", "Blood Meridian", "Brave New World", "Brideshead Revisited", "Candide", "Carmilla", "Catch-22", "Charlie and the Chocolate Factory", "Charlotte's Web", "Clarissa", "Cranford", "Crime and Punishment", "Dao De Jing: A Minimalist Translation", "David Copperfield", "Deliverance", "Don Quixote", "Dora", "Dr. Zhivago", "Dracula", "Dubliners", "Dune", "East of Eden", "Emma", "Fahrenheit 451", "Faust", "For Whom the Bell Tolls", "Frankenstein", "Freakonomics", "Go Tell It on the Mountain", "Gone with the Wind", "Great Expectations", "Grimms' Fairy Tales", "Gulliver's Travels", "Hamlet", "Harry Potter and the Sorcerer's Stone", "Heart of Darkness", "Herzog", "His Dark Materials", "Hitting the line", "Housekeeping", "I, Claudius", "If on a Winter's Night a Traveler", "In Cold Blood", "In Search of Lost Time", "Invisible Man", "It", "Jane Eyre", "Josefine Mutzenbacher", "Jude the Obscure", "L.A. Confidential", "Leaves of Grass", "Les Miserables", "Life of Pi", "Little Women", "Lolita", "Long Walk to Freedom", "Lord Jim", "Lord of the Flies", "Lucky Jim", "Madame Bovary", "Malone Dies", "Meditations", "Men Without Women", "Metamorphosis", "Middlemarch", "Midnight's Children", "Moby Dick", "Money", "Mrs. Dalloway", "My Bondage and My Freedom", "My Life", "Native Son", "Neuromancer", "Never Let Me Go", "Nightmare Abbey", "Nineteen Eighty Four", "Nostromo", "Notes from the Underground", "Of Mice and Men", "Oliver Twist", "On the Duty of Civil Disobedience", "On the Road", "One Flew Over the Cuckoo's Nest", "One Hundred Years of Solitude", "One Thousand and One Nights", "Oscar and Lucinda", "Pale Fire", "Paradise Lost", "Peter Pan", "Portnoy's Complaint", "Pride and Prejudice", "Rabbit, Run", "Republic", "Revolutionary Road", "Robinson Crusoe", "Romeo and Juliet", "Ruth Fielding in Alaska", "Scoop", "Second Treatise of Government", "Slaughterhouse Five", "Stories of Anton Chekhov", "Sybil", "Tess of the d'Urbervilles", "The Adventures of Augie March", "The Adventures of Huckleberry Finn", "The Adventures of Sherlock Holmes", "The Adventures of Tom Sawyer", "The Aeneid", "The Alchemist", "The Ambassadors", "The Art of War", "The Big Sleep", "The Black Sheep", "The Blue Castle", "The Brief Wondrous Life of Oscar Wao", "The Brothers Karamazov", "The Call of the Wild", "The Canterbury Tales", "The Catcher in the Rye", "The Color Purple", "The Complete Works of Edgar Allen Poe", "The Corrections", "The Count of Monte Cristo", "The Day of the Locust", "The Diary of a Nobody", "The Diary of a Young Girl", "The Divine Comedy", "The Enchanted April", "The Fountainhead", "The Golden Bowl", "The Golden Notebook", "The Good Soldier", "The Grapes of Wrath", "The Great Gatsby", "The Handmaid's Tale", "The Heart is a Lonely Hunter", "The Heart of the Matter", "The Hobbit", "The Hound of the Baskervilles", "The Idiot", "The Iliad", "The King in Yellow", "The Kite Runner", "The Lion, the Witch, and the Wardrobe", "The Little Prince", "The Lord of the Rings", "The Magic Mountain", "The Maltese Falcon", "The Master and Margarita", "The Moviegoer", "The Naked and the Dead", "The Odyssey", "The Old Man and the Sea", "The Pickwick Papers", "The Picture of Dorian Gray", "The Pilgrim's Progress", "The Pillars of the Earth", "The Plague", "The Portrait of a Lady", "The Prime of Miss Jean Brodie", "The Prince", "The Problems of Philosophy", "The Prophet", "The Pursuit of Love", "The Rainbow", "The Red and the Black", "The Remains of the Day", "The Republic", "The Scarlet Letter", "The Sleepwalkers", "The Sound and the Fury", "The Stand", "The Strange Case of Dr. Jekyll and Mr. Hyde", "The Stranger", "The Sun Also Rises", "The Thirty-Nine Steps", "The Three Musketeers", "The Time Machine", "The Tin Drum", "The Trial", "The War of the Worlds", "The Waste Land", "The Way We Live Now", "The Wind in the Willows", "The Woman in White", "The Wonderful Wizard of Oz", "The Works of Edgar Allan Poe", "The Yellow Wallpaper", "Things Fall Apart", "Tinker, Tailor, Soldier, Spy", "To Kill a Mockingbird", "To the Lighthouse", "Tom Jones", "Treasure Island", "Tristram Shandy", "Tropic of Cancer", "U.S.A. Trilogy", "Ulysses", "Uncle Tom's Cabin", "Under the Volcano", "Underworld", "Vanity Fair", "Walden", "War and Peace", "Watchmen", "Winnie-the-Pooh", "Wuthering Heights"];
    Xa = { author: T, format: M, genre: w, publisher: L, series: D, title: R };
    P = Xa;
    H = ["###-###-####", "(###) ###-####", "1-###-###-####", "###.###.####"];
    $a = { formats: H };
    W = $a;
    G = ["azure", "black", "blue", "cyan", "fuchsia", "gold", "green", "grey", "indigo", "ivory", "lavender", "lime", "magenta", "maroon", "mint green", "olive", "orange", "orchid", "pink", "plum", "purple", "red", "salmon", "silver", "sky blue", "tan", "teal", "turquoise", "violet", "white", "yellow"];
    er = { human: G };
    F = er;
    N = ["Automotive", "Baby", "Beauty", "Books", "Clothing", "Computers", "Electronics", "Games", "Garden", "Grocery", "Health", "Home", "Industrial", "Jewelry", "Kids", "Movies", "Music", "Outdoors", "Shoes", "Sports", "Tools", "Toys"];
    E = ["Discover the {{animal.type}}-like agility of our {{commerce.product}}, perfect for {{word.adjective}} users", "Discover the {{word.adjective}} new {{commerce.product}} with an exciting mix of {{commerce.productMaterial}} ingredients", "Ergonomic {{commerce.product}} made with {{commerce.productMaterial}} for all-day {{word.adjective}} support", "Experience the {{color.human}} brilliance of our {{commerce.product}}, perfect for {{word.adjective}} environments", "Featuring {{science.chemical_element.name}}-enhanced technology, our {{commerce.product}} offers unparalleled {{word.adjective}} performance", "Innovative {{commerce.product}} featuring {{word.adjective}} technology and {{commerce.productMaterial}} construction", "Introducing the {{location.country}}-inspired {{commerce.product}}, blending {{word.adjective}} style with local craftsmanship", "New {{color.human}} {{commerce.product}} with ergonomic design for {{word.adjective}} comfort", 'New {{commerce.product}} model with {{number.int({"min": 1, "max": 100})}} GB RAM, {{number.int({"min": 1, "max": 1000})}} GB storage, and {{word.adjective}} features', "Our {{animal.type}}-friendly {{commerce.product}} ensures {{word.adjective}} comfort for your pets", "Our {{food.adjective}}-inspired {{commerce.product}} brings a taste of luxury to your {{word.adjective}} lifestyle", "Professional-grade {{commerce.product}} perfect for {{word.adjective}} training and recreational use", "Savor the {{food.adjective}} essence in our {{commerce.product}}, designed for {{word.adjective}} culinary adventures", "Stylish {{commerce.product}} designed to make you stand out with {{word.adjective}} looks", "The sleek and {{word.adjective}} {{commerce.product}} comes with {{color.human}} LED lighting for smart functionality", "The {{color.human}} {{commerce.product}} combines {{location.country}} aesthetics with {{science.chemical_element.name}}-based durability", "The {{company.catchPhrase}} {{commerce.product}} offers reliable performance and {{word.adjective}} design", "The {{person.firstName}} {{commerce.product}} is the latest in a series of {{word.adjective}} products from {{company.name}}", "{{commerce.productAdjective}} {{commerce.product}} designed with {{commerce.productMaterial}} for {{word.adjective}} performance", "{{company.name}}'s most advanced {{commerce.product}} technology increases {{word.adjective}} capabilities"];
    J = { adjective: ["Awesome", "Bespoke", "Electronic", "Elegant", "Ergonomic", "Fantastic", "Fresh", "Frozen", "Generic", "Gorgeous", "Handcrafted", "Handmade", "Incredible", "Intelligent", "Licensed", "Luxurious", "Modern", "Oriental", "Practical", "Recycled", "Refined", "Rustic", "Sleek", "Small", "Soft", "Tasty", "Unbranded"], material: ["Aluminum", "Bamboo", "Bronze", "Ceramic", "Concrete", "Cotton", "Gold", "Granite", "Marble", "Metal", "Plastic", "Rubber", "Silk", "Steel", "Wooden"], product: ["Bacon", "Ball", "Bike", "Car", "Chair", "Cheese", "Chicken", "Chips", "Computer", "Fish", "Gloves", "Hat", "Keyboard", "Mouse", "Pants", "Pizza", "Salad", "Sausages", "Shirt", "Shoes", "Soap", "Table", "Towels", "Tuna"] };
    ar = { department: N, product_description: E, product_name: J };
    I = ar;
    K = ["AI-driven", "Adaptive", "Advanced", "Automated", "Balanced", "Business-focused", "Centralized", "Compatible", "Configurable", "Cross-platform", "Customer-focused", "Customizable", "Decentralized", "Devolved", "Digitized", "Distributed", "Diverse", "Enhanced", "Ergonomic", "Exclusive", "Expanded", "Extended", "Face to face", "Focused", "Front-line", "Fully-configurable", "Fundamental", "Future-proofed", "Grass-roots", "Horizontal", "Immersive", "Implemented", "Innovative", "Integrated", "Intuitive", "Managed", "Monitored", "Multi-tiered", "Networked", "Open-architected", "Open-source", "Operative", "Optimized", "Optional", "Organic", "Organized", "Persevering", "Persistent", "Phased", "Polarised", "Proactive", "Profit-focused", "Profound", "Programmable", "Progressive", "Public-key", "Quality-focused", "Reactive", "Realigned", "Reduced", "Reverse-engineered", "Robust", "Seamless", "Secured", "Self-enabling", "Sharable", "Smart", "Stand-alone", "Streamlined", "Sustainable", "Synchronised", "Team-oriented", "Total", "Triple-buffered", "Universal", "Upgradable", "User-centric", "User-friendly", "Versatile", "Virtual", "Visionary"];
    O = ["24/7", "AI-driven", "B2B", "B2C", "back-end", "best-of-breed", "bleeding-edge", "collaborative", "compelling", "cross-media", "cross-platform", "customized", "cutting-edge", "decentralized", "distributed", "dynamic", "efficient", "end-to-end", "enterprise", "extensible", "frictionless", "front-end", "generative", "global", "granular", "holistic", "immersive", "impactful", "innovative", "integrated", "interactive", "intuitive", "killer", "leading-edge", "magnetic", "mission-critical", "next-generation", "one-to-one", "open-source", "out-of-the-box", "plug-and-play", "proactive", "quantum", "real-time", "revolutionary", "rich", "robust", "scalable", "seamless", "smart", "sticky", "strategic", "sustainable", "synergistic", "transparent", "turn-key", "ubiquitous", "user-centric", "value-added", "vertical", "viral", "virtual", "visionary", "world-class"];
    x = ["AI", "ROI", "applications", "architectures", "blockchains", "channels", "communities", "content", "convergence", "deliverables", "e-commerce", "experiences", "functionalities", "infrastructures", "initiatives", "interfaces", "large language models", "lifetime value", "markets", "methodologies", "metrics", "mindshare", "models", "networks", "niches", "paradigms", "partnerships", "platforms", "relationships", "schemas", "smart contracts", "solutions", "supply-chains", "synergies", "systems", "technologies", "users", "web services"];
    z = ["aggregate", "architect", "benchmark", "brand", "collaborate", "cultivate", "deliver", "deploy", "disintermediate", "drive", "embrace", "empower", "enable", "engage", "engineer", "enhance", "evolve", "expedite", "exploit", "extend", "facilitate", "gamify", "generate", "grow", "harness", "implement", "incentivize", "incubate", "innovate", "integrate", "iterate", "leverage", "maximize", "mesh", "monetize", "optimize", "orchestrate", "productize", "redefine", "reinvent", "repurpose", "revolutionize", "scale", "seize", "simplify", "strategize", "streamline", "syndicate", "synthesize", "target", "transform", "transition", "unleash", "utilize", "visualize", "whiteboard"];
    V = ["24 hour", "24/7", "AI-powered", "actuating", "analyzing", "asymmetric", "asynchronous", "attitude-oriented", "bifurcated", "bottom-line", "clear-thinking", "client-driven", "client-server", "cloud-native", "coherent", "cohesive", "composite", "content-based", "context-sensitive", "contextually-based", "data-driven", "dedicated", "demand-driven", "directional", "discrete", "disintermediate", "dynamic", "eco-centric", "empowering", "encompassing", "executive", "explicit", "exuding", "fault-tolerant", "fresh-thinking", "full-range", "global", "heuristic", "high-level", "holistic", "homogeneous", "human-resource", "hybrid", "immersive", "impactful", "incremental", "intangible", "interactive", "intermediate", "leading edge", "local", "logistical", "maximized", "methodical", "mission-critical", "mobile", "modular", "motivating", "national", "needs-based", "neutral", "next generation", "optimal", "optimizing", "radical", "real-time", "reciprocal", "regional", "resilient", "responsive", "scalable", "secondary", "stable", "static", "sustainable", "system-worthy", "systematic", "systemic", "tangible", "tertiary", "transitional", "uniform", "user-facing", "value-added", "well-modulated", "zero administration", "zero defect", "zero tolerance", "zero trust"];
    Y = ["Group", "Inc", "LLC", "and Sons"];
    j = ["{{person.last_name.generic}} - {{person.last_name.generic}}", "{{person.last_name.generic}} {{company.legal_entity_type}}", "{{person.last_name.generic}}, {{person.last_name.generic}} and {{person.last_name.generic}}"];
    q = ["ability", "access", "adapter", "algorithm", "alliance", "analyzer", "application", "approach", "architecture", "archive", "array", "artificial intelligence", "attitude", "benchmark", "budgetary management", "capability", "capacity", "challenge", "circuit", "collaboration", "complexity", "concept", "conglomeration", "contingency", "core", "customer loyalty", "data-warehouse", "database", "definition", "emulation", "encoding", "encryption", "firmware", "flexibility", "focus group", "forecast", "frame", "framework", "function", "functionalities", "generative AI", "hardware", "help-desk", "hierarchy", "hub", "implementation", "infrastructure", "initiative", "installation", "instruction set", "interface", "internet solution", "intranet", "knowledge base", "knowledge user", "leverage", "local area network", "matrices", "matrix", "methodology", "microservice", "middleware", "migration", "model", "moderator", "monitoring", "moratorium", "neural-net", "open architecture", "orchestration", "paradigm", "parallelism", "policy", "portal", "pricing structure", "process improvement", "product", "productivity", "project", "projection", "protocol", "service-desk", "software", "solution", "standardization", "strategy", "structure", "success", "support", "synergy", "system engine", "task-force", "throughput", "time-frame", "toolset", "utilisation", "website", "workforce"];
    rr = { adjective: K, buzz_adjective: O, buzz_noun: x, buzz_verb: z, descriptor: V, legal_entity_type: Y, name_pattern: j, noun: q };
    U = rr;
    Z = ["avatar", "category", "comment", "createdAt", "email", "group", "id", "name", "password", "phone", "status", "title", "token", "updatedAt"];
    or = { column: Z };
    _ = or;
    Q = { wide: ["April", "August", "December", "February", "January", "July", "June", "March", "May", "November", "October", "September"], abbr: ["Apr", "Aug", "Dec", "Feb", "Jan", "Jul", "Jun", "Mar", "May", "Nov", "Oct", "Sep"] };
    X = { wide: ["Friday", "Monday", "Saturday", "Sunday", "Thursday", "Tuesday", "Wednesday"], abbr: ["Fri", "Mon", "Sat", "Sun", "Thu", "Tue", "Wed"] };
    nr = { month: Q, weekday: X };
    $ = nr;
    ee = ["Auto Loan", "Checking", "Credit Card", "Home Loan", "Investment", "Money Market", "Personal Loan", "Savings"];
    ae = ["34##-######-####L", "37##-######-####L"];
    re = ["30[0-5]#-######-###L", "36##-######-###L", "54##-####-####-###L"];
    oe = ["6011-####-####-###L", "64[4-9]#-####-####-###L", "65##-####-####-###L"];
    ne = ["3528-####-####-###L", "3529-####-####-###L", "35[3-8]#-####-####-###L"];
    ie = ["2[221-720]-####-####-###L", "5[1-5]##-####-####-###L"];
    te = ["4###########L", "4###-####-####-###L"];
    ir = { american_express: ae, diners_club: re, discover: oe, jcb: ne, mastercard: ie, visa: te };
    le = ir;
    se = [{ name: "UAE Dirham", code: "AED", symbol: "", numericCode: "784" }, { name: "Afghani", code: "AFN", symbol: "\u060B", numericCode: "971" }, { name: "Lek", code: "ALL", symbol: "Lek", numericCode: "008" }, { name: "Armenian Dram", code: "AMD", symbol: "", numericCode: "051" }, { name: "Netherlands Antillian Guilder", code: "ANG", symbol: "\u0192", numericCode: "532" }, { name: "Kwanza", code: "AOA", symbol: "", numericCode: "973" }, { name: "Argentine Peso", code: "ARS", symbol: "$", numericCode: "032" }, { name: "Australian Dollar", code: "AUD", symbol: "$", numericCode: "036" }, { name: "Aruban Guilder", code: "AWG", symbol: "\u0192", numericCode: "533" }, { name: "Azerbaijanian Manat", code: "AZN", symbol: "\u043C\u0430\u043D", numericCode: "944" }, { name: "Convertible Marks", code: "BAM", symbol: "KM", numericCode: "977" }, { name: "Barbados Dollar", code: "BBD", symbol: "$", numericCode: "052" }, { name: "Taka", code: "BDT", symbol: "", numericCode: "050" }, { name: "Bulgarian Lev", code: "BGN", symbol: "\u043B\u0432", numericCode: "975" }, { name: "Bahraini Dinar", code: "BHD", symbol: "", numericCode: "048" }, { name: "Burundi Franc", code: "BIF", symbol: "", numericCode: "108" }, { name: "Bermudian Dollar (customarily known as Bermuda Dollar)", code: "BMD", symbol: "$", numericCode: "060" }, { name: "Brunei Dollar", code: "BND", symbol: "$", numericCode: "096" }, { name: "Boliviano boliviano", code: "BOB", symbol: "Bs", numericCode: "068" }, { name: "Brazilian Real", code: "BRL", symbol: "R$", numericCode: "986" }, { name: "Bahamian Dollar", code: "BSD", symbol: "$", numericCode: "044" }, { name: "Pula", code: "BWP", symbol: "P", numericCode: "072" }, { name: "Belarusian Ruble", code: "BYN", symbol: "Rbl", numericCode: "933" }, { name: "Belize Dollar", code: "BZD", symbol: "BZ$", numericCode: "084" }, { name: "Canadian Dollar", code: "CAD", symbol: "$", numericCode: "124" }, { name: "Congolese Franc", code: "CDF", symbol: "", numericCode: "976" }, { name: "Swiss Franc", code: "CHF", symbol: "CHF", numericCode: "756" }, { name: "Chilean Peso", code: "CLP", symbol: "$", numericCode: "152" }, { name: "Yuan Renminbi", code: "CNY", symbol: "\xA5", numericCode: "156" }, { name: "Colombian Peso", code: "COP", symbol: "$", numericCode: "170" }, { name: "Costa Rican Colon", code: "CRC", symbol: "\u20A1", numericCode: "188" }, { name: "Cuban Peso", code: "CUP", symbol: "\u20B1", numericCode: "192" }, { name: "Cape Verde Escudo", code: "CVE", symbol: "", numericCode: "132" }, { name: "Czech Koruna", code: "CZK", symbol: "K\u010D", numericCode: "203" }, { name: "Djibouti Franc", code: "DJF", symbol: "", numericCode: "262" }, { name: "Danish Krone", code: "DKK", symbol: "kr", numericCode: "208" }, { name: "Dominican Peso", code: "DOP", symbol: "RD$", numericCode: "214" }, { name: "Algerian Dinar", code: "DZD", symbol: "", numericCode: "012" }, { name: "Egyptian Pound", code: "EGP", symbol: "\xA3", numericCode: "818" }, { name: "Nakfa", code: "ERN", symbol: "", numericCode: "232" }, { name: "Ethiopian Birr", code: "ETB", symbol: "", numericCode: "230" }, { name: "Euro", code: "EUR", symbol: "\u20AC", numericCode: "978" }, { name: "Fiji Dollar", code: "FJD", symbol: "$", numericCode: "242" }, { name: "Falkland Islands Pound", code: "FKP", symbol: "\xA3", numericCode: "238" }, { name: "Pound Sterling", code: "GBP", symbol: "\xA3", numericCode: "826" }, { name: "Lari", code: "GEL", symbol: "", numericCode: "981" }, { name: "Cedi", code: "GHS", symbol: "", numericCode: "936" }, { name: "Gibraltar Pound", code: "GIP", symbol: "\xA3", numericCode: "292" }, { name: "Dalasi", code: "GMD", symbol: "", numericCode: "270" }, { name: "Guinea Franc", code: "GNF", symbol: "", numericCode: "324" }, { name: "Quetzal", code: "GTQ", symbol: "Q", numericCode: "320" }, { name: "Guyana Dollar", code: "GYD", symbol: "$", numericCode: "328" }, { name: "Hong Kong Dollar", code: "HKD", symbol: "$", numericCode: "344" }, { name: "Lempira", code: "HNL", symbol: "L", numericCode: "340" }, { name: "Gourde", code: "HTG", symbol: "", numericCode: "332" }, { name: "Forint", code: "HUF", symbol: "Ft", numericCode: "348" }, { name: "Rupiah", code: "IDR", symbol: "Rp", numericCode: "360" }, { name: "New Israeli Sheqel", code: "ILS", symbol: "\u20AA", numericCode: "376" }, { name: "Bhutanese Ngultrum", code: "BTN", symbol: "Nu", numericCode: "064" }, { name: "Indian Rupee", code: "INR", symbol: "\u20B9", numericCode: "356" }, { name: "Iraqi Dinar", code: "IQD", symbol: "", numericCode: "368" }, { name: "Iranian Rial", code: "IRR", symbol: "\uFDFC", numericCode: "364" }, { name: "Iceland Krona", code: "ISK", symbol: "kr", numericCode: "352" }, { name: "Jamaican Dollar", code: "JMD", symbol: "J$", numericCode: "388" }, { name: "Jordanian Dinar", code: "JOD", symbol: "", numericCode: "400" }, { name: "Yen", code: "JPY", symbol: "\xA5", numericCode: "392" }, { name: "Kenyan Shilling", code: "KES", symbol: "", numericCode: "404" }, { name: "Som", code: "KGS", symbol: "\u043B\u0432", numericCode: "417" }, { name: "Riel", code: "KHR", symbol: "\u17DB", numericCode: "116" }, { name: "Comoro Franc", code: "KMF", symbol: "", numericCode: "174" }, { name: "North Korean Won", code: "KPW", symbol: "\u20A9", numericCode: "408" }, { name: "Won", code: "KRW", symbol: "\u20A9", numericCode: "410" }, { name: "Kuwaiti Dinar", code: "KWD", symbol: "", numericCode: "414" }, { name: "Cayman Islands Dollar", code: "KYD", symbol: "$", numericCode: "136" }, { name: "Tenge", code: "KZT", symbol: "\u043B\u0432", numericCode: "398" }, { name: "Kip", code: "LAK", symbol: "\u20AD", numericCode: "418" }, { name: "Lebanese Pound", code: "LBP", symbol: "\xA3", numericCode: "422" }, { name: "Sri Lanka Rupee", code: "LKR", symbol: "\u20A8", numericCode: "144" }, { name: "Liberian Dollar", code: "LRD", symbol: "$", numericCode: "430" }, { name: "Libyan Dinar", code: "LYD", symbol: "", numericCode: "434" }, { name: "Moroccan Dirham", code: "MAD", symbol: "", numericCode: "504" }, { name: "Moldovan Leu", code: "MDL", symbol: "", numericCode: "498" }, { name: "Malagasy Ariary", code: "MGA", symbol: "", numericCode: "969" }, { name: "Denar", code: "MKD", symbol: "\u0434\u0435\u043D", numericCode: "807" }, { name: "Kyat", code: "MMK", symbol: "", numericCode: "104" }, { name: "Tugrik", code: "MNT", symbol: "\u20AE", numericCode: "496" }, { name: "Pataca", code: "MOP", symbol: "", numericCode: "446" }, { name: "Ouguiya", code: "MRU", symbol: "", numericCode: "929" }, { name: "Mauritius Rupee", code: "MUR", symbol: "\u20A8", numericCode: "480" }, { name: "Rufiyaa", code: "MVR", symbol: "", numericCode: "462" }, { name: "Kwacha", code: "MWK", symbol: "", numericCode: "454" }, { name: "Mexican Peso", code: "MXN", symbol: "$", numericCode: "484" }, { name: "Malaysian Ringgit", code: "MYR", symbol: "RM", numericCode: "458" }, { name: "Metical", code: "MZN", symbol: "MT", numericCode: "943" }, { name: "Naira", code: "NGN", symbol: "\u20A6", numericCode: "566" }, { name: "Cordoba Oro", code: "NIO", symbol: "C$", numericCode: "558" }, { name: "Norwegian Krone", code: "NOK", symbol: "kr", numericCode: "578" }, { name: "Nepalese Rupee", code: "NPR", symbol: "\u20A8", numericCode: "524" }, { name: "New Zealand Dollar", code: "NZD", symbol: "$", numericCode: "554" }, { name: "Rial Omani", code: "OMR", symbol: "\uFDFC", numericCode: "512" }, { name: "Balboa", code: "PAB", symbol: "B/.", numericCode: "590" }, { name: "Nuevo Sol", code: "PEN", symbol: "S/.", numericCode: "604" }, { name: "Kina", code: "PGK", symbol: "", numericCode: "598" }, { name: "Philippine Peso", code: "PHP", symbol: "Php", numericCode: "608" }, { name: "Pakistan Rupee", code: "PKR", symbol: "\u20A8", numericCode: "586" }, { name: "Zloty", code: "PLN", symbol: "z\u0142", numericCode: "985" }, { name: "Guarani", code: "PYG", symbol: "Gs", numericCode: "600" }, { name: "Qatari Rial", code: "QAR", symbol: "\uFDFC", numericCode: "634" }, { name: "New Leu", code: "RON", symbol: "lei", numericCode: "946" }, { name: "Serbian Dinar", code: "RSD", symbol: "\u0414\u0438\u043D.", numericCode: "941" }, { name: "Russian Ruble", code: "RUB", symbol: "\u0440\u0443\u0431", numericCode: "643" }, { name: "Rwanda Franc", code: "RWF", symbol: "", numericCode: "646" }, { name: "Saudi Riyal", code: "SAR", symbol: "\uFDFC", numericCode: "682" }, { name: "Solomon Islands Dollar", code: "SBD", symbol: "$", numericCode: "090" }, { name: "Seychelles Rupee", code: "SCR", symbol: "\u20A8", numericCode: "690" }, { name: "Sudanese Pound", code: "SDG", symbol: "", numericCode: "938" }, { name: "Swedish Krona", code: "SEK", symbol: "kr", numericCode: "752" }, { name: "Singapore Dollar", code: "SGD", symbol: "$", numericCode: "702" }, { name: "Saint Helena Pound", code: "SHP", symbol: "\xA3", numericCode: "654" }, { name: "Leone", code: "SLE", symbol: "", numericCode: "925" }, { name: "Somali Shilling", code: "SOS", symbol: "S", numericCode: "706" }, { name: "Surinam Dollar", code: "SRD", symbol: "$", numericCode: "968" }, { name: "South Sudanese pound", code: "SSP", symbol: "", numericCode: "728" }, { name: "Dobra", code: "STN", symbol: "Db", numericCode: "930" }, { name: "Syrian Pound", code: "SYP", symbol: "\xA3", numericCode: "760" }, { name: "Lilangeni", code: "SZL", symbol: "", numericCode: "748" }, { name: "Baht", code: "THB", symbol: "\u0E3F", numericCode: "764" }, { name: "Somoni", code: "TJS", symbol: "", numericCode: "972" }, { name: "Manat", code: "TMT", symbol: "", numericCode: "934" }, { name: "Tunisian Dinar", code: "TND", symbol: "", numericCode: "788" }, { name: "Pa'anga", code: "TOP", symbol: "", numericCode: "776" }, { name: "Turkish Lira", code: "TRY", symbol: "\u20BA", numericCode: "949" }, { name: "Trinidad and Tobago Dollar", code: "TTD", symbol: "TT$", numericCode: "780" }, { name: "New Taiwan Dollar", code: "TWD", symbol: "NT$", numericCode: "901" }, { name: "Tanzanian Shilling", code: "TZS", symbol: "", numericCode: "834" }, { name: "Hryvnia", code: "UAH", symbol: "\u20B4", numericCode: "980" }, { name: "Uganda Shilling", code: "UGX", symbol: "", numericCode: "800" }, { name: "US Dollar", code: "USD", symbol: "$", numericCode: "840" }, { name: "Peso Uruguayo", code: "UYU", symbol: "$U", numericCode: "858" }, { name: "Uzbekistan Sum", code: "UZS", symbol: "\u043B\u0432", numericCode: "860" }, { name: "Venezuelan bol\xEDvar", code: "VES", symbol: "Bs", numericCode: "928" }, { name: "Dong", code: "VND", symbol: "\u20AB", numericCode: "704" }, { name: "Vatu", code: "VUV", symbol: "", numericCode: "548" }, { name: "Tala", code: "WST", symbol: "", numericCode: "882" }, { name: "CFA Franc BEAC", code: "XAF", symbol: "", numericCode: "950" }, { name: "East Caribbean Dollar", code: "XCD", symbol: "$", numericCode: "951" }, { name: "CFA Franc BCEAO", code: "XOF", symbol: "", numericCode: "952" }, { name: "CFP Franc", code: "XPF", symbol: "", numericCode: "953" }, { name: "Yemeni Rial", code: "YER", symbol: "\uFDFC", numericCode: "886" }, { name: "Rand", code: "ZAR", symbol: "R", numericCode: "710" }, { name: "Lesotho Loti", code: "LSL", symbol: "", numericCode: "426" }, { name: "Namibia Dollar", code: "NAD", symbol: "N$", numericCode: "516" }, { name: "Zambian Kwacha", code: "ZMW", symbol: "K", numericCode: "967" }, { name: "Zimbabwe Dollar", code: "ZWL", symbol: "", numericCode: "932" }];
    de = ["A {{finance.transactionType}} for {{finance.currencyCode}} {{finance.amount}} was made at {{company.name}} via card ending ****{{string.numeric(4)}} on account ***{{string.numeric(4)}}.", "A {{finance.transactionType}} of {{finance.currencyCode}} {{finance.amount}} occurred at {{company.name}} using a card ending in ****{{string.numeric(4)}} for account ***{{string.numeric(4)}}.", "Payment of {{finance.currencyCode}} {{finance.amount}} for {{finance.transactionType}} at {{company.name}}, processed with card ending ****{{string.numeric(4)}} linked to account ***{{string.numeric(4)}}.", "Transaction alert: {{finance.transactionType}} at {{company.name}} using card ending ****{{string.numeric(4)}} for an amount of {{finance.currencyCode}} {{finance.amount}} on account ***{{string.numeric(4)}}.", "You made a {{finance.transactionType}} of {{finance.currencyCode}} {{finance.amount}} at {{company.name}} using card ending in ****{{string.numeric(4)}} from account ***{{string.numeric(4)}}.", "Your {{finance.transactionType}} of {{finance.currencyCode}} {{finance.amount}} at {{company.name}} was successful. Charged via card ****{{string.numeric(4)}} to account ***{{string.numeric(4)}}.", "{{finance.transactionType}} at {{company.name}} with a card ending in ****{{string.numeric(4)}} for {{finance.currencyCode}} {{finance.amount}} from account ***{{string.numeric(4)}}.", "{{finance.transactionType}} confirmed at {{company.name}} for {{finance.currencyCode}} {{finance.amount}}, card ending in ****{{string.numeric(4)}} associated with account ***{{string.numeric(4)}}.", "{{finance.transactionType}} of {{finance.currencyCode}} {{finance.amount}} at {{company.name}} charged to account ending in {{string.numeric(4)}} using card ending in ****{{string.numeric(4)}}.", "{{finance.transactionType}} processed at {{company.name}} for {{finance.currencyCode}} {{finance.amount}}, using card ending ****{{string.numeric(4)}}. Account: ***{{string.numeric(4)}}.", "{{finance.transactionType}} transaction at {{company.name}} using card ending with ****{{string.numeric(4)}} for {{finance.currencyCode}} {{finance.amount}} in account ***{{string.numeric(4)}}."];
    ue = ["deposit", "invoice", "payment", "withdrawal"];
    tr = { account_type: ee, credit_card: le, currency: se, transaction_description_pattern: de, transaction_type: ue };
    ce = tr;
    me = ["bitter", "creamy", "crispy", "crunchy", "delicious", "fluffy", "fresh", "golden", "juicy", "moist", "rich", "salty", "savory", "smoky", "sour", "spicy", "sweet", "tangy", "tender", "zesty"];
    he = ["A classic pie filled with delicious {{food.meat}} and {{food.adjective}} {{food.ingredient}}, baked in a {{food.adjective}} pastry crust and topped with a golden-brown lattice.", "A delightful tart combining {{food.adjective}} {{food.vegetable}} and sweet {{food.fruit}}, set in a buttery pastry shell and finished with a hint of {{food.spice}}.", "A heartwarming {{food.ethnic_category}} soup, featuring fresh {{food.ingredient}} and an aromatic blend of traditional spices.", "A robust {{food.adjective}} stew featuring {{food.ethnic_category}} flavors, loaded with {{food.adjective}} meat, {{food.adjective}} vegetables, and a {{food.adjective}}, {{food.adjective}} broth.", "A simple {{food.fruit}} pie. No fancy stuff. Just pie.", "A slow-roasted {{animal.bird}} with a {{food.adjective}}, {{food.adjective}} exterior. Stuffed with {{food.fruit}} and covered in {{food.fruit}} sauce. Sides with {{food.vegetable}} puree and wild {{food.vegetable}}.", "A special {{color.human}} {{food.ingredient}} from {{location.country}}. To support the strong flavor it is sided with a tablespoon of {{food.spice}}.", "A succulent {{food.meat}} steak, encased in a {{food.adjective}} {{food.spice}} crust, served with a side of {{food.spice}} mashed {{food.vegetable}}.", "An exquisite {{food.meat}} roast, infused with the essence of {{food.fruit}}, slow-roasted to bring out its natural flavors and served with a side of creamy {{food.vegetable}}", "Baked {{food.ingredient}}-stuffed {{food.meat}}, seasoned with {{food.spice}} and {{food.adjective}} herbs, accompanied by roasted {{food.vegetable}} medley.", "Crispy fried {{food.meat}} bites, seasoned with {{food.spice}} and served with a tangy {{food.fruit}} dipping sauce.", "Fresh mixed greens tossed with {{food.spice}}-rubbed {{food.meat}}, {{food.vegetable}}, and a light dressing.", "Fresh {{food.ingredient}} with a pinch of {{food.spice}}, topped by a caramelized {{food.fruit}} with whipped cream", "Grilled {{food.meat}} kebabs, marinated in {{food.ethnic_category}} spices and served with a fresh {{food.vegetable}} and {{food.fruit}} salad.", "Hearty {{food.ingredient}} and {{food.meat}} stew, slow-cooked with {{food.spice}} and {{food.vegetable}} for a comforting, flavorful meal.", "Juicy {{food.meat}}, grilled to your liking and drizzled with a bold {{food.spice}} sauce, served alongside roasted {{food.vegetable}}.", "Our {{food.adjective}} {{food.meat}}, slow-cooked to perfection, accompanied by steamed {{food.vegetable}} and a rich, savory gravy.", "Tender {{food.meat}} skewers, glazed with a sweet and tangy {{food.fruit}} sauce, served over a bed of fragrant jasmine rice.", "Tenderly braised {{food.meat}} in a rich {{food.spice}} and {{food.vegetable}} sauce, served with a side of creamy {{food.vegetable}}.", "Three {{food.ingredient}} with {{food.vegetable}}, {{food.vegetable}}, {{food.vegetable}}, {{food.vegetable}} and {{food.ingredient}}. With a side of baked {{food.fruit}}, and your choice of {{food.ingredient}} or {{food.ingredient}}.", '{{number.int({"min":1, "max":99})}}-day aged {{food.meat}} steak, with choice of {{number.int({"min":2, "max":4})}} sides.'];
    ye = ["California maki", "Peking duck", "Philadelphia maki", "arepas", "barbecue ribs", "bruschette with tomato", "bunny chow", "caesar salad", "caprese salad", "cauliflower penne", "cheeseburger", "chicken fajitas", "chicken milanese", "chicken parm", "chicken wings", "chilli con carne", "ebiten maki", "fettuccine alfredo", "fish and chips", "french fries with sausages", "french toast", "hummus", "katsu curry", "kebab", "lasagne", "linguine with clams", "massaman curry", "meatballs with sauce", "mushroom risotto", "pappardelle alla bolognese", "pasta and beans", "pasta carbonara", "pasta with tomato and basil", "pho", "pierogi", "pizza", "poke", "pork belly buns", "pork sausage roll", "poutine", "ricotta stuffed ravioli", "risotto with seafood", "salmon nigiri", "scotch eggs", "seafood paella", "som tam", "souvlaki", "stinky tofu", "sushi", "tacos", "teriyaki chicken donburi", "tiramis\xF9", "tuna sashimi", "vegetable soup"];
    pe = ["{{food.adjective}} {{food.ethnic_category}} stew", "{{food.adjective}} {{food.meat}} with {{food.vegetable}}", "{{food.ethnic_category}} {{food.ingredient}} soup", "{{food.fruit}} and {{food.fruit}} tart", "{{food.fruit}} pie", "{{food.fruit}}-glazed {{food.meat}} skewers", "{{food.fruit}}-infused {{food.meat}} roast", "{{food.ingredient}} and {{food.meat}} pie", "{{food.ingredient}}-infused {{food.meat}}", "{{food.meat}} steak", "{{food.meat}} with {{food.fruit}} sauce", "{{food.spice}}-crusted {{food.meat}}", "{{food.spice}}-rubbed {{food.meat}} salad", "{{food.vegetable}} salad", "{{person.first_name.generic}}'s special {{food.ingredient}}"];
    ge = ["Ainu", "Albanian", "American", "Andhra", "Anglo-Indian", "Arab", "Argentine", "Armenian", "Assyrian", "Awadhi", "Azerbaijani", "Balochi", "Bangladeshi", "Bashkir", "Belarusian", "Bengali", "Berber", "Brazilian", "British", "Buddhist", "Bulgarian", "Cajun", "Cantonese", "Caribbean", "Chechen", "Chinese", "Chinese Islamic", "Circassian", "Crimean Tatar", "Cypriot", "Czech", "Danish", "Egyptian", "English", "Eritrean", "Estonian", "Ethiopian", "Filipino", "French", "Georgian", "German", "Goan", "Goan Catholic", "Greek", "Gujarati", "Hyderabad", "Indian", "Indian Chinese", "Indian Singaporean", "Indonesian", "Inuit", "Irish", "Italian", "Italian-American", "Jamaican", "Japanese", "Jewish - Israeli", "Karnataka", "Kazakh", "Keralite", "Korean", "Kurdish", "Laotian", "Latvian", "Lebanese", "Lithuanian", "Louisiana Creole", "Maharashtrian", "Malay", "Malaysian Chinese", "Malaysian Indian", "Mangalorean", "Mediterranean", "Mennonite", "Mexican", "Mordovian", "Mughal", "Native American", "Nepalese", "New Mexican", "Odia", "Pakistani", "Parsi", "Pashtun", "Pennsylvania Dutch", "Peranakan", "Persian", "Peruvian", "Polish", "Portuguese", "Punjabi", "Qu\xE9b\xE9cois", "Rajasthani", "Romani", "Romanian", "Russian", "Sami", "Serbian", "Sindhi", "Slovak", "Slovenian", "Somali", "South Indian", "Soviet", "Spanish", "Sri Lankan", "Taiwanese", "Tamil", "Tatar", "Texan", "Thai", "Turkish", "Udupi", "Ukrainian", "Vietnamese", "Yamal", "Zambian", "Zanzibari"];
    be = ["apple", "apricot", "aubergine", "avocado", "banana", "berry", "blackberry", "blood orange", "blueberry", "bush tomato", "butternut pumpkin", "cantaloupe", "cavalo", "cherry", "corella pear", "cranberry", "cumquat", "currant", "custard apple", "custard apples daikon", "date", "dragonfruit", "dried apricot", "elderberry", "feijoa", "fig", "fingerlime", "goji berry", "grape", "grapefruit", "guava", "honeydew melon", "incaberry", "jarrahdale pumpkin", "juniper berry", "kiwi fruit", "kiwiberry", "lemon", "lime", "longan", "loquat", "lychee", "mandarin", "mango", "mangosteen", "melon", "mulberry", "nashi pear", "nectarine", "olive", "orange", "papaw", "papaya", "passionfruit", "peach", "pear", "pineapple", "plum", "pomegranate", "prune", "rockmelon", "snowpea", "sprout", "starfruit", "strawberry", "sultana", "tangelo", "tomato", "watermelon"];
    Ce = ["achacha", "adzuki beans", "agar", "agave syrup", "ajowan seed", "albacore tuna", "alfalfa", "allspice", "almond oil", "almonds", "amaranth", "amchur", "anchovies", "aniseed", "annatto seed", "apple cider vinegar", "apple juice", "apple juice concentrate", "apples", "apricots", "arborio rice", "arrowroot", "artichoke", "arugula", "asafoetida", "asian greens", "asian noodles", "asparagus", "aubergine", "avocado", "avocado oil", "avocado spread", "bacon", "baking powder", "baking soda", "balsamic vinegar", "bamboo shoots", "banana", "barberry", "barley", "barramundi", "basil basmati rice", "bay leaves", "bean shoots", "bean sprouts", "beans", "beef", "beef stock", "beetroot", "berries", "besan", "black eyed beans", "blackberries", "blood oranges", "blue cheese", "blue eye trevalla", "blue swimmer crab", "blueberries", "bocconcini", "bok choy", "bonito flakes", "bonza", "borlotti beans", "bran", "brazil nut", "bread", "brie", "broccoli", "broccolini", "brown flour", "brown mushrooms", "brown rice", "brown rice vinegar", "brussels sprouts", "buckwheat", "buckwheat flour", "buckwheat noodles", "bulghur", "bush tomato", "butter", "butter beans", "buttermilk", "butternut lettuce", "butternut pumpkin", "cabbage", "cacao", "cake", "calamari", "camellia tea oil", "camembert", "camomile", "candle nut", "cannellini beans", "canola oil", "cantaloupe", "capers", "capsicum", "caraway seed", "cardamom", "carob carrot", "carrot", "cashews", "cassia bark", "cauliflower", "cavalo", "cayenne", "celery", "celery seed", "cheddar", "cherries", "chestnut", "chia seeds", "chicken", "chicken stock", "chickory", "chickpea", "chilli pepper", "chinese cabbage", "chinese five spice", "chives", "choy sum", "cinnamon", "clams", "cloves", "cocoa powder", "coconut", "coconut oil", "coconut water", "coffee", "common cultivated mushrooms", "corella pear", "coriander leaves", "coriander seed", "corn oil", "corn syrup", "corn tortilla", "cornichons", "cornmeal", "cos lettuce", "cottage cheese", "cous cous", "crabs", "cranberry", "cream", "cream cheese", "cucumber", "cumin", "cumquat", "currants", "curry leaves", "curry powder", "custard apples", "dandelion", "dark chocolate", "dashi", "dates", "dill", "dragonfruit", "dried apricots", "dried chinese broccoli", "duck", "edam", "edamame", "eggplant", "eggs", "elderberry", "endive", "english spinach", "enoki mushrooms", "extra virgin olive oil", "farmed prawns", "feijoa", "fennel", "fennel seeds", "fenugreek", "feta", "figs", "file powder", "fingerlime", "fish sauce", "fish stock", "flat mushrooms", "flathead", "flaxseed", "flaxseed oil", "flounder", "flour", "freekeh", "french eschallots", "fresh chillies", "fromage blanc", "fruit", "galangal", "garam masala", "garlic", "goat cheese", "goat milk", "goji berry", "grape seed oil", "grapefruit", "grapes", "green beans", "green pepper", "green tea", "green tea noodles", "greenwheat freekeh", "gruyere", "guava", "gula melaka", "haloumi", "ham", "haricot beans", "harissa", "hazelnut", "hijiki", "hiramasa kingfish", "hokkien noodles", "honey", "honeydew melon", "horseradish", "hot smoked salmon", "hummus", "iceberg lettuce", "incaberries", "jarrahdale pumpkin", "jasmine rice", "jelly", "jerusalem artichoke", "jewfish", "jicama", "juniper berries", "kale", "kangaroo", "kecap manis", "kenchur", "kidney beans", "kidneys", "kiwi berries", "kiwi fruit", "kohlrabi", "kokam", "kombu", "koshihikari rice", "kudzu", "kumera", "lamb", "lavender flowers", "leeks", "lemon", "lemongrass", "lentils", "lettuce", "licorice", "lime leaves", "limes", "liver", "lobster", "longan", "loquats", "lotus root", "lychees", "macadamia nut", "macadamia oil", "mace", "mackerel", "mahi mahi", "mahlab", "malt vinegar", "mandarins", "mango", "mangosteens", "maple syrup", "margarine", "marigold", "marjoram", "mastic", "melon", "milk", "milk chocolate", "mint", "miso", "molasses", "monkfish", "morwong", "mountain bread", "mozzarella", "muesli", "mulberries", "mullet", "mung beans", "mussels", "mustard", "mustard seed", "nashi pear", "nasturtium", "nectarines", "nori", "nutmeg", "nutritional yeast", "nuts", "oat flour", "oatmeal", "oats", "octopus", "okra", "olive oil", "olives", "omega spread", "onion", "oranges", "oregano", "oyster mushrooms", "oyster sauce", "oysters", "pandanus leaves", "papaw", "papaya", "paprik", "parmesan cheese", "parrotfish", "parsley", "parsnip", "passionfruit", "pasta", "peaches", "peanuts", "pear", "pear juice", "pears", "peas", "pecan nut", "pecorino", "pepitas", "peppercorns", "peppermint", "peppers", "persimmon", "pine nut", "pineapple", "pinto beans", "pistachio nut", "plums", "polenta", "pomegranate", "poppy seed", "porcini mushrooms", "pork", "potato flour", "potatoes", "provolone", "prunes", "pumpkin", "pumpkin seed", "purple carrot", "purple rice", "quark", "quince", "quinoa", "radicchio", "radish", "raisin", "raspberry", "red cabbage", "red lentils", "red pepper", "red wine", "red wine vinegar", "redfish", "rhubarb", "rice flour", "rice noodles", "rice paper", "rice syrup", "ricemilk", "ricotta", "rockmelon", "rose water", "rosemary", "rye", "rye bread", "safflower oil", "saffron", "sage", "sake", "salmon", "sardines", "sausages", "scallops", "sea salt", "semolina", "sesame oil", "sesame seeds", "shark", "shiitake mushrooms", "silverbeet", "slivered almonds", "smoked trout", "snapper", "snowpea sprouts", "snowpeas", "soba", "sour dough bread", "soy", "soy beans", "soy flour", "soy milk", "soy sauce", "soymilk", "spearmint", "spelt", "spelt bread", "spinach", "spring onions", "sprouts", "squash", "squid", "star anise", "star fruit", "starfruit", "stevia", "strawberries", "sugar", "sultanas", "sun-dried tomatoes", "sunflower oil", "sunflower seeds", "sweet chilli sauce", "sweet potato", "swiss chard", "swordfish", "szechuan pepperberry", "tabasco", "tahini", "taleggio cheese", "tamari", "tamarillo", "tangelo", "tapioca", "tapioca flour", "tarragon", "tea", "tea oil", "tempeh", "thyme", "tinned", "tofu", "tom yum", "tomatoes", "trout", "tuna", "turkey", "turmeric", "turnips", "unbleached flour", "vanilla beans", "vegetable oil", "vegetable spaghetti", "vegetable stock", "vermicelli noodles", "vinegar", "wakame", "walnut", "warehou", "wasabi", "water", "watercress", "watermelon", "wattleseed", "wheat", "wheatgrass juice", "white bread", "white flour", "white rice", "white wine", "white wine vinegar", "whiting wild rice", "wholegrain bread", "wholemeal", "wholewheat flour", "william pear", "yeast", "yellow papaw", "yellowtail kingfish", "yoghurt", "yogurt", "zucchini"];
    Se = ["beef", "chicken", "crocodile", "duck", "emu", "goose", "kangaroo", "lamb", "ostrich", "pigeon", "pork", "quail", "rabbit", "salmon", "turkey", "venison"];
    ke = ["achiote seed", "ajwain seed", "ajwan seed", "allspice", "amchoor", "anise", "anise star", "aniseed", "annatto seed", "arrowroot", "asafoetida", "baharat", "balti masala", "balti stir fry mix", "basil", "bay leaves", "bbq", "caraway seed", "cardamom", "cassia", "cayenne pepper", "celery", "chamomile", "chervil", "chilli", "chilli pepper", "chillies", "china star", "chives", "cinnamon", "cloves", "colombo", "coriander", "cumin", "curly leaf parsley", "curry", "dhansak", "dill", "fennel seed", "fenugreek", "fines herbes", "five spice", "french lavender", "galangal", "garam masala", "garlic", "german chamomile", "ginger", "green cardamom", "herbes de provence", "jalfrezi", "jerk", "kaffir leaves", "korma", "lavender", "lemon grass", "lemon pepper", "lime leaves", "liquorice root", "mace", "mango", "marjoram", "methi", "mint", "mustard", "nutmeg", "onion seed", "orange zest", "oregano", "paprika", "parsley", "pepper", "peppercorns", "pimento", "piri piri", "poppy seed", "pot marjoram", "poudre de colombo", "ras-el-hanout", "rice paper", "rogan josh", "rose baie", "rosemary", "saffron", "sage", "sesame seed", "spearmint", "sumac", "sweet basil", "sweet laurel", "tagine", "tandoori masala", "tarragon", "thyme", "tikka masala", "turmeric", "vanilla", "zahtar"];
    fe = ["artichoke", "arugula", "asian greens", "asparagus", "bean shoots", "bean sprouts", "beans", "beetroot", "bok choy", "broccoli", "broccolini", "brussels sprouts", "butternut lettuce", "cabbage", "capers", "carob carrot", "carrot", "cauliflower", "celery", "chilli pepper", "chinese cabbage", "chives", "cornichons", "cos lettuce", "cucumber", "dried chinese broccoli", "eggplant", "endive", "english spinach", "french eschallots", "fresh chillies", "garlic", "green beans", "green pepper", "hijiki", "iceberg lettuce", "jerusalem artichoke", "jicama", "kale", "kohlrabi", "leeks", "lettuce", "okra", "onion", "parsnip", "peas", "peppers", "potatoes", "pumpkin", "purple carrot", "radicchio", "radish", "raspberry", "red cabbage", "red pepper", "rhubarb", "snowpea sprouts", "spinach", "squash", "sun dried tomatoes", "sweet potato", "swiss chard", "turnips", "zucchini"];
    lr = { adjective: me, description_pattern: he, dish: ye, dish_pattern: pe, ethnic_category: ge, fruit: be, ingredient: Ce, meat: Se, spice: ke, vegetable: fe };
    ve = lr;
    Ae = ["1080p", "auxiliary", "back-end", "bluetooth", "cross-platform", "digital", "haptic", "mobile", "multi-byte", "neural", "online", "open-source", "optical", "primary", "redundant", "solid state", "virtual", "wireless"];
    Be = ["backing up", "bypassing", "calculating", "compressing", "connecting", "copying", "generating", "hacking", "indexing", "navigating", "overriding", "parsing", "programming", "quantifying", "synthesizing", "transmitting"];
    Te = ["alarm", "application", "array", "bandwidth", "bus", "capacitor", "card", "circuit", "driver", "feed", "firewall", "hard drive", "interface", "matrix", "microchip", "monitor", "panel", "pixel", "port", "program", "protocol", "sensor", "system", "transmitter"];
    Me = ["I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!", "If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!", "The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!", "Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!", "Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!", "We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!", "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!", "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!"];
    we = ["back up", "bypass", "calculate", "compress", "connect", "copy", "generate", "hack", "index", "input", "navigate", "override", "parse", "program", "quantify", "reboot", "synthesize", "transmit"];
    sr = { adjective: Ae, ingverb: Be, noun: Te, phrase: Me, verb: we };
    Le = sr;
    De = ["biz", "com", "info", "name", "net", "org"];
    Re = ["example.com", "example.net", "example.org"];
    Pe = ["gmail.com", "hotmail.com", "yahoo.com"];
    dr = { domain_suffix: De, example_email: Re, free_email: Pe };
    He = dr;
    We = ["#####", "####", "###"];
    Ge = ["Abilene", "Akron", "Alafaya", "Alameda", "Albany", "Albuquerque", "Alexandria", "Alhambra", "Aliso Viejo", "Allen", "Allentown", "Aloha", "Alpharetta", "Altadena", "Altamonte Springs", "Altoona", "Amarillo", "Ames", "Anaheim", "Anchorage", "Anderson", "Ankeny", "Ann Arbor", "Annandale", "Antelope", "Antioch", "Apex", "Apopka", "Apple Valley", "Appleton", "Arcadia", "Arden-Arcade", "Arecibo", "Arlington", "Arlington Heights", "Arvada", "Ashburn", "Asheville", "Aspen Hill", "Atascocita", "Athens-Clarke County", "Atlanta", "Attleboro", "Auburn", "Augusta-Richmond County", "Aurora", "Austin", "Avondale", "Azusa", "Bakersfield", "Baldwin Park", "Baltimore", "Barnstable Town", "Bartlett", "Baton Rouge", "Battle Creek", "Bayamon", "Bayonne", "Baytown", "Beaumont", "Beavercreek", "Beaverton", "Bedford", "Bel Air South", "Bell Gardens", "Belleville", "Bellevue", "Bellflower", "Bellingham", "Bend", "Bentonville", "Berkeley", "Berwyn", "Bethesda", "Bethlehem", "Billings", "Biloxi", "Binghamton", "Birmingham", "Bismarck", "Blacksburg", "Blaine", "Bloomington", "Blue Springs", "Boca Raton", "Boise City", "Bolingbrook", "Bonita Springs", "Bossier City", "Boston", "Bothell", "Boulder", "Bountiful", "Bowie", "Bowling Green", "Boynton Beach", "Bozeman", "Bradenton", "Brandon", "Brentwood", "Bridgeport", "Bristol", "Brockton", "Broken Arrow", "Brookhaven", "Brookline", "Brooklyn Park", "Broomfield", "Brownsville", "Bryan", "Buckeye", "Buena Park", "Buffalo", "Buffalo Grove", "Burbank", "Burien", "Burke", "Burleson", "Burlington", "Burnsville", "Caguas", "Caldwell", "Camarillo", "Cambridge", "Camden", "Canton", "Cape Coral", "Carlsbad", "Carmel", "Carmichael", "Carolina", "Carrollton", "Carson", "Carson City", "Cary", "Casa Grande", "Casas Adobes", "Casper", "Castle Rock", "Castro Valley", "Catalina Foothills", "Cathedral City", "Catonsville", "Cedar Hill", "Cedar Park", "Cedar Rapids", "Centennial", "Centreville", "Ceres", "Cerritos", "Champaign", "Chandler", "Chapel Hill", "Charleston", "Charlotte", "Charlottesville", "Chattanooga", "Cheektowaga", "Chesapeake", "Chesterfield", "Cheyenne", "Chicago", "Chico", "Chicopee", "Chino", "Chino Hills", "Chula Vista", "Cicero", "Cincinnati", "Citrus Heights", "Clarksville", "Clearwater", "Cleveland", "Cleveland Heights", "Clifton", "Clovis", "Coachella", "Coconut Creek", "Coeur d'Alene", "College Station", "Collierville", "Colorado Springs", "Colton", "Columbia", "Columbus", "Commerce City", "Compton", "Concord", "Conroe", "Conway", "Coon Rapids", "Coral Gables", "Coral Springs", "Corona", "Corpus Christi", "Corvallis", "Costa Mesa", "Council Bluffs", "Country Club", "Covina", "Cranston", "Cupertino", "Cutler Bay", "Cuyahoga Falls", "Cypress", "Dale City", "Dallas", "Daly City", "Danbury", "Danville", "Davenport", "Davie", "Davis", "Dayton", "Daytona Beach", "DeKalb", "DeSoto", "Dearborn", "Dearborn Heights", "Decatur", "Deerfield Beach", "Delano", "Delray Beach", "Deltona", "Denton", "Denver", "Des Moines", "Des Plaines", "Detroit", "Diamond Bar", "Doral", "Dothan", "Downers Grove", "Downey", "Draper", "Dublin", "Dubuque", "Duluth", "Dundalk", "Dunwoody", "Durham", "Eagan", "East Hartford", "East Honolulu", "East Lansing", "East Los Angeles", "East Orange", "East Providence", "Eastvale", "Eau Claire", "Eden Prairie", "Edina", "Edinburg", "Edmond", "El Cajon", "El Centro", "El Dorado Hills", "El Monte", "El Paso", "Elgin", "Elizabeth", "Elk Grove", "Elkhart", "Ellicott City", "Elmhurst", "Elyria", "Encinitas", "Enid", "Enterprise", "Erie", "Escondido", "Euclid", "Eugene", "Euless", "Evanston", "Evansville", "Everett", "Fairfield", "Fall River", "Fargo", "Farmington", "Farmington Hills", "Fayetteville", "Federal Way", "Findlay", "Fishers", "Flagstaff", "Flint", "Florence-Graham", "Florin", "Florissant", "Flower Mound", "Folsom", "Fond du Lac", "Fontana", "Fort Collins", "Fort Lauderdale", "Fort Myers", "Fort Pierce", "Fort Smith", "Fort Wayne", "Fort Worth", "Fountain Valley", "Fountainebleau", "Framingham", "Franklin", "Frederick", "Freeport", "Fremont", "Fresno", "Frisco", "Fullerton", "Gainesville", "Gaithersburg", "Galveston", "Garden Grove", "Gardena", "Garland", "Gary", "Gastonia", "Georgetown", "Germantown", "Gilbert", "Gilroy", "Glen Burnie", "Glendale", "Glendora", "Glenview", "Goodyear", "Grand Forks", "Grand Island", "Grand Junction", "Grand Prairie", "Grand Rapids", "Grapevine", "Great Falls", "Greeley", "Green Bay", "Greensboro", "Greenville", "Greenwood", "Gresham", "Guaynabo", "Gulfport", "Hacienda Heights", "Hackensack", "Haltom City", "Hamilton", "Hammond", "Hampton", "Hanford", "Harlingen", "Harrisburg", "Harrisonburg", "Hartford", "Hattiesburg", "Haverhill", "Hawthorne", "Hayward", "Hemet", "Hempstead", "Henderson", "Hendersonville", "Hesperia", "Hialeah", "Hicksville", "High Point", "Highland", "Highlands Ranch", "Hillsboro", "Hilo", "Hoboken", "Hoffman Estates", "Hollywood", "Homestead", "Honolulu", "Hoover", "Houston", "Huntersville", "Huntington", "Huntington Beach", "Huntington Park", "Huntsville", "Hutchinson", "Idaho Falls", "Independence", "Indianapolis", "Indio", "Inglewood", "Iowa City", "Irondequoit", "Irvine", "Irving", "Jackson", "Jacksonville", "Janesville", "Jefferson City", "Jeffersonville", "Jersey City", "Johns Creek", "Johnson City", "Joliet", "Jonesboro", "Joplin", "Jupiter", "Jurupa Valley", "Kalamazoo", "Kannapolis", "Kansas City", "Kearny", "Keller", "Kendale Lakes", "Kendall", "Kenner", "Kennewick", "Kenosha", "Kent", "Kentwood", "Kettering", "Killeen", "Kingsport", "Kirkland", "Kissimmee", "Knoxville", "Kokomo", "La Crosse", "La Habra", "La Mesa", "La Mirada", "Lacey", "Lafayette", "Laguna Niguel", "Lake Charles", "Lake Elsinore", "Lake Forest", "Lake Havasu City", "Lake Ridge", "Lakeland", "Lakeville", "Lakewood", "Lancaster", "Lansing", "Laredo", "Largo", "Las Cruces", "Las Vegas", "Lauderhill", "Lawrence", "Lawton", "Layton", "League City", "Lee's Summit", "Leesburg", "Lehi", "Lehigh Acres", "Lenexa", "Levittown", "Lewisville", "Lexington-Fayette", "Lincoln", "Linden", "Little Rock", "Littleton", "Livermore", "Livonia", "Lodi", "Logan", "Lombard", "Lompoc", "Long Beach", "Longmont", "Longview", "Lorain", "Los Angeles", "Louisville/Jefferson County", "Loveland", "Lowell", "Lubbock", "Lynchburg", "Lynn", "Lynwood", "Macon-Bibb County", "Madera", "Madison", "Malden", "Manchester", "Manhattan", "Mansfield", "Manteca", "Maple Grove", "Margate", "Maricopa", "Marietta", "Marysville", "Mayaguez", "McAllen", "McKinney", "McLean", "Medford", "Melbourne", "Memphis", "Menifee", "Mentor", "Merced", "Meriden", "Meridian", "Mesa", "Mesquite", "Metairie", "Methuen Town", "Miami", "Miami Beach", "Miami Gardens", "Middletown", "Midland", "Midwest City", "Milford", "Millcreek", "Milpitas", "Milwaukee", "Minneapolis", "Minnetonka", "Minot", "Miramar", "Mishawaka", "Mission", "Mission Viejo", "Missoula", "Missouri City", "Mobile", "Modesto", "Moline", "Monroe", "Montebello", "Monterey Park", "Montgomery", "Moore", "Moreno Valley", "Morgan Hill", "Mount Pleasant", "Mount Prospect", "Mount Vernon", "Mountain View", "Muncie", "Murfreesboro", "Murray", "Murrieta", "Nampa", "Napa", "Naperville", "Nashua", "Nashville-Davidson", "National City", "New Bedford", "New Braunfels", "New Britain", "New Brunswick", "New Haven", "New Orleans", "New Rochelle", "New York", "Newark", "Newport Beach", "Newport News", "Newton", "Niagara Falls", "Noblesville", "Norfolk", "Normal", "Norman", "North Bethesda", "North Charleston", "North Highlands", "North Las Vegas", "North Lauderdale", "North Little Rock", "North Miami", "North Miami Beach", "North Port", "North Richland Hills", "Norwalk", "Novato", "Novi", "O'Fallon", "Oak Lawn", "Oak Park", "Oakland", "Oakland Park", "Ocala", "Oceanside", "Odessa", "Ogden", "Oklahoma City", "Olathe", "Olympia", "Omaha", "Ontario", "Orange", "Orem", "Orland Park", "Orlando", "Oro Valley", "Oshkosh", "Overland Park", "Owensboro", "Oxnard", "Palatine", "Palm Bay", "Palm Beach Gardens", "Palm Coast", "Palm Desert", "Palm Harbor", "Palm Springs", "Palmdale", "Palo Alto", "Paradise", "Paramount", "Parker", "Parma", "Pasadena", "Pasco", "Passaic", "Paterson", "Pawtucket", "Peabody", "Pearl City", "Pearland", "Pembroke Pines", "Pensacola", "Peoria", "Perris", "Perth Amboy", "Petaluma", "Pflugerville", "Pharr", "Philadelphia", "Phoenix", "Pico Rivera", "Pine Bluff", "Pine Hills", "Pinellas Park", "Pittsburg", "Pittsburgh", "Pittsfield", "Placentia", "Plainfield", "Plano", "Plantation", "Pleasanton", "Plymouth", "Pocatello", "Poinciana", "Pomona", "Pompano Beach", "Ponce", "Pontiac", "Port Arthur", "Port Charlotte", "Port Orange", "Port St. Lucie", "Portage", "Porterville", "Portland", "Portsmouth", "Potomac", "Poway", "Providence", "Provo", "Pueblo", "Quincy", "Racine", "Raleigh", "Rancho Cordova", "Rancho Cucamonga", "Rancho Palos Verdes", "Rancho Santa Margarita", "Rapid City", "Reading", "Redding", "Redlands", "Redmond", "Redondo Beach", "Redwood City", "Reno", "Renton", "Reston", "Revere", "Rialto", "Richardson", "Richland", "Richmond", "Rio Rancho", "Riverside", "Riverton", "Riverview", "Roanoke", "Rochester", "Rochester Hills", "Rock Hill", "Rockford", "Rocklin", "Rockville", "Rockwall", "Rocky Mount", "Rogers", "Rohnert Park", "Rosemead", "Roseville", "Roswell", "Round Rock", "Rowland Heights", "Rowlett", "Royal Oak", "Sacramento", "Saginaw", "Salem", "Salina", "Salinas", "Salt Lake City", "Sammamish", "San Angelo", "San Antonio", "San Bernardino", "San Bruno", "San Buenaventura (Ventura)", "San Clemente", "San Diego", "San Francisco", "San Jacinto", "San Jose", "San Juan", "San Leandro", "San Luis Obispo", "San Marcos", "San Mateo", "San Rafael", "San Ramon", "San Tan Valley", "Sandy", "Sandy Springs", "Sanford", "Santa Ana", "Santa Barbara", "Santa Clara", "Santa Clarita", "Santa Cruz", "Santa Fe", "Santa Maria", "Santa Monica", "Santa Rosa", "Santee", "Sarasota", "Savannah", "Sayreville", "Schaumburg", "Schenectady", "Scottsdale", "Scranton", "Seattle", "Severn", "Shawnee", "Sheboygan", "Shoreline", "Shreveport", "Sierra Vista", "Silver Spring", "Simi Valley", "Sioux City", "Sioux Falls", "Skokie", "Smyrna", "Somerville", "South Bend", "South Gate", "South Hill", "South Jordan", "South San Francisco", "South Valley", "South Whittier", "Southaven", "Southfield", "Sparks", "Spokane", "Spokane Valley", "Spring", "Spring Hill", "Spring Valley", "Springdale", "Springfield", "St. Charles", "St. Clair Shores", "St. Cloud", "St. George", "St. Joseph", "St. Louis", "St. Louis Park", "St. Paul", "St. Peters", "St. Petersburg", "Stamford", "State College", "Sterling Heights", "Stillwater", "Stockton", "Stratford", "Strongsville", "Suffolk", "Sugar Land", "Summerville", "Sunnyvale", "Sunrise", "Sunrise Manor", "Surprise", "Syracuse", "Tacoma", "Tallahassee", "Tamarac", "Tamiami", "Tampa", "Taunton", "Taylor", "Taylorsville", "Temecula", "Tempe", "Temple", "Terre Haute", "Texas City", "The Hammocks", "The Villages", "The Woodlands", "Thornton", "Thousand Oaks", "Tigard", "Tinley Park", "Titusville", "Toledo", "Toms River", "Tonawanda", "Topeka", "Torrance", "Town 'n' Country", "Towson", "Tracy", "Trenton", "Troy", "Trujillo Alto", "Tuckahoe", "Tucson", "Tulare", "Tulsa", "Turlock", "Tuscaloosa", "Tustin", "Twin Falls", "Tyler", "Union City", "University", "Upland", "Urbana", "Urbandale", "Utica", "Vacaville", "Valdosta", "Vallejo", "Vancouver", "Victoria", "Victorville", "Vineland", "Virginia Beach", "Visalia", "Vista", "Waco", "Waipahu", "Waldorf", "Walnut Creek", "Waltham", "Warner Robins", "Warren", "Warwick", "Washington", "Waterbury", "Waterloo", "Watsonville", "Waukegan", "Waukesha", "Wauwatosa", "Wellington", "Wesley Chapel", "West Allis", "West Babylon", "West Covina", "West Des Moines", "West Hartford", "West Haven", "West Jordan", "West Lafayette", "West New York", "West Palm Beach", "West Sacramento", "West Seneca", "West Valley City", "Westfield", "Westland", "Westminster", "Weston", "Weymouth Town", "Wheaton", "White Plains", "Whittier", "Wichita", "Wichita Falls", "Wilmington", "Wilson", "Winston-Salem", "Woodbury", "Woodland", "Worcester", "Wylie", "Wyoming", "Yakima", "Yonkers", "Yorba Linda", "York", "Youngstown", "Yuba City", "Yucaipa", "Yuma"];
    Fe = ["{{location.city_prefix}} {{person.first_name.generic}}{{location.city_suffix}}", "{{location.city_prefix}} {{person.first_name.generic}}", "{{person.first_name.generic}}{{location.city_suffix}}", "{{person.last_name.generic}}{{location.city_suffix}}", "{{location.city_name}}"];
    Ne = ["North", "East", "West", "South", "New", "Lake", "Port", "Fort"];
    Ee = ["town", "ton", "land", "ville", "berg", "burgh", "boro", "borough", "bury", "view", "port", "mouth", "stad", "stead", "furt", "chester", "cester", "fort", "field", "haven", "side", "shire", "worth"];
    Je = ["Africa", "Antarctica", "Asia", "Australia", "Europe", "North America", "South America"];
    Ie = ["Afghanistan", "Aland Islands", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bonaire, Sint Eustatius and Saba", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory (Chagos Archipelago)", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba", "Curacao", "Cyprus", "Czechia", "Democratic Republic of the Congo", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Eswatini", "Ethiopia", "Faroe Islands", "Falkland Islands (Malvinas)", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Democratic People's Republic of Korea", "Republic of Korea", "Kuwait", "Kyrgyz Republic", "Lao People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macao", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Macedonia", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saint Barthelemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Sint Maarten", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia and the South Sandwich Islands", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard & Jan Mayen Islands", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States of America", "United States Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Virgin Islands, British", "Virgin Islands, U.S.", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"];
    Ke = ["Adams County", "Calhoun County", "Carroll County", "Clark County", "Clay County", "Crawford County", "Douglas County", "Fayette County", "Franklin County", "Grant County", "Greene County", "Hamilton County", "Hancock County", "Henry County", "Jackson County", "Jefferson County", "Johnson County", "Lake County", "Lawrence County", "Lee County", "Lincoln County", "Logan County", "Madison County", "Marion County", "Marshall County", "Monroe County", "Montgomery County", "Morgan County", "Perry County", "Pike County", "Polk County", "Scott County", "Union County", "Warren County", "Washington County", "Wayne County", "Avon", "Bedfordshire", "Berkshire", "Borders", "Buckinghamshire", "Cambridgeshire", "Central", "Cheshire", "Cleveland", "Clwyd", "Cornwall", "County Antrim", "County Armagh", "County Down", "County Fermanagh", "County Londonderry", "County Tyrone", "Cumbria", "Derbyshire", "Devon", "Dorset", "Dumfries and Galloway", "Durham", "Dyfed", "East Sussex", "Essex", "Fife", "Gloucestershire", "Grampian", "Greater Manchester", "Gwent", "Gwynedd County", "Hampshire", "Herefordshire", "Hertfordshire", "Highlands and Islands", "Humberside", "Isle of Wight", "Kent", "Lancashire", "Leicestershire", "Lincolnshire", "Lothian", "Merseyside", "Mid Glamorgan", "Norfolk", "North Yorkshire", "Northamptonshire", "Northumberland", "Nottinghamshire", "Oxfordshire", "Powys", "Rutland", "Shropshire", "Somerset", "South Glamorgan", "South Yorkshire", "Staffordshire", "Strathclyde", "Suffolk", "Surrey", "Tayside", "Tyne and Wear", "Warwickshire", "West Glamorgan", "West Midlands", "West Sussex", "West Yorkshire", "Wiltshire", "Worcestershire"];
    Oe = { cardinal: ["North", "East", "South", "West"], cardinal_abbr: ["N", "E", "S", "W"], ordinal: ["Northeast", "Northwest", "Southeast", "Southwest"], ordinal_abbr: ["NE", "NW", "SE", "SW"] };
    xe = [{ name: "Afrikaans", alpha2: "af", alpha3: "afr" }, { name: "Azerbaijani", alpha2: "az", alpha3: "aze" }, { name: "Maldivian", alpha2: "dv", alpha3: "div" }, { name: "Farsi/Persian", alpha2: "fa", alpha3: "fas" }, { name: "Latvian", alpha2: "lv", alpha3: "lav" }, { name: "Indonesian", alpha2: "id", alpha3: "ind" }, { name: "Nepali", alpha2: "ne", alpha3: "nep" }, { name: "Thai", alpha2: "th", alpha3: "tha" }, { name: "Uzbek", alpha2: "uz", alpha3: "uzb" }, { name: "Yoruba", alpha2: "yo", alpha3: "yor" }, { name: "Pashto", alpha2: "ps", alpha3: "pus" }, { name: "English", alpha2: "en", alpha3: "eng" }, { name: "Urdu", alpha2: "ur", alpha3: "urd" }, { name: "German", alpha2: "de", alpha3: "deu" }, { name: "French", alpha2: "fr", alpha3: "fra" }, { name: "Spanish", alpha2: "es", alpha3: "spa" }, { name: "Italian", alpha2: "it", alpha3: "ita" }, { name: "Dutch", alpha2: "nl", alpha3: "nld" }, { name: "Russian", alpha2: "ru", alpha3: "rus" }, { name: "Portuguese", alpha2: "pt", alpha3: "por" }, { name: "Polish", alpha2: "pl", alpha3: "pol" }, { name: "Arabic", alpha2: "ar", alpha3: "ara" }, { name: "Japanese", alpha2: "ja", alpha3: "jpn" }, { name: "Chinese", alpha2: "zh", alpha3: "zho" }, { name: "Hindi", alpha2: "hi", alpha3: "hin" }, { name: "Bengali", alpha2: "bn", alpha3: "ben" }, { name: "Gujarati", alpha2: "gu", alpha3: "guj" }, { name: "Tamil", alpha2: "ta", alpha3: "tam" }, { name: "Telugu", alpha2: "te", alpha3: "tel" }, { name: "Punjabi", alpha2: "pa", alpha3: "pan" }, { name: "Vietnamese", alpha2: "vi", alpha3: "vie" }, { name: "Korean", alpha2: "ko", alpha3: "kor" }, { name: "Turkish", alpha2: "tr", alpha3: "tur" }, { name: "Swedish", alpha2: "sv", alpha3: "swe" }, { name: "Greek", alpha2: "el", alpha3: "ell" }, { name: "Czech", alpha2: "cs", alpha3: "ces" }, { name: "Hungarian", alpha2: "hu", alpha3: "hun" }, { name: "Romanian", alpha2: "ro", alpha3: "ron" }, { name: "Ukrainian", alpha2: "uk", alpha3: "ukr" }, { name: "Norwegian", alpha2: "no", alpha3: "nor" }, { name: "Serbian", alpha2: "sr", alpha3: "srp" }, { name: "Croatian", alpha2: "hr", alpha3: "hrv" }, { name: "Slovak", alpha2: "sk", alpha3: "slk" }, { name: "Slovenian", alpha2: "sl", alpha3: "slv" }, { name: "Icelandic", alpha2: "is", alpha3: "isl" }, { name: "Finnish", alpha2: "fi", alpha3: "fin" }, { name: "Danish", alpha2: "da", alpha3: "dan" }, { name: "Swahili", alpha2: "sw", alpha3: "swa" }, { name: "Bashkir", alpha2: "ba", alpha3: "bak" }, { name: "Basque", alpha2: "eu", alpha3: "eus" }, { name: "Catalan", alpha2: "ca", alpha3: "cat" }, { name: "Galician", alpha2: "gl", alpha3: "glg" }, { name: "Esperanto", alpha2: "eo", alpha3: "epo" }, { name: "Fijian", alpha2: "fj", alpha3: "fij" }, { name: "Malagasy", alpha2: "mg", alpha3: "mlg" }, { name: "Maltese", alpha2: "mt", alpha3: "mlt" }, { name: "Albanian", alpha2: "sq", alpha3: "sqi" }, { name: "Armenian", alpha2: "hy", alpha3: "hye" }, { name: "Georgian", alpha2: "ka", alpha3: "kat" }, { name: "Macedonian", alpha2: "mk", alpha3: "mkd" }, { name: "Kazakh", alpha2: "kk", alpha3: "kaz" }, { name: "Haitian Creole", alpha2: "ht", alpha3: "hat" }, { name: "Mongolian", alpha2: "mn", alpha3: "mon" }, { name: "Kyrgyz", alpha2: "ky", alpha3: "kir" }, { name: "Finnish", alpha2: "fi", alpha3: "fin" }, { name: "Tagalog", alpha2: "tl", alpha3: "tgl" }, { name: "Malay", alpha2: "ms", alpha3: "msa" }, { name: "Tajik", alpha2: "tg", alpha3: "tgk" }, { name: "Swati", alpha2: "ss", alpha3: "ssw" }, { name: "Tatar", alpha2: "tt", alpha3: "tat" }, { name: "Zulu", alpha2: "zu", alpha3: "zul" }];
    ze = ["#####", "#####-####"];
    Ve = ["Apt. ###", "Suite ###"];
    Ye = ["Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"];
    je = ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"];
    qe = { normal: "{{location.buildingNumber}} {{location.street}}", full: "{{location.buildingNumber}} {{location.street}} {{location.secondaryAddress}}" };
    Ue = ["10th Street", "11th Street", "12th Street", "13th Street", "14th Street", "15th Street", "16th Street", "1st Avenue", "1st Street", "2nd Avenue", "2nd Street", "3rd Avenue", "3rd Street", "4th Avenue", "4th Street", "5th Avenue", "5th Street", "6th Avenue", "6th Street", "7th Avenue", "7th Street", "8th Avenue", "8th Street", "9th Street", "A Street", "Abbey Road", "Adams Avenue", "Adams Street", "Airport Road", "Albany Road", "Albert Road", "Albion Street", "Alexandra Road", "Alfred Street", "Alma Street", "Ash Close", "Ash Grove", "Ash Road", "Ash Street", "Aspen Close", "Atlantic Avenue", "Avenue Road", "Back Lane", "Baker Street", "Balmoral Road", "Barn Close", "Barton Road", "Bath Road", "Bath Street", "Bay Street", "Beach Road", "Bedford Road", "Beech Close", "Beech Drive", "Beech Grove", "Beech Road", "Beechwood Avenue", "Bell Lane", "Belmont Road", "Birch Avenue", "Birch Close", "Birch Grove", "Birch Road", "Blind Lane", "Bluebell Close", "Boundary Road", "Bramble Close", "Bramley Close", "Bridge Road", "Bridge Street", "Broad Lane", "Broad Street", "Broadway", "Broadway Avenue", "Broadway Street", "Brook Lane", "Brook Road", "Brook Street", "Brookside", "Buckingham Road", "Cambridge Street", "Canal Street", "Castle Close", "Castle Lane", "Castle Road", "Castle Street", "Cavendish Road", "Cedar Avenue", "Cedar Close", "Cedar Grove", "Cedar Road", "Cedar Street", "Cemetery Road", "Center Avenue", "Center Road", "Center Street", "Central Avenue", "Central Street", "Chapel Close", "Chapel Hill", "Chapel Road", "Chapel Street", "Charles Street", "Cherry Close", "Cherry Street", "Cherry Tree Close", "Chester Road", "Chestnut Close", "Chestnut Drive", "Chestnut Grove", "Chestnut Street", "Church Avenue", "Church Close", "Church Hill", "Church Lane", "Church Path", "Church Road", "Church Street", "Church View", "Church Walk", "Claremont Road", "Clarence Road", "Clarence Street", "Clarendon Road", "Clark Street", "Clay Lane", "Cleveland Street", "Cliff Road", "Clifton Road", "Clinton Street", "College Avenue", "College Street", "Columbia Avenue", "Commerce Street", "Commercial Road", "Commercial Street", "Common Lane", "Coronation Avenue", "Coronation Road", "County Line Road", "County Road", "Court Street", "Cow Lane", "Crescent Road", "Cromwell Road", "Cross Lane", "Cross Street", "Crown Street", "Cumberland Street", "Dale Street", "Dark Lane", "Davis Street", "Depot Street", "Derby Road", "Derwent Close", "Devonshire Road", "Division Street", "Douglas Road", "Duke Street", "E 10th Street", "E 11th Street", "E 12th Street", "E 14th Street", "E 1st Street", "E 2nd Street", "E 3rd Street", "E 4th Avenue", "E 4th Street", "E 5th Street", "E 6th Avenue", "E 6th Street", "E 7th Street", "E 8th Street", "E 9th Street", "E Bridge Street", "E Broad Street", "E Broadway", "E Broadway Street", "E Cedar Street", "E Center Street", "E Central Avenue", "E Church Street", "E Elm Street", "E Franklin Street", "E Front Street", "E Grand Avenue", "E High Street", "E Jackson Street", "E Jefferson Street", "E Main", "E Main Street", "E Maple Street", "E Market Street", "E North Street", "E Oak Street", "E Park Avenue", "E Pine Street", "E River Road", "E South Street", "E State Street", "E Union Street", "E Walnut Street", "E Washington Avenue", "E Washington Street", "E Water Street", "East Avenue", "East Road", "East Street", "Edward Street", "Elm Close", "Elm Grove", "Elm Road", "Elm Street", "Euclid Avenue", "Fairfield Road", "Farm Close", "Ferry Road", "Field Close", "Field Lane", "First Avenue", "First Street", "Fore Street", "Forest Avenue", "Forest Road", "Fourth Avenue", "Franklin Avenue", "Franklin Road", "Franklin Street", "Front Street", "Frontage Road", "Garden Close", "Garden Street", "George Street", "Gladstone Road", "Glebe Close", "Gloucester Road", "Gordon Road", "Gordon Street", "Grand Avenue", "Grange Avenue", "Grange Close", "Grange Road", "Grant Street", "Green Close", "Green Lane", "Green Street", "Greenville Road", "Greenway", "Greenwood Road", "Grove Lane", "Grove Road", "Grove Street", "Hall Lane", "Hall Street", "Harrison Avenue", "Harrison Street", "Hawthorn Avenue", "Hawthorn Close", "Hazel Close", "Hazel Grove", "Heath Road", "Heather Close", "Henry Street", "Heron Close", "Hickory Street", "High Road", "High Street", "Highfield Avenue", "Highfield Close", "Highfield Road", "Highland Avenue", "Hill Road", "Hill Street", "Hillside", "Hillside Avenue", "Hillside Close", "Hillside Road", "Holly Close", "Honeysuckle Close", "Howard Road", "Howard Street", "Jackson Avenue", "Jackson Street", "James Street", "Jefferson Avenue", "Jefferson Street", "Johnson Street", "Jubilee Close", "Juniper Close", "Kent Road", "Kestrel Close", "King Street", "King's Road", "Kingfisher Close", "Kings Highway", "Kingsway", "Laburnum Grove", "Lafayette Street", "Lake Avenue", "Lake Drive", "Lake Road", "Lake Street", "Lancaster Road", "Lansdowne Road", "Larch Close", "Laurel Close", "Lawrence Street", "Lee Street", "Liberty Street", "Lime Grove", "Lincoln Avenue", "Lincoln Highway", "Lincoln Road", "Lincoln Street", "Locust Street", "Lodge Close", "Lodge Lane", "London Road", "Long Lane", "Low Road", "Madison Avenue", "Madison Street", "Main", "Main Avenue", "Main Road", "Main Street", "Main Street E", "Main Street N", "Main Street S", "Main Street W", "Manchester Road", "Manor Close", "Manor Drive", "Manor Gardens", "Manor Road", "Manor Way", "Maple Avenue", "Maple Close", "Maple Drive", "Maple Road", "Maple Street", "Market Place", "Market Square", "Market Street", "Marlborough Road", "Marsh Lane", "Martin Luther King Boulevard", "Martin Luther King Drive", "Martin Luther King Jr Boulevard", "Mary Street", "Mayfield Road", "Meadow Close", "Meadow Drive", "Meadow Lane", "Meadow View", "Meadow Way", "Memorial Drive", "Middle Street", "Mill Close", "Mill Lane", "Mill Road", "Mill Street", "Milton Road", "Milton Street", "Monroe Street", "Moor Lane", "Moss Lane", "Mount Pleasant", "Mount Street", "Mulberry Street", "N 1st Street", "N 2nd Street", "N 3rd Street", "N 4th Street", "N 5th Street", "N 6th Street", "N 7th Street", "N 8th Street", "N 9th Street", "N Bridge Street", "N Broad Street", "N Broadway", "N Broadway Street", "N Cedar Street", "N Center Street", "N Central Avenue", "N Chestnut Street", "N Church Street", "N College Street", "N Court Street", "N Division Street", "N East Street", "N Elm Street", "N Franklin Street", "N Front Street", "N Harrison Street", "N High Street", "N Jackson Street", "N Jefferson Street", "N Lincoln Street", "N Locust Street", "N Main", "N Main Avenue", "N Main Street", "N Maple Street", "N Market Street", "N Monroe Street", "N Oak Street", "N Park Street", "N Pearl Street", "N Pine Street", "N Poplar Street", "N Railroad Street", "N State Street", "N Union Street", "N Walnut Street", "N Washington Avenue", "N Washington Street", "N Water Street", "Nelson Road", "Nelson Street", "New Lane", "New Road", "New Street", "Newton Road", "Nightingale Close", "Norfolk Road", "North Avenue", "North Lane", "North Road", "North Street", "Northfield Road", "Oak Avenue", "Oak Drive", "Oak Lane", "Oak Road", "Oak Street", "Oakfield Road", "Oaklands", "Old Lane", "Old Military Road", "Old Road", "Old State Road", "Orchard Drive", "Orchard Lane", "Orchard Road", "Orchard Street", "Oxford Road", "Oxford Street", "Park Avenue", "Park Crescent", "Park Drive", "Park Lane", "Park Place", "Park Road", "Park Street", "Park View", "Parkside", "Pearl Street", "Pennsylvania Avenue", "Pine Close", "Pine Grove", "Pine Street", "Pinfold Lane", "Pleasant Street", "Poplar Avenue", "Poplar Close", "Poplar Road", "Poplar Street", "Post Road", "Pound Lane", "Princes Street", "Princess Street", "Priory Close", "Priory Road", "Prospect Avenue", "Prospect Place", "Prospect Road", "Prospect Street", "Quarry Lane", "Quarry Road", "Queen's Road", "Railroad Avenue", "Railroad Street", "Railway Street", "Rectory Close", "Rectory Lane", "Richmond Close", "Richmond Road", "Ridge Road", "River Road", "River Street", "Riverside", "Riverside Avenue", "Riverside Drive", "Roman Road", "Roman Way", "Rowan Close", "Russell Street", "S 10th Street", "S 14th Street", "S 1st Avenue", "S 1st Street", "S 2nd Street", "S 3rd Street", "S 4th Street", "S 5th Street", "S 6th Street", "S 7th Street", "S 8th Street", "S 9th Street", "S Bridge Street", "S Broad Street", "S Broadway", "S Broadway Street", "S Center Street", "S Central Avenue", "S Chestnut Street", "S Church Street", "S College Street", "S Division Street", "S East Street", "S Elm Street", "S Franklin Street", "S Front Street", "S Grand Avenue", "S High Street", "S Jackson Street", "S Jefferson Street", "S Lincoln Street", "S Main", "S Main Avenue", "S Main Street", "S Maple Street", "S Market Street", "S Mill Street", "S Monroe Street", "S Oak Street", "S Park Street", "S Pine Street", "S Railroad Street", "S State Street", "S Union Street", "S Walnut Street", "S Washington Avenue", "S Washington Street", "S Water Street", "S West Street", "Salisbury Road", "Sandringham Road", "Sandy Lane", "School Close", "School Lane", "School Road", "School Street", "Second Avenue", "Silver Street", "Skyline Drive", "Smith Street", "Somerset Road", "South Avenue", "South Drive", "South Road", "South Street", "South View", "Spring Gardens", "Spring Street", "Springfield Close", "Springfield Road", "Spruce Street", "St Andrew's Road", "St Andrews Close", "St George's Road", "St John's Road", "St Mary's Close", "St Mary's Road", "Stanley Road", "Stanley Street", "State Avenue", "State Line Road", "State Road", "State Street", "Station Road", "Station Street", "Stoney Lane", "Sycamore Avenue", "Sycamore Close", "Sycamore Drive", "Sycamore Street", "Talbot Road", "Tennyson Road", "The Avenue", "The Beeches", "The Causeway", "The Chase", "The Coppice", "The Copse", "The Crescent", "The Croft", "The Dell", "The Drive", "The Fairway", "The Glebe", "The Grange", "The Green", "The Grove", "The Hawthorns", "The Lane", "The Laurels", "The Limes", "The Maltings", "The Meadows", "The Mews", "The Mount", "The Oaks", "The Orchard", "The Oval", "The Paddock", "The Paddocks", "The Poplars", "The Ridgeway", "The Ridings", "The Rise", "The Sidings", "The Spinney", "The Square", "The Willows", "The Woodlands", "Third Avenue", "Third Street", "Tower Road", "Trinity Road", "Tudor Close", "Union Avenue", "Union Street", "University Avenue", "University Drive", "Valley Road", "Veterans Memorial Drive", "Veterans Memorial Highway", "Vicarage Close", "Vicarage Lane", "Vicarage Road", "Victoria Place", "Victoria Road", "Victoria Street", "Vine Street", "W 10th Street", "W 11th Street", "W 12th Street", "W 14th Street", "W 1st Street", "W 2nd Street", "W 3rd Street", "W 4th Avenue", "W 4th Street", "W 5th Street", "W 6th Avenue", "W 6th Street", "W 7th Street", "W 8th Street", "W 9th Street", "W Bridge Street", "W Broad Street", "W Broadway", "W Broadway Avenue", "W Broadway Street", "W Center Street", "W Central Avenue", "W Chestnut Street", "W Church Street", "W Division Street", "W Elm Street", "W Franklin Street", "W Front Street", "W Grand Avenue", "W High Street", "W Jackson Street", "W Jefferson Street", "W Lake Street", "W Main", "W Main Street", "W Maple Street", "W Market Street", "W Monroe Street", "W North Street", "W Oak Street", "W Park Street", "W Pine Street", "W River Road", "W South Street", "W State Street", "W Union Street", "W Walnut Street", "W Washington Avenue", "W Washington Street", "Walnut Close", "Walnut Street", "Warren Close", "Warren Road", "Washington Avenue", "Washington Boulevard", "Washington Road", "Washington Street", "Water Lane", "Water Street", "Waterloo Road", "Waterside", "Watery Lane", "Waverley Road", "Well Lane", "Wellington Road", "Wellington Street", "West Avenue", "West End", "West Lane", "West Road", "West Street", "West View", "Western Avenue", "Western Road", "Westfield Road", "Westgate", "William Street", "Willow Close", "Willow Drive", "Willow Grove", "Willow Road", "Willow Street", "Windermere Road", "Windmill Close", "Windmill Lane", "Windsor Avenue", "Windsor Close", "Windsor Drive", "Wood Lane", "Wood Street", "Woodland Close", "Woodland Road", "Woodlands", "Woodlands Avenue", "Woodlands Close", "Woodlands Road", "Woodside", "Woodside Road", "Wren Close", "Yew Tree Close", "York Road", "York Street"];
    Ze = ["{{person.first_name.generic}} {{location.street_suffix}}", "{{person.last_name.generic}} {{location.street_suffix}}", "{{location.street_name}}"];
    _e = ["Alley", "Avenue", "Branch", "Bridge", "Brook", "Brooks", "Burg", "Burgs", "Bypass", "Camp", "Canyon", "Cape", "Causeway", "Center", "Centers", "Circle", "Circles", "Cliff", "Cliffs", "Club", "Common", "Corner", "Corners", "Course", "Court", "Courts", "Cove", "Coves", "Creek", "Crescent", "Crest", "Crossing", "Crossroad", "Curve", "Dale", "Dam", "Divide", "Drive", "Drives", "Estate", "Estates", "Expressway", "Extension", "Extensions", "Fall", "Falls", "Ferry", "Field", "Fields", "Flat", "Flats", "Ford", "Fords", "Forest", "Forge", "Forges", "Fork", "Forks", "Fort", "Freeway", "Garden", "Gardens", "Gateway", "Glen", "Glens", "Green", "Greens", "Grove", "Groves", "Harbor", "Harbors", "Haven", "Heights", "Highway", "Hill", "Hills", "Hollow", "Inlet", "Island", "Islands", "Isle", "Junction", "Junctions", "Key", "Keys", "Knoll", "Knolls", "Lake", "Lakes", "Land", "Landing", "Lane", "Light", "Lights", "Loaf", "Lock", "Locks", "Lodge", "Loop", "Mall", "Manor", "Manors", "Meadow", "Meadows", "Mews", "Mill", "Mills", "Mission", "Motorway", "Mount", "Mountain", "Mountains", "Neck", "Orchard", "Oval", "Overpass", "Park", "Parks", "Parkway", "Parkways", "Pass", "Passage", "Path", "Pike", "Pine", "Pines", "Place", "Plain", "Plains", "Plaza", "Point", "Points", "Port", "Ports", "Prairie", "Radial", "Ramp", "Ranch", "Rapid", "Rapids", "Rest", "Ridge", "Ridges", "River", "Road", "Roads", "Route", "Row", "Rue", "Run", "Shoal", "Shoals", "Shore", "Shores", "Skyway", "Spring", "Springs", "Spur", "Spurs", "Square", "Squares", "Station", "Stravenue", "Stream", "Street", "Streets", "Summit", "Terrace", "Throughway", "Trace", "Track", "Trafficway", "Trail", "Tunnel", "Turnpike", "Underpass", "Union", "Unions", "Valley", "Valleys", "Via", "Viaduct", "View", "Views", "Village", "Villages", "Ville", "Vista", "Walk", "Walks", "Wall", "Way", "Ways", "Well", "Wells"];
    ur = { building_number: We, city_name: Ge, city_pattern: Fe, city_prefix: Ne, city_suffix: Ee, continent: Je, country: Ie, county: Ke, direction: Oe, language: xe, postcode: ze, secondary_address: Ve, state: Ye, state_abbr: je, street_address: qe, street_name: Ue, street_pattern: Ze, street_suffix: _e };
    Qe = ur;
    Xe = ["a", "ab", "abbas", "abduco", "abeo", "abscido", "absconditus", "absens", "absorbeo", "absque", "abstergo", "absum", "abundans", "abutor", "accedo", "accendo", "acceptus", "accommodo", "accusamus", "accusantium", "accusator", "acer", "acerbitas", "acervus", "acidus", "acies", "acquiro", "acsi", "ad", "adamo", "adaugeo", "addo", "adduco", "ademptio", "adeo", "adeptio", "adfectus", "adfero", "adficio", "adflicto", "adhaero", "adhuc", "adicio", "adimpleo", "adinventitias", "adipisci", "adipiscor", "adiuvo", "administratio", "admiratio", "admitto", "admoneo", "admoveo", "adnuo", "adopto", "adsidue", "adstringo", "adsuesco", "adsum", "adulatio", "adulescens", "aduro", "advenio", "adversus", "advoco", "aedificium", "aeger", "aegre", "aegrotatio", "aegrus", "aeneus", "aequitas", "aequus", "aer", "aestas", "aestivus", "aestus", "aetas", "aeternus", "ager", "aggero", "aggredior", "agnitio", "agnosco", "ago", "ait", "aiunt", "alias", "alienus", "alii", "alioqui", "aliqua", "aliquam", "aliquid", "alius", "allatus", "alo", "alter", "altus", "alveus", "amaritudo", "ambitus", "ambulo", "amet", "amicitia", "amiculum", "amissio", "amita", "amitto", "amo", "amor", "amoveo", "amplexus", "amplitudo", "amplus", "ancilla", "angelus", "angulus", "angustus", "animadverto", "animi", "animus", "annus", "anser", "ante", "antea", "antepono", "antiquus", "aperiam", "aperio", "aperte", "apostolus", "apparatus", "appello", "appono", "appositus", "approbo", "apto", "aptus", "apud", "aqua", "ara", "aranea", "arbitro", "arbor", "arbustum", "arca", "arceo", "arcesso", "architecto", "arcus", "argentum", "argumentum", "arguo", "arma", "armarium", "aro", "ars", "articulus", "artificiose", "arto", "arx", "ascisco", "ascit", "asper", "asperiores", "aspernatur", "aspicio", "asporto", "assentator", "assumenda", "astrum", "at", "atavus", "ater", "atque", "atqui", "atrocitas", "atrox", "attero", "attollo", "attonbitus", "auctor", "auctus", "audacia", "audax", "audentia", "audeo", "audio", "auditor", "aufero", "aureus", "aurum", "aut", "autem", "autus", "auxilium", "avaritia", "avarus", "aveho", "averto", "baiulus", "balbus", "barba", "bardus", "basium", "beatae", "beatus", "bellicus", "bellum", "bene", "beneficium", "benevolentia", "benigne", "bestia", "bibo", "bis", "blandior", "blanditiis", "bonus", "bos", "brevis", "cado", "caecus", "caelestis", "caelum", "calamitas", "calcar", "calco", "calculus", "callide", "campana", "candidus", "canis", "canonicus", "canto", "capillus", "capio", "capitulus", "capto", "caput", "carbo", "carcer", "careo", "caries", "cariosus", "caritas", "carmen", "carpo", "carus", "casso", "caste", "casus", "catena", "caterva", "cattus", "cauda", "causa", "caute", "caveo", "cavus", "cedo", "celebrer", "celer", "celo", "cena", "cenaculum", "ceno", "censura", "centum", "cerno", "cernuus", "certe", "certus", "cervus", "cetera", "charisma", "chirographum", "cibo", "cibus", "cicuta", "cilicium", "cimentarius", "ciminatio", "cinis", "circumvenio", "cito", "civis", "civitas", "clam", "clamo", "claro", "clarus", "claudeo", "claustrum", "clementia", "clibanus", "coadunatio", "coaegresco", "coepi", "coerceo", "cogito", "cognatus", "cognomen", "cogo", "cohaero", "cohibeo", "cohors", "colligo", "collum", "colo", "color", "coma", "combibo", "comburo", "comedo", "comes", "cometes", "comis", "comitatus", "commemoro", "comminor", "commodi", "commodo", "communis", "comparo", "compello", "complectus", "compono", "comprehendo", "comptus", "conatus", "concedo", "concido", "conculco", "condico", "conduco", "confero", "confido", "conforto", "confugo", "congregatio", "conicio", "coniecto", "conitor", "coniuratio", "conor", "conqueror", "conscendo", "consectetur", "consequatur", "consequuntur", "conservo", "considero", "conspergo", "constans", "consuasor", "contabesco", "contego", "contigo", "contra", "conturbo", "conventus", "convoco", "copia", "copiose", "cornu", "corona", "corporis", "corpus", "correptius", "corrigo", "corroboro", "corrumpo", "corrupti", "coruscus", "cotidie", "crapula", "cras", "crastinus", "creator", "creber", "crebro", "credo", "creo", "creptio", "crepusculum", "cresco", "creta", "cribro", "crinis", "cruciamentum", "crudelis", "cruentus", "crur", "crustulum", "crux", "cubicularis", "cubitum", "cubo", "cui", "cuius", "culpa", "culpo", "cultellus", "cultura", "cum", "cumque", "cunabula", "cunae", "cunctatio", "cupiditas", "cupiditate", "cupio", "cuppedia", "cupressus", "cur", "cura", "curatio", "curia", "curiositas", "curis", "curo", "curriculum", "currus", "cursim", "curso", "cursus", "curto", "curtus", "curvo", "custodia", "damnatio", "damno", "dapifer", "debeo", "debilito", "debitis", "decens", "decerno", "decet", "decimus", "decipio", "decor", "decretum", "decumbo", "dedecor", "dedico", "deduco", "defaeco", "defendo", "defero", "defessus", "defetiscor", "deficio", "defleo", "defluo", "defungo", "degenero", "degero", "degusto", "deinde", "delectatio", "delectus", "delego", "deleniti", "deleo", "delibero", "delicate", "delinquo", "deludo", "demens", "demergo", "demitto", "demo", "demonstro", "demoror", "demulceo", "demum", "denego", "denique", "dens", "denuncio", "denuo", "deorsum", "depereo", "depono", "depopulo", "deporto", "depraedor", "deprecator", "deprimo", "depromo", "depulso", "deputo", "derelinquo", "derideo", "deripio", "deserunt", "desidero", "desino", "desipio", "desolo", "desparatus", "despecto", "dicta", "dignissimos", "distinctio", "dolor", "dolore", "dolorem", "doloremque", "dolores", "doloribus", "dolorum", "ducimus", "ea", "eaque", "earum", "eius", "eligendi", "enim", "eos", "error", "esse", "est", "et", "eum", "eveniet", "ex", "excepturi", "exercitationem", "expedita", "explicabo", "facere", "facilis", "fuga", "fugiat", "fugit", "harum", "hic", "id", "illo", "illum", "impedit", "in", "incidunt", "infit", "inflammatio", "inventore", "ipsa", "ipsam", "ipsum", "iste", "itaque", "iure", "iusto", "labore", "laboriosam", "laborum", "laudantium", "libero", "magnam", "magni", "maiores", "maxime", "minima", "minus", "modi", "molestiae", "molestias", "mollitia", "nam", "natus", "necessitatibus", "nemo", "neque", "nesciunt", "nihil", "nisi", "nobis", "non", "nostrum", "nulla", "numquam", "occaecati", "ocer", "odio", "odit", "officia", "officiis", "omnis", "optio", "paens", "pariatur", "patior", "patria", "patrocinor", "patruus", "pauci", "paulatim", "pauper", "pax", "peccatus", "pecco", "pecto", "pectus", "pecus", "peior", "pel", "perferendis", "perspiciatis", "placeat", "porro", "possimus", "praesentium", "provident", "quae", "quaerat", "quam", "quas", "quasi", "qui", "quia", "quibusdam", "quidem", "quis", "quisquam", "quo", "quod", "quos", "ratione", "recusandae", "reiciendis", "rem", "repellat", "repellendus", "reprehenderit", "repudiandae", "rerum", "saepe", "sapiente", "sed", "sequi", "similique", "sint", "sit", "socius", "sodalitas", "sol", "soleo", "solio", "solitudo", "solium", "sollers", "sollicito", "solum", "solus", "soluta", "solutio", "solvo", "somniculosus", "somnus", "sonitus", "sono", "sophismata", "sopor", "sordeo", "sortitus", "spargo", "speciosus", "spectaculum", "speculum", "sperno", "spero", "spes", "spiculum", "spiritus", "spoliatio", "sponte", "stabilis", "statim", "statua", "stella", "stillicidium", "stipes", "stips", "sto", "strenuus", "strues", "studio", "stultus", "suadeo", "suasoria", "sub", "subito", "subiungo", "sublime", "subnecto", "subseco", "substantia", "subvenio", "succedo", "succurro", "sufficio", "suffoco", "suffragium", "suggero", "sui", "sulum", "sum", "summa", "summisse", "summopere", "sumo", "sumptus", "sunt", "supellex", "super", "suppellex", "supplanto", "suppono", "supra", "surculus", "surgo", "sursum", "suscipio", "suscipit", "suspendo", "sustineo", "suus", "synagoga", "tabella", "tabernus", "tabesco", "tabgo", "tabula", "taceo", "tactus", "taedium", "talio", "talis", "talus", "tam", "tamdiu", "tamen", "tametsi", "tamisium", "tamquam", "tandem", "tantillus", "tantum", "tardus", "tego", "temeritas", "temperantia", "templum", "tempora", "tempore", "temporibus", "temptatio", "tempus", "tenax", "tendo", "teneo", "tener", "tenetur", "tenuis", "tenus", "tepesco", "tepidus", "ter", "terebro", "teres", "terga", "tergeo", "tergiversatio", "tergo", "tergum", "termes", "terminatio", "tero", "terra", "terreo", "territo", "terror", "tersus", "tertius", "testimonium", "texo", "textilis", "textor", "textus", "thalassinus", "theatrum", "theca", "thema", "theologus", "thermae", "thesaurus", "thesis", "thorax", "thymbra", "thymum", "tibi", "timidus", "timor", "titulus", "tolero", "tollo", "tondeo", "tonsor", "torqueo", "torrens", "tot", "totam", "totidem", "toties", "totus", "tracto", "trado", "traho", "trans", "tredecim", "tremo", "trepide", "tres", "tribuo", "tricesimus", "triduana", "tripudio", "tristis", "triumphus", "trucido", "truculenter", "tubineus", "tui", "tum", "tumultus", "tunc", "turba", "turbo", "turpis", "tutamen", "tutis", "tyrannus", "uberrime", "ubi", "ulciscor", "ullam", "ullus", "ulterius", "ultio", "ultra", "umbra", "umerus", "umquam", "una", "unde", "undique", "universe", "unus", "urbanus", "urbs", "uredo", "usitas", "usque", "ustilo", "ustulo", "usus", "ut", "uter", "uterque", "utilis", "utique", "utor", "utpote", "utrimque", "utroque", "utrum", "uxor", "vaco", "vacuus", "vado", "vae", "valde", "valens", "valeo", "valetudo", "validus", "vallum", "vapulus", "varietas", "varius", "vehemens", "vel", "velit", "velociter", "velum", "velut", "venia", "veniam", "venio", "ventito", "ventosus", "ventus", "venustas", "ver", "verbera", "verbum", "vere", "verecundia", "vereor", "vergo", "veritas", "veritatis", "vero", "versus", "verto", "verumtamen", "verus", "vesco", "vesica", "vesper", "vespillo", "vester", "vestigium", "vestrum", "vetus", "via", "vicinus", "vicissitudo", "victoria", "victus", "videlicet", "video", "viduo", "vigilo", "vigor", "vilicus", "vilis", "vilitas", "villa", "vinco", "vinculum", "vindico", "vinitor", "vinum", "vir", "virga", "virgo", "viridis", "viriliter", "virtus", "vis", "viscus", "vita", "vitae", "vitiosus", "vitium", "vito", "vivo", "vix", "vobis", "vociferor", "voco", "volaticus", "volo", "volubilis", "voluntarius", "volup", "voluptas", "voluptate", "voluptatem", "voluptates", "voluptatibus", "voluptatum", "volutabrum", "volva", "vomer", "vomica", "vomito", "vorago", "vorax", "voro", "vos", "votum", "voveo", "vox", "vulariter", "vulgaris", "vulgivagus", "vulgo", "vulgus", "vulnero", "vulnus", "vulpes", "vulticulus", "xiphias"];
    cr = { word: Xe };
    $e = cr;
    mr = { title: "English", code: "en", language: "en", endonym: "English", dir: "ltr", script: "Latn" };
    ea = mr;
    aa = ['"Awaken, My Love!"', "(What's The Story) Morning Glory?", "- Tragedy +", "13 Reasons Why (Season 3)", "21st Century Breakdown", "30 De Febrero", "432 Hz Deep Healing", "5-Star", "528 Hz Meditation Music", "54+1", "8 Mile", "808s & Heartbreak", "9 To 5 And Odd Jobs", "A Beautiful Lie", "A Day At The Races", "A Day Without Rain", "A Fever You Can't Sweat Out", "A Gangsta's Pain", "A Gift & A Curse", "A Hard Day's Night", "A Head Full Of Dreams", "A Kind Of Magic", "A Million Ways To Murder", "A Moment Apart", "A Song For Every Moon", "A Thousand Suns", "A Winter Romance", "ABBA", "AI YoungBoy", "AJ Tracey", "Act One", "After Hours", "Agent Provocateur", "All About You", "All I Know So Far: Setlist", "All Or Nothing", "All Out", "All Over The Place", "All Stand Together", "All The Lost Souls", "All The Things I Never Said", "All Things Must Pass", "Alleen", "Alright, Still", "Alta Suciedad", "America", "American Heartbreak", "American Teen", "And Justice For None", "Animal Songs", "Another Friday Night", "Anything Goes", "Ao Vivo Em S\xE3o Paulo", "Ao Vivo No Ibirapuera", "Apricot Princess", "Aqui E Agora (Ao Vivo)", "Arcane League Of Legends", "Ardipithecus", "Aretha Now", "Around The Fur", "Arrival", "Artist 2.0", "As She Pleases", "Ascend", "Ashlyn", "Astro Lounge", "At Night, Alone.", "At. Long. Last. ASAP", "Atlas", "Audioslave", "Aura", "Austin", "Awake", "Away From The Sun", "Ayayay!", "Baby On Baby", "Back For Everything", "Back From The Edge", "Back In Black", "Back To Black", "Back To The Game", "Bad", "Bah\xEDa Ducati", "Baila", "Barbie The Album", "Battleground", "Bayou Country", "Bcos U Will Never B Free", "Be", "Be Here Now", "Beautiful Mind", "Beautiful Thugger Girls", "Beautiful Trauma", "Beauty And The Beast", "Beggars Banquet", "Being Funny In A Foreign Language", "Berlin Lebt", "Berry Is On Top", "Best White Noise For Baby Sleep - Loopable With No Fade", "Big Baby DRAM", "Bigger, Better, Faster, More!", "Billy Talent II", "Black Star Elephant", "Blackout", "Blank Face LP", "Bleach", "Blizzard Of Ozz", "Blonde", "Blood Sugar Sex Magik", "Bloom", "Blowin' Your Mind!", "Blu Celeste", "Blue", "Blue Banisters", "Blue Hawaii", "Blue Neighbourhood", "Bluebird Days", "Bobby Tarantino", "Bobby Tarantino II", "Bon Iver", "Born Pink", "Born To Run", "Brand New Eyes", "Break The Cycle", "Breakfast In America", "Breakthrough", "Brett Young", "Bridge Over Troubled Water", "Bright: The Album", "Brol", "Buds", "Buena Vista Social Club", "Built On Glass", "Bury Me At Makeout Creek", "Busyhead", "By The Way", "CB6", "CNCO", "California Sunrise", "Californication", "Call Me Irresponsible", "Calm", "Camino Palmero", "Camp", "Caracal", "Carbon Fiber Hits", "Carnival", "Carry On", "Cartel De Santa", "Certified Lover Boy", "Chaaama", "Chama Meu Nome", "Chapter 1: Snake Oil", "Chapter 2: Swamp Savant", "Chapter One", "Charlie's Angels", "Cherry Bomb", "Chief", "Chocolate Factory", "Chosen", "Chris Brown", "Christina Aguilera", "Chromatica", "Church", "City Of Evil", "Clandestino", "Clouds", "Coco", "Collision Course", "Colour Vision", "Combat Rock", "Come Around Sundown", "Come Away With Me", "Come Home The Kids Miss You", "Come What(ever) May", "Commando", "Common Sense", "Communion", "Conditions", "Confident", "Confrontation", "Control The Streets, Volume 2", "Corinne Bailey Rae", "Costello Music", "Cottonwood", "Covers, Vol. 2", "Cozy Tapes Vol. 2: Too Cozy", "Crash Talk", "Crazy Love", "Crazysexycool", "Crowded House", "Cruisin' With Junior H", "Culture", "Current Mood", "DS2", "Dale", "Danger Days: The True Lives Of The Fabulous Killjoys", "Dangerous Woman", "Dangerous: The Double Album", "Dark Horse", "Day69", "Daydream", "De Fiesta", "De Viaje", "DeAnn", "Death Race For Love", "Delirium", "Delta", "Demidevil", "Depression Cherry", "Descendants", "Desgenerados Mixtape", "Destin", "Destiny Fulfilled", "Desvelado", "Detroit 2", "Dex Meets Dexter", "Dharma", "Die A Legend", "Different World", "Dig Your Roots", "Digital Druglord", "Dirt", "Disclaimer I / II", "Discovery", "Disraeli Gears", "Disumano", "Dizzy Up The Girl", "Don't Play That Song", "Donda", "Donde Quiero Estar", "Doo-Wops & Hooligans", "Down The Way", "Dr. Feelgood", "Dream Your Life Away", "Dreaming Out Loud", "Drip Harder", "Drive", "Drones", "Dropped Outta College", "Drowning", "Dua Warna Cinta", "Dulce Beat", "Dusty In Memphis", "Dutty Rock", "Dying To Live", "ENR", "East Atlanta Love Letter", "Editorial", "Edna", "El Abayarde", "El Amor En Los Tiempos Del Perreo", "El Camino", "El Comienzo", "El Dorado", "El Karma", "El Mal Querer", "El Malo", "El Trabajo Es La Suerte", "El Viaje De Copperpot", "Electric Ladyland", "Emotion", "En Tus Planes", "Endless Summer Vacation", "Enter The Wu-Tang (36 Chambers)", "Equals (=)", "Estrella", "Euphoria", "Europop", "Evermore", "Every Kingdom", "Everyday Life", "Evolve", "Expectations", "Face Yourself", "Facelift", "Fallin'", "Fancy You", "Fantas\xEDa", "Favourite Worst Nightmare", "Fear Of The Dark", "Fearless", "Feel Something", "Feels Like Home", "Femme Fatale", "Ferxxocalipsis", "Fifty Shades Darker", "Fifty Shades Freed", "Fifty Shades Of Grey", "Final (Vol.1)", "Finding Beauty In Negative Spaces", "Fine Line", "First Impressions Of Earth", "First Steps", "Five Seconds Flat", "Folklore", "For Emma, Forever Ago", "Forajido EP 1", "Forever", "Forever Young", "Formula Of Love: O+T=<3", "Free 6lack", "Freudian", "Frozen II", "Full Moon Fever", "Funhouse", "Funk Wav Bounces Vol.1", "Future History", "FutureSex/LoveSounds", "Fuzzybrain", "Gallery", "Gangsta's Paradise", "Gemini", "Gemini Rights", "Generationwhy", "Get A Grip", "Get Up", "Gettin' Old", "Girl", "Gladiator", "Glisten", "Globalization", "Gloria", "Glory Days", "God's Project", "Gold Skies", "Golden", "Good Evening", "Good Thing", "Goodbye Yellow Brick Road", "Gossip Columns", "Got Your Six", "Graceland", "Graduation", "Grand Champ", "Grandson, Vol. 1", "Green River", "Guerra", "Ha*Ash Primera Fila - Hecho Realidad", "Haiz", "Hamilton", "Happy Endings", "Harry Styles", "Hasta La Ra\xEDz", "Hatful Of Hollow", "Head In The Clouds", "Heard It In A Past Life", "Heart Shaped World", "Heartbeat City", "Heartbreak On A Full Moon / Cuffing Season - 12 Days Of Christmas", "Heaven Or Hell", "Heaven knows", "Hellbilly Deluxe", "Hellboy", "Help!", "Her Loss", "Here Comes The Cowboy", "Hey World", "High School Musical", "High Tide In The Snake's Nest", "Historias De Un Capricornio", "Hndrxx", "Hombres G (Devu\xE9lveme A Mi Chica)", "Homerun", "Homework", "Hot Fuss", "Hot Pink", "Hot Sauce / Hello Future", "Hot Space", "Hotel Diablo", "Houses Of The Holy", "How Big, How Blue, How Beautiful", "How I'm Feeling", "How To Be Human", "How To Save A Life", "How To: Friend, Love, Freefall", "Hozier", "Human", "Huncho Jack, Jack Huncho", "Hunter Hayes", "Hysteria", "I Am...Sasha Fierce", "I Can't Handle Change", "I Met You When I Was 18. (The Playlist)", "I Never Liked You", "I Never Loved A Man The Way I Love You", "I See You", "I Think You Think Too Much Of Me", "I Used To Know Her", "I Used To Think I Could Fly", "I'm Comin' Over", "Ich & Keine Maske", "If You Can Believe Your Eyes & Ears", "Il Ballo Della Vita", "Ill Communication", "Imagination & The Misfit Kid", "Imagine", "Immortalized", "In A Perfect World...", "In Colour", "In My Own Words", "In Rainbows", "In Return", "In The Lonely Hour", "Infest", "Innuendo", "Inter Shibuya - La Mafia", "Interstellar", "Is This It", "It Was Written", "It's Not Me, It's You", "It's Only Me", "Ivory", "JackBoys", "Jamie", "Jazz", "Jibrail & Iblis", "Jordi", "Jordin Sparks", "Jose", "Just As I Am", "Just Cause Y'all Waited 2", "Just Like You", "Justified", "K-12 / After School", "K.I.D.S.", "K.O.", "K.O.B. Live", "KG0516", "KOD", "Kane Brown", "Kid A", "Kid Krow", "Kids See Ghosts", "Kids in Love", "Kinks (You Really Got Me)", "Know-It-All", "Konvicted", "Kring", "LANY", "LM5", "La Criatura", "La Flaca", "La Melodia De La Calle", "La Revolucion", "Lady Lady", "Lady Wood", "Langit Mong Bughaw", "Las Que No Iban A Salir", "Last Day Of Summer", "Last Year Was Complicated", "Layers", "Layover", "Lazarus", "Led Zeppelin", "Left Of The Middle", "Leftoverture", "Legends Never Die", "Let's Skip To The Wedding", "Let's Talk About Love", "Licensed To Ill", "Life In Cartoon Motion", "Life Thru A Lens", "Lifelines", "Like..?", "Lil Big Pac", "Lil Boat", "Lil Boat 2", "Lil Boat 3.5", "Lil Kiwi", "Lil Pump", "Limon Y Sal", "Listen Without Prejudice", "Little Voice", "Live On Red Barn Radio I & II", "Lo Que And\xE1bamos Buscando", "Lofi Fruits Music 2021", "London Calling", "Los Campeones Del Pueblo", "Los Extraterrestres", "Los Favoritos 2", "Lost", "Lost In Love", "Loud", "Love Sick", "Love Story", "Love Stuff", "Love Yourself: Tear", "Lover", "Luca Brasi 2: Gangsta Grillz", "Lust For Life", "Luv Is Rage", "M!ssundaztood", "Ma Fleur", "Made In Lagos", "Mafia Bidness", "Magazines Or Novels", "Mainstream Sellout", "Majestic", "Make It Big", "Make Yourself", "Making Mirrors", "Mamma Mia! Here We Go Again", "Man Of The Woods", "Manic", "Me And My Gang", "Meduza", "Meet The Orphans", "Meet The Woo", "Melim", "Mellon Collie And The Infinite Sadness", "Melly vs. Melvin", "Memories...Do Not Open", "Menagerie", "Midnights", "Minecraft - Volume Alpha", "Minutes To Midnight", "Mix Pa Llorar En Tu Cuarto", "Modo Avi\xF3n", "Monkey Business", "Mono.", "Montana", "Montevallo", "Moosetape", "Morning View", "Motivan2", "Moving Pictures", "Mr. Davis", "Mr. Misunderstood", "Mulan", "Mura Masa", "Music From The Edge Of Heaven", "Music Of The Sun", "My House", "My Kinda Party", "My Krazy Life", "My Liver Will Handle What My Heart Can't", "My Moment", "My Own Lane", "My Turn", "My Worlds", "Na Praia (Ao Vivo)", "Nakamura", "Nation Of Two", "Navegando", "Need You Now", "Neon Future III", "Neotheater", "Never Trust A Happy Song", "New English", "News Of The World", "Nicole", "Night & Day", "Nimmerland", "Nimrod", "Nine Track Mind", "No Angel", "No Me Pidas Perd\xF3n", "No More Drama", "No Protection", "No Strings Attached", "No Time To Die", "Nobody Is Listening", "Non Stop Erotic Cabaret", "Non-Fiction", "Northsbest", "Nostalgia", "Nostalgia, Ultra", "Notes On A Conditional Form", "Now Or Never", "O Embaixador (Ao Vivo)", "O My Heart", "OK Computer", "Ocean", "Ocean Avenue", "Ocean Eyes", "Odisea", "Oh My My", "Oh, What A Life", "On The 6", "One In A Million", "One More Light", "One Of These Nights", "Open Up And Say...Ahh!", "Ordinary Man", "Origins", "Out Of The Blue", "Over It", "OzuTochi", "PTSD", "Pa Las Baby's Y Belikeada", "Pa Que Hablen", "Pa' Luego Es Tarde", "Pa' Otro La 'O", "Pablo Honey", "Pain Is Love", "Pain Is Temporary", "Painting Pictures", "Palmen Aus Plastik 2", "Para Mi Ex", "Para Siempre", "Partners In Crime", "Pawn Shop", "Pegasus / Neon Shark VS Pegasus", "Pet Sounds", "Piece By Piece", "Pier Pressure", "Pineapple Sunrise", "Piseiro 2020 Ao Vivo", "Planet Pit", "Plans", "Play Deep", "Playa Saturno", "Por Primera Vez", "Por Vida", "Positions", "Post Human: Survival Horror", "Poster Girl", "Prazer, Eu Sou Ferrugem (Ao Vivo)", "Pretty Girls Like Trap Music", "Pretty. Odd.", "Prince Royce", "Prisma", "Prometo", "Providence", "Puberty 2", "Punisher", "Purgatory", "Purple Rain", "Que Bendici\xF3n", "Queen Of The Clouds", "Quiero Volver", "R&G (Rhythm & Gangsta): The Masterpiece", "Raise!", "Ransom 2", "Rapunzel", "Rare", "Re Mida", "Ready To Die", "Realer", "Rebelde", "Reclassified", "Recovery", "Recuerden Mi Estilo", "Reggatta De Blanc", "Regulate\u2026 G Funk Era", "Reik", "Reise, Reise", "Relapse", "Relaxing Piano Lullabies And Natural Sleep Aid For Baby Sleep Music", "Religiously. The Album.", "Replay", "Results May Vary", "Revenge", "Revolve", "Revolver", "Ricky Martin", "Rien 100 Rien", "Ripcord", "Rise And Fall, Rage And Grace", "Rise Of An Empire", "Robin Hood: Prince Of Thieves", "Rock N Roll Jesus", "Romance", "Romances", "Ronan", "Royal Blood", "Rumours", "Sad Boyz 4 Life II", "San Lucas", "Santana World", "Saturation III", "Sauce Boyz", "Savage Mode", "Saxobeats", "Scarlet", "Schwarzes Herz", "Seal The Deal & Let's Boogie", "Section.80", "Segundo Romance", "Sehnsucht", "Shake The Snow Globe", "Shang-Chi And The Legend Of The Ten Rings: The Album", "Sheer Heart Attack", "Shiesty Season", "Shock Value", "Shoot For The Stars, Aim For The Moon", "Signed Sealed And Delivered", "Signos", "Silent Alarm", "Simplemente Gracias", "Sin Bandera", "Sing Me A Lullaby, My Sweet Temptation", "Sinner", "Sirio", "Sit Still, Look Pretty", "Skin", "Slowhand", "Smash", "Smithereens", "Snow Cougar", "Social Cues", "Some Girls", "Song Hits From Holiday Inn", "Songs For Dads", "Songs For The Deaf", "Songs For You, Truths For Me", "Songs In The Key Of Life", "Souled Out", "Sounds Of Silence", "Soy Como Quiero Ser", "Speak Now", "Speak Your Mind", "Speakerboxxx/The Love Below", "Spider-Man: Into The Spider-Verse", "Split Decision", "Square Up", "SremmLife", "Starboy", "Stay +", "Stay Dangerous", "Staying At Tamara's", "Steppenwolf", "Stick Season", "Still Bill", "Straight Outta Compton", "Strange Trails", "Stronger", "Suavemente", "Sublime", "Suck It and See", "Sucker", "Sue\xF1os", "Sugar", "Summer Forever", "Summer,", "Sunset Season", "Sunshine On Leith", "Surfer Rosa", "Sweet Talker", "SweetSexySavage", "System Of A Down", "TA13OO", "Talk That Talk", "Talking Heads: 77", "Tangled Up", "Tango In The Night", "Taxi Driver", "Taylor Swift", "Tell Me It's Real", "Ten", "Ten Summoner's Tales", "Terra Sem Cep (Ao Vivo)", "Terral", "Testing", "Tha Carter III", "Thank Me Later", "That's Christmas To Me", "The Academy", "The Adventures Of Bobby Ray", "The Album", "The Andy Williams Christmas Album", "The Aviary", "The Balcony", "The Battle Of Los Angeles", "The Beatles (White Album)", "The Beginning", "The Better Life", "The Big Day", "The Book", "The Breakfast Club", "The Cars", "The Colour And The Shape", "The Death Of Peace Of Mind", "The Diary Of Alicia Keys", "The Documentary", "The Emancipation Of Mimi", "The Eminem Show", "The End Of Everything", "The Final Countdown", "The Forever Story", "The Foundation", "The Goat", "The Golden Child", "The Good Parts", "The Greatest Showman: Reimagined", "The Green Trip", "The Hardest Love", "The Head And The Heart", "The Human Condition", "The Infamous", "The Lady Killer", "The Last Don II", "The Lion King", "The Lockdown Sessions", "The London Sessions", "The Lord Of The Rings: The Fellowship Of The Ring", "The Lost Boy", "The Magic Of Christmas / The Christmas Song", "The Marshall Mathers LP", "The Martin Garrix Collection", "The Melodic Blue", "The Mockingbird & The Crow", "The Pains Of Growing", "The Papercut Chronicles", "The Perfect Luv Tape", "The Pinkprint", "The Predator", "The Queen Is Dead", "The ReVe Festival: Finale", "The Rise And Fall Of Ziggy Stardust And The Spiders From Mars", "The Rising Tied", "The River", "The Stone Roses", "The Story Of Us", "The Stranger", "The Sufferer & The Witness", "The Sun's Tirade", "The Temptations Sing Smokey", "The Time Of Our Lives", "The Way It Is", "The Wonderful World Of Sam Cooke", "The Writing's On The Wall", "The Young And The Hopeless", "Therapy", "Therapy Session", "There Is More (Live)", "There Is Nothing Left To Lose", "These Things Happen", "Third Eye Blind", "This Is Me...Then", "This Unruly Mess I've Made", "Threat to Survival", "Thrill Of The Chase", "Time", "Timelezz", "To Let A Good Thing Die", "To Pimp A Butterfly", "Toast To Our Differences", "Todos Os Cantos, Vol. 1 (Ao Vivo)", "Too Hard", "Torches X", "Total Xanarchy", "Toto IV", "Toulouse Street", "Tourist History", "Toxicity", "Tragic Kingdom", "Tranquility Base Hotel & Casino", "Traumazine", "Traveler", "Tres Hombres", "Trip At Knight", "Tron: Legacy", "True Blue", "True Colors", "Trustfall", "Tu Veneno Mortal", "Tudo Em Paz", "Ubuntu", "Ugly Is Beautiful", "Ultra 2021", "Una Mattina", "Unbroken", "Uncovered", "Under Pressure", "Unsponsored Content", "Unstoppable", "Unwritten", "Urban Flora", "Urban Hymns", "Use Your Illusion I", "Veneer", "Versions Of Me", "Vibes", "Vice Versa", "Vices & Virtues", "Victory", "Vida", "Viejo Marihuano", "Visual\xEDzate", "Walk Away", "Walk Me Home...", "Watch The Throne", "Wave", "We Broke The Rules", "We Love You Tecca", "We Love You Tecca 2", "Weezer (Green Album)", "Welcome To The Madhouse", "Westlife", "What A Time To Be Alive", "What Do You Think About The Car?", "What Is Love?", "What Makes You Country", "What Separates Me From You", "What You See Is What You Get / What You See Ain't Always What You Get", "When It's Dark Out", "When We All Fall Asleep, Where Do We Go?", "Where The Light Is", "While The World Was Burning", "White Pony", "Whitney", "Who Really Cares", "Who You Are", "Who's Next", "Wide Open", "Wilder Mind", "Wildfire", "Willy And The Poor Boys", "Wings / You Never Walk Alone", "Wish", "Wish You Were Here", "Without Warning", "Wonder", "X&Y", "XOXO", "Y Que Quede Claro", "YBN: The Mixtape", "Yo Creo", "You Will Regret", "Youngblood", "Younger Now", "Youth"];
    ra = ["$NOT", "$uicideboy$", "(G)I-DLE", "*NSYNC", "2 Chainz", "21 Savage", "6LACK", "? & The Mysterians", "A Boogie Wit da Hoodie", "A Taste of Honey", "A Tribe Called Quest", "A-Ha", "ABBA", "AC/DC", "AJ Tracey", "ATEEZ", "Ace of Base", "Adele", "Ado", "Aerosmith", "Agust D", "Aitana", "Al Dexter & his Troopers", "Al Green", "Al Jolson", "Al Martino", "Alan Jackson", "Alannah Myles", "Alec Benjamin", "Alejandro Sanz", "Alesso", "Alfredo Olivas", "Ali Gatie", "Alice In Chains", "Alina Baraz", "All Time Low", "All-4-One", "All-American Rejects", "Alok", "America", "American Quartet", "Amii Stewart", "Amitabh Bhattacharya", "Ana Castela", "Anderson .Paak", "Andy Grammer", "Angus & Julia Stone", "Anirudh Ravichander", "Anita Ward", "Anitta", "Anton Karas", "Anuel AA", "Arcade Fire", "Archie Bell & The Drells", "Archies", "Aretha Franklin", "Arizona Zervas", "Armin van Buuren", "Arthur Conley", "Artie Shaw", "Asake", "Asees Kaur", "Association", "Atif Aslam", "Audioslave", "Aventura", "Avril Lavigne", "Aya Nakamura", "B J Thomas", "B.o.B", "BLACKPINK", "BONES", "BROCKHAMPTON", "BTS", "Baby Keem", "Bachman-Turner Overdrive", "Backstreet Boys", "Bad Bunny", "Badshah", "Bailey Zimmerman", "Banda El Recodo", "Barbra Streisand", "Barry White", "Bazzi", "Bebe Rexha", "Becky G", "Becky Hill", "Bee Gees", "Ben Bernie", "Ben Howard", "Ben Selvin", "Berlin", "Bessie Smith", "Bethel Music", "Bette Midler", "Beyonce", "Bibi Blocksberg", "Bibi und Tina", "BigXthaPlug", "Bill Doggett", "Bill Haley & his Comets", "Bill Withers", "Billy Davis Jr", "Billy Joel", "Billy Paul", "Billy Preston", "Billy Swan", "Birdy", "Bizarrap", "Blake Shelton", "Blur", "Bob Marley & The Wailers", "Bob Seger", "Bobby Darin", "Bobby Lewis", "Bobby McFerrin", "Bobby Vinton", "Boney M.", "Bonez MC", "Bonnie Tyler", "Booba", "Boston", "BoyWithUke", "Boyce Avenue", "Bradley Cooper", "Bread", "Brent Faiyaz", "Brett Young", "Bring Me The Horizon", "Britney Spears", "Brooks & Dunn", "Bruce Channel", "Bruno & Marrone", "Bryan Adams", "Bryce Vine", "Buddy Holly", "Burna Boy", "C. Tangana", "CKay", "CRO", "Camilo", "Capital Bra", "Captain & Tennille", "Cardi B", "Carin Leon", "Carlos Vives", "Carly Simon", "Carpenters", "Cavetown", "Celine Dion", "Central Cee", "Chaka Khan", "Champs", "Charlie Rich", "Chayanne", "Cheat Codes", "Cher", "Chic", "Chicago", "Chris Brown", "Chris Isaak", "Chris Young", "Christina Aguilera", "Christina Perri", "Christopher Cross", "Chuck Berry", "Ciara", "Cigarettes After Sex", "Cliff Edwards (Ukelele Ike)", "Cody Johnson", "Colbie Caillat", "Colby O'Donis", "Cole Swindell", "Coleman Hawkins", "Contours", "Coolio", "Count Basie", "Cris Mj", "Culture Club", "Cyndi Lauper", "D-Block Europe", "DAY6", "DJ Khaled", "DJ Luian", "DJ Nelson", "DMX", "DNCE", "DaVido", "Dadju", "Daft Punk", "Dan + Shay", "Daniel Powter", "Danny Ocean", "Darius Rucker", "Dave", "David Bowie", "David Guetta", "Daya", "Dean Martin", "Deee-Lite", "Deep Purple", "Deftones", "Demi Lovato", "Dennis Lloyd", "Denzel Curry", "Dermot Kennedy", "Desiigner", "Devo", "Dewa 19", "Dexys Midnight Runners", "Diddy", "Dido", "Die drei !!!", "Diego & Victor Hugo", "Diljit Dosanjh", "Dimitri Vegas & Like Mike", "Dinah Shore", "Dionne Warwick", "Dire Straits", "Disclosure", "Dixie Cups", "Doja Cat", "Dolly Parton", "Don Diablo", "Don Henley", "Don McLean", "Don Omar", "Donna Summer", "Donovan", "Dr. Dre", "Drake", "Dreamville", "Dua Lipa", "EMF", "ENHYPEN", "Earth, Wind & Fire", "Ed Sheeran", "Eddie Cantor", "Eddie Cochran", "Eddy Howard", "Edgar Winter Group", "Edwin Hawkins Singers", "Edwin Starr", "El Alfa", "Eladio Carrion", "Electric Light Orchestra", "Elevation Worship", "Ella Henderson", "Ellie Goulding", "Elton John", "Elvis Presley", "Empire of the Sun", "En Vogue", "Enrique Iglesias", "Eslabon Armado", "Ethel Waters", "Etta James", "Evanescence", "Exile", "Extreme", "Faith Hill", "Fall Out Boy", "Fanny Brice", "Farruko", "Fats Domino", "Fats Waller", "Feid", "Felix Jaehn", "Fergie", "Fetty Wap", "Fiersa Besari", "Fifth Harmony", "Fine Young Cannibals", "Five Finger Death Punch", "Fleetwood Mac", "Flo-Rida", "Florence + The Machine", "Flume", "Foo Fighters", "Foreigner", "Foster The People", "Four Aces", "Frank Ocean", "Frank Sinatra", "Frankie Avalon", "Frankie Valli", "Fred Astaire", "Freda Payne", "Freddie Dredd", "Freddy Fender", "French Montana", "Fuerza Regida", "Fujii Kaze", "Future", "G-Eazy", "Garfunkel and Oates", "Gary Lewis & The Playboys", "Gary Numan", "Gene Autry", "Gene Chandler", "Gene Vincent", "George Michael", "George Strait", "Gera MX", "Ghost", "Ghostemane", "Gigi D'Agostino", "Gladys Knight & The Pips", "Glass Animals", "Glee Cast", "Gloria Gaynor", "Godsmack", "Gorillaz", "Gotye", "Grand Funk Railroad", "Green Day", "Grouplove", "Grupo Firme", "Grupo Marca Registrada", "Gryffin", "Gucci Mane", "Guess Who", "Gunna", "Gusttavo Lima", "Guy Mitchell", "Gwen Stefani", "Gzuz", "H.E.R.", "HARDY", "Hailee Steinfeld", "Halsey", "Hans Zimmer", "Harris Jayaraj", "Harry Chapin", "Harry James", "Harry Nilsson", "Harry Styles", "Hayley Williams", "Herb Alpert", "Herman's Hermits", "Hillsong UNITED", "Hillsong Worship", "Hollywood Undead", "Honey Cone", "Hoobastank", "Hues Corporation", "I Prevail", "ITZY", "IVE", "Ice Cube", "Ice Spice", "Iggy Azalea", "Imagine Dragons", "Incubus", "Internet Money", "Isaac Hayes", "J Geils Band", "J. Cole", "JAY-Z", "JJ Lin", "JP Saxe", "JVKE", "Jack Harlow", "Jack Johnson", "Jackie Wilson", "Jacquees", "James Arthur", "James Brown", "James TW", "James Taylor", "Jamie Foxx", "Janet Jackson", "Janis Joplin", "Jason Aldean", "Jason Mraz", "Jay Chou", "Jay Sean", "Jay Wheeler", "Jaymes Young", "Jean Knight", "Jeezy", "Jennifer Lopez", "Jennifer Warnes", "Jeremih", "Jeremy Zucker", "Jerry Lee Lewis", "Jerry Murad's Harmonicats", "Jess Glynne", "Jessie J", "Jewel", "Jimi Hendrix", "Jimin", "Jimmie Rodgers", "Jimmy Dean", "Jo Stafford", "Joan Jett & The Blackhearts", "Joao Gilberto", "Joel Corry", "John Fred & The Playboy Band", "John Legend", "John Mayer", "John Williams", "Johnnie Ray", "Johnnie Taylor", "Johnny Cash", "Johnny Horton", "Johnny Mathis", "Johnny Mercer", "Johnny Nash", "Joji", "Jon Bellion", "Jonas Blue", "Jonas Brothers", "Joni James", "Jorja Smith", "Juan Gabriel", "Juan Luis Guerra 4.40", "Juanes", "Juice Newton", "Julia Michaels", "Justin Bieber", "Justin Quiles", "KALEO", "KAROL G", "KAYTRANADA", "KK", "KSI", "KYLE", "Kacey Musgraves", "Kane Brown", "Kanye West", "Karan Aujla", "Kate Smith", "Katy Perry", "Kay Kyser", "Ke$ha", "Kehlani", "Kelly Clarkson", "Kenny Chesney", "Kenny Loggins", "Kenny Rogers", "Kenshi Yonezu", "Kenya Grace", "Kevin Gates", "Key Glock", "Khalid", "Kim Carnes", "Kim Petras", "Kimbra", "Kina", "King Gnu", "Kings of Leon", "Kingsmen", "Kitty Kallen", "Kodak Black", "Kodaline", "Kollegah", "Kool & The Gang", "Kungs", "Kygo", "Kylie Minogue", "LE SSERAFIM", "LISA", "LMFAO", "LUDMILLA", "La Adictiva Banda San Jos\xE9 de Mesillas", "La Oreja de Van Gogh", "Labrinth", "Lady Antebellum", "Lady GaGa", "Lainey Wilson", "Lana Del Rey", "Latto", "Lauryn Hill", "Lauv", "League of Legends", "Lee Brice", "Leon Bridges", "Leona Lewis", "Lesley Gore", "Leslie Odom Jr.", "Liam Payne", "Lifehouse", "Lil Baby", "Lil Dicky", "Lil Durk", "Lil Mosey", "Lil Nas X", "Lil Pump", "Lil Skies", "Lil Tjay", "Lil Uzi Vert", "Lil Yachty", "Lil' Kim", "Lil' Wayne", "Lin-Manuel Miranda", "Linkin Park", "Lionel Richie", "Lipps Inc", "Lisa Loeb", "Little Peggy March", "Little Richard", "Lofi Fruits Music", "Lord Huron", "Los Del Rio", "Los Dos Carnales", "Los Lobos", "Los Temerarios", "Los Tigres Del Norte", "Los Tucanes De Tijuana", "Lou Reed", "Loud Luxury", "Louis Jordan", "Louis Tomlinson", "Love Unlimited", "Lovin' Spoonful", "Luan Santana", "Luciano", "Luis Miguel", "Luis R Conriquez", "Lulu", "Lunay", "Lupe Fiasco", "M", "MAX", "MC Hammer", "MC Ryan SP", "MKTO", "Mabel", "Machine Gun Kelly", "Madison Beer", "Madonna", "Mahalini", "Major Lazer", "Mambo Kingz", "Maneskin", "Marco Antonio Sol\xEDs", "Margaret Whiting", "Maria Becerra", "Mario", "Mario Lanza", "Mark Ronson", "Maroon 5", "Marshmello", "Martin Garrix", "Mary Ford", "Mary J Blige", "Mary J. Blige", "Mary Wells", "Matoma", "Mau y Ricky", "Meek Mill", "Megadeth", "Melanie", "Melanie Martinez", "Melendi", "Men At Work", "Metro Boomin", "Michael Bubl\xE9", "Michael Jackson", "Michael McDonald", "Michael Sembello", "Miguel", "Mike Posner", "Miley Cyrus", "Milky Chance", "Minnie Riperton", "Miracle Tones", "Miranda Lambert", "Mohit Chauhan", "Mon Laferte", "Moneybagg Yo", "Monsta X", "Mora", "Morad", "Morat", "Mother Mother", "Motley Crue", "Ms. Lauryn Hill", "Mumford & Sons", "Muse", "Mya", "Myke Towers", "NCT 127", "NCT DREAM", "NEFFEX", "Nadin Amizah", "Nancy Sinatra", "Nat King Cole", "Nate Smith", "Natti Natasha", "Nayer", "Neil Diamond", "Neil Sedaka", "Nekfeu", "Nelly", "New Vaudeville Band", "Next", "Nickelback", "Nicki Minaj", "Nicki Nicole", "Nicky Jam", "Nina Simone", "Ninho", "Nipsey Hussle", "Nirvana", "Niska", "No Doubt", "Norah Jones", "Normani", "OMI", "ONE OK ROCK", "Oasis", "Official HIGE DANdism", "Offset", "Old Dominion", "Oliver Heldens", "Olivia Rodrigo", "Omah Lay", "One Direction", "Otis Redding", "OutKast", "Owl City", "P Diddy", "P!nk", "PLK", "PNL", "Pamungkas", "Passenger", "Pat Boone", "Patsy Cline", "Patti LaBelle", "Patti Page", "Paul & Paula", "Paul Revere & the Raiders", "Paul Robeson", "Paul Russell", "Paul Whiteman", "Paula Abdul", "Peaches & Herb", "Pearl Jam", "Pee Wee Hunt", "Pee Wee King", "Pentatonix", "Percy Faith", "Percy Sledge", "Peso Pluma", "Peter Cetera", "Peter Gabriel", "Peter, Paul & Mary", "Pharrell Williams", "Pierce The Veil", "Pineapple StormTv", "Pink Floyd", "Pink Sweat$", "Piso 21", "Pitbull", "Plan B", "Player", "Polo G", "Pop Smoke", "Portugal. The Man", "Pouya", "Prince", "Prince Royce", "Pusha T", "Quality Control", "Queen", "Quinn XCII", "R. Kelly", "RAF Camora", "RAYE", "REM", "REO Speedwagon", "Radiohead", "Rag'n'Bone Man", "Rage Against The Machine", "Rahat Fateh Ali Khan", "Rainbow Kitten Surprise", "Rammstein", "Rauw Alejandro", "Ray Charles", "Ray Parker Jr", "Ray Stevens", "Red Foley", "Red Hot Chili Peppers", "Red Velvet", "Regard", "Regina Belle", "Reik", "Rels B", "Rema", "Ricardo Arjona", "Rich The Kid", "Rick Astley", "Rick Dees & his Cast of Idiots", "Rick Ross", "Rick Springfield", "Ricky Martin", "Ricky Nelson", "Rihanna", "Rita Ora", "Ritchie Valens", "Rizky Febian", "Rob Thomas", "Roberta Flack", "Robin Schulz", "Robin Thicke", "Rod Stewart", "Rod Wave", "Roddy Ricch", "Roger Miller", "Romeo Santos", "Rosemary Clooney", "Roxette", "Roy Acuff", "Roy Orbison", "Rudimental", "Ruel", "Ruth B.", "Ryan Lewis", "SCH", "SEVENTEEN", "SWV", "Sabaton", "Sabrina Carpenter", "Sachet Tandon", "Sachin-Jigar", "Sade", "Sam Cooke", "Sam Feldt", "Sam Hunt", "Sam Smith", "Sam The Sham & The Pharaohs", "Sammy Davis Jr", "Sammy Kaye", "Santana", "Sasha Alex Sloan", "Savage Garden", "Saweetie", "Scorpions", "Sean Kingston", "Sean Paul", "Sebastian Yatra", "Sech", "Seeb", "Sezen Aksu", "Sfera Ebbasta", "Shaggy", "Shania Twain", "Shawn Mendes", "Sheena Easton", "Shinedown", "Shubh", "Sia", "Sid Sriram", "Sidhu Moose Wala", "Silk", "Silver Convention", "Simon & Garfunkel", "Sinead O'Connor", "Sir Mix-a-Lot", "Sister Sledge", "Ski Mask The Slump God", "Skillet", "Skrillex", "Sleeping At Last", "Smokey Robinson", "Snoop Dogg", "Snow Patrol", "Soda Stereo", "Sonu Nigam", "Sophie Ellis-Bextor", "Spencer Davis Group", "Spice Girls", "Stan Getz", "Starland Vocal Band", "Stephen Sanchez", "Steve Aoki", "Steve Lacy", "Steve Winwood", "Stevie B", "Sting", "Stormzy", "Strawberry Alarm Clock", "Stray Kids", "Stromae", "Sublime", "Sum 41", "Summer Walker", "Supertramp", "Survivor", "Swedish House Mafia", "System Of A Down", "T-Pain", "T.I.", "TAEYEON", "TKKG", "TLC", "TOMORROW X TOGETHER", "TOTO", "TWICE", "Tag Team", "Tainy", "Tammi Terrell", "Tanishk Bagchi", "Tate McRae", "Taylor Swift", "Tears For Fears", "Tems", "Tennessee Ernie Ford", "Terence Trent D'Arby", "Teresa Brewer", "Terry Jacks", "The Ames Brothers", "The Animals", "The B52s", "The Bangles", "The Beatles", "The Black Eyed Peas", "The Black Keys", "The Box Tops", "The Chainsmokers", "The Chiffons", "The Chordettes", "The Clash", "The Coasters", "The Commodores", "The Cowsills", "The Cranberries", "The Crew-Cuts", "The Cure", "The Detroit Spinners", "The Diamonds", "The Doobie Brothers", "The Doors", "The Drifters", "The Emotions", "The Eurythmics", "The Fireballs", "The Flamingos", "The Foundations", "The Four Seasons", "The Fray", "The Game", "The Go Gos", "The Goo Goo Dolls", "The Head And The Heart", "The Hollies", "The Ink Spots", "The Isley Brothers", "The Jackson 5", "The Kid LAROI", "The Killers", "The Kingston Trio", "The Kooks", "The Lemon Pipers", "The Living Tombstone", "The Lumineers", "The Mamas & The Papas", "The Marvelettes", "The McCoys", "The Mills Brothers", "The Miracles", "The Monkees", "The Moody Blues", "The National", "The Neighbourhood", "The Notorious B.I.G.", "The O'Jays", "The Offspring", "The Osmonds", "The Partridge Family", "The Penguins", "The Pet Shop Boys", "The Platters", "The Righteous Brothers", "The Rolling Stones", "The Ronettes", "The Score", "The Script", "The Seekers", "The Shangri-Las", "The Smashing Pumpkins", "The Staple Singers", "The Strokes", "The Supremes", "The Temptations", "The Turtles", "The Vamps", "The Verve", "The Village People", "The Weavers", "The White Stripes", "The Young Rascals", "The Zombies", "Thelma Houston", "Thomas Rhett", "Three Days Grace", "Three Dog Night", "Three Man Down", "Timbaland", "Timmy Trumpet", "Toby Keith", "Tom Jones", "Tom Petty and the Heartbreakers", "Tommy Dorsey", "Tommy Edwards", "Tommy James & the Shondells", "Tone Loc", "Toni Braxton", "Topic", "Tory Lanez", "Tove Lo", "Trevor Daniel", "Trey Songz", "Trippie Redd", "Trueno", "Tulsi Kumar", "Tulus", "Twenty One Pilots", "Two Feet", "Ty Dolla $ign", "Tyga", "Tyler Hubbard", "U2", "UB40", "UZI", "Ufo361", "Upchurch", "V", "Vampire Weekend", "Van McCoy", "Van Morrison", "Vance Joy", "Vanessa Carlton", "Vanessa Williams", "Vera Lynn", "Vernon Dalhart", "Vicente Fernandez", "Vishal-Shekhar", "Volbeat", "WILLOW", "Wale", "Wallows", "Weezer", "Wham!", "Whitney Houston", "Why Don't We", "Wilbert Harrison", "Wilson Phillips", "Wiz Khalifa", "Woody Guthrie", "Wyclef Jean", "XXXTENTACION", "Xavi", "YG", "YNW Melly", "YOASOBI", "Yandel", "Years & Years", "Yeat", "Yo Gotti", "Young Dolph", "Young Miko", "Young Thug", "YoungBoy Never Broke Again", "Yung Gravy", "Yuuri", "Yuvan Shankar Raja", "ZAYN", "ZZ Top", "Zac Brown Band", "Zach Bryan", "Zara Larsson", "aespa", "benny blanco", "blink-182", "d4vd", "deadmau5", "girl in red", "gnash", "iann dior", "will.i.am"];
    oa = ["Acid House", "Acid Jazz", "Acid Rock", "Acoustic", "Acoustic Blues", "Afro-Pop", "Afrobeat", "Alt-Rock", "Alternative", "Ambient", "American Trad Rock", "Americana", "Anime", "Arena Rock", "Art-Rock", "Avant-Garde", "Avant-Punk", "Baladas y Boleros", "Barbershop", "Baroque", "Bebop", "Big Band", "Black Metal", "Blue Note", "Bluegrass", "Blues", "Boogaloo", "Bop", "Bossa Nova", "Bounce", "Brazilian Funk", "Breakbeat", "Britpop", "CCM", "Cajun", "Cantopop", "Celtic", "Celtic Folk", "Chamber Music", "Chant", "Chanukah", "Chicago Blues", "Chicago House", "Chicano", "Children\u2019s Music", "Chill", "Choral", "Christian", "Christmas", "Classical", "Club", "College Rock", "Conjunto", "Cool Jazz", "Country", "Crunk", "Dance", "Dancehall", "Death Metal", "Deep House", "Delta Blues", "Detroit Techno", "Dirty South", "Disco", "Disney", "Dixieland", "Doo-wop", "Downtempo", "Dream Pop", "Drill", "Drinking Songs", "Drone", "Drum'n'bass", "Dub", "Dubstep", "EDM", "Early Music", "East Coast Rap", "Easter", "Easy Listening", "Eclectic", "Electric Blues", "Electro", "Electronic", "Electronica", "Emo", "Enka", "Environmental", "Ethio-jazz", "Experimental", "Experimental Rock", "Flamenco", "Folk", "Folk-Rock", "Forro", "French Pop", "Funk", "Fusion", "Gangsta Rap", "Garage", "German Folk", "German Pop", "Glam Rock", "Gospel", "Goth", "Grime", "Grindcore", "Groove", "Grunge", "Hair Metal", "Halloween", "Happy", "Hard Bop", "Hard Dance", "Hard Rock", "Hardcore", "Hardcore Punk", "Hardcore Rap", "Hardstyle", "Healing", "Heavy Metal", "High Classical", "Hip Hop", "Holiday", "Honky Tonk", "House", "IDM", "Impressionist", "Indie", "Industrial", "Instrumental", "J-Dance", "J-Idol", "J-Pop", "J-Punk", "J-Rock", "J-Ska", "J-Synth", "Jackin House", "Jam Bands", "Japanese Pop", "Jazz", "Jungle", "K-Pop", "Karaoke", "Kayokyoku", "Kids", "Kitsch", "Klezmer", "Krautrock", "Latin", "Latin Jazz", "Latin Rap", "Local", "Lounge", "Lullabies", "MPB", "Mainstream Jazz", "Malay", "Mandopop", "March", "Mariachi", "Mawwal", "Medieval", "Meditation", "Metal", "Metalcore", "Minimal Techno", "Minimalism", "Modern", "Motown", "Mugham", "Musicals", "Musique Concr\xE8te", "Nature", "Neo-Soul", "Nerdcore", "New Acoustic", "New Age", "New Mex", "New Wave", "No Wave", "Noise", "Nordic", "Novelty", "OPM", "Oi!", "Old School Rap", "Opera", "Orchestral", "Original Score", "Outlaw Country", "Pagode", "Party", "Piano", "Polka", "Pop", "Pop Film", "Pop Latino", "Post Dubstep", "Power Pop", "Praise & Worship", "Progressive House", "Progressive Rock", "Proto-punk", "Psych Rock", "Psychedelic", "Punk", "Punk Rock", "Qawwali", "Quiet Storm", "R&B", "Ragtime", "Rainy Day", "Rap", "Reggae", "Reggaeton", "Regional Mexicano", "Relaxation", "Renaissance", "Retro", "Rock", "Rockabilly", "Rocksteady", "Romance", "Romantic", "Roots Reggae", "Roots Rock", "SKA", "Sad", "Salsa", "Samba", "Second Line", "Sertanejo", "Shaabi", "Shoegaze", "Sleep", "Smooth Jazz", "Soft Rock", "Soul", "Soundtrack", "Southern Gospel", "Southern Rock", "Space Rock", "Stage And Screen", "Steampunk", "Summer", "Surf", "Swamp Pop", "Swing", "Synth Pop", "Tango", "Techno", "Teen Pop", "Tejano", "Tex-Mex", "Thanksgiving", "Traditional", "Trance", "Trip Hop", "Tropical", "Underground Rap", "Urban", "Urban Cowboy", "West Coast Rap", "Western Swing", "World", "Worldbeat", "Zydeco"];
    na = ["(Everything I Do) I Do it For You", "(Ghost) Riders in the Sky", "(I Can't Get No) Satisfaction", "(I've Got a Gal In) Kalamazoo", "(I've Had) the Time of My Life", "(It's No) Sin", "(Just Like) Starting Over", "(Let Me Be Your) Teddy Bear", "(Put Another Nickel In) Music! Music! Music!", "(Sexual) Healing", "(Sittin' On) the Dock of the Bay", "(They Long to Be) Close to You", "(You Keep Me) Hangin' On", "(You're My) Soul & Inspiration", "(Your Love Keeps Lifting Me) Higher & Higher", "12th Street Rag", "1999", "19th Nervous Breakdown", "50 Ways to Leave Your Lover", "9 to 5", "96 Tears", "A Boy Named Sue", "A Hard Day's Night", "A String of Pearls", "A Thousand Miles", "A Tree in the Meadow", "A Whiter Shade of Pale", "A Whole New World (Aladdin's Theme)", "A Woman in Love", "A-Tisket A-Tasket", "ABC", "Abracadabra", "Ac-cent-tchu-ate the Positive", "Addicted to Love", "After You've Gone", "Afternoon Delight", "Again", "Against All Odds (Take a Look At Me Now)", "Ain't Misbehavin'", "Ain't No Mountain High Enough", "Ain't No Sunshine", "Ain't That a Shame", "Airplanes", "All Along the Watchtower", "All I Have to Do is Dream", "All I Wanna Do", "All My Lovin' (You're Never Gonna Get It)", "All Night Long (All Night)", "All Out of Love", "All Shook Up", "All You Need is Love", "Alone", "Alone Again (Naturally)", "Always On My Mind", "American Pie", "American Woman", "Angie", "Another Brick in the Wall (part 2)", "Another Day in Paradise", "Another Night", "Another One Bites the Dust", "Apologize", "April Showers", "Aquarius/Let The Sunshine In", "Are You Lonesome Tonight?", "Arthur's Theme (Best That You Can Do)", "As Time Goes By", "At Last", "At the Hop", "Auf Wiederseh'n Sweetheart", "Baby Baby", "Baby Come Back", "Baby Got Back", "Baby Love", "Baby One More Time", "Bad Day", "Bad Girls", "Bad Moon Rising", "Bad Romance", "Bad, Bad Leroy Brown", "Baker Street", "Ball of Confusion (That's What the World is Today)", "Ballad of the Green Berets", "Ballerina", "Band On the Run", "Band of Gold", "Battle of New Orleans", "Be Bop a Lula", "Be My Baby", "Be My Love", "Beat It", "Beautiful Day", "Beauty & the Beast", "Because I Love You (The Postman Song)", "Because You Loved Me", "Because of You", "Before The Next Teardrop Falls", "Begin the Beguine", "Behind Closed Doors", "Being With You", "Believe", "Ben", "Bennie & the Jets", "Besame Mucho", "Best of My Love", "Bette Davis Eyes", "Big Bad John", "Big Girls Don't Cry", "Billie Jean", "Bitter Sweet Symphony", "Black Or White", "Black Velvet", "Blaze of Glory", "Bleeding Love", "Blue Suede Shoes", "Blue Tango", "Blueberry Hill", "Blurred Lines", "Body & Soul", "Bohemian Rhapsody", "Boogie Oogie Oogie", "Boogie Woogie Bugle Boy", "Boom Boom Pow", "Born in the USA", "Born to Be Wild", "Born to Run", "Boulevard of Broken Dreams", "Brand New Key", "Brandy (You're A Fine Girl)", "Breaking Up is Hard to Do", "Breathe", "Bridge Over Troubled Water", "Brother Louie", "Brother, Can You Spare a Dime?", "Brown Eyed Girl", "Brown Sugar", "Build Me Up Buttercup", "Burn", "Buttons & Bows", "Bye Bye Love", "Bye Bye, Blackbird", "Bye, Bye, Bye", "Caldonia Boogie (What Makes Your Big Head So Hard)", "California Dreamin'", "California Girls", "Call Me", "Call Me Maybe", "Can You Feel the Love Tonight", "Can't Buy Me Love", "Can't Get Enough of Your Love, Babe", "Can't Help Falling in Love", "Candle in the Wind '97", "Candy Man", "Car Wash", "Careless Whisper", "Cars", "Cat's in the Cradle", "Cathy's Clown", "Celebration", "Centerfold", "Chain of Fools", "Chances Are", "Change the World", "Chapel of Love", "Chattanooga Choo Choo", "Chattanoogie Shoe-Shine Boy", "Check On It", "Cheek to Cheek", "Cherish", "Cherry Pink & Apple Blossom White", "Cold, Cold Heart", "Colors of the Wind", "Come On Eileen", "Come On-a My House", "Come Together", "Coming Up", "Cracklin' Rosie", "Crazy", "Crazy For You", "Crazy Little Thing Called Love", "Crazy in Love", "Creep", "Crimson & Clover", "Crocodile Rock", "Cry", "Cry Like a Baby", "Crying", "Da Doo Ron Ron (When He Walked Me Home)", "Dance to the Music", "Dancing Queen", "Dancing in the Dark", "Dancing in the Street", "Dardanella", "Daydream Believer", "December 1963 (Oh What a Night)", "Delicado", "Dilemma", "Disco Duck", "Disco Lady", "Disturbia", "Dizzy", "Do That to Me One More Time", "Do Wah Diddy Diddy", "Do Ya Think I'm Sexy?", "Do You Love Me?", "Don't Be Cruel", "Don't Fence Me In", "Don't Go Breaking My Heart", "Don't Leave Me This Way", "Don't Let the Stars Get in Your Eyes", "Don't Let the Sun Go Down On Me", "Don't Speak", "Don't Stop 'Til You Get Enough", "Don't Worry Be Happy", "Don't You (Forget About Me)", "Don't You Want Me", "Doo Wop (That Thing)", "Down", "Down Hearted Blues", "Down Under", "Downtown", "Dreamlover", "Dreams", "Drop it Like It's Hot", "Drops of Jupiter (Tell Me)", "Duke of Earl", "E.T.", "Earth Angel", "Ebony & Ivory", "Eight Days a Week", "Empire State Of Mind", "End of the Road", "Endless Love", "Escape (The Pina Colada Song)", "Eve of Destruction", "Every Breath You Take", "Every Little Thing She Does is Magic", "Everybody Loves Somebody", "Everybody Wants to Rule the World", "Everyday People", "Eye of the Tiger", "Faith", "Fallin'", "Fame", "Family Affair", "Fantasy", "Fast Car", "Feel Good Inc", "Feel Like Making Love", "Fire & Rain", "Firework", "Flashdance. What a Feeling", "Fly Robin Fly", "Foolish Games", "Footloose", "For What It's Worth (Stop, Hey What's That Sound)", "Fortunate Son", "Frankenstein", "Freak Me", "Freebird", "Frenesi", "Funkytown", "Gangsta's Paradise", "Georgia On My Mind", "Georgy Girl", "Get Back", "Get Down Tonight", "Get Off of My Cloud", "Ghostbusters", "Gimme Some Lovin'", "Girls Just Wanna Have Fun", "Give Me Everything", "Gives You Hell", "Glamorous", "Glory of Love", "Go Your Own Way", "God Bless America", "God Bless the Child", "Gold Digger", "Gonna Make You Sweat (Everybody Dance Now)", "Good Lovin'", "Good Times", "Good Vibrations", "Goodbye Yellow Brick Road", "Goodnight, Irene", "Got to Give it Up", "Grease", "Great Balls of Fire", "Greatest Love of All", "Green Onions", "Green River", "Green Tambourine", "Grenade", "Groove is in the Heart", "Groovin'", "Gypsies, Tramps & Thieves", "Hair", "Hang On Sloopy", "Hanging by a Moment", "Hanky Panky", "Happy Days Are Here Again", "Happy Together", "Harbour Lights", "Hard to Say I'm Sorry", "Harper Valley PTA", "Have You Ever Really Loved a Woman?", "He'll Have to Go", "He's So Fine", "He's a Rebel", "Heart of Glass", "Heart of Gold", "Heartbreak Hotel", "Hello Dolly", "Hello, I Love You, Won't You Tell Me Your Name?", "Help Me, Rhonda", "Help!", "Here Without You", "Here in My Heart", "Hero", "Hey Baby", "Hey Jude", "Hey Paula", "Hey There", "Hey There Delilah", "Hey Ya!", "Higher Love", "Hips don't lie", "Hit the Road, Jack", "Hold On", "Hollaback Girl", "Honey", "Honky Tonk", "Honky Tonk Woman", "Horse With No Name", "Hot Child In The City", "Hot Stuff", "Hotel California", "Hound Dog", "House of the Rising Sun", "How Deep is Your Love?", "How Do I Live?", "How Do You Mend a Broken Heart", "How High the Moon", "How Much is That Doggy in the Window?", "How Will I Know", "How You Remind Me", "How to Save a Life", "Hungry Heart", "Hurt So Good", "I Believe I Can Fly", "I Can Dream, Can't I?", "I Can Help", "I Can See Clearly Now", "I Can't Get Next to You", "I Can't Get Started", "I Can't Go For That (No Can Do)", "I Can't Help Myself (Sugar Pie, Honey Bunch)", "I Can't Stop Loving You", "I Don't Want to Miss a Thing", "I Fall to Pieces", "I Feel Fine", "I Feel For You", "I Feel Love", "I Get Around", "I Got You (I Feel Good)", "I Got You Babe", "I Gotta Feeling", "I Heard it Through the Grapevine", "I Honestly Love You", "I Just Called to Say I Love You", "I Just Wanna Be Your Everything", "I Kissed A Girl", "I Love Rock 'n' Roll", "I Need You Now", "I Only Have Eyes For You", "I Shot the Sheriff", "I Still Haven't Found What I'm Looking For", "I Swear", "I Think I Love You", "I Walk the Line", "I Wanna Dance With Somebody (Who Loves Me)", "I Wanna Love You", "I Want You Back", "I Want to Hold Your Hand", "I Want to Know What Love Is", "I Went to Your Wedding", "I Will Always Love You", "I Will Follow Him", "I Will Survive", "I Write the Songs", "I'll Be Missing You", "I'll Be There", "I'll Make Love to You", "I'll Never Smile Again", "I'll Take You There", "I'll Walk Alone", "I'll be seeing you", "I'm Looking Over a Four Leaf Clover", "I'm So Lonesome I Could Cry", "I'm Sorry", "I'm Walking Behind You", "I'm Your Boogie Man", "I'm Yours", "I'm a Believer", "I've Heard That Song Before", "If (They Made Me a King)", "If I Didn't Care", "If You Don't Know Me By Now", "If You Leave Me Now", "Imagine", "In Da Club", "In the End", "In the Ghetto", "In the Mood", "In the Summertime", "In the Year 2525 (Exordium & Terminus)", "Incense & Peppermints", "Indian Reservation (The Lament Of The Cherokee Reservation Indian)", "Instant Karma", "Iris", "Ironic", "Irreplaceable", "It Had to Be You", "It's All in the Game", "It's My Party", "It's Now Or Never", "It's Still Rock 'n' Roll to Me", "It's Too Late", "Jack & Diane", "Jailhouse Rock", "Jessie's Girl", "Jive Talkin'", "Johnny B Goode", "Joy to the World", "Judy in Disguise (With Glasses)", "Jump", "Jumpin' Jack Flash", "Just Dance", "Just My Imagination (Running Away With Me)", "Just the Way You Are", "Kansas City", "Karma Chameleon", "Keep On Loving You", "Killing Me Softly With His Song", "King of the Road", "Kiss", "Kiss & Say Goodbye", "Kiss From a Rose", "Kiss Me", "Kiss On My List", "Kiss You All Over", "Knock On Wood", "Knock Three Times", "Kokomo", "Kryptonite", "Kung Fu Fighting", "La Bamba", "Lady", "Lady Marmalade (Voulez-Vous Coucher Aver Moi Ce Soir?)", "Last Train to Clarksville", "Layla", "Le Freak", "Leader of the Pack", "Lean On Me", "Leaving, on a Jet Plane", "Let Me Call You Sweetheart", "Let Me Love You", "Let it Be", "Let it Snow! Let it Snow! Let it Snow!", "Let's Dance", "Let's Get it On", "Let's Groove", "Let's Hear it For the Boy", "Let's Stay Together", "Light My Fire", "Lights", "Like a Prayer", "Like a Rolling Stone", "Like a Virgin", "Little Darlin'", "Little Things Mean a Lot", "Live & Let Die", "Livin' La Vida Loca", "Livin' On a Prayer", "Living For the City", "Locked Out Of Heaven", "Lola", "Lonely Boy", "Long Cool Woman in a Black Dress", "Long Tall Sally", "Look Away", "Lookin' Out My Back Door", "Lose Yourself", "Losing My Religion", "Louie Louie", "Love Child", "Love Hangover", "Love In This Club", "Love Is Blue (L'Amour Est Bleu)", "Love Letters in the Sand", "Love Me Do", "Love Me Tender", "Love Shack", "Love Theme From 'A Star is Born' (Evergreen)", "Love Train", "Love Will Keep Us Together", "Love is a Many Splendoured Thing", "Love to Love You Baby", "Love's Theme", "Loving You", "Low", "Macarena", "Mack the Knife", "Maggie May", "Magic", "Magic Carpet Ride", "Make Love to Me", "Make it With You", "Makin' Whoopee", "Mama Told Me Not to Come", "Man in the Mirror", "Manana (Is Soon Enough For Me)", "Maneater", "Maniac", "Maybellene", "Me & Bobby McGee", "Me & Mrs Jones", "Memories Are Made of This", "Mercy Mercy Me (The Ecology)", "Mickey", "Midnight Train to Georgia", "Minnie the Moocher", "Miss You", "Miss You Much", "Mister Sandman", "Mmmbop", "Mona Lisa", "Monday Monday", "Money For Nothing", "Mony Mony", "Mood Indigo", "Moonlight Cocktail", "Moonlight Serenade", "More Than Words", "More Than a Feeling", "Morning Train (Nine to Five)", "Mr Big Stuff", "Mr Brightside", "Mr Tambourine Man", "Mrs Brown You've Got a Lovely Daughter", "Mrs Robinson", "Mule Train", "Music", "My Blue Heaven", "My Boyfriend's Back", "My Eyes Adored You", "My Girl", "My Guy", "My Heart Will Go On", "My Life", "My Love", "My Man", "My Prayer", "My Sharona", "My Sweet Lord", "Na Na Hey Hey (Kiss Him Goodbye)", "Nature Boy", "Near You", "Need You Now", "Need You Tonight", "Never Gonna Give You Up", "Night & Day", "Night Fever", "Nights in White Satin", "No One", "No Scrubs", "Nobody Does it Better", "Nothin' on You", "Nothing Compares 2 U", "Nothing's Gonna Stop Us Now", "Ode To Billie Joe", "Oh Happy Day", "Oh My Papa (O Mein Papa)", "Oh, Pretty Woman", "Ol' Man River", "Ole Buttermilk Sky", "On Bended Knee", "On My Own", "On the Atchison, Topeka & the Santa Fe", "One", "One Bad Apple", "One More Try", "One O'Clock Jump", "One Sweet Day", "One of These Nights", "One of Us", "Only The Lonely (Know The Way I Feel)", "Only You (And You Alone)", "Open Arms", "Over There", "Over the Rainbow", "Paint it Black", "Papa Don't Preach", "Papa Was a Rolling Stone", "Papa's Got a Brand New Bag", "Paper Doll", "Paper Planes", "Paperback Writer", "Party Rock Anthem", "Peg o' My Heart", "Peggy Sue", "Pennies From Heaven", "Penny Lane", "People", "People Got to Be Free", "Personality", "Philadelphia Freedom", "Physical", "Piano Man", "Pick Up the Pieces", "Pistol Packin' Mama", "Play That Funky Music", "Please Mr Postman", "Poker Face", "Pon De Replay", "Pony Time", "Pop Muzik", "Prisoner of Love", "Private Eyes", "Promiscuous", "Proud Mary", "Purple Haze", "Purple Rain", "Puttin' on the Ritz", "Que sera sera (Whatever will be will be)", "Queen of Hearts", "Rag Doll", "Rag Mop", "Rags to Riches", "Raindrops Keep Falling On My Head", "Rapture", "Ray of Light", "Reach Out (I'll Be There)", "Red Red Wine", "Rehab", "Respect", "Return to Sender", "Reunited", "Revolution", "Rhapsody in Blue", "Rhinestone Cowboy", "Rich Girl", "Riders On the Storm", "Right Back Where We Started From", "Ring My Bell", "Ring of Fire", "Rock Around the Clock", "Rock With You", "Rock Your Baby", "Rock the Boat", "Rock the Casbah", "Roll Over Beethoven", "Roll With It", "Rolling In The Deep", "Rosanna", "Roses Are Red", "Royals", "Ruby Tuesday", "Rudolph, the Red-Nosed Reindeer", "Rum & Coca-Cola", "Runaround Sue", "Runaway", "Running Scared", "Rush Rush", "Sailing", "Save the Best For Last", "Save the Last Dance For Me", "Say It Right", "Say My Name", "Say Say Say", "Say You, Say Me", "School's Out", "Seasons in the Sun", "Secret Love", "Sentimental Journey", "Sexyback", "Sh-Boom (Life Could Be a Dream)", "Shadow Dancing", "Shake Down", "Shake You Down", "She Drives Me Crazy", "She Loves You", "She's a Lady", "Shining Star", "Shop Around", "Shout", "Silly Love Songs", "Since U Been Gone", "Sing, Sing, Sing (With A Swing)", "Singing The Blues", "Single Ladies (Put A Ring On It)", "Sir Duke", "Sixteen Tons", "Sledgehammer", "Sleep Walk", "Sleepy Lagoon", "Slow Poke", "Smells Like Teen Spirit", "Smoke Gets in Your Eyes", "Smoke On the Water", "Smoke! Smoke! Smoke! (That Cigarette)", "Smooth", "So Much in Love", "Soldier Boy", "Some Enchanted Evening", "Some of These Days", "Somebody That I Used to Know", "Somebody to Love", "Someday", "Somethin' Stupid", "Something", "Soul Man", "Spanish Harlem", "Spill the Wine", "Spinning Wheel", "Spirit in the Sky", "St George & the Dragonette", "St Louis Blues", "Stagger Lee", "Stairway to Heaven", "Stand By Me", "Stardust", "Stars & Stripes Forever", "Stay (I Missed You)", "Stayin' Alive", "Stop! in the Name of Love", "Stormy Weather (Keeps Rainin' All the Time)", "Straight Up", "Strange Fruit", "Stranger On the Shore", "Strangers in the Night", "Strawberry Fields Forever", "Streets of Philadelphia", "Stronger", "Stuck On You", "Sugar Shack", "Sugar Sugar", "Summer in the City", "Summertime Blues", "Sunday, Monday or Always", "Sunshine Superman", "Sunshine of Your Love", "Superstar", "Superstition", "Surfin' USA", "Suspicious Minds", "Swanee", "Sweet Caroline (Good Times Never Seemed So Good)", "Sweet Child O' Mine", "Sweet Dreams (Are Made of This)", "Sweet Georgia Brown", "Sweet Home Alabama", "Sweet Soul Music", "Swinging On a Star", "T For Texas (Blue Yodel No 1)", "TSOP (The Sound of Philadelphia)", "Take Me Home, Country Roads", "Take My Breath Away", "Take On Me", "Take The 'A' Train", "Take a Bow", "Tammy", "Tangerine", "Tears in Heaven", "Tears of a Clown", "Temperature", "Tennessee Waltz", "Tequila", "Tha Crossroads", "Thank You (Falettinme be Mice Elf Again)", "That Lucky Old Sun (Just Rolls Around Heaven All Day)", "That Old Black Magic", "That'll Be the Day", "That's Amore", "That's What Friends Are For", "That's the Way (I Like It)", "That's the Way Love Goes", "The Boy is Mine", "The Boys of Summer", "The Christmas Song (Chestnuts Roasting On An Open Fire)", "The End of the World", "The First Time Ever I Saw Your Face", "The Girl From Ipanema", "The Glow-Worm", "The Great Pretender", "The Gypsy", "The Hustle", "The Joker", "The Last Dance", "The Letter", "The Loco-Motion", "The Long & Winding Road", "The Love You Save", "The Morning After", "The Power of Love", "The Prisoner's Song", "The Reason", "The Rose", "The Sign", "The Song From Moulin Rouge (Where Is Your Heart)", "The Sounds of Silence", "The Streak", "The Sweet Escape", "The Thing", "The Tide is High", "The Tracks of My Tears", "The Twist", "The Wanderer", "The Way We Were", "The Way You Look Tonight", "The Way You Move", "Theme From 'A Summer Place'", "Theme From 'Greatest American Hero' (Believe It Or Not)", "Theme From 'Shaft'", "There goes my baby", "These Boots Are Made For Walking", "Third Man Theme", "This Diamond Ring", "This Guy's in Love With You", "This Land is Your Land", "This Love", "This Ole House", "This Used to Be My Playground", "Three Coins in the Fountain", "Three Times a Lady", "Thrift Shop", "Thriller", "Ticket to Ride", "Tie a Yellow Ribbon 'round the Old Oak Tree", "Tiger Rag", "Tighten Up", "Tik-Toc", "Till I Waltz Again With You", "Till The End of Time", "Time After Time", "Time of the Season", "To Sir, with Love", "Tom Dooley", "Tonight's the Night (Gonna Be Alright)", "Too Close", "Too Young", "Tossing & Turning", "Total Eclipse of the Heart", "Touch Me", "Toxic", "Travellin' Band", "Travellin' Man", "Truly Madly Deeply", "Turn! Turn! Turn! (To Everything There is a Season)", "Tutti Frutti", "Twist & Shout", "Two Hearts", "U Can't Touch This", "U Got it Bad", "Umbrella", "Un-Break My Heart", "Unbelievable", "Unchained Melody", "Uncle Albert (Admiral Halsey)", "Under the Boardwalk", "Under the Bridge", "Unforgettable", "Up Around the Bend", "Up Up & Away", "Up Where We Belong", "Upside Down", "Use Somebody", "Vaya Con Dios (may God Be With You)", "Venus", "Vision of Love", "Viva La Vida", "Vogue", "Volare", "Wabash Cannonball", "Waiting For a Girl Like You", "Wake Me Up Before You Go Go", "Wake Up Little Susie", "Walk Don't Run", "Walk Like a Man", "Walk Like an Egyptian", "Walk On By", "Walk On the Wild Side", "Walk This Way", "Wannabe", "Want Ads", "Wanted", "War", "Waterfalls", "Wayward Wind", "We Are Family", "We Are Young", "We Are the Champions", "We Are the World", "We Belong Together", "We Built This City", "We Can Work it Out", "We Didn't Start the Fire", "We Found Love", "We Got The Beat", "We Will Rock You", "We've Only Just Begun", "Weak", "Wedding Bell Blues", "West End Blues", "West End Girls", "What Goes Around Comes Around", "What a Fool Believes", "What'd I Say", "What's Going On?", "What's Love Got to Do With It?", "Whatcha Say", "Wheel of Fortune", "When Doves Cry", "When You Wish Upon a Star", "When a Man Loves a Woman", "Where Did Our Love Go", "Where is the Love?", "Whip It", "Whispering", "White Christmas", "White Rabbit", "Whole Lotta Love", "Whole Lotta Shakin' Goin' On", "Whoomp! (There it Is)", "Why Do Fools Fall in Love?", "Why Don't You Believe Me?", "Wichita Lineman", "Wicked Game", "Wild Thing", "Wild Wild West", "Will It Go Round In Circles", "Will You Love Me Tomorrow", "Winchester Cathedral", "Wind Beneath My Wings", "Wipe Out", "Wishing Well", "With Or Without You", "Without Me", "Without You", "Woman", "Won't Get Fooled Again", "Wooly Bully", "Working My Way Back to You", "YMCA", "Yakety Yak", "Yeah!", "Yellow Rose of Texas", "Yesterday", "You Ain't Seen Nothin' Yet", "You Always Hurt the One You Love", "You Are the Sunshine of My Life", "You Belong With Me", "You Belong to Me", "You Can't Hurry Love", "You Don't Bring Me Flowers", "You Don't Have to Be a Star (To Be in My Show)", "You Light Up My Life", "You Make Me Feel Brand New", "You Make Me Feel Like Dancing", "You Really Got Me", "You Send Me", "You Sexy Thing", "You Were Meant for Me", "You make Me Wanna", "You'll Never Know", "You're Beautiful", "You're So Vain", "You're Still the One", "You're the One That I Want", "You've Got a Friend", "You've Lost That Lovin' Feelin'", "Your Cheatin' Heart", "Your Song"];
    hr = { album: aa, artist: ra, genre: oa, song_name: na };
    ia = hr;
    ta = ["activist", "artist", "author", "blogger", "business owner", "coach", "creator", "designer", "developer", "dreamer", "educator", "engineer", "entrepreneur", "environmentalist", "film lover", "filmmaker", "foodie", "founder", "friend", "gamer", "geek", "grad", "inventor", "leader", "model", "musician", "nerd", "parent", "patriot", "person", "philosopher", "photographer", "public speaker", "scientist", "singer", "streamer", "student", "teacher", "traveler", "veteran", "writer"];
    la = ["{{person.bio_part}}", "{{person.bio_part}}, {{person.bio_part}}", "{{person.bio_part}}, {{person.bio_part}}, {{person.bio_part}}", "{{person.bio_part}}, {{person.bio_part}}, {{person.bio_part}} {{internet.emoji}}", "{{word.noun}} {{person.bio_supporter}}", "{{word.noun}} {{person.bio_supporter}}  {{internet.emoji}}", "{{word.noun}} {{person.bio_supporter}}, {{person.bio_part}}", "{{word.noun}} {{person.bio_supporter}}, {{person.bio_part}} {{internet.emoji}}"];
    sa = ["advocate", "devotee", "enthusiast", "fan", "junkie", "lover", "supporter"];
    da = { generic: ["Aaliyah", "Aaron", "Abagail", "Abbey", "Abbie", "Abbigail", "Abby", "Abdiel", "Abdul", "Abdullah", "Abe", "Abel", "Abelardo", "Abigail", "Abigale", "Abigayle", "Abner", "Abraham", "Ada", "Adah", "Adalberto", "Adaline", "Adam", "Adan", "Addie", "Addison", "Adela", "Adelbert", "Adele", "Adelia", "Adeline", "Adell", "Adella", "Adelle", "Aditya", "Adolf", "Adolfo", "Adolph", "Adolphus", "Adonis", "Adrain", "Adrian", "Adriana", "Adrianna", "Adriel", "Adrien", "Adrienne", "Afton", "Aglae", "Agnes", "Agustin", "Agustina", "Ahmad", "Ahmed", "Aida", "Aidan", "Aiden", "Aileen", "Aimee", "Aisha", "Aiyana", "Akeem", "Al", "Alaina", "Alan", "Alana", "Alanis", "Alanna", "Alayna", "Alba", "Albert", "Alberta", "Albertha", "Alberto", "Albin", "Albina", "Alda", "Alden", "Alec", "Aleen", "Alejandra", "Alejandrin", "Alek", "Alena", "Alene", "Alessandra", "Alessandro", "Alessia", "Aletha", "Alex", "Alexa", "Alexander", "Alexandra", "Alexandre", "Alexandrea", "Alexandria", "Alexandrine", "Alexandro", "Alexane", "Alexanne", "Alexie", "Alexis", "Alexys", "Alexzander", "Alf", "Alfonso", "Alfonzo", "Alford", "Alfred", "Alfreda", "Alfredo", "Ali", "Alia", "Alice", "Alicia", "Alisa", "Alisha", "Alison", "Alivia", "Aliya", "Aliyah", "Aliza", "Alize", "Allan", "Allen", "Allene", "Allie", "Allison", "Ally", "Alphonso", "Alta", "Althea", "Alva", "Alvah", "Alvena", "Alvera", "Alverta", "Alvina", "Alvis", "Alyce", "Alycia", "Alysa", "Alysha", "Alyson", "Alysson", "Amalia", "Amanda", "Amani", "Amara", "Amari", "Amaya", "Amber", "Ambrose", "Amelia", "Amelie", "Amely", "America", "Americo", "Amie", "Amina", "Amir", "Amira", "Amiya", "Amos", "Amparo", "Amy", "Amya", "Ana", "Anabel", "Anabelle", "Anahi", "Anais", "Anastacio", "Anastasia", "Anderson", "Andre", "Andreane", "Andreanne", "Andres", "Andrew", "Andy", "Angel", "Angela", "Angelica", "Angelina", "Angeline", "Angelita", "Angelo", "Angie", "Angus", "Anibal", "Anika", "Anissa", "Anita", "Aniya", "Aniyah", "Anjali", "Anna", "Annabel", "Annabell", "Annabelle", "Annalise", "Annamae", "Annamarie", "Anne", "Annetta", "Annette", "Annie", "Ansel", "Ansley", "Anthony", "Antoinette", "Antone", "Antonetta", "Antonette", "Antonia", "Antonietta", "Antonina", "Antonio", "Antwan", "Antwon", "Anya", "April", "Ara", "Araceli", "Aracely", "Arch", "Archibald", "Ardella", "Arden", "Ardith", "Arely", "Ari", "Ariane", "Arianna", "Aric", "Ariel", "Arielle", "Arjun", "Arlene", "Arlie", "Arlo", "Armand", "Armando", "Armani", "Arnaldo", "Arne", "Arno", "Arnold", "Arnoldo", "Arnulfo", "Aron", "Art", "Arthur", "Arturo", "Arvel", "Arvid", "Arvilla", "Aryanna", "Asa", "Asha", "Ashlee", "Ashleigh", "Ashley", "Ashly", "Ashlynn", "Ashton", "Ashtyn", "Asia", "Assunta", "Astrid", "Athena", "Aubree", "Aubrey", "Audie", "Audra", "Audreanne", "Audrey", "August", "Augusta", "Augustine", "Augustus", "Aurelia", "Aurelie", "Aurelio", "Aurore", "Austen", "Austin", "Austyn", "Autumn", "Ava", "Avery", "Avis", "Axel", "Ayana", "Ayden", "Ayla", "Aylin", "Baby", "Bailee", "Bailey", "Barbara", "Barney", "Baron", "Barrett", "Barry", "Bart", "Bartholome", "Barton", "Baylee", "Beatrice", "Beau", "Beaulah", "Bell", "Bella", "Belle", "Ben", "Benedict", "Benjamin", "Bennett", "Bennie", "Benny", "Benton", "Berenice", "Bernadette", "Bernadine", "Bernard", "Bernardo", "Berneice", "Bernhard", "Bernice", "Bernie", "Berniece", "Bernita", "Berry", "Bert", "Berta", "Bertha", "Bertram", "Bertrand", "Beryl", "Bessie", "Beth", "Bethany", "Bethel", "Betsy", "Bette", "Bettie", "Betty", "Bettye", "Beulah", "Beverly", "Bianka", "Bill", "Billie", "Billy", "Birdie", "Blair", "Blaise", "Blake", "Blanca", "Blanche", "Blaze", "Bo", "Bobbie", "Bobby", "Bonita", "Bonnie", "Boris", "Boyd", "Brad", "Braden", "Bradford", "Bradley", "Bradly", "Brady", "Braeden", "Brain", "Brandi", "Brando", "Brandon", "Brandt", "Brandy", "Brandyn", "Brannon", "Branson", "Brant", "Braulio", "Braxton", "Brayan", "Breana", "Breanna", "Breanne", "Brenda", "Brendan", "Brenden", "Brendon", "Brenna", "Brennan", "Brennon", "Brent", "Bret", "Brett", "Bria", "Brian", "Briana", "Brianne", "Brice", "Bridget", "Bridgette", "Bridie", "Brielle", "Brigitte", "Brionna", "Brisa", "Britney", "Brittany", "Brock", "Broderick", "Brody", "Brook", "Brooke", "Brooklyn", "Brooks", "Brown", "Bruce", "Bryana", "Bryce", "Brycen", "Bryon", "Buck", "Bud", "Buddy", "Buford", "Bulah", "Burdette", "Burley", "Burnice", "Buster", "Cade", "Caden", "Caesar", "Caitlyn", "Cale", "Caleb", "Caleigh", "Cali", "Calista", "Callie", "Camden", "Cameron", "Camila", "Camilla", "Camille", "Camren", "Camron", "Camryn", "Camylle", "Candace", "Candelario", "Candice", "Candida", "Candido", "Cara", "Carey", "Carissa", "Carlee", "Carleton", "Carley", "Carli", "Carlie", "Carlo", "Carlos", "Carlotta", "Carmel", "Carmela", "Carmella", "Carmelo", "Carmen", "Carmine", "Carol", "Carolanne", "Carole", "Carolina", "Caroline", "Carolyn", "Carolyne", "Carrie", "Carroll", "Carson", "Carter", "Cary", "Casandra", "Casey", "Casimer", "Casimir", "Casper", "Cassandra", "Cassandre", "Cassidy", "Cassie", "Catalina", "Caterina", "Catharine", "Catherine", "Cathrine", "Cathryn", "Cathy", "Cayla", "Ceasar", "Cecelia", "Cecil", "Cecile", "Cecilia", "Cedrick", "Celestine", "Celestino", "Celia", "Celine", "Cesar", "Chad", "Chadd", "Chadrick", "Chaim", "Chance", "Chandler", "Chanel", "Chanelle", "Charity", "Charlene", "Charles", "Charley", "Charlie", "Charlotte", "Chase", "Chasity", "Chauncey", "Chaya", "Chaz", "Chelsea", "Chelsey", "Chelsie", "Chesley", "Chester", "Chet", "Cheyanne", "Cheyenne", "Chloe", "Chris", "Christ", "Christa", "Christelle", "Christian", "Christiana", "Christina", "Christine", "Christop", "Christophe", "Christopher", "Christy", "Chyna", "Ciara", "Cicero", "Cielo", "Cierra", "Cindy", "Citlalli", "Clair", "Claire", "Clara", "Clarabelle", "Clare", "Clarissa", "Clark", "Claud", "Claude", "Claudia", "Claudie", "Claudine", "Clay", "Clemens", "Clement", "Clementina", "Clementine", "Clemmie", "Cleo", "Cleora", "Cleta", "Cletus", "Cleve", "Cleveland", "Clifford", "Clifton", "Clint", "Clinton", "Clotilde", "Clovis", "Cloyd", "Clyde", "Coby", "Cody", "Colby", "Cole", "Coleman", "Colin", "Colleen", "Collin", "Colt", "Colten", "Colton", "Columbus", "Concepcion", "Conner", "Connie", "Connor", "Conor", "Conrad", "Constance", "Constantin", "Consuelo", "Cooper", "Cora", "Coralie", "Corbin", "Cordelia", "Cordell", "Cordia", "Cordie", "Corene", "Corine", "Cornelius", "Cornell", "Corrine", "Cortez", "Cortney", "Cory", "Coty", "Courtney", "Coy", "Craig", "Crawford", "Creola", "Cristal", "Cristian", "Cristina", "Cristobal", "Cristopher", "Cruz", "Crystal", "Crystel", "Cullen", "Curt", "Curtis", "Cydney", "Cynthia", "Cyril", "Cyrus", "D'angelo", "Dagmar", "Dahlia", "Daija", "Daisha", "Daisy", "Dakota", "Dale", "Dallas", "Dallin", "Dalton", "Damaris", "Dameon", "Damian", "Damien", "Damion", "Damon", "Dan", "Dana", "Dandre", "Dane", "Dangelo", "Danial", "Daniela", "Daniella", "Danielle", "Danika", "Dannie", "Danny", "Dante", "Danyka", "Daphne", "Daphnee", "Daphney", "Darby", "Daren", "Darian", "Dariana", "Darien", "Dario", "Darion", "Darius", "Darlene", "Daron", "Darrel", "Darrell", "Darren", "Darrick", "Darrin", "Darrion", "Darron", "Darryl", "Darwin", "Daryl", "Dashawn", "Dasia", "Dave", "David", "Davin", "Davion", "Davon", "Davonte", "Dawn", "Dawson", "Dax", "Dayana", "Dayna", "Dayne", "Dayton", "Dean", "Deangelo", "Deanna", "Deborah", "Declan", "Dedric", "Dedrick", "Dee", "Deion", "Deja", "Dejah", "Dejon", "Dejuan", "Delaney", "Delbert", "Delfina", "Delia", "Delilah", "Dell", "Della", "Delmer", "Delores", "Delpha", "Delphia", "Delphine", "Delta", "Demarco", "Demarcus", "Demario", "Demetris", "Demetrius", "Demond", "Dena", "Denis", "Dennis", "Deon", "Deondre", "Deontae", "Deonte", "Dereck", "Derek", "Derick", "Deron", "Derrick", "Deshaun", "Deshawn", "Desiree", "Desmond", "Dessie", "Destany", "Destin", "Destinee", "Destiney", "Destini", "Destiny", "Devan", "Devante", "Deven", "Devin", "Devon", "Devonte", "Devyn", "Dewayne", "Dewitt", "Dexter", "Diamond", "Diana", "Dianna", "Diego", "Dillan", "Dillon", "Dimitri", "Dina", "Dino", "Dion", "Dixie", "Dock", "Dolly", "Dolores", "Domenic", "Domenica", "Domenick", "Domenico", "Domingo", "Dominic", "Dominique", "Don", "Donald", "Donato", "Donavon", "Donna", "Donnell", "Donnie", "Donny", "Dora", "Dorcas", "Dorian", "Doris", "Dorothea", "Dorothy", "Dorris", "Dortha", "Dorthy", "Doug", "Douglas", "Dovie", "Doyle", "Drake", "Drew", "Duane", "Dudley", "Dulce", "Duncan", "Durward", "Dustin", "Dusty", "Dwight", "Dylan", "Earl", "Earlene", "Earline", "Earnest", "Earnestine", "Easter", "Easton", "Ebba", "Ebony", "Ed", "Eda", "Edd", "Eddie", "Eden", "Edgar", "Edgardo", "Edison", "Edmond", "Edmund", "Edna", "Eduardo", "Edward", "Edwardo", "Edwin", "Edwina", "Edyth", "Edythe", "Effie", "Efrain", "Efren", "Eileen", "Einar", "Eino", "Eladio", "Elaina", "Elbert", "Elda", "Eldon", "Eldora", "Eldred", "Eldridge", "Eleanora", "Eleanore", "Eleazar", "Electa", "Elena", "Elenor", "Elenora", "Eleonore", "Elfrieda", "Eli", "Elian", "Eliane", "Elias", "Eliezer", "Elijah", "Elinor", "Elinore", "Elisa", "Elisabeth", "Elise", "Eliseo", "Elisha", "Elissa", "Eliza", "Elizabeth", "Ella", "Ellen", "Ellie", "Elliot", "Elliott", "Ellis", "Ellsworth", "Elmer", "Elmira", "Elmo", "Elmore", "Elna", "Elnora", "Elody", "Eloisa", "Eloise", "Elouise", "Eloy", "Elroy", "Elsa", "Else", "Elsie", "Elta", "Elton", "Elva", "Elvera", "Elvie", "Elvis", "Elwin", "Elwyn", "Elyse", "Elyssa", "Elza", "Emanuel", "Emelia", "Emelie", "Emely", "Emerald", "Emerson", "Emery", "Emie", "Emil", "Emile", "Emilia", "Emiliano", "Emilie", "Emilio", "Emily", "Emma", "Emmalee", "Emmanuel", "Emmanuelle", "Emmet", "Emmett", "Emmie", "Emmitt", "Emmy", "Emory", "Ena", "Enid", "Enoch", "Enola", "Enos", "Enrico", "Enrique", "Ephraim", "Era", "Eriberto", "Eric", "Erica", "Erich", "Erick", "Ericka", "Erik", "Erika", "Erin", "Erling", "Erna", "Ernest", "Ernestina", "Ernestine", "Ernesto", "Ernie", "Ervin", "Erwin", "Eryn", "Esmeralda", "Esperanza", "Esta", "Esteban", "Estefania", "Estel", "Estell", "Estella", "Estelle", "Estevan", "Esther", "Estrella", "Etha", "Ethan", "Ethel", "Ethelyn", "Ethyl", "Ettie", "Eudora", "Eugene", "Eugenia", "Eula", "Eulah", "Eulalia", "Euna", "Eunice", "Eusebio", "Eva", "Evalyn", "Evan", "Evangeline", "Evans", "Eve", "Eveline", "Evelyn", "Everardo", "Everett", "Everette", "Evert", "Evie", "Ewald", "Ewell", "Ezekiel", "Ezequiel", "Ezra", "Fabian", "Fabiola", "Fae", "Fannie", "Fanny", "Fatima", "Faustino", "Fausto", "Favian", "Fay", "Faye", "Federico", "Felicia", "Felicita", "Felicity", "Felipa", "Felipe", "Felix", "Felton", "Fermin", "Fern", "Fernando", "Ferne", "Fidel", "Filiberto", "Filomena", "Finn", "Fiona", "Flavie", "Flavio", "Fleta", "Fletcher", "Flo", "Florence", "Florencio", "Florian", "Florida", "Florine", "Flossie", "Floy", "Floyd", "Ford", "Forest", "Forrest", "Foster", "Frances", "Francesca", "Francesco", "Francis", "Francisca", "Francisco", "Franco", "Frank", "Frankie", "Franz", "Fred", "Freda", "Freddie", "Freddy", "Frederic", "Frederick", "Frederik", "Frederique", "Fredrick", "Fredy", "Freeda", "Freeman", "Freida", "Frida", "Frieda", "Friedrich", "Fritz", "Furman", "Gabe", "Gabriel", "Gabriella", "Gabrielle", "Gaetano", "Gage", "Gail", "Gardner", "Garett", "Garfield", "Garland", "Garnet", "Garnett", "Garret", "Garrett", "Garrick", "Garrison", "Garry", "Garth", "Gaston", "Gavin", "Gayle", "Gene", "General", "Genesis", "Genevieve", "Gennaro", "Genoveva", "Geo", "Geoffrey", "George", "Georgette", "Georgiana", "Georgianna", "Geovanni", "Geovanny", "Geovany", "Gerald", "Geraldine", "Gerard", "Gerardo", "Gerda", "Gerhard", "Germaine", "German", "Gerry", "Gerson", "Gertrude", "Gia", "Gianni", "Gideon", "Gilbert", "Gilberto", "Gilda", "Giles", "Gillian", "Gina", "Gino", "Giovani", "Giovanna", "Giovanni", "Giovanny", "Gisselle", "Giuseppe", "Gladyce", "Gladys", "Glen", "Glenda", "Glenna", "Glennie", "Gloria", "Godfrey", "Golda", "Golden", "Gonzalo", "Gordon", "Grace", "Gracie", "Graciela", "Grady", "Graham", "Grant", "Granville", "Grayce", "Grayson", "Green", "Greg", "Gregg", "Gregoria", "Gregorio", "Gregory", "Greta", "Gretchen", "Greyson", "Griffin", "Grover", "Guadalupe", "Gudrun", "Guido", "Guillermo", "Guiseppe", "Gunnar", "Gunner", "Gus", "Gussie", "Gust", "Gustave", "Guy", "Gwen", "Gwendolyn", "Hadley", "Hailee", "Hailey", "Hailie", "Hal", "Haleigh", "Haley", "Halie", "Halle", "Hallie", "Hank", "Hanna", "Hannah", "Hans", "Hardy", "Harley", "Harmon", "Harmony", "Harold", "Harrison", "Harry", "Harvey", "Haskell", "Hassan", "Hassie", "Hattie", "Haven", "Hayden", "Haylee", "Hayley", "Haylie", "Hazel", "Hazle", "Heath", "Heather", "Heaven", "Heber", "Hector", "Heidi", "Helen", "Helena", "Helene", "Helga", "Hellen", "Helmer", "Heloise", "Henderson", "Henri", "Henriette", "Henry", "Herbert", "Herman", "Hermann", "Hermina", "Herminia", "Herminio", "Hershel", "Herta", "Hertha", "Hester", "Hettie", "Hilario", "Hilbert", "Hilda", "Hildegard", "Hillard", "Hillary", "Hilma", "Hilton", "Hipolito", "Hiram", "Hobart", "Holden", "Hollie", "Hollis", "Holly", "Hope", "Horace", "Horacio", "Hortense", "Hosea", "Houston", "Howard", "Howell", "Hoyt", "Hubert", "Hudson", "Hugh", "Hulda", "Humberto", "Hunter", "Hyman", "Ian", "Ibrahim", "Icie", "Ida", "Idell", "Idella", "Ignacio", "Ignatius", "Ike", "Ila", "Ilene", "Iliana", "Ima", "Imani", "Imelda", "Immanuel", "Imogene", "Ines", "Irma", "Irving", "Irwin", "Isaac", "Isabel", "Isabell", "Isabella", "Isabelle", "Isac", "Isadore", "Isai", "Isaiah", "Isaias", "Isidro", "Ismael", "Isobel", "Isom", "Israel", "Issac", "Itzel", "Iva", "Ivah", "Ivory", "Ivy", "Izabella", "Izaiah", "Jabari", "Jace", "Jacey", "Jacinthe", "Jacinto", "Jack", "Jackeline", "Jackie", "Jacklyn", "Jackson", "Jacky", "Jaclyn", "Jacquelyn", "Jacques", "Jacynthe", "Jada", "Jade", "Jaden", "Jadon", "Jadyn", "Jaeden", "Jaida", "Jaiden", "Jailyn", "Jaime", "Jairo", "Jakayla", "Jake", "Jakob", "Jaleel", "Jalen", "Jalon", "Jalyn", "Jamaal", "Jamal", "Jamar", "Jamarcus", "Jamel", "Jameson", "Jamey", "Jamie", "Jamil", "Jamir", "Jamison", "Jammie", "Jan", "Jana", "Janae", "Jane", "Janelle", "Janessa", "Janet", "Janice", "Janick", "Janie", "Janis", "Janiya", "Jannie", "Jany", "Jaquan", "Jaquelin", "Jaqueline", "Jared", "Jaren", "Jarod", "Jaron", "Jarred", "Jarrell", "Jarret", "Jarrett", "Jarrod", "Jarvis", "Jasen", "Jasmin", "Jason", "Jasper", "Jaunita", "Javier", "Javon", "Javonte", "Jay", "Jayce", "Jaycee", "Jayda", "Jayde", "Jayden", "Jaydon", "Jaylan", "Jaylen", "Jaylin", "Jaylon", "Jayme", "Jayne", "Jayson", "Jazlyn", "Jazmin", "Jazmyn", "Jazmyne", "Jean", "Jeanette", "Jeanie", "Jeanne", "Jed", "Jedediah", "Jedidiah", "Jeff", "Jefferey", "Jeffery", "Jeffrey", "Jeffry", "Jena", "Jenifer", "Jennie", "Jennifer", "Jennings", "Jennyfer", "Jensen", "Jerad", "Jerald", "Jeramie", "Jeramy", "Jerel", "Jeremie", "Jeremy", "Jermain", "Jermaine", "Jermey", "Jerod", "Jerome", "Jeromy", "Jerrell", "Jerrod", "Jerrold", "Jerry", "Jess", "Jesse", "Jessica", "Jessie", "Jessika", "Jessy", "Jessyca", "Jesus", "Jett", "Jettie", "Jevon", "Jewel", "Jewell", "Jillian", "Jimmie", "Jimmy", "Jo", "Joan", "Joana", "Joanie", "Joanne", "Joannie", "Joanny", "Joany", "Joaquin", "Jocelyn", "Jodie", "Jody", "Joe", "Joel", "Joelle", "Joesph", "Joey", "Johan", "Johann", "Johanna", "Johathan", "John", "Johnathan", "Johnathon", "Johnnie", "Johnny", "Johnpaul", "Johnson", "Jolie", "Jon", "Jonas", "Jonatan", "Jonathan", "Jonathon", "Jordan", "Jordane", "Jordi", "Jordon", "Jordy", "Jordyn", "Jorge", "Jose", "Josefa", "Josefina", "Joseph", "Josephine", "Josh", "Joshua", "Joshuah", "Josiah", "Josiane", "Josianne", "Josie", "Josue", "Jovan", "Jovani", "Jovanny", "Jovany", "Joy", "Joyce", "Juana", "Juanita", "Judah", "Judd", "Jude", "Judge", "Judson", "Judy", "Jules", "Julia", "Julian", "Juliana", "Julianne", "Julie", "Julien", "Juliet", "Julio", "Julius", "June", "Junior", "Junius", "Justen", "Justice", "Justina", "Justine", "Juston", "Justus", "Justyn", "Juvenal", "Juwan", "Kacey", "Kaci", "Kacie", "Kade", "Kaden", "Kadin", "Kaela", "Kaelyn", "Kaia", "Kailee", "Kailey", "Kailyn", "Kaitlin", "Kaitlyn", "Kale", "Kaleb", "Kaleigh", "Kaley", "Kali", "Kallie", "Kameron", "Kamille", "Kamren", "Kamron", "Kamryn", "Kane", "Kara", "Kareem", "Karelle", "Karen", "Kari", "Kariane", "Karianne", "Karina", "Karine", "Karl", "Karlee", "Karley", "Karli", "Karlie", "Karolann", "Karson", "Kasandra", "Kasey", "Kassandra", "Katarina", "Katelin", "Katelyn", "Katelynn", "Katharina", "Katherine", "Katheryn", "Kathleen", "Kathlyn", "Kathryn", "Kathryne", "Katlyn", "Katlynn", "Katrina", "Katrine", "Kattie", "Kavon", "Kay", "Kaya", "Kaycee", "Kayden", "Kayla", "Kaylah", "Kaylee", "Kayleigh", "Kayley", "Kayli", "Kaylie", "Kaylin", "Keagan", "Keanu", "Keara", "Keaton", "Keegan", "Keeley", "Keely", "Keenan", "Keira", "Keith", "Kellen", "Kelley", "Kelli", "Kellie", "Kelly", "Kelsi", "Kelsie", "Kelton", "Kelvin", "Ken", "Kendall", "Kendra", "Kendrick", "Kenna", "Kennedi", "Kennedy", "Kenneth", "Kennith", "Kenny", "Kenton", "Kenya", "Kenyatta", "Kenyon", "Keon", "Keshaun", "Keshawn", "Keven", "Kevin", "Kevon", "Keyon", "Keyshawn", "Khalid", "Khalil", "Kian", "Kiana", "Kianna", "Kiara", "Kiarra", "Kiel", "Kiera", "Kieran", "Kiley", "Kim", "Kimberly", "King", "Kip", "Kira", "Kirk", "Kirsten", "Kirstin", "Kitty", "Kobe", "Koby", "Kody", "Kolby", "Kole", "Korbin", "Korey", "Kory", "Kraig", "Kris", "Krista", "Kristian", "Kristin", "Kristina", "Kristofer", "Kristoffer", "Kristopher", "Kristy", "Krystal", "Krystel", "Krystina", "Kurt", "Kurtis", "Kyla", "Kyle", "Kylee", "Kyleigh", "Kyler", "Kylie", "Kyra", "Lacey", "Lacy", "Ladarius", "Lafayette", "Laila", "Laisha", "Lamar", "Lambert", "Lamont", "Lance", "Landen", "Lane", "Laney", "Larissa", "Laron", "Larry", "Larue", "Laura", "Laurel", "Lauren", "Laurence", "Lauretta", "Lauriane", "Laurianne", "Laurie", "Laurine", "Laury", "Lauryn", "Lavada", "Lavern", "Laverna", "Laverne", "Lavina", "Lavinia", "Lavon", "Lavonne", "Lawrence", "Lawson", "Layla", "Layne", "Lazaro", "Lea", "Leann", "Leanna", "Leanne", "Leatha", "Leda", "Lee", "Leif", "Leila", "Leilani", "Lela", "Lelah", "Leland", "Lelia", "Lempi", "Lemuel", "Lenna", "Lennie", "Lenny", "Lenora", "Lenore", "Leo", "Leola", "Leon", "Leonard", "Leonardo", "Leone", "Leonel", "Leonie", "Leonor", "Leonora", "Leopold", "Leopoldo", "Leora", "Lera", "Lesley", "Leslie", "Lesly", "Lessie", "Lester", "Leta", "Letha", "Letitia", "Levi", "Lew", "Lewis", "Lexi", "Lexie", "Lexus", "Lia", "Liam", "Liana", "Libbie", "Libby", "Lila", "Lilian", "Liliana", "Liliane", "Lilla", "Lillian", "Lilliana", "Lillie", "Lilly", "Lily", "Lilyan", "Lina", "Lincoln", "Linda", "Lindsay", "Lindsey", "Linnea", "Linnie", "Linwood", "Lionel", "Lisa", "Lisandro", "Lisette", "Litzy", "Liza", "Lizeth", "Lizzie", "Llewellyn", "Lloyd", "Logan", "Lois", "Lola", "Lolita", "Loma", "Lon", "London", "Lonie", "Lonnie", "Lonny", "Lonzo", "Lora", "Loraine", "Loren", "Lorena", "Lorenz", "Lorenza", "Lorenzo", "Lori", "Lorine", "Lorna", "Lottie", "Lou", "Louie", "Louisa", "Lourdes", "Louvenia", "Lowell", "Loy", "Loyal", "Loyce", "Lucas", "Luciano", "Lucie", "Lucienne", "Lucile", "Lucinda", "Lucio", "Lucious", "Lucius", "Lucy", "Ludie", "Ludwig", "Lue", "Luella", "Luigi", "Luis", "Luisa", "Lukas", "Lula", "Lulu", "Luna", "Lupe", "Lura", "Lurline", "Luther", "Luz", "Lyda", "Lydia", "Lyla", "Lynn", "Lyric", "Lysanne", "Mabel", "Mabelle", "Mable", "Mac", "Macey", "Maci", "Macie", "Mack", "Mackenzie", "Macy", "Madaline", "Madalyn", "Maddison", "Madeline", "Madelyn", "Madelynn", "Madge", "Madie", "Madilyn", "Madisen", "Madison", "Madisyn", "Madonna", "Madyson", "Mae", "Maegan", "Maeve", "Mafalda", "Magali", "Magdalen", "Magdalena", "Maggie", "Magnolia", "Magnus", "Maia", "Maida", "Maiya", "Major", "Makayla", "Makenna", "Makenzie", "Malachi", "Malcolm", "Malika", "Malinda", "Mallie", "Mallory", "Malvina", "Mandy", "Manley", "Manuel", "Manuela", "Mara", "Marc", "Marcel", "Marcelina", "Marcelino", "Marcella", "Marcelle", "Marcellus", "Marcelo", "Marcia", "Marco", "Marcos", "Marcus", "Margaret", "Margarete", "Margarett", "Margaretta", "Margarette", "Margarita", "Marge", "Margie", "Margot", "Margret", "Marguerite", "Maria", "Mariah", "Mariam", "Marian", "Mariana", "Mariane", "Marianna", "Marianne", "Mariano", "Maribel", "Marie", "Mariela", "Marielle", "Marietta", "Marilie", "Marilou", "Marilyne", "Marina", "Mario", "Marion", "Marisa", "Marisol", "Maritza", "Marjolaine", "Marjorie", "Marjory", "Mark", "Markus", "Marlee", "Marlen", "Marlene", "Marley", "Marlin", "Marlon", "Marques", "Marquis", "Marquise", "Marshall", "Marta", "Martin", "Martina", "Martine", "Marty", "Marvin", "Mary", "Maryam", "Maryjane", "Maryse", "Mason", "Mateo", "Mathew", "Mathias", "Mathilde", "Matilda", "Matilde", "Matt", "Matteo", "Mattie", "Maud", "Maude", "Maudie", "Maureen", "Maurice", "Mauricio", "Maurine", "Maverick", "Mavis", "Max", "Maxie", "Maxime", "Maximilian", "Maximillia", "Maximillian", "Maximo", "Maximus", "Maxine", "Maxwell", "May", "Maya", "Maybell", "Maybelle", "Maye", "Maymie", "Maynard", "Mayra", "Mazie", "Mckayla", "Mckenna", "Mckenzie", "Meagan", "Meaghan", "Meda", "Megane", "Meggie", "Meghan", "Mekhi", "Melany", "Melba", "Melisa", "Melissa", "Mellie", "Melody", "Melvin", "Melvina", "Melyna", "Melyssa", "Mercedes", "Meredith", "Merl", "Merle", "Merlin", "Merritt", "Mertie", "Mervin", "Meta", "Mia", "Micaela", "Micah", "Michael", "Michaela", "Michale", "Micheal", "Michel", "Michele", "Michelle", "Miguel", "Mikayla", "Mike", "Mikel", "Milan", "Miles", "Milford", "Miller", "Millie", "Milo", "Milton", "Mina", "Minerva", "Minnie", "Miracle", "Mireille", "Mireya", "Misael", "Missouri", "Misty", "Mitchel", "Mitchell", "Mittie", "Modesta", "Modesto", "Mohamed", "Mohammad", "Mohammed", "Moises", "Mollie", "Molly", "Mona", "Monica", "Monique", "Monroe", "Monserrat", "Monserrate", "Montana", "Monte", "Monty", "Morgan", "Moriah", "Morris", "Mortimer", "Morton", "Mose", "Moses", "Moshe", "Mossie", "Mozell", "Mozelle", "Muhammad", "Muriel", "Murl", "Murphy", "Murray", "Mustafa", "Mya", "Myah", "Mylene", "Myles", "Myra", "Myriam", "Myrl", "Myrna", "Myron", "Myrtice", "Myrtie", "Myrtis", "Myrtle", "Nadia", "Nakia", "Name", "Nannie", "Naomi", "Naomie", "Napoleon", "Narciso", "Nash", "Nasir", "Nat", "Natalia", "Natalie", "Natasha", "Nathan", "Nathanael", "Nathanial", "Nathaniel", "Nathen", "Nayeli", "Neal", "Ned", "Nedra", "Neha", "Neil", "Nelda", "Nella", "Nelle", "Nellie", "Nels", "Nelson", "Neoma", "Nestor", "Nettie", "Neva", "Newell", "Newton", "Nia", "Nicholas", "Nicholaus", "Nichole", "Nick", "Nicklaus", "Nickolas", "Nico", "Nicola", "Nicolas", "Nicole", "Nicolette", "Nigel", "Nikita", "Nikki", "Nikko", "Niko", "Nikolas", "Nils", "Nina", "Noah", "Noble", "Noe", "Noel", "Noelia", "Noemi", "Noemie", "Noemy", "Nola", "Nolan", "Nona", "Nora", "Norbert", "Norberto", "Norene", "Norma", "Norris", "Norval", "Norwood", "Nova", "Novella", "Nya", "Nyah", "Nyasia", "Obie", "Oceane", "Ocie", "Octavia", "Oda", "Odell", "Odessa", "Odie", "Ofelia", "Okey", "Ola", "Olaf", "Ole", "Olen", "Oleta", "Olga", "Olin", "Oliver", "Ollie", "Oma", "Omari", "Omer", "Ona", "Onie", "Opal", "Ophelia", "Ora", "Oral", "Oran", "Oren", "Orie", "Orin", "Orion", "Orland", "Orlando", "Orlo", "Orpha", "Orrin", "Orval", "Orville", "Osbaldo", "Osborne", "Oscar", "Osvaldo", "Oswald", "Oswaldo", "Otha", "Otho", "Otilia", "Otis", "Ottilie", "Ottis", "Otto", "Ova", "Owen", "Ozella", "Pablo", "Paige", "Palma", "Pamela", "Pansy", "Paolo", "Paris", "Parker", "Pascale", "Pasquale", "Pat", "Patience", "Patricia", "Patrick", "Patsy", "Pattie", "Paul", "Paula", "Pauline", "Paxton", "Payton", "Pearl", "Pearlie", "Pearline", "Pedro", "Peggie", "Penelope", "Percival", "Percy", "Perry", "Pete", "Peter", "Petra", "Peyton", "Philip", "Phoebe", "Phyllis", "Pierce", "Pierre", "Pietro", "Pink", "Pinkie", "Piper", "Polly", "Porter", "Precious", "Presley", "Preston", "Price", "Prince", "Princess", "Priscilla", "Providenci", "Prudence", "Queen", "Queenie", "Quentin", "Quincy", "Quinn", "Quinten", "Quinton", "Rachael", "Rachel", "Rachelle", "Rae", "Raegan", "Rafael", "Rafaela", "Raheem", "Rahsaan", "Rahul", "Raina", "Raleigh", "Ralph", "Ramiro", "Ramon", "Ramona", "Randal", "Randall", "Randi", "Randy", "Ransom", "Raoul", "Raphael", "Raphaelle", "Raquel", "Rashad", "Rashawn", "Rasheed", "Raul", "Raven", "Ray", "Raymond", "Raymundo", "Reagan", "Reanna", "Reba", "Rebeca", "Rebecca", "Rebeka", "Rebekah", "Reece", "Reed", "Reese", "Regan", "Reggie", "Reginald", "Reid", "Reilly", "Reina", "Reinhold", "Remington", "Rene", "Renee", "Ressie", "Reta", "Retha", "Retta", "Reuben", "Reva", "Rex", "Rey", "Reyes", "Reymundo", "Reyna", "Reynold", "Rhea", "Rhett", "Rhianna", "Rhiannon", "Rhoda", "Ricardo", "Richard", "Richie", "Richmond", "Rick", "Rickey", "Rickie", "Ricky", "Rico", "Rigoberto", "Riley", "Rita", "River", "Robb", "Robbie", "Robert", "Roberta", "Roberto", "Robin", "Robyn", "Rocio", "Rocky", "Rod", "Roderick", "Rodger", "Rodolfo", "Rodrick", "Rodrigo", "Roel", "Rogelio", "Roger", "Rogers", "Rolando", "Rollin", "Roma", "Romaine", "Roman", "Ron", "Ronaldo", "Ronny", "Roosevelt", "Rory", "Rosa", "Rosalee", "Rosalia", "Rosalind", "Rosalinda", "Rosalyn", "Rosamond", "Rosanna", "Rosario", "Roscoe", "Rose", "Rosella", "Roselyn", "Rosemarie", "Rosemary", "Rosendo", "Rosetta", "Rosie", "Rosina", "Roslyn", "Ross", "Rossie", "Rowan", "Rowena", "Rowland", "Roxane", "Roxanne", "Roy", "Royal", "Royce", "Rozella", "Ruben", "Rubie", "Ruby", "Rubye", "Rudolph", "Rudy", "Rupert", "Russ", "Russel", "Russell", "Rusty", "Ruth", "Ruthe", "Ruthie", "Ryan", "Ryann", "Ryder", "Rylan", "Rylee", "Ryleigh", "Ryley", "Sabina", "Sabrina", "Sabryna", "Sadie", "Sadye", "Sage", "Saige", "Sallie", "Sally", "Salma", "Salvador", "Salvatore", "Sam", "Samanta", "Samantha", "Samara", "Samir", "Sammie", "Sammy", "Samson", "Sandra", "Sandrine", "Sandy", "Sanford", "Santa", "Santiago", "Santina", "Santino", "Santos", "Sarah", "Sarai", "Sarina", "Sasha", "Saul", "Savanah", "Savanna", "Savannah", "Savion", "Scarlett", "Schuyler", "Scot", "Scottie", "Scotty", "Seamus", "Sean", "Sebastian", "Sedrick", "Selena", "Selina", "Selmer", "Serena", "Serenity", "Seth", "Shad", "Shaina", "Shakira", "Shana", "Shane", "Shanel", "Shanelle", "Shania", "Shanie", "Shaniya", "Shanna", "Shannon", "Shanny", "Shanon", "Shany", "Sharon", "Shaun", "Shawn", "Shawna", "Shaylee", "Shayna", "Shayne", "Shea", "Sheila", "Sheldon", "Shemar", "Sheridan", "Sherman", "Sherwood", "Shirley", "Shyann", "Shyanne", "Sibyl", "Sid", "Sidney", "Sienna", "Sierra", "Sigmund", "Sigrid", "Sigurd", "Silas", "Sim", "Simeon", "Simone", "Sincere", "Sister", "Skye", "Skyla", "Skylar", "Sofia", "Soledad", "Solon", "Sonia", "Sonny", "Sonya", "Sophia", "Sophie", "Spencer", "Stacey", "Stacy", "Stan", "Stanford", "Stanley", "Stanton", "Stefan", "Stefanie", "Stella", "Stephan", "Stephania", "Stephanie", "Stephany", "Stephen", "Stephon", "Sterling", "Steve", "Stevie", "Stewart", "Stone", "Stuart", "Summer", "Sunny", "Susan", "Susana", "Susanna", "Susie", "Suzanne", "Sven", "Syble", "Sydnee", "Sydney", "Sydni", "Sydnie", "Sylvan", "Sylvester", "Sylvia", "Tabitha", "Tad", "Talia", "Talon", "Tamara", "Tamia", "Tania", "Tanner", "Tanya", "Tara", "Taryn", "Tate", "Tatum", "Tatyana", "Taurean", "Tavares", "Taya", "Taylor", "Teagan", "Ted", "Telly", "Terence", "Teresa", "Terrance", "Terrell", "Terrence", "Terrill", "Terry", "Tess", "Tessie", "Tevin", "Thad", "Thaddeus", "Thalia", "Thea", "Thelma", "Theo", "Theodora", "Theodore", "Theresa", "Therese", "Theresia", "Theron", "Thomas", "Thora", "Thurman", "Tia", "Tiana", "Tianna", "Tiara", "Tierra", "Tiffany", "Tillman", "Timmothy", "Timmy", "Timothy", "Tina", "Tito", "Titus", "Tobin", "Toby", "Tod", "Tom", "Tomas", "Tomasa", "Tommie", "Toney", "Toni", "Tony", "Torey", "Torrance", "Torrey", "Toy", "Trace", "Tracey", "Tracy", "Travis", "Travon", "Tre", "Tremaine", "Tremayne", "Trent", "Trenton", "Tressa", "Tressie", "Treva", "Trever", "Trevion", "Trevor", "Trey", "Trinity", "Trisha", "Tristian", "Tristin", "Triston", "Troy", "Trudie", "Trycia", "Trystan", "Turner", "Twila", "Tyler", "Tyra", "Tyree", "Tyreek", "Tyrel", "Tyrell", "Tyrese", "Tyrique", "Tyshawn", "Tyson", "Ubaldo", "Ulices", "Ulises", "Una", "Unique", "Urban", "Uriah", "Uriel", "Ursula", "Vada", "Valentin", "Valentina", "Valentine", "Valerie", "Vallie", "Van", "Vance", "Vanessa", "Vaughn", "Veda", "Velda", "Vella", "Velma", "Velva", "Vena", "Verda", "Verdie", "Vergie", "Verla", "Verlie", "Vern", "Verna", "Verner", "Vernice", "Vernie", "Vernon", "Verona", "Veronica", "Vesta", "Vicenta", "Vicente", "Vickie", "Vicky", "Victor", "Victoria", "Vida", "Vidal", "Vilma", "Vince", "Vincent", "Vincenza", "Vincenzo", "Vinnie", "Viola", "Violet", "Violette", "Virgie", "Virgil", "Virginia", "Virginie", "Vita", "Vito", "Viva", "Vivian", "Viviane", "Vivianne", "Vivien", "Vivienne", "Vladimir", "Wade", "Waino", "Waldo", "Walker", "Wallace", "Walter", "Walton", "Wanda", "Ward", "Warren", "Watson", "Wava", "Waylon", "Wayne", "Webster", "Weldon", "Wellington", "Wendell", "Wendy", "Werner", "Westley", "Weston", "Whitney", "Wilber", "Wilbert", "Wilburn", "Wiley", "Wilford", "Wilfred", "Wilfredo", "Wilfrid", "Wilhelm", "Wilhelmine", "Will", "Willa", "Willard", "William", "Willie", "Willis", "Willow", "Willy", "Wilma", "Wilmer", "Wilson", "Wilton", "Winfield", "Winifred", "Winnifred", "Winona", "Winston", "Woodrow", "Wyatt", "Wyman", "Xander", "Xavier", "Xzavier", "Yadira", "Yasmeen", "Yasmin", "Yasmine", "Yazmin", "Yesenia", "Yessenia", "Yolanda", "Yoshiko", "Yvette", "Yvonne", "Zachariah", "Zachary", "Zachery", "Zack", "Zackary", "Zackery", "Zakary", "Zander", "Zane", "Zaria", "Zechariah", "Zelda", "Zella", "Zelma", "Zena", "Zetta", "Zion", "Zita", "Zoe", "Zoey", "Zoie", "Zoila", "Zola", "Zora", "Zula"], female: ["Ada", "Adrienne", "Agnes", "Alberta", "Alexandra", "Alexis", "Alice", "Alicia", "Alison", "Allison", "Alma", "Alyssa", "Amanda", "Amber", "Amelia", "Amy", "Ana", "Andrea", "Angel", "Angela", "Angelica", "Angelina", "Angie", "Anita", "Ann", "Anna", "Anne", "Annette", "Annie", "Antoinette", "Antonia", "April", "Arlene", "Ashley", "Audrey", "Barbara", "Beatrice", "Becky", "Belinda", "Bernadette", "Bernice", "Bertha", "Bessie", "Beth", "Bethany", "Betsy", "Betty", "Beulah", "Beverly", "Billie", "Blanca", "Blanche", "Bobbie", "Bonnie", "Brandi", "Brandy", "Brenda", "Bridget", "Brittany", "Brooke", "Camille", "Candace", "Candice", "Carla", "Carmen", "Carol", "Carole", "Caroline", "Carolyn", "Carrie", "Casey", "Cassandra", "Catherine", "Cathy", "Cecelia", "Cecilia", "Celia", "Charlene", "Charlotte", "Chelsea", "Cheryl", "Christie", "Christina", "Christine", "Christy", "Cindy", "Claire", "Clara", "Claudia", "Colleen", "Connie", "Constance", "Cora", "Courtney", "Cristina", "Crystal", "Cynthia", "Daisy", "Dana", "Danielle", "Darla", "Darlene", "Dawn", "Deanna", "Debbie", "Deborah", "Debra", "Delia", "Della", "Delores", "Denise", "Desiree", "Diana", "Diane", "Dianna", "Dianne", "Dixie", "Dolores", "Donna", "Dora", "Doreen", "Doris", "Dorothy", "Ebony", "Edith", "Edna", "Eileen", "Elaine", "Eleanor", "Elena", "Elisa", "Elizabeth", "Ella", "Ellen", "Eloise", "Elsa", "Elsie", "Elvira", "Emily", "Emma", "Erica", "Erika", "Erin", "Erma", "Ernestine", "Essie", "Estelle", "Esther", "Ethel", "Eula", "Eunice", "Eva", "Evelyn", "Faith", "Fannie", "Faye", "Felicia", "Flora", "Florence", "Frances", "Francis", "Freda", "Gail", "Gayle", "Geneva", "Genevieve", "Georgia", "Geraldine", "Gertrude", "Gina", "Ginger", "Gladys", "Glenda", "Gloria", "Grace", "Gretchen", "Guadalupe", "Gwen", "Gwendolyn", "Hannah", "Harriet", "Hattie", "Hazel", "Heather", "Heidi", "Helen", "Henrietta", "Hilda", "Holly", "Hope", "Ida", "Inez", "Irene", "Iris", "Irma", "Isabel", "Jackie", "Jacqueline", "Jacquelyn", "Jaime", "Jamie", "Jan", "Jana", "Jane", "Janet", "Janice", "Janie", "Janis", "Jasmine", "Jean", "Jeanette", "Jeanne", "Jeannette", "Jeannie", "Jenna", "Jennie", "Jennifer", "Jenny", "Jessica", "Jessie", "Jill", "Jo", "Joan", "Joann", "Joanna", "Joanne", "Jodi", "Jody", "Johanna", "Johnnie", "Josefina", "Josephine", "Joy", "Joyce", "Juana", "Juanita", "Judith", "Judy", "Julia", "Julie", "June", "Kara", "Karen", "Kari", "Karla", "Kate", "Katherine", "Kathleen", "Kathryn", "Kathy", "Katie", "Katrina", "Kay", "Kayla", "Kelley", "Kelli", "Kellie", "Kelly", "Kendra", "Kerry", "Kim", "Kimberly", "Krista", "Kristen", "Kristi", "Kristie", "Kristin", "Kristina", "Kristine", "Kristy", "Krystal", "Lana", "Latoya", "Laura", "Lauren", "Laurie", "Laverne", "Leah", "Lee", "Leigh", "Lela", "Lena", "Leona", "Leslie", "Leticia", "Lila", "Lillian", "Lillie", "Linda", "Lindsay", "Lindsey", "Lisa", "Lois", "Lola", "Lora", "Lorena", "Lorene", "Loretta", "Lori", "Lorraine", "Louise", "Lucia", "Lucille", "Lucy", "Lula", "Luz", "Lydia", "Lynda", "Lynette", "Lynn", "Lynne", "Mabel", "Mable", "Madeline", "Mae", "Maggie", "Mamie", "Mandy", "Marcella", "Marcia", "Margaret", "Margarita", "Margie", "Marguerite", "Maria", "Marian", "Marianne", "Marie", "Marilyn", "Marion", "Marjorie", "Marlene", "Marsha", "Marta", "Martha", "Mary", "Maryann", "Mattie", "Maureen", "Maxine", "May", "Megan", "Meghan", "Melanie", "Melba", "Melinda", "Melissa", "Melody", "Mercedes", "Meredith", "Michele", "Michelle", "Mildred", "Mindy", "Minnie", "Miranda", "Miriam", "Misty", "Molly", "Mona", "Monica", "Monique", "Muriel", "Myra", "Myrtle", "Nadine", "Nancy", "Naomi", "Natalie", "Natasha", "Nellie", "Nettie", "Nichole", "Nicole", "Nina", "Nora", "Norma", "Olga", "Olive", "Olivia", "Ollie", "Opal", "Ora", "Pam", "Pamela", "Pat", "Patricia", "Patsy", "Patti", "Patty", "Paula", "Paulette", "Pauline", "Pearl", "Peggy", "Penny", "Phyllis", "Priscilla", "Rachael", "Rachel", "Ramona", "Raquel", "Rebecca", "Regina", "Renee", "Rhonda", "Rita", "Roberta", "Robin", "Robyn", "Rochelle", "Rosa", "Rosalie", "Rose", "Rosemarie", "Rosemary", "Rosie", "Roxanne", "Ruby", "Ruth", "Sabrina", "Sadie", "Sally", "Samantha", "Sandra", "Sandy", "Sara", "Sarah", "Shannon", "Shari", "Sharon", "Shawna", "Sheila", "Shelia", "Shelley", "Shelly", "Sheri", "Sherri", "Sherry", "Sheryl", "Shirley", "Silvia", "Sonia", "Sonja", "Sonya", "Sophia", "Sophie", "Stacey", "Stacy", "Stella", "Stephanie", "Sue", "Susan", "Susie", "Suzanne", "Sylvia", "Tabitha", "Tamara", "Tami", "Tammy", "Tanya", "Tara", "Tasha", "Teresa", "Teri", "Terri", "Terry", "Thelma", "Theresa", "Tiffany", "Tina", "Toni", "Tonya", "Tracey", "Traci", "Tracy", "Tricia", "Valerie", "Vanessa", "Velma", "Vera", "Verna", "Veronica", "Vicki", "Vickie", "Vicky", "Victoria", "Viola", "Violet", "Virginia", "Vivian", "Wanda", "Wendy", "Whitney", "Willie", "Wilma", "Winifred", "Yolanda", "Yvette", "Yvonne"], male: ["Aaron", "Abel", "Abraham", "Adam", "Adrian", "Al", "Alan", "Albert", "Alberto", "Alejandro", "Alex", "Alexander", "Alfonso", "Alfred", "Alfredo", "Allan", "Allen", "Alonzo", "Alton", "Alvin", "Amos", "Andre", "Andres", "Andrew", "Andy", "Angel", "Angelo", "Anthony", "Antonio", "Archie", "Armando", "Arnold", "Arthur", "Arturo", "Aubrey", "Austin", "Barry", "Ben", "Benjamin", "Bennie", "Benny", "Bernard", "Bert", "Bill", "Billy", "Blake", "Bob", "Bobby", "Boyd", "Brad", "Bradford", "Bradley", "Brandon", "Brendan", "Brent", "Brett", "Brian", "Bruce", "Bryan", "Bryant", "Byron", "Caleb", "Calvin", "Cameron", "Carl", "Carlos", "Carlton", "Carroll", "Cary", "Casey", "Cecil", "Cedric", "Cesar", "Chad", "Charles", "Charlie", "Chester", "Chris", "Christian", "Christopher", "Clarence", "Clark", "Claude", "Clay", "Clayton", "Clifford", "Clifton", "Clint", "Clinton", "Clyde", "Cody", "Colin", "Conrad", "Corey", "Cornelius", "Cory", "Courtney", "Craig", "Curtis", "Dale", "Dallas", "Damon", "Dan", "Dana", "Daniel", "Danny", "Darin", "Darnell", "Darrel", "Darrell", "Darren", "Darrin", "Darryl", "Daryl", "Dave", "David", "Dean", "Delbert", "Dennis", "Derek", "Derrick", "Devin", "Dewey", "Dexter", "Domingo", "Dominic", "Dominick", "Don", "Donald", "Donnie", "Doug", "Douglas", "Doyle", "Drew", "Duane", "Dustin", "Dwayne", "Dwight", "Earl", "Earnest", "Ed", "Eddie", "Edgar", "Edmond", "Edmund", "Eduardo", "Edward", "Edwin", "Elbert", "Elias", "Elijah", "Ellis", "Elmer", "Emanuel", "Emilio", "Emmett", "Enrique", "Eric", "Erick", "Erik", "Ernest", "Ernesto", "Ervin", "Eugene", "Evan", "Everett", "Felipe", "Felix", "Fernando", "Floyd", "Forrest", "Francis", "Francisco", "Frank", "Frankie", "Franklin", "Fred", "Freddie", "Frederick", "Fredrick", "Gabriel", "Garrett", "Garry", "Gary", "Gene", "Geoffrey", "George", "Gerald", "Gerard", "Gerardo", "Gilbert", "Gilberto", "Glen", "Glenn", "Gordon", "Grady", "Grant", "Greg", "Gregg", "Gregory", "Guadalupe", "Guillermo", "Gustavo", "Guy", "Harold", "Harry", "Harvey", "Hector", "Henry", "Herbert", "Herman", "Homer", "Horace", "Howard", "Hubert", "Hugh", "Hugo", "Ian", "Ignacio", "Ira", "Irvin", "Irving", "Isaac", "Ismael", "Israel", "Ivan", "Jack", "Jackie", "Jacob", "Jaime", "Jake", "James", "Jamie", "Jan", "Jared", "Jason", "Javier", "Jay", "Jean", "Jeff", "Jeffery", "Jeffrey", "Jerald", "Jeremiah", "Jeremy", "Jermaine", "Jerome", "Jerry", "Jesse", "Jessie", "Jesus", "Jim", "Jimmie", "Jimmy", "Jody", "Joe", "Joel", "Joey", "John", "Johnathan", "Johnnie", "Johnny", "Jon", "Jonathan", "Jonathon", "Jordan", "Jorge", "Jose", "Joseph", "Josh", "Joshua", "Juan", "Julian", "Julio", "Julius", "Justin", "Karl", "Keith", "Kelly", "Kelvin", "Ken", "Kenneth", "Kenny", "Kent", "Kerry", "Kevin", "Kim", "Kirk", "Kristopher", "Kurt", "Kyle", "Lamar", "Lance", "Larry", "Laurence", "Lawrence", "Lee", "Leland", "Leo", "Leon", "Leonard", "Leroy", "Leslie", "Lester", "Levi", "Lewis", "Lionel", "Lloyd", "Lonnie", "Loren", "Lorenzo", "Louis", "Lowell", "Lucas", "Luis", "Luke", "Luther", "Lyle", "Lynn", "Mack", "Malcolm", "Manuel", "Marc", "Marco", "Marcos", "Marcus", "Mario", "Marion", "Mark", "Marlon", "Marshall", "Martin", "Marty", "Marvin", "Mathew", "Matt", "Matthew", "Maurice", "Max", "Melvin", "Merle", "Michael", "Micheal", "Miguel", "Mike", "Milton", "Mitchell", "Morris", "Moses", "Myron", "Nathan", "Nathaniel", "Neal", "Neil", "Nelson", "Nicholas", "Nick", "Nicolas", "Noah", "Noel", "Norman", "Oliver", "Omar", "Orlando", "Orville", "Oscar", "Otis", "Owen", "Pablo", "Pat", "Patrick", "Paul", "Pedro", "Percy", "Perry", "Pete", "Peter", "Phil", "Philip", "Phillip", "Preston", "Rafael", "Ralph", "Ramiro", "Ramon", "Randal", "Randall", "Randolph", "Randy", "Raul", "Ray", "Raymond", "Reginald", "Rene", "Rex", "Ricardo", "Richard", "Rick", "Rickey", "Ricky", "Robert", "Roberto", "Robin", "Roderick", "Rodney", "Rodolfo", "Rogelio", "Roger", "Roland", "Rolando", "Roman", "Ron", "Ronald", "Ronnie", "Roosevelt", "Ross", "Roy", "Ruben", "Rudolph", "Rudy", "Rufus", "Russell", "Ryan", "Salvador", "Salvatore", "Sam", "Sammy", "Samuel", "Santiago", "Santos", "Saul", "Scott", "Sean", "Sergio", "Seth", "Shane", "Shannon", "Shaun", "Shawn", "Sheldon", "Sherman", "Sidney", "Simon", "Spencer", "Stanley", "Stephen", "Steve", "Steven", "Stewart", "Stuart", "Sylvester", "Taylor", "Ted", "Terence", "Terrance", "Terrell", "Terrence", "Terry", "Theodore", "Thomas", "Tim", "Timmy", "Timothy", "Toby", "Todd", "Tom", "Tomas", "Tommie", "Tommy", "Tony", "Tracy", "Travis", "Trevor", "Troy", "Tyler", "Tyrone", "Van", "Vernon", "Victor", "Vincent", "Virgil", "Wade", "Wallace", "Walter", "Warren", "Wayne", "Wendell", "Wesley", "Wilbert", "Wilbur", "Wilfred", "Willard", "William", "Willie", "Willis", "Wilson", "Winston", "Wm", "Woodrow", "Zachary"] };
    ua = ["Agender", "Androgyne", "Androgynous", "Bigender", "Cis female", "Cis male", "Cis man", "Cis woman", "Cis", "Cisgender female", "Cisgender male", "Cisgender man", "Cisgender woman", "Cisgender", "Demi-boy", "Demi-girl", "Demi-man", "Demi-woman", "Demiflux", "Demigender", "F2M", "FTM", "Female to male trans man", "Female to male transgender man", "Female to male transsexual man", "Female to male", "Gender fluid", "Gender neutral", "Gender nonconforming", "Gender questioning", "Gender variant", "Genderflux", "Genderqueer", "Hermaphrodite", "Intersex man", "Intersex person", "Intersex woman", "Intersex", "M2F", "MTF", "Male to female trans woman", "Male to female transgender woman", "Male to female transsexual woman", "Male to female", "Man", "Multigender", "Neither", "Neutrois", "Non-binary", "Omnigender", "Other", "Pangender", "Polygender", "T* man", "T* woman", "Trans female", "Trans male", "Trans man", "Trans person", "Trans woman", "Trans", "Transsexual female", "Transsexual male", "Transsexual man", "Transsexual person", "Transsexual woman", "Transsexual", "Transgender female", "Transgender person", "Transmasculine", "Trigender", "Two* person", "Two-spirit person", "Two-spirit", "Woman", "Xenogender"];
    ca = ["Solutions", "Program", "Brand", "Security", "Research", "Marketing", "Directives", "Implementation", "Integration", "Functionality", "Response", "Paradigm", "Tactics", "Identity", "Markets", "Group", "Division", "Applications", "Optimization", "Operations", "Infrastructure", "Intranet", "Communications", "Web", "Branding", "Quality", "Assurance", "Mobility", "Accounts", "Data", "Creative", "Configuration", "Accountability", "Interactions", "Factors", "Usability", "Metrics"];
    ma = ["Lead", "Senior", "Direct", "Corporate", "Dynamic", "Future", "Product", "National", "Regional", "District", "Central", "Global", "Customer", "Investor", "International", "Legacy", "Forward", "Internal", "Human", "Chief", "Principal"];
    ha = ["{{person.jobDescriptor}} {{person.jobArea}} {{person.jobType}}"];
    ya = ["Supervisor", "Associate", "Executive", "Liaison", "Officer", "Manager", "Engineer", "Specialist", "Director", "Coordinator", "Administrator", "Architect", "Analyst", "Designer", "Planner", "Orchestrator", "Technician", "Developer", "Producer", "Consultant", "Assistant", "Facilitator", "Agent", "Representative", "Strategist"];
    pa = { generic: ["Abbott", "Abernathy", "Abshire", "Adams", "Altenwerth", "Anderson", "Ankunding", "Armstrong", "Auer", "Aufderhar", "Bahringer", "Bailey", "Balistreri", "Barrows", "Bartell", "Bartoletti", "Barton", "Bashirian", "Batz", "Bauch", "Baumbach", "Bayer", "Beahan", "Beatty", "Bechtelar", "Becker", "Bednar", "Beer", "Beier", "Berge", "Bergnaum", "Bergstrom", "Bernhard", "Bernier", "Bins", "Blanda", "Blick", "Block", "Bode", "Boehm", "Bogan", "Bogisich", "Borer", "Bosco", "Botsford", "Boyer", "Boyle", "Bradtke", "Brakus", "Braun", "Breitenberg", "Brekke", "Brown", "Bruen", "Buckridge", "Carroll", "Carter", "Cartwright", "Casper", "Cassin", "Champlin", "Christiansen", "Cole", "Collier", "Collins", "Conn", "Connelly", "Conroy", "Considine", "Corkery", "Cormier", "Corwin", "Cremin", "Crist", "Crona", "Cronin", "Crooks", "Cruickshank", "Cummerata", "Cummings", "D'Amore", "Dach", "Daniel", "Dare", "Daugherty", "Davis", "Deckow", "Denesik", "Dibbert", "Dickens", "Dicki", "Dickinson", "Dietrich", "Donnelly", "Dooley", "Douglas", "Doyle", "DuBuque", "Durgan", "Ebert", "Effertz", "Emard", "Emmerich", "Erdman", "Ernser", "Fadel", "Fahey", "Farrell", "Fay", "Feeney", "Feest", "Feil", "Ferry", "Fisher", "Flatley", "Frami", "Franecki", "Franey", "Friesen", "Fritsch", "Funk", "Gerhold", "Gerlach", "Gibson", "Gislason", "Gleason", "Gleichner", "Glover", "Goldner", "Goodwin", "Gorczany", "Gottlieb", "Goyette", "Grady", "Graham", "Grant", "Green", "Greenfelder", "Greenholt", "Grimes", "Gulgowski", "Gusikowski", "Gutkowski", "Gutmann", "Haag", "Hackett", "Hagenes", "Hahn", "Haley", "Halvorson", "Hamill", "Hammes", "Hand", "Hane", "Hansen", "Harber", "Harris", "Hartmann", "Harvey", "Hauck", "Hayes", "Heaney", "Heathcote", "Hegmann", "Heidenreich", "Heller", "Herman", "Hermann", "Hermiston", "Herzog", "Hessel", "Hettinger", "Hickle", "Hilll", "Hills", "Hilpert", "Hintz", "Hirthe", "Hodkiewicz", "Hoeger", "Homenick", "Hoppe", "Howe", "Howell", "Hudson", "Huel", "Huels", "Hyatt", "Jacobi", "Jacobs", "Jacobson", "Jakubowski", "Jaskolski", "Jast", "Jenkins", "Jerde", "Johns", "Johnson", "Johnston", "Jones", "Kassulke", "Kautzer", "Keebler", "Keeling", "Kemmer", "Kerluke", "Kertzmann", "Kessler", "Kiehn", "Kihn", "Kilback", "King", "Kirlin", "Klein", "Kling", "Klocko", "Koch", "Koelpin", "Koepp", "Kohler", "Konopelski", "Koss", "Kovacek", "Kozey", "Krajcik", "Kreiger", "Kris", "Kshlerin", "Kub", "Kuhic", "Kuhlman", "Kuhn", "Kulas", "Kunde", "Kunze", "Kuphal", "Kutch", "Kuvalis", "Labadie", "Lakin", "Lang", "Langosh", "Langworth", "Larkin", "Larson", "Leannon", "Lebsack", "Ledner", "Leffler", "Legros", "Lehner", "Lemke", "Lesch", "Leuschke", "Lind", "Lindgren", "Littel", "Little", "Lockman", "Lowe", "Lubowitz", "Lueilwitz", "Luettgen", "Lynch", "MacGyver", "Macejkovic", "Maggio", "Mann", "Mante", "Marks", "Marquardt", "Marvin", "Mayer", "Mayert", "McClure", "McCullough", "McDermott", "McGlynn", "McKenzie", "McLaughlin", "Medhurst", "Mertz", "Metz", "Miller", "Mills", "Mitchell", "Moen", "Mohr", "Monahan", "Moore", "Morar", "Morissette", "Mosciski", "Mraz", "Mueller", "Muller", "Murazik", "Murphy", "Murray", "Nader", "Nicolas", "Nienow", "Nikolaus", "Nitzsche", "Nolan", "O'Connell", "O'Conner", "O'Hara", "O'Keefe", "O'Kon", "O'Reilly", "Oberbrunner", "Okuneva", "Olson", "Ondricka", "Orn", "Ortiz", "Osinski", "Pacocha", "Padberg", "Pagac", "Parisian", "Parker", "Paucek", "Pfannerstill", "Pfeffer", "Pollich", "Pouros", "Powlowski", "Predovic", "Price", "Prohaska", "Prosacco", "Purdy", "Quigley", "Quitzon", "Rath", "Ratke", "Rau", "Raynor", "Reichel", "Reichert", "Reilly", "Reinger", "Rempel", "Renner", "Reynolds", "Rice", "Rippin", "Ritchie", "Robel", "Roberts", "Rodriguez", "Rogahn", "Rohan", "Rolfson", "Romaguera", "Roob", "Rosenbaum", "Rowe", "Ruecker", "Runolfsdottir", "Runolfsson", "Runte", "Russel", "Rutherford", "Ryan", "Sanford", "Satterfield", "Sauer", "Sawayn", "Schaden", "Schaefer", "Schamberger", "Schiller", "Schimmel", "Schinner", "Schmeler", "Schmidt", "Schmitt", "Schneider", "Schoen", "Schowalter", "Schroeder", "Schulist", "Schultz", "Schumm", "Schuppe", "Schuster", "Senger", "Shanahan", "Shields", "Simonis", "Sipes", "Skiles", "Smith", "Smitham", "Spencer", "Spinka", "Sporer", "Stamm", "Stanton", "Stark", "Stehr", "Steuber", "Stiedemann", "Stokes", "Stoltenberg", "Stracke", "Streich", "Stroman", "Strosin", "Swaniawski", "Swift", "Terry", "Thiel", "Thompson", "Tillman", "Torp", "Torphy", "Towne", "Toy", "Trantow", "Tremblay", "Treutel", "Tromp", "Turcotte", "Turner", "Ullrich", "Upton", "Vandervort", "Veum", "Volkman", "Von", "VonRueden", "Waelchi", "Walker", "Walsh", "Walter", "Ward", "Waters", "Watsica", "Weber", "Wehner", "Weimann", "Weissnat", "Welch", "West", "White", "Wiegand", "Wilderman", "Wilkinson", "Will", "Williamson", "Willms", "Windler", "Wintheiser", "Wisoky", "Wisozk", "Witting", "Wiza", "Wolf", "Wolff", "Wuckert", "Wunsch", "Wyman", "Yost", "Yundt", "Zboncak", "Zemlak", "Ziemann", "Zieme", "Zulauf"] };
    ga = { generic: [{ value: "{{person.last_name.generic}}", weight: 95 }, { value: "{{person.last_name.generic}}-{{person.last_name.generic}}", weight: 5 }] };
    ba = { generic: ["Addison", "Alex", "Anderson", "Angel", "Arden", "August", "Austin", "Avery", "Bailey", "Billie", "Blake", "Bowie", "Brooklyn", "Cameron", "Charlie", "Corey", "Dakota", "Drew", "Elliott", "Ellis", "Emerson", "Finley", "Gray", "Greer", "Harper", "Hayden", "Jaden", "James", "Jamie", "Jordan", "Jules", "Kai", "Kendall", "Kennedy", "Kyle", "Leslie", "Logan", "London", "Marlowe", "Micah", "Nico", "Noah", "North", "Parker", "Phoenix", "Quinn", "Reagan", "Reese", "Reign", "Riley", "River", "Robin", "Rory", "Rowan", "Ryan", "Sage", "Sasha", "Sawyer", "Shawn", "Shiloh", "Skyler", "Taylor"], female: ["Abigail", "Adele", "Alex", "Alice", "Alisha", "Amber", "Amelia", "Amora", "Ana\xEFs", "Angelou", "Anika", "Anise", "Annabel", "Anne", "Aphrodite", "Aretha", "Arya", "Ashton", "Aster", "Audrey", "Avery", "Bailee", "Bay", "Belle", "Beth", "Billie", "Blair", "Blaise", "Blake", "Blanche", "Blue", "Bree", "Brielle", "Brienne", "Brooke", "Caleen", "Candice", "Caprice", "Carelyn", "Caylen", "Celine", "Cerise", "Cia", "Claire", "Claudia", "Clementine", "Coral", "Coraline", "Dahlia", "Dakota", "Dawn", "Della", "Demi", "Denise", "Denver", "Devine", "Devon", "Diana", "Dylan", "Ebony", "Eden", "Eleanor", "Elein", "Elizabeth", "Ellen", "Elodie", "Eloise", "Ember", "Emma", "Erin", "Eyre", "Faith", "Farrah", "Fawn", "Fayre", "Fern", "France", "Francis", "Frida", "Genisis", "Georgia", "Grace", "Gwen", "Harley", "Harper", "Hazel", "Helen", "Hippolyta", "Holly", "Hope", "Imani", "Iowa", "Ireland", "Irene", "Iris", "Isa", "Isla", "Ivy", "Jade", "Jane", "Jazz", "Jean", "Jess", "Jett", "Jo", "Joan", "Jolie", "Jordan", "Josie", "Journey", "Joy", "Jules", "Julien", "Juliet", "Juniper", "Justice", "Kali", "Karma", "Kat", "Kate", "Kennedy", "Keva", "Kylie", "Lake", "Lane", "Lark", "Layla", "Lee", "Leigh", "Leona", "Lexi", "London", "Lou", "Louise", "Love", "Luna", "Lux", "Lynn", "Lyric", "Maddie", "Mae", "Marie", "Matilda", "Maude", "Maybel", "Meadow", "Medusa", "Mercy", "Michelle", "Mirabel", "Monroe", "Morgan", "Nalia", "Naomi", "Nova", "Olive", "Paige", "Parker", "Pax", "Pearl", "Penelope", "Phoenix", "Quinn", "Rae", "Rain", "Raven", "Ray", "Raye", "Rebel", "Reese", "Reeve", "Regan", "Riley", "River", "Robin", "Rory", "Rose", "Royal", "Ruth", "Rylie", "Sage", "Sam", "Saturn", "Scout", "Serena", "Sky", "Skylar", "Sofia", "Sophia", "Storm", "Sue", "Suzanne", "Sydney", "Taylen", "Taylor", "Teagan", "Tempest", "Tenley", "Thea", "Trinity", "Valerie", "Venus", "Vera", "Violet", "Willow", "Winter", "Xena", "Zaylee", "Zion", "Zoe"], male: ["Ace", "Aiden", "Alexander", "Ander", "Anthony", "Asher", "August", "Aziel", "Bear", "Beckham", "Benjamin", "Buddy", "Calvin", "Carter", "Charles", "Christopher", "Clyde", "Cooper", "Daniel", "David", "Dior", "Dylan", "Elijah", "Ellis", "Emerson", "Ethan", "Ezra", "Fletcher", "Flynn", "Gabriel", "Grayson", "Gus", "Hank", "Harrison", "Hendrix", "Henry", "Houston", "Hudson", "Hugh", "Isaac", "Jack", "Jackson", "Jacob", "Jakobe", "James", "Jaxon", "Jaxtyn", "Jayden", "John", "Joseph", "Josiah", "Jude", "Julian", "Karsyn", "Kenji", "Kobe", "Kylo", "Lennon", "Leo", "Levi", "Liam", "Lincoln", "Logan", "Louis", "Lucas", "Lucky", "Luke", "Mason", "Mateo", "Matthew", "Maverick", "Michael", "Monroe", "Nixon", "Ocean", "Oliver", "Otis", "Otto", "Owen", "Ozzy", "Parker", "Rocky", "Samuel", "Sebastian", "Sonny", "Teddy", "Theo", "Theodore", "Thomas", "Truett", "Walter", "Warren", "Watson", "William", "Wison", "Wyatt", "Ziggy", "Zyair"] };
    Ca = [{ value: "{{person.firstName}} {{person.lastName}}", weight: 49 }, { value: "{{person.prefix}} {{person.firstName}} {{person.lastName}}", weight: 7 }, { value: "{{person.firstName}} {{person.lastName}} {{person.suffix}}", weight: 7 }, { value: "{{person.prefix}} {{person.firstName}} {{person.lastName}} {{person.suffix}}", weight: 1 }];
    Sa = { generic: ["Dr.", "Miss", "Mr.", "Mrs.", "Ms."], female: ["Dr.", "Miss", "Mrs.", "Ms."], male: ["Dr.", "Mr."] };
    ka = ["female", "male"];
    fa = ["Jr.", "Sr.", "I", "II", "III", "IV", "V", "MD", "DDS", "PhD", "DVM"];
    va = ["Aquarius", "Pisces", "Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn"];
    yr = { bio_part: ta, bio_pattern: la, bio_supporter: sa, first_name: da, gender: ua, job_area: ca, job_descriptor: ma, job_title_pattern: ha, job_type: ya, last_name: pa, last_name_pattern: ga, middle_name: ba, name: Ca, prefix: Sa, sex: ka, suffix: fa, western_zodiac_sign: va };
    Aa = yr;
    Ba = ["!##-!##-####", "(!##) !##-####", "1-!##-!##-####", "!##.!##.####", "!##-!##-#### x###", "(!##) !##-#### x###", "1-!##-!##-#### x###", "!##.!##.#### x###", "!##-!##-#### x####", "(!##) !##-#### x####", "1-!##-!##-#### x####", "!##.!##.#### x####", "!##-!##-#### x#####", "(!##) !##-#### x#####", "1-!##-!##-#### x#####", "!##.!##.#### x#####"];
    Ta = ["+1!##!######"];
    Ma = ["(!##) !##-####"];
    pr = { human: Ba, international: Ta, national: Ma };
    wa = pr;
    gr = { format: wa };
    La = gr;
    Da = [{ symbol: "H", name: "Hydrogen", atomicNumber: 1 }, { symbol: "He", name: "Helium", atomicNumber: 2 }, { symbol: "Li", name: "Lithium", atomicNumber: 3 }, { symbol: "Be", name: "Beryllium", atomicNumber: 4 }, { symbol: "B", name: "Boron", atomicNumber: 5 }, { symbol: "C", name: "Carbon", atomicNumber: 6 }, { symbol: "N", name: "Nitrogen", atomicNumber: 7 }, { symbol: "O", name: "Oxygen", atomicNumber: 8 }, { symbol: "F", name: "Fluorine", atomicNumber: 9 }, { symbol: "Ne", name: "Neon", atomicNumber: 10 }, { symbol: "Na", name: "Sodium", atomicNumber: 11 }, { symbol: "Mg", name: "Magnesium", atomicNumber: 12 }, { symbol: "Al", name: "Aluminium", atomicNumber: 13 }, { symbol: "Si", name: "Silicon", atomicNumber: 14 }, { symbol: "P", name: "Phosphorus", atomicNumber: 15 }, { symbol: "S", name: "Sulfur", atomicNumber: 16 }, { symbol: "Cl", name: "Chlorine", atomicNumber: 17 }, { symbol: "Ar", name: "Argon", atomicNumber: 18 }, { symbol: "K", name: "Potassium", atomicNumber: 19 }, { symbol: "Ca", name: "Calcium", atomicNumber: 20 }, { symbol: "Sc", name: "Scandium", atomicNumber: 21 }, { symbol: "Ti", name: "Titanium", atomicNumber: 22 }, { symbol: "V", name: "Vanadium", atomicNumber: 23 }, { symbol: "Cr", name: "Chromium", atomicNumber: 24 }, { symbol: "Mn", name: "Manganese", atomicNumber: 25 }, { symbol: "Fe", name: "Iron", atomicNumber: 26 }, { symbol: "Co", name: "Cobalt", atomicNumber: 27 }, { symbol: "Ni", name: "Nickel", atomicNumber: 28 }, { symbol: "Cu", name: "Copper", atomicNumber: 29 }, { symbol: "Zn", name: "Zinc", atomicNumber: 30 }, { symbol: "Ga", name: "Gallium", atomicNumber: 31 }, { symbol: "Ge", name: "Germanium", atomicNumber: 32 }, { symbol: "As", name: "Arsenic", atomicNumber: 33 }, { symbol: "Se", name: "Selenium", atomicNumber: 34 }, { symbol: "Br", name: "Bromine", atomicNumber: 35 }, { symbol: "Kr", name: "Krypton", atomicNumber: 36 }, { symbol: "Rb", name: "Rubidium", atomicNumber: 37 }, { symbol: "Sr", name: "Strontium", atomicNumber: 38 }, { symbol: "Y", name: "Yttrium", atomicNumber: 39 }, { symbol: "Zr", name: "Zirconium", atomicNumber: 40 }, { symbol: "Nb", name: "Niobium", atomicNumber: 41 }, { symbol: "Mo", name: "Molybdenum", atomicNumber: 42 }, { symbol: "Tc", name: "Technetium", atomicNumber: 43 }, { symbol: "Ru", name: "Ruthenium", atomicNumber: 44 }, { symbol: "Rh", name: "Rhodium", atomicNumber: 45 }, { symbol: "Pd", name: "Palladium", atomicNumber: 46 }, { symbol: "Ag", name: "Silver", atomicNumber: 47 }, { symbol: "Cd", name: "Cadmium", atomicNumber: 48 }, { symbol: "In", name: "Indium", atomicNumber: 49 }, { symbol: "Sn", name: "Tin", atomicNumber: 50 }, { symbol: "Sb", name: "Antimony", atomicNumber: 51 }, { symbol: "Te", name: "Tellurium", atomicNumber: 52 }, { symbol: "I", name: "Iodine", atomicNumber: 53 }, { symbol: "Xe", name: "Xenon", atomicNumber: 54 }, { symbol: "Cs", name: "Caesium", atomicNumber: 55 }, { symbol: "Ba", name: "Barium", atomicNumber: 56 }, { symbol: "La", name: "Lanthanum", atomicNumber: 57 }, { symbol: "Ce", name: "Cerium", atomicNumber: 58 }, { symbol: "Pr", name: "Praseodymium", atomicNumber: 59 }, { symbol: "Nd", name: "Neodymium", atomicNumber: 60 }, { symbol: "Pm", name: "Promethium", atomicNumber: 61 }, { symbol: "Sm", name: "Samarium", atomicNumber: 62 }, { symbol: "Eu", name: "Europium", atomicNumber: 63 }, { symbol: "Gd", name: "Gadolinium", atomicNumber: 64 }, { symbol: "Tb", name: "Terbium", atomicNumber: 65 }, { symbol: "Dy", name: "Dysprosium", atomicNumber: 66 }, { symbol: "Ho", name: "Holmium", atomicNumber: 67 }, { symbol: "Er", name: "Erbium", atomicNumber: 68 }, { symbol: "Tm", name: "Thulium", atomicNumber: 69 }, { symbol: "Yb", name: "Ytterbium", atomicNumber: 70 }, { symbol: "Lu", name: "Lutetium", atomicNumber: 71 }, { symbol: "Hf", name: "Hafnium", atomicNumber: 72 }, { symbol: "Ta", name: "Tantalum", atomicNumber: 73 }, { symbol: "W", name: "Tungsten", atomicNumber: 74 }, { symbol: "Re", name: "Rhenium", atomicNumber: 75 }, { symbol: "Os", name: "Osmium", atomicNumber: 76 }, { symbol: "Ir", name: "Iridium", atomicNumber: 77 }, { symbol: "Pt", name: "Platinum", atomicNumber: 78 }, { symbol: "Au", name: "Gold", atomicNumber: 79 }, { symbol: "Hg", name: "Mercury", atomicNumber: 80 }, { symbol: "Tl", name: "Thallium", atomicNumber: 81 }, { symbol: "Pb", name: "Lead", atomicNumber: 82 }, { symbol: "Bi", name: "Bismuth", atomicNumber: 83 }, { symbol: "Po", name: "Polonium", atomicNumber: 84 }, { symbol: "At", name: "Astatine", atomicNumber: 85 }, { symbol: "Rn", name: "Radon", atomicNumber: 86 }, { symbol: "Fr", name: "Francium", atomicNumber: 87 }, { symbol: "Ra", name: "Radium", atomicNumber: 88 }, { symbol: "Ac", name: "Actinium", atomicNumber: 89 }, { symbol: "Th", name: "Thorium", atomicNumber: 90 }, { symbol: "Pa", name: "Protactinium", atomicNumber: 91 }, { symbol: "U", name: "Uranium", atomicNumber: 92 }, { symbol: "Np", name: "Neptunium", atomicNumber: 93 }, { symbol: "Pu", name: "Plutonium", atomicNumber: 94 }, { symbol: "Am", name: "Americium", atomicNumber: 95 }, { symbol: "Cm", name: "Curium", atomicNumber: 96 }, { symbol: "Bk", name: "Berkelium", atomicNumber: 97 }, { symbol: "Cf", name: "Californium", atomicNumber: 98 }, { symbol: "Es", name: "Einsteinium", atomicNumber: 99 }, { symbol: "Fm", name: "Fermium", atomicNumber: 100 }, { symbol: "Md", name: "Mendelevium", atomicNumber: 101 }, { symbol: "No", name: "Nobelium", atomicNumber: 102 }, { symbol: "Lr", name: "Lawrencium", atomicNumber: 103 }, { symbol: "Rf", name: "Rutherfordium", atomicNumber: 104 }, { symbol: "Db", name: "Dubnium", atomicNumber: 105 }, { symbol: "Sg", name: "Seaborgium", atomicNumber: 106 }, { symbol: "Bh", name: "Bohrium", atomicNumber: 107 }, { symbol: "Hs", name: "Hassium", atomicNumber: 108 }, { symbol: "Mt", name: "Meitnerium", atomicNumber: 109 }, { symbol: "Ds", name: "Darmstadtium", atomicNumber: 110 }, { symbol: "Rg", name: "Roentgenium", atomicNumber: 111 }, { symbol: "Cn", name: "Copernicium", atomicNumber: 112 }, { symbol: "Nh", name: "Nihonium", atomicNumber: 113 }, { symbol: "Fl", name: "Flerovium", atomicNumber: 114 }, { symbol: "Mc", name: "Moscovium", atomicNumber: 115 }, { symbol: "Lv", name: "Livermorium", atomicNumber: 116 }, { symbol: "Ts", name: "Tennessine", atomicNumber: 117 }, { symbol: "Og", name: "Oganesson", atomicNumber: 118 }];
    Ra = [{ name: "meter", symbol: "m" }, { name: "second", symbol: "s" }, { name: "mole", symbol: "mol" }, { name: "ampere", symbol: "A" }, { name: "kelvin", symbol: "K" }, { name: "candela", symbol: "cd" }, { name: "kilogram", symbol: "kg" }, { name: "radian", symbol: "rad" }, { name: "hertz", symbol: "Hz" }, { name: "newton", symbol: "N" }, { name: "pascal", symbol: "Pa" }, { name: "joule", symbol: "J" }, { name: "watt", symbol: "W" }, { name: "coulomb", symbol: "C" }, { name: "volt", symbol: "V" }, { name: "ohm", symbol: "\u03A9" }, { name: "tesla", symbol: "T" }, { name: "degree Celsius", symbol: "\xB0C" }, { name: "lumen", symbol: "lm" }, { name: "becquerel", symbol: "Bq" }, { name: "gray", symbol: "Gy" }, { name: "sievert", symbol: "Sv" }, { name: "steradian", symbol: "sr" }, { name: "farad", symbol: "F" }, { name: "siemens", symbol: "S" }, { name: "weber", symbol: "Wb" }, { name: "henry", symbol: "H" }, { name: "lux", symbol: "lx" }, { name: "katal", symbol: "kat" }];
    br = { chemical_element: Da, unit: Ra };
    Pa = br;
    Ha = ["ants", "bats", "bears", "bees", "birds", "buffalo", "cats", "chickens", "cattle", "dogs", "dolphins", "ducks", "elephants", "fishes", "foxes", "frogs", "geese", "goats", "horses", "kangaroos", "lions", "monkeys", "owls", "oxen", "penguins", "people", "pigs", "rabbits", "sheep", "tigers", "whales", "wolves", "zebras", "banshees", "crows", "black cats", "chimeras", "ghosts", "conspirators", "dragons", "dwarves", "elves", "enchanters", "exorcists", "sons", "foes", "giants", "gnomes", "goblins", "gooses", "griffins", "lycanthropes", "nemesis", "ogres", "oracles", "prophets", "sorcerors", "spiders", "spirits", "vampires", "warlocks", "vixens", "werewolves", "witches", "worshipers", "zombies", "druids"];
    Wa = ["{{location.state}} {{team.creature}}"];
    Cr = { creature: Ha, name: Wa };
    Ga = Cr;
    Fa = ["Adventure Road Bicycle", "BMX Bicycle", "City Bicycle", "Cruiser Bicycle", "Cyclocross Bicycle", "Dual-Sport Bicycle", "Fitness Bicycle", "Flat-Foot Comfort Bicycle", "Folding Bicycle", "Hybrid Bicycle", "Mountain Bicycle", "Recumbent Bicycle", "Road Bicycle", "Tandem Bicycle", "Touring Bicycle", "Track/Fixed-Gear Bicycle", "Triathlon/Time Trial Bicycle", "Tricycle"];
    Na = ["Diesel", "Electric", "Gasoline", "Hybrid"];
    Ea = ["Aston Martin", "Audi", "BMW", "BYD", "Bentley", "Bugatti", "Cadillac", "Chevrolet", "Chrysler", "Citro\xEBn", "Dodge", "Ferrari", "Fiat", "Ford", "Honda", "Hyundai", "Jaguar", "Jeep", "Kia", "Lamborghini", "Land Rover", "MG", "Mahindra & Mahindra", "Maruti", "Maserati", "Mazda", "Mercedes Benz", "Mini", "Mitsubishi", "NIO", "Nissan", "Peugeot", "Polestar", "Porsche", "Renault", "Rivian", "Rolls Royce", "Skoda", "Smart", "Subaru", "Suzuki", "Tata", "Tesla", "Toyota", "Vauxhall", "Volkswagen", "Volvo"];
    Ja = ["1", "2", "911", "A4", "A8", "ATS", "Accord", "Alpine", "Altima", "Aventador", "Beetle", "CTS", "CX-9", "Camaro", "Camry", "Challenger", "Charger", "Civic", "Colorado", "Corvette", "Countach", "Cruze", "Durango", "El Camino", "Element", "Escalade", "Expedition", "Explorer", "F-150", "Fiesta", "Focus", "Fortwo", "Golf", "Grand Caravan", "Grand Cherokee", "Impala", "Jetta", "Land Cruiser", "LeBaron", "Malibu", "Mercielago", "Model 3", "Model S", "Model T", "Model X", "Model Y", "Mustang", "PT Cruiser", "Prius", "Ranchero", "Roadster", "Sentra", "Silverado", "Spyder", "Taurus", "V90", "Volt", "Wrangler", "XC90", "XTS"];
    Ia = ["Cargo Van", "Convertible", "Coupe", "Crew Cab Pickup", "Extended Cab Pickup", "Hatchback", "Minivan", "Passenger Van", "SUV", "Sedan", "Wagon"];
    Sr = { bicycle_type: Fa, fuel: Na, manufacturer: Ea, model: Ja, type: Ia };
    Ka = Sr;
    Oa = ["abandoned", "able", "acceptable", "acclaimed", "accomplished", "accurate", "aching", "acidic", "actual", "admired", "adolescent", "advanced", "affectionate", "afraid", "aged", "aggravating", "aggressive", "agile", "agitated", "agreeable", "ajar", "alarmed", "alert", "alienated", "alive", "all", "altruistic", "amazing", "ambitious", "ample", "amused", "angelic", "anguished", "animated", "annual", "another", "antique", "any", "apprehensive", "appropriate", "apt", "arid", "artistic", "ashamed", "assured", "astonishing", "athletic", "austere", "authentic", "authorized", "avaricious", "average", "aware", "awesome", "awful", "babyish", "back", "bad", "baggy", "bare", "basic", "beloved", "beneficial", "best", "better", "big", "biodegradable", "bitter", "black", "black-and-white", "blank", "blaring", "bleak", "blind", "blond", "blue", "blushing", "bogus", "boiling", "bony", "boring", "bossy", "both", "bouncy", "bowed", "brave", "breakable", "bright", "brilliant", "brisk", "broken", "brown", "bruised", "bulky", "burdensome", "burly", "bustling", "busy", "buttery", "buzzing", "calculating", "candid", "carefree", "careless", "caring", "cautious", "cavernous", "celebrated", "charming", "cheap", "cheerful", "chilly", "chubby", "circular", "classic", "clean", "clear", "clear-cut", "close", "closed", "cloudy", "clueless", "clumsy", "cluttered", "coarse", "colorful", "colorless", "colossal", "comfortable", "common", "compassionate", "competent", "complete", "complicated", "concerned", "concrete", "confused", "considerate", "content", "cool", "cooperative", "coordinated", "corny", "corrupt", "courageous", "courteous", "crafty", "crazy", "creamy", "creative", "criminal", "critical", "crooked", "crowded", "cruel", "crushing", "cuddly", "cultivated", "cumbersome", "curly", "cute", "damaged", "damp", "dapper", "dark", "darling", "dazzling", "dead", "deadly", "deafening", "dearest", "decent", "decisive", "deep", "defenseless", "defensive", "deficient", "definite", "definitive", "delectable", "delicious", "delirious", "dense", "dental", "dependable", "dependent", "descriptive", "deserted", "determined", "devoted", "different", "difficult", "digital", "diligent", "dim", "direct", "dirty", "discrete", "disloyal", "dismal", "distant", "distinct", "distorted", "doting", "downright", "drab", "dramatic", "dreary", "dual", "dull", "dutiful", "each", "early", "earnest", "easy", "ecstatic", "edible", "educated", "elastic", "elderly", "electric", "elegant", "elementary", "elliptical", "eminent", "emotional", "empty", "enchanted", "enchanting", "energetic", "enlightened", "enraged", "entire", "equatorial", "essential", "esteemed", "ethical", "everlasting", "every", "evil", "exalted", "excellent", "excitable", "excited", "exhausted", "exotic", "expensive", "experienced", "expert", "extra-large", "extroverted", "failing", "faint", "fair", "fake", "familiar", "fantastic", "far", "far-flung", "far-off", "faraway", "fat", "fatal", "fatherly", "favorable", "favorite", "fearless", "feline", "filthy", "fine", "finished", "firm", "first", "firsthand", "fixed", "flashy", "flawed", "flawless", "flickering", "flimsy", "flowery", "fluffy", "flustered", "focused", "fond", "foolhardy", "foolish", "forceful", "formal", "forsaken", "fortunate", "fragrant", "frail", "frank", "free", "french", "frequent", "friendly", "frightened", "frilly", "frivolous", "frizzy", "front", "frozen", "frugal", "fruitful", "functional", "funny", "fussy", "fuzzy", "gaseous", "general", "gentle", "genuine", "gifted", "gigantic", "giving", "glaring", "glass", "gleaming", "glittering", "gloomy", "glorious", "glossy", "glum", "golden", "good", "good-natured", "gorgeous", "graceful", "gracious", "grandiose", "granular", "grave", "gray", "great", "greedy", "grim", "grimy", "gripping", "grizzled", "grouchy", "grounded", "growing", "grown", "grubby", "gruesome", "grumpy", "guilty", "gullible", "gummy", "hairy", "handsome", "handy", "happy", "happy-go-lucky", "hard-to-find", "harmful", "hasty", "hateful", "haunting", "heartfelt", "heavenly", "heavy", "hefty", "helpful", "helpless", "hidden", "hoarse", "hollow", "homely", "honorable", "honored", "hopeful", "hospitable", "hot", "huge", "humble", "humiliating", "hungry", "hurtful", "husky", "icy", "ideal", "idealistic", "idolized", "ignorant", "ill", "ill-fated", "illiterate", "illustrious", "imaginary", "imaginative", "immaculate", "immediate", "immense", "impartial", "impassioned", "impeccable", "impish", "impolite", "important", "impossible", "impractical", "impressionable", "impressive", "improbable", "impure", "inborn", "incomparable", "incomplete", "inconsequential", "indelible", "indolent", "inexperienced", "infamous", "infatuated", "inferior", "infinite", "informal", "innocent", "insecure", "insidious", "insignificant", "insistent", "instructive", "intelligent", "intent", "interesting", "internal", "international", "intrepid", "ironclad", "irresponsible", "jagged", "jam-packed", "jaunty", "jealous", "jittery", "joyful", "joyous", "jubilant", "judicious", "juicy", "jumbo", "junior", "juvenile", "kaleidoscopic", "key", "knotty", "knowledgeable", "known", "kooky", "kosher", "lanky", "last", "lasting", "late", "lavish", "lawful", "lazy", "leading", "lean", "left", "legal", "light", "lighthearted", "likable", "likely", "limited", "limp", "limping", "linear", "lined", "liquid", "little", "live", "lively", "livid", "lone", "lonely", "long", "long-term", "lost", "lovable", "lovely", "low", "lucky", "lumbering", "lumpy", "lustrous", "mad", "made-up", "magnificent", "majestic", "major", "male", "mammoth", "married", "marvelous", "massive", "mature", "meager", "mealy", "mean", "measly", "meaty", "mediocre", "medium", "memorable", "menacing", "merry", "messy", "metallic", "mild", "milky", "mindless", "minor", "minty", "miserable", "miserly", "misguided", "mixed", "moist", "monstrous", "monthly", "monumental", "moral", "motionless", "muddy", "muffled", "multicolored", "mundane", "murky", "mushy", "musty", "muted", "mysterious", "narrow", "natural", "naughty", "nautical", "near", "neat", "necessary", "needy", "negative", "neglected", "negligible", "neighboring", "nervous", "new", "next", "nice", "nifty", "nimble", "nippy", "nocturnal", "normal", "noted", "noteworthy", "noxious", "numb", "nutritious", "obedient", "oblong", "obvious", "odd", "oddball", "official", "oily", "old", "old-fashioned", "only", "optimal", "optimistic", "orange", "orderly", "ordinary", "ornate", "ornery", "other", "our", "outgoing", "outlandish", "outlying", "outrageous", "outstanding", "oval", "overcooked", "overdue", "palatable", "pale", "paltry", "parallel", "parched", "partial", "passionate", "pastel", "peaceful", "peppery", "perfumed", "perky", "personal", "pertinent", "pessimistic", "petty", "phony", "physical", "pink", "pitiful", "plain", "pleasant", "pleased", "pleasing", "plump", "pointed", "pointless", "polished", "polite", "political", "poor", "portly", "posh", "possible", "potable", "powerful", "powerless", "practical", "precious", "present", "prestigious", "pretty", "pricey", "prickly", "primary", "prime", "private", "probable", "productive", "profitable", "profuse", "proper", "proud", "prudent", "punctual", "puny", "pure", "purple", "pushy", "putrid", "puzzled", "qualified", "quarrelsome", "quarterly", "queasy", "querulous", "questionable", "quick", "quick-witted", "quiet", "quintessential", "quixotic", "radiant", "ragged", "rapid", "rare", "raw", "realistic", "reasonable", "recent", "reckless", "rectangular", "red", "reflecting", "regal", "regular", "remarkable", "remorseful", "repentant", "respectful", "responsible", "rewarding", "rich", "right", "rigid", "ripe", "roasted", "robust", "rosy", "rotating", "rotten", "rough", "round", "rowdy", "royal", "rubbery", "ruddy", "rundown", "runny", "rural", "rusty", "sad", "salty", "same", "sandy", "sarcastic", "sardonic", "scaly", "scared", "scary", "scented", "scientific", "scornful", "scratchy", "second", "second-hand", "secondary", "secret", "self-assured", "self-reliant", "selfish", "sentimental", "separate", "serene", "serpentine", "severe", "shabby", "shadowy", "shady", "shallow", "shameful", "shameless", "shimmering", "shiny", "shocked", "shoddy", "short", "short-term", "showy", "shrill", "shy", "sick", "silent", "silky", "silver", "similar", "simple", "simplistic", "sinful", "sizzling", "skeletal", "sleepy", "slight", "slimy", "slow", "slushy", "small", "smart", "smoggy", "smooth", "smug", "snappy", "snarling", "sneaky", "sniveling", "snoopy", "sociable", "soft", "soggy", "somber", "some", "sophisticated", "sore", "sorrowful", "soulful", "soupy", "sour", "spanish", "sparkling", "sparse", "specific", "speedy", "spherical", "spiffy", "spirited", "spiteful", "splendid", "spotless", "square", "squeaky", "squiggly", "stable", "staid", "stained", "stale", "standard", "stark", "steel", "steep", "sticky", "stiff", "stingy", "stormy", "straight", "strange", "strict", "strident", "striking", "strong", "stunning", "stupendous", "sturdy", "stylish", "subdued", "submissive", "substantial", "subtle", "suburban", "sudden", "sugary", "sunny", "super", "superb", "superficial", "superior", "supportive", "sure-footed", "surprised", "svelte", "sweet", "swift", "talkative", "tall", "tame", "tangible", "tasty", "tattered", "taut", "tedious", "teeming", "tempting", "tender", "tense", "tepid", "terrible", "that", "these", "thick", "thin", "thorny", "thorough", "those", "thrifty", "tidy", "tight", "timely", "tinted", "tiny", "tired", "torn", "total", "tough", "tragic", "trained", "triangular", "tricky", "trim", "trivial", "troubled", "true", "trusting", "trustworthy", "trusty", "turbulent", "twin", "ugly", "ultimate", "unaware", "uncomfortable", "uncommon", "unconscious", "understated", "uneven", "unfinished", "unfit", "unfortunate", "unhappy", "unhealthy", "uniform", "unimportant", "unique", "unkempt", "unknown", "unlawful", "unlined", "unlucky", "unpleasant", "unrealistic", "unripe", "unruly", "unselfish", "unsightly", "unsteady", "unsung", "untidy", "untimely", "untried", "untrue", "unused", "unusual", "unwelcome", "unwieldy", "unwilling", "unwritten", "upbeat", "upright", "upset", "urban", "usable", "useless", "utilized", "utter", "vague", "vain", "valuable", "variable", "vast", "velvety", "vengeful", "vibrant", "victorious", "violent", "vivacious", "vivid", "voluminous", "warlike", "warm", "warmhearted", "warped", "wasteful", "waterlogged", "watery", "wavy", "wealthy", "weary", "webbed", "wee", "weekly", "weighty", "weird", "well-documented", "well-groomed", "well-lit", "well-made", "well-off", "well-to-do", "well-worn", "which", "whimsical", "whirlwind", "whispered", "white", "whole", "whopping", "wicked", "wide", "wide-eyed", "wiggly", "willing", "wilted", "winding", "windy", "winged", "wise", "witty", "wobbly", "woeful", "wonderful", "wordy", "worldly", "worse", "worst", "worthless", "worthwhile", "worthy", "wrathful", "wretched", "writhing", "wrong", "wry", "yearly", "yellow", "yellowish", "young", "youthful", "yummy", "zany", "zealous", "zesty"];
    xa = ["abnormally", "absentmindedly", "accidentally", "acidly", "actually", "adventurously", "afterwards", "almost", "always", "angrily", "annually", "anxiously", "arrogantly", "awkwardly", "badly", "bashfully", "beautifully", "bitterly", "bleakly", "blindly", "blissfully", "boastfully", "boldly", "bravely", "briefly", "brightly", "briskly", "broadly", "busily", "calmly", "carefully", "carelessly", "cautiously", "certainly", "cheerfully", "clearly", "cleverly", "closely", "coaxingly", "colorfully", "commonly", "continually", "coolly", "correctly", "courageously", "crossly", "cruelly", "curiously", "daily", "daintily", "dearly", "deceivingly", "deeply", "defiantly", "deliberately", "delightfully", "diligently", "dimly", "doubtfully", "dreamily", "easily", "elegantly", "energetically", "enormously", "enthusiastically", "equally", "especially", "even", "evenly", "eventually", "exactly", "excitedly", "extremely", "fairly", "faithfully", "famously", "far", "fast", "fatally", "ferociously", "fervently", "fiercely", "fondly", "foolishly", "fortunately", "frankly", "frantically", "freely", "frenetically", "frightfully", "fully", "furiously", "generally", "generously", "gently", "gladly", "gleefully", "gracefully", "gratefully", "greatly", "greedily", "happily", "hastily", "healthily", "heavily", "helpfully", "helplessly", "highly", "honestly", "hopelessly", "hourly", "hungrily", "immediately", "innocently", "inquisitively", "instantly", "intensely", "intently", "interestingly", "inwardly", "irritably", "jaggedly", "jealously", "joshingly", "jovially", "joyfully", "joyously", "jubilantly", "judgementally", "justly", "keenly", "kiddingly", "kindheartedly", "kindly", "kissingly", "knavishly", "knottily", "knowingly", "knowledgeably", "kookily", "lazily", "less", "lightly", "likely", "limply", "lively", "loftily", "longingly", "loosely", "loudly", "lovingly", "loyally", "madly", "majestically", "meaningfully", "mechanically", "merrily", "miserably", "mockingly", "monthly", "more", "mortally", "mostly", "mysteriously", "naturally", "nearly", "neatly", "needily", "nervously", "never", "nicely", "noisily", "not", "obediently", "obnoxiously", "oddly", "offensively", "officially", "often", "only", "openly", "optimistically", "overconfidently", "owlishly", "painfully", "partially", "patiently", "perfectly", "physically", "playfully", "politely", "poorly", "positively", "potentially", "powerfully", "promptly", "properly", "punctually", "quaintly", "quarrelsomely", "queasily", "questionably", "questioningly", "quicker", "quickly", "quietly", "quirkily", "quizzically", "rapidly", "rarely", "readily", "really", "reassuringly", "recklessly", "regularly", "reluctantly", "repeatedly", "reproachfully", "restfully", "righteously", "rightfully", "rigidly", "roughly", "rudely", "sadly", "safely", "scarcely", "scarily", "searchingly", "sedately", "seemingly", "seldom", "selfishly", "separately", "seriously", "shakily", "sharply", "sheepishly", "shrilly", "shyly", "silently", "sleepily", "slowly", "smoothly", "softly", "solemnly", "solidly", "sometimes", "soon", "speedily", "stealthily", "sternly", "strictly", "successfully", "suddenly", "surprisingly", "suspiciously", "sweetly", "swiftly", "sympathetically", "tenderly", "tensely", "terribly", "thankfully", "thoroughly", "thoughtfully", "tightly", "tomorrow", "too", "tremendously", "triumphantly", "truly", "truthfully", "ultimately", "unabashedly", "unaccountably", "unbearably", "unethically", "unexpectedly", "unfortunately", "unimpressively", "unnaturally", "unnecessarily", "upbeat", "upliftingly", "upright", "upside-down", "upward", "upwardly", "urgently", "usefully", "uselessly", "usually", "utterly", "vacantly", "vaguely", "vainly", "valiantly", "vastly", "verbally", "very", "viciously", "victoriously", "violently", "vivaciously", "voluntarily", "warmly", "weakly", "wearily", "well", "wetly", "wholly", "wildly", "willfully", "wisely", "woefully", "wonderfully", "worriedly", "wrongly", "yawningly", "yearly", "yearningly", "yesterday", "yieldingly", "youthfully"];
    za = ["after", "although", "and", "as", "because", "before", "but", "consequently", "even", "finally", "for", "furthermore", "hence", "how", "however", "if", "inasmuch", "incidentally", "indeed", "instead", "lest", "likewise", "meanwhile", "nor", "now", "once", "or", "provided", "since", "so", "supposing", "than", "that", "though", "till", "unless", "until", "what", "when", "whenever", "where", "whereas", "wherever", "whether", "which", "while", "who", "whoever", "whose", "why", "yet"];
    Va = ["yuck", "oh", "phooey", "blah", "boo", "whoa", "yowza", "huzzah", "boohoo", "fooey", "geez", "pfft", "ew", "ah", "yum", "brr", "hm", "yahoo", "aha", "woot", "drat", "gah", "meh", "psst", "aw", "ugh", "yippee", "eek", "gee", "bah", "gadzooks", "duh", "ha", "mmm", "ouch", "phew", "ack", "uh-huh", "gosh", "hmph", "pish", "zowie", "er", "ick", "oof", "um"];
    Ya = ["CD", "SUV", "abacus", "academics", "accelerator", "accompanist", "account", "accountability", "acquaintance", "ad", "adaptation", "address", "adrenalin", "adult", "advancement", "advertisement", "adviser", "affect", "affiliate", "aftermath", "agreement", "airbus", "aircraft", "airline", "airmail", "airman", "airport", "alb", "alert", "allegation", "alliance", "alligator", "allocation", "almighty", "amendment", "amnesty", "analogy", "angle", "annual", "antelope", "anticodon", "apparatus", "appliance", "approach", "apricot", "arcade", "archaeology", "armchair", "armoire", "asset", "assist", "atrium", "attraction", "availability", "avalanche", "awareness", "babushka", "backbone", "backburn", "bakeware", "bandwidth", "bar", "barge", "baritone", "barracks", "baseboard", "basket", "bathhouse", "bathrobe", "battle", "begonia", "behest", "bell", "bench", "bend", "beret", "best-seller", "bid", "bidet", "bin", "birdbath", "birdcage", "birth", "blight", "blossom", "blowgun", "bob", "bog", "bonfire", "bonnet", "bookcase", "bookend", "boulevard", "bourgeoisie", "bowler", "bowling", "boyfriend", "brace", "bracelet", "bran", "breastplate", "brief", "brochure", "brook", "brush", "bug", "bump", "bungalow", "cafe", "cake", "calculus", "cannon", "cantaloupe", "cap", "cappelletti", "captain", "caption", "carboxyl", "cardboard", "carnival", "case", "casement", "cash", "casket", "cassava", "castanet", "catalyst", "cauliflower", "cellar", "celsius", "cemetery", "ceramic", "ceramics", "certification", "chainstay", "chairperson", "challenge", "championship", "chap", "chapel", "character", "characterization", "charlatan", "charm", "chasuble", "cheese", "cheetah", "chiffonier", "chops", "chow", "cinder", "cinema", "circumference", "citizen", "clamp", "clavicle", "cleaner", "climb", "co-producer", "coal", "coast", "cod", "coil", "coin", "coliseum", "collaboration", "collectivization", "colon", "colonialism", "comestible", "commercial", "commodity", "community", "comparison", "completion", "complication", "compromise", "concentration", "configuration", "confusion", "conservation", "conservative", "consistency", "contractor", "contrail", "convection", "conversation", "cook", "coordination", "cop-out", "cope", "cork", "cornet", "corporation", "corral", "cosset", "costume", "couch", "council", "councilman", "countess", "courtroom", "cow", "creator", "creature", "crest", "cricket", "crocodile", "cross-contamination", "cruelty", "cuckoo", "curl", "custody", "custom", "cutlet", "cutover", "cycle", "daddy", "dandelion", "dash", "daughter", "dead", "decision", "deck", "declaration", "decongestant", "decryption", "deduction", "deed", "deer", "defendant", "density", "department", "dependency", "deployment", "depot", "derby", "descendant", "descent", "design", "designation", "desk", "detective", "devastation", "developing", "developmental", "devil", "diagram", "digestive", "digit", "dime", "director", "disadvantage", "disappointment", "disclosure", "disconnection", "discourse", "dish", "disk", "disposer", "distinction", "diver", "diversity", "dividend", "divine", "doing", "doorpost", "doubter", "draft", "draw", "dream", "dredger", "dress", "drive", "drug", "duffel", "dulcimer", "dusk", "duster", "dwell", "e-mail", "earth", "ecliptic", "ectoderm", "edge", "editor", "effector", "eggplant", "electronics", "elevation", "elevator", "elver", "embarrassment", "embossing", "emergent", "encouragement", "entry", "epic", "equal", "essence", "eternity", "ethyl", "euphonium", "event", "exasperation", "excess", "executor", "exhaust", "expansion", "expense", "experience", "exploration", "extension", "extent", "exterior", "eyebrow", "eyeliner", "farm", "farmer", "fat", "fax", "feather", "fedora", "fellow", "fen", "fencing", "ferret", "festival", "fibre", "filter", "final", "finding", "finer", "finger", "fireplace", "fisherman", "fishery", "fit", "flame", "flat", "fledgling", "flight", "flint", "flood", "flu", "fog", "fold", "folklore", "follower", "following", "foodstuffs", "footrest", "forage", "forager", "forgery", "fork", "formamide", "formation", "formula", "fort", "fowl", "fraudster", "freckle", "freezing", "freight", "fuel", "fun", "fund", "fundraising", "futon", "gallery", "galoshes", "gastropod", "gazebo", "gerbil", "ghost", "giant", "gift", "giggle", "glider", "gloom", "goat", "godfather", "godparent", "going", "goodwill", "governance", "government", "gown", "gradient", "graffiti", "grandpa", "grandson", "granny", "grass", "gray", "gripper", "grouper", "guacamole", "guard", "guidance", "guide", "gym", "gymnast", "habit", "haircut", "halt", "hamburger", "hammock", "handful", "handle", "handover", "harp", "haversack", "hawk", "heartache", "heartbeat", "heating", "hello", "help", "hepatitis", "heroine", "hexagon", "hierarchy", "hippodrome", "honesty", "hoof", "hope", "horde", "hornet", "horst", "hose", "hospitalization", "hovel", "hovercraft", "hubris", "humidity", "humor", "hundred", "hunger", "hunt", "husband", "hutch", "hydrant", "hydrocarbon", "hydrolyse", "hydrolyze", "hyena", "hygienic", "hyphenation", "ice-cream", "icebreaker", "igloo", "ignorance", "illusion", "impact", "import", "importance", "impostor", "in-joke", "incandescence", "independence", "individual", "information", "injunction", "innovation", "insolence", "inspection", "instance", "institute", "instruction", "instructor", "integer", "intellect", "intent", "interchange", "interior", "intervention", "interviewer", "invite", "iridescence", "issue", "jacket", "jazz", "jellyfish", "jet", "jogging", "joy", "juggernaut", "jump", "jungle", "junior", "jury", "kettledrum", "kick", "kielbasa", "kinase", "king", "kiss", "kit", "knickers", "knight", "knitting", "knuckle", "label", "labourer", "lace", "lady", "lamp", "language", "larva", "lashes", "laughter", "lava", "lawmaker", "lay", "leading", "league", "legend", "legging", "legislature", "lender", "license", "lid", "lieu", "lifestyle", "lift", "linseed", "litter", "loaf", "lobster", "longboat", "lotion", "lounge", "louse", "lox", "loyalty", "luck", "lyre", "maestro", "mainstream", "maintainer", "majority", "makeover", "making", "mallard", "management", "manner", "mantua", "marathon", "march", "marimba", "marketplace", "marksman", "markup", "marten", "massage", "masterpiece", "mathematics", "meadow", "meal", "meander", "meatloaf", "mechanic", "median", "membership", "mentor", "merit", "metabolite", "metal", "middle", "midwife", "milestone", "millet", "minion", "minister", "minor", "minority", "mixture", "mobility", "molasses", "mom", "moment", "monasticism", "monocle", "monster", "morbidity", "morning", "mortise", "mountain", "mouser", "mousse", "mozzarella", "muscat", "mythology", "napkin", "necklace", "nectarine", "negotiation", "nephew", "nerve", "netsuke", "newsletter", "newsprint", "newsstand", "nightlife", "noon", "nougat", "nucleotidase", "nudge", "numeracy", "numeric", "nun", "obedience", "obesity", "object", "obligation", "ocelot", "octave", "offset", "oil", "omelet", "onset", "opera", "operating", "optimal", "orchid", "order", "ostrich", "other", "outlaw", "outrun", "outset", "overcoat", "overheard", "overload", "ownership", "pacemaker", "packaging", "paintwork", "palate", "pants", "pantyhose", "papa", "parade", "parsnip", "partridge", "passport", "pasta", "patroller", "pear", "pearl", "pecan", "pendant", "peninsula", "pension", "peony", "pepper", "perfection", "permafrost", "perp", "petal", "petticoat", "pharmacopoeia", "phrase", "pick", "piglet", "pigpen", "pigsty", "pile", "pillbox", "pillow", "pilot", "pine", "pinstripe", "place", "plain", "planula", "plastic", "platter", "platypus", "pleasure", "pliers", "plugin", "plumber", "pneumonia", "pocket-watch", "poetry", "polarisation", "polyester", "pomelo", "pop", "poppy", "popularity", "populist", "porter", "possession", "postbox", "precedent", "premeditation", "premier", "premise", "premium", "pressure", "presume", "priesthood", "printer", "privilege", "procurement", "produce", "programme", "prohibition", "promise", "pronoun", "providence", "provider", "provision", "publication", "publicity", "pulse", "punctuation", "pupil", "puppet", "puritan", "quart", "quinoa", "quit", "railway", "range", "rationale", "ravioli", "rawhide", "reach", "reasoning", "reboot", "receptor", "recommendation", "reconsideration", "recovery", "redesign", "relative", "release", "remark", "reorganisation", "repeat", "replacement", "reporter", "representation", "republican", "request", "requirement", "reservation", "resolve", "resource", "responsibility", "restaurant", "retention", "retrospectivity", "reward", "ribbon", "rim", "riser", "roadway", "role", "rosemary", "roundabout", "rubric", "ruin", "rule", "runway", "rust", "safe", "sailor", "saloon", "sand", "sandbar", "sanity", "sarong", "sauerkraut", "saw", "scaffold", "scale", "scarification", "scenario", "schedule", "schnitzel", "scholarship", "scorn", "scorpion", "scout", "scrap", "scratch", "seafood", "seagull", "seal", "season", "secrecy", "secret", "section", "sediment", "self-confidence", "sermon", "sesame", "settler", "shadowbox", "shark", "shipper", "shore", "shoulder", "sideboard", "siege", "sightseeing", "signature", "silk", "simple", "singing", "skean", "skeleton", "skyline", "skyscraper", "slide", "slime", "slipper", "smog", "smoke", "sock", "soliloquy", "solution", "solvency", "someplace", "sonar", "sonata", "sonnet", "soup", "soybean", "space", "spear", "spirit", "spork", "sport", "spring", "sprinkles", "squid", "stall", "starboard", "statue", "status", "stay", "steak", "steeple", "step", "step-mother", "sticker", "stir-fry", "stitcher", "stock", "stool", "story", "strait", "stranger", "strategy", "straw", "stump", "subexpression", "submitter", "subsidy", "substitution", "suitcase", "summary", "summer", "sunbeam", "sundae", "supplier", "surface", "sushi", "suspension", "sustenance", "swanling", "swath", "sweatshop", "swim", "swine", "swing", "switch", "switchboard", "swordfish", "synergy", "t-shirt", "tabletop", "tackle", "tail", "tapioca", "taro", "tarragon", "taxicab", "teammate", "technician", "technologist", "tectonics", "tenant", "tenement", "tennis", "tentacle", "teriyaki", "term", "testimonial", "testing", "thigh", "thongs", "thorn", "thread", "thunderbolt", "thyme", "tinderbox", "toaster", "tomatillo", "tomb", "tomography", "tool", "tooth", "toothbrush", "toothpick", "topsail", "traditionalism", "traffic", "translation", "transom", "transparency", "trash", "travel", "tray", "trench", "tribe", "tributary", "trick", "trolley", "tuba", "tuber", "tune-up", "turret", "tusk", "tuxedo", "typeface", "typewriter", "unblinking", "underneath", "underpants", "understanding", "unibody", "unique", "unit", "utilization", "valentine", "validity", "valley", "valuable", "vanadyl", "vein", "velocity", "venom", "version", "verve", "vestment", "veto", "viability", "vibraphone", "vibration", "vicinity", "video", "violin", "vision", "vista", "vol", "volleyball", "wafer", "waist", "wallaby", "warming", "wasabi", "waterspout", "wear", "wedding", "whack", "whale", "wheel", "widow", "wilderness", "willow", "window", "wombat", "word", "worth", "wriggler", "yak", "yarmulke", "yeast", "yin", "yogurt", "zebra", "zen"];
    ja = ["a", "abaft", "aboard", "about", "above", "absent", "across", "afore", "after", "against", "along", "alongside", "amid", "amidst", "among", "amongst", "an", "anenst", "anti", "apropos", "apud", "around", "as", "aside", "astride", "at", "athwart", "atop", "barring", "before", "behind", "below", "beneath", "beside", "besides", "between", "beyond", "but", "by", "circa", "concerning", "considering", "despite", "down", "during", "except", "excepting", "excluding", "failing", "following", "for", "forenenst", "from", "given", "in", "including", "inside", "into", "lest", "like", "mid", "midst", "minus", "modulo", "near", "next", "notwithstanding", "of", "off", "on", "onto", "opposite", "out", "outside", "over", "pace", "past", "per", "plus", "pro", "qua", "regarding", "round", "sans", "save", "since", "than", "the", "through", "throughout", "till", "times", "to", "toward", "towards", "under", "underneath", "unlike", "until", "unto", "up", "upon", "versus", "via", "vice", "with", "within", "without", "worth"];
    qa = ["abnegate", "abscond", "abseil", "absolve", "accentuate", "accept", "access", "accessorise", "accompany", "account", "accredit", "achieve", "acknowledge", "acquire", "adjourn", "adjudge", "admonish", "adumbrate", "advocate", "afford", "airbrush", "ameliorate", "amend", "amount", "anaesthetise", "analyse", "anesthetize", "anneal", "annex", "antagonize", "ape", "apologise", "apostrophize", "appertain", "appreciate", "appropriate", "approximate", "arbitrate", "archive", "arraign", "arrange", "ascertain", "ascribe", "assail", "atomize", "attend", "attest", "attribute", "augment", "avow", "axe", "baa", "banish", "bank", "baptise", "battle", "beard", "beep", "behold", "belabor", "bemuse", "besmirch", "bestride", "better", "bewail", "bicycle", "bide", "bind", "biodegrade", "blacken", "blaspheme", "bleach", "blend", "blink", "bliss", "bloom", "bludgeon", "bobble", "boggle", "bolster", "book", "boom", "bootleg", "border", "bore", "boss", "braid", "brand", "brandish", "break", "breed", "broadcast", "broadside", "brood", "browse", "buck", "burgeon", "bus", "butter", "buzzing", "camouflage", "cannibalise", "canter", "cap", "capitalise", "capitalize", "capsize", "card", "carouse", "carp", "carpool", "catalog", "catalyze", "catch", "categorise", "cease", "celebrate", "censor", "certify", "char", "charter", "chase", "chatter", "chime", "chip", "christen", "chromakey", "chunder", "chunter", "cinch", "circle", "circulate", "circumnavigate", "clamor", "clamour", "claw", "cleave", "clinch", "clinking", "clone", "clonk", "coagulate", "coexist", "coincide", "collaborate", "colligate", "colorize", "colour", "comb", "come", "commandeer", "commemorate", "communicate", "compete", "conceal", "conceptualize", "conclude", "concrete", "condense", "cone", "confide", "confirm", "confiscate", "confound", "confute", "congregate", "conjecture", "connect", "consign", "construe", "contradict", "contrast", "contravene", "controvert", "convalesce", "converse", "convince", "convoke", "coop", "cop", "corner", "covenant", "cow", "crackle", "cram", "crank", "creak", "creaking", "cripple", "croon", "cross", "crumble", "crystallize", "culminate", "culture", "curry", "curse", "customise", "cycle", "dally", "dampen", "darn", "debit", "debut", "decide", "decode", "decouple", "decriminalize", "deduce", "deduct", "deflate", "deflect", "deform", "defrag", "degenerate", "degrease", "delete", "delight", "deliquesce", "demob", "demobilise", "democratize", "demonstrate", "denitrify", "deny", "depart", "depend", "deplore", "deploy", "deprave", "depute", "dereference", "describe", "desecrate", "deselect", "destock", "detain", "develop", "devise", "dial", "dicker", "digitize", "dilate", "disapprove", "disarm", "disbar", "discontinue", "disgorge", "dishearten", "dishonor", "disinherit", "dislocate", "dispense", "display", "dispose", "disrespect", "dissemble", "ditch", "divert", "dock", "doodle", "downchange", "downshift", "dowse", "draft", "drag", "drain", "dramatize", "drowse", "drum", "dwell", "economise", "edge", "efface", "egg", "eke", "electrify", "embalm", "embed", "embody", "emboss", "emerge", "emphasise", "emphasize", "emulsify", "encode", "endow", "enfold", "engage", "engender", "enhance", "enlist", "enrage", "enrich", "enroll", "entice", "entomb", "entrench", "entwine", "equate", "essay", "etch", "eulogise", "even", "evince", "exacerbate", "exaggerate", "exalt", "exempt", "exonerate", "expatiate", "explode", "expostulate", "extract", "extricate", "eyeglasses", "fabricate", "facilitate", "factorise", "factorize", "fail", "fall", "familiarize", "fashion", "father", "fathom", "fax", "federate", "feminize", "fence", "fess", "fictionalize", "fiddle", "fidget", "fill", "flash", "fleck", "flight", "floodlight", "floss", "fluctuate", "fluff", "fly", "focalise", "foot", "forearm", "forecast", "foretell", "forgather", "forgo", "fork", "form", "forswear", "founder", "fraternise", "fray", "frizz", "fumigate", "function", "furlough", "fuss", "gad", "gallivant", "galvanize", "gape", "garage", "garrote", "gasp", "gestate", "give", "glimmer", "glisten", "gloat", "gloss", "glow", "gnash", "gnaw", "goose", "govern", "grade", "graduate", "graft", "grok", "guest", "guilt", "gulp", "gum", "gurn", "gust", "gut", "guzzle", "ham", "harangue", "harvest", "hassle", "haul", "haze", "headline", "hearten", "heighten", "highlight", "hoick", "hold", "hole", "hollow", "holster", "home", "homeschool", "hoot", "horn", "horse", "hotfoot", "house", "hover", "howl", "huddle", "huff", "hunger", "hunt", "husk", "hype", "hypothesise", "hypothesize", "idle", "ignite", "imagineer", "impact", "impanel", "implode", "incinerate", "incline", "inculcate", "industrialize", "ingratiate", "inhibit", "inject", "innovate", "inscribe", "insert", "insist", "inspect", "institute", "institutionalize", "intend", "intermarry", "intermesh", "intermix", "internalise", "internalize", "internationalize", "intrigue", "inure", "inveigle", "inventory", "investigate", "irk", "iterate", "jaywalk", "jell", "jeopardise", "jiggle", "jive", "joint", "jot", "jut", "keel", "knife", "knit", "know", "kowtow", "lack", "lampoon", "large", "leap", "lecture", "legitimize", "lend", "libel", "liberalize", "license", "ligate", "list", "lobotomise", "lock", "log", "loose", "low", "lowball", "machine", "magnetize", "major", "make", "malfunction", "manage", "manipulate", "maroon", "masculinize", "mash", "mask", "masquerade", "massage", "masticate", "materialise", "matter", "maul", "memorise", "merge", "mesh", "metabolise", "microblog", "microchip", "micromanage", "militate", "mill", "minister", "minor", "misappropriate", "miscalculate", "misfire", "misjudge", "miskey", "mismatch", "mispronounce", "misread", "misreport", "misspend", "mob", "mobilise", "mobilize", "moisten", "mooch", "moor", "moralise", "mortar", "mosh", "mothball", "motivate", "motor", "mould", "mount", "muddy", "mummify", "mutate", "mystify", "nab", "narrate", "narrowcast", "nasalise", "nauseate", "navigate", "neaten", "neck", "neglect", "norm", "notarize", "object", "obscure", "observe", "obsess", "obstruct", "obtrude", "offend", "offset", "option", "orchestrate", "orient", "orientate", "outbid", "outdo", "outfit", "outflank", "outfox", "outnumber", "outrank", "outrun", "outsource", "overburden", "overcharge", "overcook", "overdub", "overfeed", "overload", "overplay", "overproduce", "overreact", "override", "overspend", "overstay", "overtrain", "overvalue", "overwork", "own", "oxidise", "oxidize", "oxygenate", "pace", "pack", "pale", "pant", "paralyse", "parody", "part", "pause", "pave", "penalise", "persecute", "personalise", "perspire", "pertain", "peter", "pike", "pillory", "pinion", "pip", "pity", "pivot", "pixellate", "plagiarise", "plait", "plan", "please", "pluck", "ponder", "popularize", "portray", "prance", "preclude", "preheat", "prejudge", "preregister", "presell", "preside", "pretend", "print", "prioritize", "probate", "probe", "proceed", "procrastinate", "profane", "progress", "proliferate", "proofread", "propound", "proselytise", "provision", "pry", "publicize", "puff", "pull", "pulp", "pulverize", "purse", "put", "putrefy", "quadruple", "quaff", "quantify", "quarrel", "quash", "quaver", "question", "quiet", "quintuple", "quip", "quit", "rag", "rally", "ramp", "randomize", "rationalise", "rationalize", "ravage", "ravel", "react", "readies", "readjust", "readmit", "ready", "reapply", "rear", "reassemble", "rebel", "reboot", "reborn", "rebound", "rebuff", "rebuild", "rebuke", "recede", "reckon", "reclassify", "recompense", "reconstitute", "record", "recount", "redact", "redevelop", "redound", "redraw", "redress", "reel", "refer", "reference", "refine", "reflate", "refute", "regulate", "reiterate", "rejigger", "rejoin", "rekindle", "relaunch", "relieve", "remand", "remark", "reopen", "reorient", "replicate", "repossess", "represent", "reprimand", "reproach", "reprove", "repurpose", "requite", "reschedule", "resort", "respray", "restructure", "retool", "retract", "revere", "revitalise", "revoke", "reword", "rewrite", "ride", "ridge", "rim", "ring", "rise", "rival", "roger", "rosin", "rot", "rout", "row", "rue", "rule", "safeguard", "sashay", "sate", "satirise", "satirize", "satisfy", "saturate", "savour", "scale", "scamper", "scar", "scare", "scarper", "scent", "schematise", "scheme", "schlep", "scoff", "scoop", "scope", "scotch", "scowl", "scrabble", "scram", "scramble", "scrape", "screw", "scruple", "scrutinise", "scuffle", "scuttle", "search", "secularize", "see", "segregate", "sell", "sense", "sensitize", "sequester", "serenade", "serialize", "serve", "service", "settle", "sew", "shaft", "sham", "shampoo", "shanghai", "shear", "sheathe", "shell", "shinny", "shirk", "shoot", "shoulder", "shout", "shovel", "showboat", "shred", "shrill", "shudder", "shush", "sidetrack", "sign", "silt", "sin", "singe", "sit", "sizzle", "skateboard", "ski", "slake", "slap", "slather", "sleet", "slink", "slip", "slope", "slump", "smarten", "smuggle", "snack", "sneak", "sniff", "snoop", "snow", "snowplow", "snuggle", "soap", "solace", "solder", "solicit", "source", "spark", "spattering", "spectacles", "spectate", "spellcheck", "spew", "spice", "spirit", "splash", "splay", "split", "splosh", "splurge", "spook", "square", "squirm", "stabilise", "stable", "stack", "stage", "stake", "starch", "state", "statement", "stiffen", "stigmatize", "sting", "stint", "stoop", "store", "storyboard", "stratify", "structure", "stuff", "stunt", "substantiate", "subtract", "suckle", "suffice", "suffocate", "summarise", "sun", "sunbathe", "sunder", "sup", "surge", "surprise", "swat", "swathe", "sway", "swear", "swelter", "swerve", "swill", "swing", "symbolise", "synthesise", "syringe", "table", "tabulate", "tag", "tame", "tank", "tankful", "tarry", "task", "taxicab", "team", "telescope", "tenant", "terraform", "terrorise", "testify", "think", "throbbing", "thump", "tighten", "toady", "toe", "tough", "tousle", "traduce", "train", "transcend", "transplant", "trash", "treasure", "treble", "trek", "trial", "tromp", "trouser", "trust", "tune", "tut", "twine", "twist", "typify", "unbalance", "uncork", "uncover", "underachieve", "undergo", "underplay", "unearth", "unfreeze", "unfurl", "unlearn", "unscramble", "unzip", "uproot", "upsell", "usher", "vacation", "vamoose", "vanish", "vary", "veg", "venture", "verify", "vet", "veto", "volunteer", "vulgarise", "waft", "wallop", "waltz", "warp", "wash", "waver", "weary", "weatherize", "wedge", "weep", "weight", "welcome", "westernise", "westernize", "while", "whine", "whisper", "whistle", "whitewash", "whup", "wilt", "wing", "wire", "wisecrack", "wolf", "wound", "wring", "writ", "yak", "yawn", "yearn", "yuppify"];
    kr = { adjective: Oa, adverb: xa, conjunction: za, interjection: Va, noun: Ya, preposition: ja, verb: qa };
    Ua = kr;
    fr = { airline: o, animal: k, app: B, book: P, cell_phone: W, color: F, commerce: I, company: U, database: _, date: $, finance: ce, food: ve, hacker: Le, internet: He, location: Qe, lorem: $e, metadata: ea, music: ia, person: Aa, phone_number: La, science: Pa, team: Ga, vehicle: Ka, word: Ua };
    ys = fr;
  }
});

// node_modules/@faker-js/faker/dist/chunk-PC2QB7VM.js
function Ce2(i2) {
  let e2 = Object.getPrototypeOf(i2);
  do {
    for (let r2 of Object.getOwnPropertyNames(e2)) typeof i2[r2] == "function" && r2 !== "constructor" && (i2[r2] = i2[r2].bind(i2));
    e2 = Object.getPrototypeOf(e2);
  } while (e2 !== Object.prototype);
}
function wr(i2, e2) {
  let { prefix: r2, casing: t2 } = e2;
  switch (t2) {
    case "upper": {
      i2 = i2.toUpperCase();
      break;
    }
    case "lower": {
      i2 = i2.toLowerCase();
      break;
    }
    case "mixed":
  }
  return r2 && (i2 = r2 + i2), i2;
}
function Le2(i2) {
  return i2.map((r2) => {
    if (r2 % 1 !== 0) {
      let a2 = new ArrayBuffer(4);
      new DataView(a2).setFloat32(0, r2);
      let n2 = new Uint8Array(a2);
      return Le2([...n2]).replaceAll(" ", "");
    }
    return (r2 >>> 0).toString(2).padStart(8, "0");
  }).join(" ");
}
function A2(i2) {
  return Math.round(i2 * 100);
}
function Sr2(i2, e2 = "rgb", r2 = "sRGB") {
  switch (e2) {
    case "rgba":
      return `rgba(${i2[0]}, ${i2[1]}, ${i2[2]}, ${i2[3]})`;
    case "color":
      return `color(${r2} ${i2[0]} ${i2[1]} ${i2[2]})`;
    case "cmyk":
      return `cmyk(${A2(i2[0])}%, ${A2(i2[1])}%, ${A2(i2[2])}%, ${A2(i2[3])}%)`;
    case "hsl":
      return `hsl(${i2[0]}deg ${A2(i2[1])}% ${A2(i2[2])}%)`;
    case "hsla":
      return `hsl(${i2[0]}deg ${A2(i2[1])}% ${A2(i2[2])}% / ${A2(i2[3])})`;
    case "hwb":
      return `hwb(${i2[0]} ${A2(i2[1])}% ${A2(i2[2])}%)`;
    case "lab":
      return `lab(${A2(i2[0])}% ${i2[1]} ${i2[2]})`;
    case "lch":
      return `lch(${A2(i2[0])}% ${i2[1]} ${i2[2]})`;
    case "rgb":
      return `rgb(${i2[0]}, ${i2[1]}, ${i2[2]})`;
  }
}
function D2(i2, e2, r2 = "rgb", t2 = "sRGB") {
  switch (e2) {
    case "css":
      return Sr2(i2, r2, t2);
    case "binary":
      return Le2(i2);
    case "decimal":
      return i2;
  }
}
function ve2(i2) {
  try {
    return typeof Buffer.from("test").toString(i2) == "string";
  } catch {
    return false;
  }
}
function w2(i2) {
  let { deprecated: e2, since: r2, until: t2, proposed: a2 } = i2, n2 = `[@faker-js/faker]: ${e2} is deprecated`;
  r2 && (n2 += ` since v${r2}`), t2 && (n2 += ` and will be removed in v${t2}`), a2 && (n2 += `. Please use ${a2} instead`), console.warn(`${n2}.`);
}
function $e2(i2) {
  return /^[a-z][a-z-]*[a-z]$/i.exec(i2) !== null;
}
function Ie2(i2, e2) {
  let r2 = i2.helpers.slugify(e2);
  if ($e2(r2)) return r2;
  let t2 = i2.helpers.slugify(i2.lorem.word());
  return $e2(t2) ? t2 : i2.string.alpha({ casing: "lower", length: i2.number.int({ min: 4, max: 8 }) });
}
function ke2(i2, e2) {
  return Math.floor((i2.number.int(256) + e2) / 2).toString(16).padStart(2, "0");
}
function R2(i2, e2, r2) {
  let { generic: t2, female: a2, male: n2 } = r2;
  switch (e2) {
    case "female":
      return a2 ?? t2;
    case "male":
      return n2 ?? t2;
    default:
      return t2 ?? i2.helpers.arrayElement([a2, n2]) ?? [];
  }
}
function Fe2(i2) {
  return typeof i2 == "number" ? Ge2(i2) : $r(i2);
}
function Ge2(i2) {
  let e2 = Array.from({ length: 624 });
  e2[0] = i2;
  for (let r2 = 1; r2 !== 624; ++r2) {
    let t2 = e2[r2 - 1] ^ e2[r2 - 1] >>> 30;
    e2[r2] = Ee2(Ae2(1812433253, t2) + r2);
  }
  return e2;
}
function $r(i2) {
  let e2 = Ge2(19650218), r2 = 1, t2 = 0;
  for (let a2 = Math.max(624, i2.length); a2 !== 0; --a2) {
    let n2 = e2[r2 - 1] ^ e2[r2 - 1] >>> 30;
    e2[r2] = Ee2((e2[r2] ^ Ae2(n2, 1664525)) + i2[t2] + t2), r2++, t2++, r2 >= 624 && (e2[0] = e2[623], r2 = 1), t2 >= i2.length && (t2 = 0);
  }
  for (let a2 = 623; a2 !== 0; a2--) e2[r2] = Ee2((e2[r2] ^ Ae2(e2[r2 - 1] ^ e2[r2 - 1] >>> 30, 1566083941)) - r2), r2++, r2 >= 624 && (e2[0] = e2[623], r2 = 1);
  return e2[0] = 2147483648, e2;
}
function xe2(i2) {
  for (let r2 = 0; r2 !== 227; ++r2) {
    let t2 = (i2[r2] & 2147483648) + (i2[r2 + 1] & 2147483647);
    i2[r2] = i2[r2 + 397] ^ t2 >>> 1 ^ -(t2 & 1) & 2567483615;
  }
  for (let r2 = 227; r2 !== 623; ++r2) {
    let t2 = (i2[r2] & 2147483648) + (i2[r2 + 1] & 2147483647);
    i2[r2] = i2[r2 + 397 - 624] ^ t2 >>> 1 ^ -(t2 & 1) & 2567483615;
  }
  let e2 = (i2[623] & 2147483648) + (i2[0] & 2147483647);
  return i2[623] = i2[396] ^ e2 >>> 1 ^ -(e2 & 1) & 2567483615, i2;
}
function P2() {
  return Math.ceil(Math.random() * Number.MAX_SAFE_INTEGER);
}
function Oe2(i2 = P2()) {
  let e2 = new L2(i2);
  return { next() {
    return e2.nextF53();
  }, seed(r2) {
    e2.seed(r2);
  } };
}
function S2(i2, e2 = "refDate") {
  let r2 = new Date(i2);
  if (Number.isNaN(r2.valueOf())) throw new m2(`Invalid ${e2} date: ${i2.toString()}`);
  return r2;
}
function Ue2(i2) {
  let e2 = {};
  return new Proxy(i2, { has() {
    return true;
  }, get(r2, t2) {
    return typeof t2 == "symbol" || t2 === "nodeType" ? r2[t2] : t2 in e2 ? e2[t2] : e2[t2] = Ir(t2, r2[t2]);
  }, set: j2, deleteProperty: j2 });
}
function H2(i2, ...e2) {
  if (i2 === null) throw new m2(`The locale data for '${e2.join(".")}' aren't applicable to this locale.
  If you think this is a bug, please report it at: https://github.com/faker-js/faker`);
  if (i2 === void 0) throw new m2(`The locale data for '${e2.join(".")}' are missing in this locale.
  If this is a custom Faker instance, please make sure all required locales are used e.g. '[de_AT, de, en, base]'.
  Please contribute the missing data to the project or use a locale/Faker instance that has these data.
  For more information see https://fakerjs.dev/guide/localization.html`);
}
function Ir(i2, e2 = {}) {
  return new Proxy(e2, { has(r2, t2) {
    return r2[t2] != null;
  }, get(r2, t2) {
    let a2 = r2[t2];
    return typeof t2 == "symbol" || t2 === "nodeType" || H2(a2, i2, t2.toString()), a2;
  }, set: j2, deleteProperty: j2 });
}
function Ke2(i2, e2, r2 = [e2, e2.rawDefinitions]) {
  if (i2.length === 0) throw new m2("Eval expression cannot be empty.");
  if (r2.length === 0) throw new m2("Eval entrypoints cannot be empty.");
  let t2 = r2, a2 = i2;
  do {
    let o2;
    a2.startsWith("(") ? [o2, t2] = Fr(a2, t2, i2) : [o2, t2] = Or(a2, t2), a2 = a2.substring(o2), t2 = t2.filter((s2) => s2 != null).map((s2) => Array.isArray(s2) ? e2.helpers.arrayElement(s2) : s2);
  } while (a2.length > 0 && t2.length > 0);
  if (t2.length === 0) throw new m2(`Cannot resolve expression '${i2}'`);
  let n2 = t2[0];
  return typeof n2 == "function" ? n2() : n2;
}
function Fr(i2, e2, r2) {
  let [t2, a2] = Gr(i2), n2 = i2[t2 + 1];
  switch (n2) {
    case ".":
    case "(":
    case void 0:
      break;
    default:
      throw new m2(`Expected dot ('.'), open parenthesis ('('), or nothing after function call but got '${n2}'`);
  }
  return [t2 + (n2 === "." ? 2 : 1), e2.map((o2) => typeof o2 == "function" ? o2(...a2) : (console.warn(`[@faker-js/faker]: Invoking expressions which are not functions is deprecated since v9.0 and will be removed in v10.0.
Please remove the parentheses or replace the expression with an actual function.
${r2}
${" ".repeat(r2.length - i2.length)}^`), o2))];
}
function Gr(i2) {
  let e2 = i2.indexOf(")", 1);
  if (e2 === -1) throw new m2(`Missing closing parenthesis in '${i2}'`);
  for (; e2 !== -1; ) {
    let t2 = i2.substring(1, e2);
    try {
      return [e2, JSON.parse(`[${t2}]`)];
    } catch {
      if (!t2.includes("'") && !t2.includes('"')) try {
        return [e2, JSON.parse(`["${t2}"]`)];
      } catch {
      }
    }
    e2 = i2.indexOf(")", e2 + 1);
  }
  e2 = i2.lastIndexOf(")");
  let r2 = i2.substring(1, e2);
  return [e2, [r2]];
}
function Or(i2, e2) {
  let r2 = _r.exec(i2), t2 = (r2?.[0] ?? "") === ".", a2 = r2?.index ?? i2.length, n2 = i2.substring(0, a2);
  if (n2.length === 0) throw new m2(`Expression parts cannot be empty in '${i2}'`);
  let o2 = i2[a2 + 1];
  if (t2 && (o2 == null || o2 === "." || o2 === "(")) throw new m2(`Found dot without property name in '${i2}'`);
  return [a2 + (t2 ? 1 : 0), e2.map((s2) => Ur(s2, n2))];
}
function Ur(i2, e2) {
  switch (typeof i2) {
    case "function": {
      try {
        i2 = i2();
      } catch {
        return;
      }
      return i2?.[e2];
    }
    case "object":
      return i2?.[e2];
    default:
      return;
  }
}
function je2(i2) {
  let e2 = Kr(i2.replace(/L?$/, "0"));
  return e2 === 0 ? 0 : 10 - e2;
}
function Kr(i2) {
  i2 = i2.replaceAll(/[\s-]/g, "");
  let e2 = 0, r2 = false;
  for (let t2 = i2.length - 1; t2 >= 0; t2--) {
    let a2 = Number.parseInt(i2[t2]);
    r2 && (a2 *= 2, a2 > 9 && (a2 = a2 % 10 + 1)), e2 += a2, r2 = !r2;
  }
  return e2 % 10;
}
function He2(i2, e2, r2, t2) {
  let a2 = 1;
  if (e2) switch (e2) {
    case "?": {
      a2 = i2.datatype.boolean() ? 0 : 1;
      break;
    }
    case "*": {
      let n2 = 1;
      for (; i2.datatype.boolean(); ) n2 *= 2;
      a2 = i2.number.int({ min: 0, max: n2 });
      break;
    }
    case "+": {
      let n2 = 1;
      for (; i2.datatype.boolean(); ) n2 *= 2;
      a2 = i2.number.int({ min: 1, max: n2 });
      break;
    }
    default:
      throw new m2("Unknown quantifier symbol provided.");
  }
  else r2 != null && t2 != null ? a2 = i2.number.int({ min: Number.parseInt(r2), max: Number.parseInt(t2) }) : r2 != null && t2 == null && (a2 = Number.parseInt(r2));
  return a2;
}
function jr(i2, e2 = "") {
  let r2 = /(.)\{(\d+),(\d+)\}/, t2 = /(.)\{(\d+)\}/, a2 = /\[(\d+)-(\d+)\]/, n2, o2, s2, l2, c2 = r2.exec(e2);
  for (; c2 != null; ) n2 = Number.parseInt(c2[2]), o2 = Number.parseInt(c2[3]), n2 > o2 && (s2 = o2, o2 = n2, n2 = s2), l2 = i2.number.int({ min: n2, max: o2 }), e2 = e2.slice(0, c2.index) + c2[1].repeat(l2) + e2.slice(c2.index + c2[0].length), c2 = r2.exec(e2);
  for (c2 = t2.exec(e2); c2 != null; ) l2 = Number.parseInt(c2[2]), e2 = e2.slice(0, c2.index) + c2[1].repeat(l2) + e2.slice(c2.index + c2[0].length), c2 = t2.exec(e2);
  for (c2 = a2.exec(e2); c2 != null; ) n2 = Number.parseInt(c2[1]), o2 = Number.parseInt(c2[2]), n2 > o2 && (s2 = o2, o2 = n2, n2 = s2), e2 = e2.slice(0, c2.index) + i2.number.int({ min: n2, max: o2 }).toString() + e2.slice(c2.index + c2[0].length), c2 = a2.exec(e2);
  return e2;
}
function we2(i2, e2 = "", r2 = "#") {
  let t2 = "";
  for (let a2 = 0; a2 < e2.length; a2++) e2.charAt(a2) === r2 ? t2 += i2.number.int(9) : e2.charAt(a2) === "!" ? t2 += i2.number.int({ min: 2, max: 9 }) : t2 += e2.charAt(a2);
  return t2;
}
function Ve2(i2) {
  let e2 = i2.valueOf(), r2 = "";
  for (let t2 = 10; t2 > 0; t2--) {
    let a2 = e2 % 32;
    r2 = Se2[a2] + r2, e2 = (e2 - a2) / 32;
  }
  return r2;
}
function We2(i2) {
  let e2 = {};
  for (let r2 of i2) for (let t2 in r2) {
    let a2 = r2[t2];
    e2[t2] === void 0 ? e2[t2] = { ...a2 } : e2[t2] = { ...a2, ...e2[t2] };
  }
  return e2;
}
function zr(i2) {
  let e2 = "";
  for (let r2 = 0; r2 < i2.length; r2 += 4) e2 += `${i2.substring(r2, r2 + 4)} `;
  return e2.trimEnd();
}
function Ye2(i2) {
  return i2.split(" ").map((e2) => e2.charAt(0).toUpperCase() + e2.slice(1)).join(" ");
}
function Ze2(i2, e2, r2 = (t2) => t2) {
  let t2 = {};
  for (let a2 of i2) {
    let n2 = e2(a2);
    t2[n2] === void 0 && (t2[n2] = []), t2[n2].push(r2(a2));
  }
  return t2;
}
function T2(i2) {
  let { wordList: e2, length: r2, strategy: t2 = "any-length" } = i2;
  if (r2 != null) {
    let a2 = typeof r2 == "number" ? (o2) => o2.length === r2 : (o2) => o2.length >= r2.min && o2.length <= r2.max, n2 = e2.filter(a2);
    return n2.length > 0 ? n2 : typeof r2 == "number" ? Me2[t2](e2, { min: r2, max: r2 }) : Me2[t2](e2, r2);
  } else if (t2 === "shortest" || t2 === "longest") return Me2[t2](e2);
  return [...e2];
}
var m2, x2, p2, Ne2, kr2, xr, Ar, Er, F2, De2, Re2, G2, be2, Pe2, Be2, de2, ge2, Mr, Tr, Cr2, Nr, Dr, Rr, ye2, Lr, Pr, O2, _e2, U2, Br, vr, Ae2, Ee2, L2, K2, j2, B2, V2, _r, v2, z2, W2, Se2, Y2, Z2, ze2, J2, $2, fa2, X2, Q2, Hr, q2, ee2, re2, Vr, M2, te2, ae2, Wr, ne2, ie2, oe2, se2, Me2, ce2, le2, me2, ue2, Yr, Zr, Jr, Je2, Xr, pe2, he2, fe2, Xe2, Qe2, Qr, qe2, er2, rr2, tr2, qr, ar2, I2, et, nr2, ir2, rt, or2, sr2, cr2, lr2, mr2, tt, ur2, pr2, at, hr2, nt, fr2, br2, dr2, it, gr2, ot, Fi;
var init_chunk_PC2QB7VM = __esm({
  "node_modules/@faker-js/faker/dist/chunk-PC2QB7VM.js"() {
    "use strict";
    m2 = class extends Error {
    };
    x2 = class {
      constructor(e2) {
        this.faker = e2;
        Ce2(this);
      }
    };
    p2 = class extends x2 {
      constructor(r2) {
        super(r2);
        this.faker = r2;
      }
    };
    Ne2 = ((t2) => (t2.Narrowbody = "narrowbody", t2.Regional = "regional", t2.Widebody = "widebody", t2))(Ne2 || {});
    kr2 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
    xr = ["0", "O", "1", "I", "L"];
    Ar = { regional: 20, narrowbody: 35, widebody: 60 };
    Er = { regional: ["A", "B", "C", "D"], narrowbody: ["A", "B", "C", "D", "E", "F"], widebody: ["A", "B", "C", "D", "E", "F", "G", "H", "J", "K"] };
    F2 = class extends p2 {
      airport() {
        return this.faker.helpers.arrayElement(this.faker.definitions.airline.airport);
      }
      airline() {
        return this.faker.helpers.arrayElement(this.faker.definitions.airline.airline);
      }
      airplane() {
        return this.faker.helpers.arrayElement(this.faker.definitions.airline.airplane);
      }
      recordLocator(e2 = {}) {
        let { allowNumerics: r2 = false, allowVisuallySimilarCharacters: t2 = false } = e2, a2 = [];
        return r2 || a2.push(...kr2), t2 || a2.push(...xr), this.faker.string.alphanumeric({ length: 6, casing: "upper", exclude: a2 });
      }
      seat(e2 = {}) {
        let { aircraftType: r2 = "narrowbody" } = e2, t2 = Ar[r2], a2 = Er[r2], n2 = this.faker.number.int({ min: 1, max: t2 }), o2 = this.faker.helpers.arrayElement(a2);
        return `${n2}${o2}`;
      }
      aircraftType() {
        return this.faker.helpers.enumValue(Ne2);
      }
      flightNumber(e2 = {}) {
        let { length: r2 = { min: 1, max: 4 }, addLeadingZeros: t2 = false } = e2, a2 = this.faker.string.numeric({ length: r2, allowLeadingZeros: false });
        return t2 ? a2.padStart(4, "0") : a2;
      }
    };
    De2 = ((n2) => (n2.SRGB = "sRGB", n2.DisplayP3 = "display-p3", n2.REC2020 = "rec2020", n2.A98RGB = "a98-rgb", n2.ProphotoRGB = "prophoto-rgb", n2))(De2 || {});
    Re2 = ((c2) => (c2.RGB = "rgb", c2.RGBA = "rgba", c2.HSL = "hsl", c2.HSLA = "hsla", c2.HWB = "hwb", c2.CMYK = "cmyk", c2.LAB = "lab", c2.LCH = "lch", c2.COLOR = "color", c2))(Re2 || {});
    G2 = class extends p2 {
      human() {
        return this.faker.helpers.arrayElement(this.faker.definitions.color.human);
      }
      space() {
        return this.faker.helpers.arrayElement(this.faker.definitions.color.space);
      }
      cssSupportedFunction() {
        return this.faker.helpers.enumValue(Re2);
      }
      cssSupportedSpace() {
        return this.faker.helpers.enumValue(De2);
      }
      rgb(e2 = {}) {
        let { format: r2 = "hex", includeAlpha: t2 = false, prefix: a2 = "#", casing: n2 = "lower" } = e2, o2, s2 = "rgb";
        return r2 === "hex" ? (o2 = this.faker.string.hexadecimal({ length: t2 ? 8 : 6, prefix: "" }), o2 = wr(o2, { prefix: a2, casing: n2 }), o2) : (o2 = Array.from({ length: 3 }, () => this.faker.number.int(255)), t2 && (o2.push(this.faker.number.float({ multipleOf: 0.01 })), s2 = "rgba"), D2(o2, r2, s2));
      }
      cmyk(e2 = {}) {
        let { format: r2 = "decimal" } = e2, t2 = Array.from({ length: 4 }, () => this.faker.number.float({ multipleOf: 0.01 }));
        return D2(t2, r2, "cmyk");
      }
      hsl(e2 = {}) {
        let { format: r2 = "decimal", includeAlpha: t2 = false } = e2, a2 = [this.faker.number.int(360)];
        for (let n2 = 0; n2 < (e2?.includeAlpha ? 3 : 2); n2++) a2.push(this.faker.number.float({ multipleOf: 0.01 }));
        return D2(a2, r2, t2 ? "hsla" : "hsl");
      }
      hwb(e2 = {}) {
        let { format: r2 = "decimal" } = e2, t2 = [this.faker.number.int(360)];
        for (let a2 = 0; a2 < 2; a2++) t2.push(this.faker.number.float({ multipleOf: 0.01 }));
        return D2(t2, r2, "hwb");
      }
      lab(e2 = {}) {
        let { format: r2 = "decimal" } = e2, t2 = [this.faker.number.float({ multipleOf: 1e-6 })];
        for (let a2 = 0; a2 < 2; a2++) t2.push(this.faker.number.float({ min: -100, max: 100, multipleOf: 1e-4 }));
        return D2(t2, r2, "lab");
      }
      lch(e2 = {}) {
        let { format: r2 = "decimal" } = e2, t2 = [this.faker.number.float({ multipleOf: 1e-6 })];
        for (let a2 = 0; a2 < 2; a2++) t2.push(this.faker.number.float({ max: 230, multipleOf: 0.1 }));
        return D2(t2, r2, "lch");
      }
      colorByCSSColorSpace(e2 = {}) {
        let { format: r2 = "decimal", space: t2 = "sRGB" } = e2, a2 = Array.from({ length: 3 }, () => this.faker.number.float({ multipleOf: 1e-4 }));
        return D2(a2, r2, "color", t2);
      }
    };
    be2 = ((a2) => (a2.Legacy = "legacy", a2.Segwit = "segwit", a2.Bech32 = "bech32", a2.Taproot = "taproot", a2))(be2 || {});
    Pe2 = ((r2) => (r2.Mainnet = "mainnet", r2.Testnet = "testnet", r2))(Pe2 || {});
    Be2 = { legacy: { prefix: { mainnet: "1", testnet: "m" }, length: { min: 26, max: 34 }, casing: "mixed", exclude: "0OIl" }, segwit: { prefix: { mainnet: "3", testnet: "2" }, length: { min: 26, max: 34 }, casing: "mixed", exclude: "0OIl" }, bech32: { prefix: { mainnet: "bc1", testnet: "tb1" }, length: { min: 42, max: 42 }, casing: "lower", exclude: "1bBiIoO" }, taproot: { prefix: { mainnet: "bc1p", testnet: "tb1p" }, length: { min: 62, max: 62 }, casing: "lower", exclude: "1bBiIoO" } };
    de2 = typeof Buffer > "u" || !ve2("base64") ? (i2) => {
      let e2 = new TextEncoder().encode(i2), r2 = Array.from(e2, (t2) => String.fromCodePoint(t2)).join("");
      return btoa(r2);
    } : (i2) => Buffer.from(i2).toString("base64");
    ge2 = typeof Buffer > "u" || !ve2("base64url") ? (i2) => de2(i2).replaceAll("+", "-").replaceAll("/", "_").replaceAll(/=+$/g, "") : (i2) => Buffer.from(i2).toString("base64url");
    Mr = Object.fromEntries([["\u0410", "A"], ["\u0430", "a"], ["\u0411", "B"], ["\u0431", "b"], ["\u0412", "V"], ["\u0432", "v"], ["\u0413", "G"], ["\u0433", "g"], ["\u0414", "D"], ["\u0434", "d"], ["\u044A\u0435", "ye"], ["\u042A\u0435", "Ye"], ["\u044A\u0415", "yE"], ["\u042A\u0415", "YE"], ["\u0415", "E"], ["\u0435", "e"], ["\u0401", "Yo"], ["\u0451", "yo"], ["\u0416", "Zh"], ["\u0436", "zh"], ["\u0417", "Z"], ["\u0437", "z"], ["\u0418", "I"], ["\u0438", "i"], ["\u044B\u0439", "iy"], ["\u042B\u0439", "Iy"], ["\u042B\u0419", "IY"], ["\u044B\u0419", "iY"], ["\u0419", "Y"], ["\u0439", "y"], ["\u041A", "K"], ["\u043A", "k"], ["\u041B", "L"], ["\u043B", "l"], ["\u041C", "M"], ["\u043C", "m"], ["\u041D", "N"], ["\u043D", "n"], ["\u041E", "O"], ["\u043E", "o"], ["\u041F", "P"], ["\u043F", "p"], ["\u0420", "R"], ["\u0440", "r"], ["\u0421", "S"], ["\u0441", "s"], ["\u0422", "T"], ["\u0442", "t"], ["\u0423", "U"], ["\u0443", "u"], ["\u0424", "F"], ["\u0444", "f"], ["\u0425", "Kh"], ["\u0445", "kh"], ["\u0426", "Ts"], ["\u0446", "ts"], ["\u0427", "Ch"], ["\u0447", "ch"], ["\u0428", "Sh"], ["\u0448", "sh"], ["\u0429", "Sch"], ["\u0449", "sch"], ["\u042A", ""], ["\u044A", ""], ["\u042B", "Y"], ["\u044B", "y"], ["\u042C", ""], ["\u044C", ""], ["\u042D", "E"], ["\u044D", "e"], ["\u042E", "Yu"], ["\u044E", "yu"], ["\u042F", "Ya"], ["\u044F", "ya"]]);
    Tr = Object.fromEntries([["\u03B1", "a"], ["\u03B2", "v"], ["\u03B3", "g"], ["\u03B4", "d"], ["\u03B5", "e"], ["\u03B6", "z"], ["\u03B7", "i"], ["\u03B8", "th"], ["\u03B9", "i"], ["\u03BA", "k"], ["\u03BB", "l"], ["\u03BC", "m"], ["\u03BD", "n"], ["\u03BE", "ks"], ["\u03BF", "o"], ["\u03C0", "p"], ["\u03C1", "r"], ["\u03C3", "s"], ["\u03C4", "t"], ["\u03C5", "y"], ["\u03C6", "f"], ["\u03C7", "x"], ["\u03C8", "ps"], ["\u03C9", "o"], ["\u03AC", "a"], ["\u03AD", "e"], ["\u03AF", "i"], ["\u03CC", "o"], ["\u03CD", "y"], ["\u03AE", "i"], ["\u03CE", "o"], ["\u03C2", "s"], ["\u03CA", "i"], ["\u03B0", "y"], ["\u03CB", "y"], ["\u0390", "i"], ["\u0391", "A"], ["\u0392", "B"], ["\u0393", "G"], ["\u0394", "D"], ["\u0395", "E"], ["\u0396", "Z"], ["\u0397", "I"], ["\u0398", "TH"], ["\u0399", "I"], ["\u039A", "K"], ["\u039B", "L"], ["\u039C", "M"], ["\u039D", "N"], ["\u039E", "KS"], ["\u039F", "O"], ["\u03A0", "P"], ["\u03A1", "R"], ["\u03A3", "S"], ["\u03A4", "T"], ["\u03A5", "Y"], ["\u03A6", "F"], ["\u03A7", "X"], ["\u03A8", "PS"], ["\u03A9", "O"], ["\u0386", "A"], ["\u0388", "E"], ["\u038A", "I"], ["\u038C", "O"], ["\u038E", "Y"], ["\u0389", "I"], ["\u038F", "O"], ["\u03AA", "I"], ["\u03AB", "Y"]]);
    Cr2 = Object.fromEntries([["\u0621", "e"], ["\u0622", "a"], ["\u0623", "a"], ["\u0624", "w"], ["\u0625", "i"], ["\u0626", "y"], ["\u0627", "a"], ["\u0628", "b"], ["\u0629", "t"], ["\u062A", "t"], ["\u062B", "th"], ["\u062C", "j"], ["\u062D", "h"], ["\u062E", "kh"], ["\u062F", "d"], ["\u0630", "dh"], ["\u0631", "r"], ["\u0632", "z"], ["\u0633", "s"], ["\u0634", "sh"], ["\u0635", "s"], ["\u0636", "d"], ["\u0637", "t"], ["\u0638", "z"], ["\u0639", "e"], ["\u063A", "gh"], ["\u0640", "_"], ["\u0641", "f"], ["\u0642", "q"], ["\u0643", "k"], ["\u0644", "l"], ["\u0645", "m"], ["\u0646", "n"], ["\u0647", "h"], ["\u0648", "w"], ["\u0649", "a"], ["\u064A", "y"], ["\u064E\u200E", "a"], ["\u064F", "u"], ["\u0650\u200E", "i"]]);
    Nr = Object.fromEntries([["\u0561", "a"], ["\u0531", "A"], ["\u0562", "b"], ["\u0532", "B"], ["\u0563", "g"], ["\u0533", "G"], ["\u0564", "d"], ["\u0534", "D"], ["\u0565", "ye"], ["\u0535", "Ye"], ["\u0566", "z"], ["\u0536", "Z"], ["\u0567", "e"], ["\u0537", "E"], ["\u0568", "y"], ["\u0538", "Y"], ["\u0569", "t"], ["\u0539", "T"], ["\u056A", "zh"], ["\u053A", "Zh"], ["\u056B", "i"], ["\u053B", "I"], ["\u056C", "l"], ["\u053C", "L"], ["\u056D", "kh"], ["\u053D", "Kh"], ["\u056E", "ts"], ["\u053E", "Ts"], ["\u056F", "k"], ["\u053F", "K"], ["\u0570", "h"], ["\u0540", "H"], ["\u0571", "dz"], ["\u0541", "Dz"], ["\u0572", "gh"], ["\u0542", "Gh"], ["\u0573", "tch"], ["\u0543", "Tch"], ["\u0574", "m"], ["\u0544", "M"], ["\u0575", "y"], ["\u0545", "Y"], ["\u0576", "n"], ["\u0546", "N"], ["\u0577", "sh"], ["\u0547", "Sh"], ["\u0578", "vo"], ["\u0548", "Vo"], ["\u0579", "ch"], ["\u0549", "Ch"], ["\u057A", "p"], ["\u054A", "P"], ["\u057B", "j"], ["\u054B", "J"], ["\u057C", "r"], ["\u054C", "R"], ["\u057D", "s"], ["\u054D", "S"], ["\u057E", "v"], ["\u054E", "V"], ["\u057F", "t"], ["\u054F", "T"], ["\u0580", "r"], ["\u0550", "R"], ["\u0581", "c"], ["\u0551", "C"], ["\u0578\u0582", "u"], ["\u0548\u0552", "U"], ["\u0548\u0582", "U"], ["\u0583", "p"], ["\u0553", "P"], ["\u0584", "q"], ["\u0554", "Q"], ["\u0585", "o"], ["\u0555", "O"], ["\u0586", "f"], ["\u0556", "F"], ["\u0587", "yev"]]);
    Dr = Object.fromEntries([["\u0686", "ch"], ["\u06A9", "k"], ["\u06AF", "g"], ["\u067E", "p"], ["\u0698", "zh"], ["\u06CC", "y"]]);
    Rr = Object.fromEntries([["\u05D0", "a"], ["\u05D1", "b"], ["\u05D2", "g"], ["\u05D3", "d"], ["\u05D4", "h"], ["\u05D5", "v"], ["\u05D6", "z"], ["\u05D7", "ch"], ["\u05D8", "t"], ["\u05D9", "y"], ["\u05DB", "k"], ["\u05DA", "kh"], ["\u05DC", "l"], ["\u05DD", "m"], ["\u05DE", "m"], ["\u05DF", "n"], ["\u05E0", "n"], ["\u05E1", "s"], ["\u05E2", "a"], ["\u05E4", "f"], ["\u05E3", "ph"], ["\u05E6", "ts"], ["\u05E5", "ts"], ["\u05E7", "k"], ["\u05E8", "r"], ["\u05E9", "sh"], ["\u05EA", "t"], ["\u05D5", "v"]]);
    ye2 = { ...Mr, ...Tr, ...Cr2, ...Dr, ...Nr, ...Rr };
    Lr = ((u2) => (u2.Any = "any", u2.Loopback = "loopback", u2.PrivateA = "private-a", u2.PrivateB = "private-b", u2.PrivateC = "private-c", u2.TestNet1 = "test-net-1", u2.TestNet2 = "test-net-2", u2.TestNet3 = "test-net-3", u2.LinkLocal = "link-local", u2.Multicast = "multicast", u2))(Lr || {});
    Pr = { any: "0.0.0.0/0", loopback: "127.0.0.0/8", "private-a": "10.0.0.0/8", "private-b": "172.16.0.0/12", "private-c": "192.168.0.0/16", "test-net-1": "192.0.2.0/24", "test-net-2": "198.51.100.0/24", "test-net-3": "203.0.113.0/24", "link-local": "169.254.0.0/16", multicast: "224.0.0.0/4" };
    O2 = class extends p2 {
      email(e2 = {}) {
        let { firstName: r2, lastName: t2, provider: a2 = this.faker.helpers.arrayElement(this.faker.definitions.internet.free_email), allowSpecialCharacters: n2 = false } = e2, o2 = this.username({ firstName: r2, lastName: t2 });
        if (o2 = o2.replaceAll(/[^A-Za-z0-9._+-]+/g, ""), o2 = o2.substring(0, 50), n2) {
          let s2 = [..."._-"], l2 = [...".!#$%&'*+-/=?^_`{|}~"];
          o2 = o2.replace(this.faker.helpers.arrayElement(s2), this.faker.helpers.arrayElement(l2));
        }
        return o2 = o2.replaceAll(/\.{2,}/g, "."), o2 = o2.replace(/^\./, ""), o2 = o2.replace(/\.$/, ""), `${o2}@${a2}`;
      }
      exampleEmail(e2 = {}) {
        let { firstName: r2, lastName: t2, allowSpecialCharacters: a2 = false } = e2, n2 = this.faker.helpers.arrayElement(this.faker.definitions.internet.example_email);
        return this.email({ firstName: r2, lastName: t2, provider: n2, allowSpecialCharacters: a2 });
      }
      userName(e2 = {}) {
        return w2({ deprecated: "faker.internet.userName()", proposed: "faker.internet.username()", since: "9.1.0", until: "10.0.0" }), this.username(e2);
      }
      username(e2 = {}) {
        let { firstName: r2 = this.faker.person.firstName(), lastName: t2 = this.faker.person.lastName(), lastName: a2 } = e2, n2 = this.faker.helpers.arrayElement([".", "_"]), o2 = this.faker.number.int(99), s2 = [() => `${r2}${n2}${t2}${o2}`, () => `${r2}${n2}${t2}`];
        a2 || s2.push(() => `${r2}${o2}`);
        let l2 = this.faker.helpers.arrayElement(s2)();
        return l2 = l2.normalize("NFKD").replaceAll(/[\u0300-\u036F]/g, ""), l2 = [...l2].map((c2) => {
          if (ye2[c2]) return ye2[c2];
          let u2 = c2.codePointAt(0) ?? Number.NaN;
          return u2 < 128 ? c2 : u2.toString(36);
        }).join(""), l2 = l2.toString().replaceAll("'", ""), l2 = l2.replaceAll(" ", ""), l2;
      }
      displayName(e2 = {}) {
        let { firstName: r2 = this.faker.person.firstName(), lastName: t2 = this.faker.person.lastName() } = e2, a2 = this.faker.helpers.arrayElement([".", "_"]), n2 = this.faker.number.int(99), o2 = [() => `${r2}${n2}`, () => `${r2}${a2}${t2}`, () => `${r2}${a2}${t2}${n2}`], s2 = this.faker.helpers.arrayElement(o2)();
        return s2 = s2.toString().replaceAll("'", ""), s2 = s2.replaceAll(" ", ""), s2;
      }
      protocol() {
        let e2 = ["http", "https"];
        return this.faker.helpers.arrayElement(e2);
      }
      httpMethod() {
        let e2 = ["GET", "POST", "PUT", "DELETE", "PATCH"];
        return this.faker.helpers.arrayElement(e2);
      }
      httpStatusCode(e2 = {}) {
        let { types: r2 = Object.keys(this.faker.definitions.internet.http_status_code) } = e2, t2 = this.faker.helpers.arrayElement(r2);
        return this.faker.helpers.arrayElement(this.faker.definitions.internet.http_status_code[t2]);
      }
      url(e2 = {}) {
        let { appendSlash: r2 = this.faker.datatype.boolean(), protocol: t2 = "https" } = e2;
        return `${t2}://${this.domainName()}${r2 ? "/" : ""}`;
      }
      domainName() {
        return `${this.domainWord()}.${this.domainSuffix()}`;
      }
      domainSuffix() {
        return this.faker.helpers.arrayElement(this.faker.definitions.internet.domain_suffix);
      }
      domainWord() {
        let e2 = Ie2(this.faker, this.faker.word.adjective()), r2 = Ie2(this.faker, this.faker.word.noun());
        return `${e2}-${r2}`.toLowerCase();
      }
      ip() {
        return this.faker.datatype.boolean() ? this.ipv4() : this.ipv6();
      }
      ipv4(e2 = {}) {
        let { network: r2 = "any", cidrBlock: t2 = Pr[r2] } = e2;
        if (!/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}$/.test(t2)) throw new m2(`Invalid CIDR block provided: ${t2}. Must be in the format x.x.x.x/y.`);
        let [a2, n2] = t2.split("/"), o2 = 4294967295 >>> Number.parseInt(n2), [s2, l2, c2, u2] = a2.split(".").map(Number), f3 = (s2 << 24 | l2 << 16 | c2 << 8 | u2) & ~o2, g2 = this.faker.number.int(o2), b2 = f3 | g2;
        return [b2 >>> 24 & 255, b2 >>> 16 & 255, b2 >>> 8 & 255, b2 & 255].join(".");
      }
      ipv6() {
        return Array.from({ length: 8 }, () => this.faker.string.hexadecimal({ length: 4, casing: "lower", prefix: "" })).join(":");
      }
      port() {
        return this.faker.number.int(65535);
      }
      userAgent() {
        return this.faker.helpers.fake(this.faker.definitions.internet.user_agent_pattern);
      }
      color(e2 = {}) {
        w2({ deprecated: "faker.internet.color()", proposed: "faker.color.rgb()", since: "9.6.0", until: "10.0.0" });
        let { redBase: r2 = 0, greenBase: t2 = 0, blueBase: a2 = 0 } = e2, n2 = ke2(this.faker, r2), o2 = ke2(this.faker, t2), s2 = ke2(this.faker, a2);
        return `#${n2}${o2}${s2}`;
      }
      mac(e2 = {}) {
        typeof e2 == "string" && (e2 = { separator: e2 });
        let { separator: r2 = ":" } = e2, t2, a2 = "";
        for ([":", "-", ""].includes(r2) || (r2 = ":"), t2 = 0; t2 < 12; t2++) a2 += this.faker.number.hex(15), t2 % 2 === 1 && t2 !== 11 && (a2 += r2);
        return a2;
      }
      password(e2 = {}) {
        let r2 = /[aeiouAEIOU]$/, t2 = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/, a2 = (c2, u2, h2, f3) => {
          if (f3.length >= c2) return f3;
          u2 && (h2 = t2.test(f3) ? r2 : t2);
          let g2 = this.faker.number.int(94) + 33, b2 = String.fromCodePoint(g2);
          return u2 && (b2 = b2.toLowerCase()), h2.test(b2) ? a2(c2, u2, h2, f3 + b2) : a2(c2, u2, h2, f3);
        }, { length: n2 = 15, memorable: o2 = false, pattern: s2 = /\w/, prefix: l2 = "" } = e2;
        return a2(n2, o2, s2, l2);
      }
      emoji(e2 = {}) {
        let { types: r2 = Object.keys(this.faker.definitions.internet.emoji) } = e2, t2 = this.faker.helpers.arrayElement(r2);
        return this.faker.helpers.arrayElement(this.faker.definitions.internet.emoji[t2]);
      }
      jwtAlgorithm() {
        return this.faker.helpers.arrayElement(this.faker.definitions.internet.jwt_algorithm);
      }
      jwt(e2 = {}) {
        let { refDate: r2 = this.faker.defaultRefDate() } = e2, t2 = this.faker.date.recent({ refDate: r2 }), { header: a2 = { alg: this.jwtAlgorithm(), typ: "JWT" }, payload: n2 = { iat: Math.round(t2.valueOf() / 1e3), exp: Math.round(this.faker.date.soon({ refDate: t2 }).valueOf() / 1e3), nbf: Math.round(this.faker.date.anytime({ refDate: r2 }).valueOf() / 1e3), iss: this.faker.company.name(), sub: this.faker.string.uuid(), aud: this.faker.string.uuid(), jti: this.faker.string.uuid() } } = e2, o2 = ge2(JSON.stringify(a2)), s2 = ge2(JSON.stringify(n2)), l2 = this.faker.string.alphanumeric(64);
        return `${o2}.${s2}.${l2}`;
      }
    };
    _e2 = ((r2) => (r2.Female = "female", r2.Male = "male", r2))(_e2 || {});
    U2 = class extends p2 {
      firstName(e2) {
        return this.faker.helpers.arrayElement(R2(this.faker, e2, this.faker.definitions.person.first_name));
      }
      lastName(e2) {
        if (this.faker.rawDefinitions.person?.last_name_pattern != null) {
          let r2 = this.faker.helpers.weightedArrayElement(R2(this.faker, e2, this.faker.rawDefinitions.person.last_name_pattern));
          return this.faker.helpers.fake(r2);
        }
        return this.faker.helpers.arrayElement(R2(this.faker, e2, this.faker.definitions.person.last_name));
      }
      middleName(e2) {
        return this.faker.helpers.arrayElement(R2(this.faker, e2, this.faker.definitions.person.middle_name));
      }
      fullName(e2 = {}) {
        let { sex: r2 = this.faker.helpers.arrayElement(["female", "male"]), firstName: t2 = this.firstName(r2), lastName: a2 = this.lastName(r2) } = e2, n2 = this.faker.helpers.weightedArrayElement(this.faker.definitions.person.name);
        return this.faker.helpers.mustache(n2, { "person.prefix": () => this.prefix(r2), "person.firstName": () => t2, "person.middleName": () => this.middleName(r2), "person.lastName": () => a2, "person.suffix": () => this.suffix() });
      }
      gender() {
        return this.faker.helpers.arrayElement(this.faker.definitions.person.gender);
      }
      sex() {
        return this.faker.helpers.arrayElement(this.faker.definitions.person.sex);
      }
      sexType() {
        return this.faker.helpers.enumValue(_e2);
      }
      bio() {
        let { bio_pattern: e2 } = this.faker.definitions.person;
        return this.faker.helpers.fake(e2);
      }
      prefix(e2) {
        return this.faker.helpers.arrayElement(R2(this.faker, e2, this.faker.definitions.person.prefix));
      }
      suffix() {
        return this.faker.helpers.arrayElement(this.faker.definitions.person.suffix);
      }
      jobTitle() {
        return this.faker.helpers.fake(this.faker.definitions.person.job_title_pattern);
      }
      jobDescriptor() {
        return this.faker.helpers.arrayElement(this.faker.definitions.person.job_descriptor);
      }
      jobArea() {
        return this.faker.helpers.arrayElement(this.faker.definitions.person.job_area);
      }
      jobType() {
        return this.faker.helpers.arrayElement(this.faker.definitions.person.job_type);
      }
      zodiacSign() {
        return this.faker.helpers.arrayElement(this.faker.definitions.person.western_zodiac_sign);
      }
    };
    Br = 23283064365386963e-26;
    vr = 1 / 9007199254740992;
    ({ imul: Ae2, trunc: Ee2 } = Math);
    L2 = class {
      constructor(e2 = Math.random() * Number.MAX_SAFE_INTEGER, r2 = xe2(Fe2(e2)), t2 = 0) {
        this.states = r2;
        this.index = t2;
      }
      nextU32() {
        let e2 = this.states[this.index];
        return e2 ^= this.states[this.index] >>> 11, e2 ^= e2 << 7 & 2636928640, e2 ^= e2 << 15 & 4022730752, e2 ^= e2 >>> 18, ++this.index >= 624 && (this.states = xe2(this.states), this.index = 0), e2 >>> 0;
      }
      nextF32() {
        return this.nextU32() * Br;
      }
      nextU53() {
        let e2 = this.nextU32() >>> 5, r2 = this.nextU32() >>> 6;
        return e2 * 67108864 + r2;
      }
      nextF53() {
        return this.nextU53() * vr;
      }
      seed(e2) {
        this.states = xe2(Fe2(e2)), this.index = 0;
      }
    };
    K2 = class extends x2 {
      boolean(e2 = {}) {
        typeof e2 == "number" && (e2 = { probability: e2 });
        let { probability: r2 = 0.5 } = e2;
        return r2 <= 0 ? false : r2 >= 1 ? true : this.faker.number.float() < r2;
      }
    };
    j2 = () => {
      throw new m2("You cannot edit the locale data on the faker instance");
    };
    B2 = class extends x2 {
      anytime(e2 = {}) {
        let { refDate: r2 = this.faker.defaultRefDate() } = e2, t2 = S2(r2).getTime();
        return this.between({ from: t2 - 1e3 * 60 * 60 * 24 * 365, to: t2 + 1e3 * 60 * 60 * 24 * 365 });
      }
      past(e2 = {}) {
        let { years: r2 = 1, refDate: t2 = this.faker.defaultRefDate() } = e2;
        if (r2 <= 0) throw new m2("Years must be greater than 0.");
        let a2 = S2(t2).getTime();
        return this.between({ from: a2 - r2 * 365 * 24 * 3600 * 1e3, to: a2 - 1e3 });
      }
      future(e2 = {}) {
        let { years: r2 = 1, refDate: t2 = this.faker.defaultRefDate() } = e2;
        if (r2 <= 0) throw new m2("Years must be greater than 0.");
        let a2 = S2(t2).getTime();
        return this.between({ from: a2 + 1e3, to: a2 + r2 * 365 * 24 * 3600 * 1e3 });
      }
      between(e2) {
        if (e2 == null || e2.from == null || e2.to == null) throw new m2("Must pass an options object with `from` and `to` values.");
        let { from: r2, to: t2 } = e2, a2 = S2(r2, "from").getTime(), n2 = S2(t2, "to").getTime();
        if (a2 > n2) throw new m2("`from` date must be before `to` date.");
        return new Date(this.faker.number.int({ min: a2, max: n2 }));
      }
      betweens(e2) {
        if (e2 == null || e2.from == null || e2.to == null) throw new m2("Must pass an options object with `from` and `to` values.");
        let { from: r2, to: t2, count: a2 = 3 } = e2;
        return this.faker.helpers.multiple(() => this.between({ from: r2, to: t2 }), { count: a2 }).sort((n2, o2) => n2.getTime() - o2.getTime());
      }
      recent(e2 = {}) {
        let { days: r2 = 1, refDate: t2 = this.faker.defaultRefDate() } = e2;
        if (r2 <= 0) throw new m2("Days must be greater than 0.");
        let a2 = S2(t2).getTime();
        return this.between({ from: a2 - r2 * 24 * 3600 * 1e3, to: a2 - 1e3 });
      }
      soon(e2 = {}) {
        let { days: r2 = 1, refDate: t2 = this.faker.defaultRefDate() } = e2;
        if (r2 <= 0) throw new m2("Days must be greater than 0.");
        let a2 = S2(t2).getTime();
        return this.between({ from: a2 + 1e3, to: a2 + r2 * 24 * 3600 * 1e3 });
      }
      birthdate(e2 = {}) {
        let { mode: r2 = "age", min: t2 = 18, max: a2 = 80, refDate: n2 = this.faker.defaultRefDate(), mode: o2, min: s2, max: l2 } = e2;
        if ([s2, l2, o2].filter((f3) => f3 != null).length % 3 !== 0) throw new m2("The 'min', 'max', and 'mode' options must be set together.");
        let u2 = S2(n2), h2 = u2.getUTCFullYear();
        switch (r2) {
          case "age": {
            let g2 = new Date(u2).setUTCFullYear(h2 - a2 - 1) + 864e5, b2 = new Date(u2).setUTCFullYear(h2 - t2);
            if (g2 > b2) throw new m2(`Max age ${a2} should be greater than or equal to min age ${t2}.`);
            return this.between({ from: g2, to: b2 });
          }
          case "year": {
            let f3 = new Date(Date.UTC(0, 0, 2)).setUTCFullYear(t2), g2 = new Date(Date.UTC(0, 11, 30)).setUTCFullYear(a2);
            if (f3 > g2) throw new m2(`Max year ${a2} should be greater than or equal to min year ${t2}.`);
            return this.between({ from: f3, to: g2 });
          }
        }
      }
    };
    V2 = class extends B2 {
      constructor(r2) {
        super(r2);
        this.faker = r2;
      }
      month(r2 = {}) {
        let { abbreviated: t2 = false, context: a2 = false } = r2, n2 = this.faker.definitions.date.month, o2;
        t2 ? o2 = a2 && n2.abbr_context != null ? "abbr_context" : "abbr" : o2 = a2 && n2.wide_context != null ? "wide_context" : "wide";
        let s2 = n2[o2];
        return H2(s2, "date.month", o2), this.faker.helpers.arrayElement(s2);
      }
      weekday(r2 = {}) {
        let { abbreviated: t2 = false, context: a2 = false } = r2, n2 = this.faker.definitions.date.weekday, o2;
        t2 ? o2 = a2 && n2.abbr_context != null ? "abbr_context" : "abbr" : o2 = a2 && n2.wide_context != null ? "wide_context" : "wide";
        let s2 = n2[o2];
        return H2(s2, "date.weekday", o2), this.faker.helpers.arrayElement(s2);
      }
      timeZone() {
        return this.faker.helpers.arrayElement(this.faker.definitions.date.time_zone);
      }
    };
    _r = /\.|\(/;
    v2 = class extends x2 {
      slugify(e2 = "") {
        return e2.normalize("NFKD").replaceAll(/[\u0300-\u036F]/g, "").replaceAll(" ", "-").replaceAll(/[^\w.-]+/g, "");
      }
      replaceSymbols(e2 = "") {
        let r2 = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"], t2 = "";
        for (let a2 = 0; a2 < e2.length; a2++) e2.charAt(a2) === "#" ? t2 += this.faker.number.int(9) : e2.charAt(a2) === "?" ? t2 += this.arrayElement(r2) : e2.charAt(a2) === "*" ? t2 += this.faker.datatype.boolean() ? this.arrayElement(r2) : this.faker.number.int(9) : t2 += e2.charAt(a2);
        return t2;
      }
      replaceCreditCardSymbols(e2 = "6453-####-####-####-###L", r2 = "#") {
        e2 = jr(this.faker, e2), e2 = we2(this.faker, e2, r2);
        let t2 = je2(e2);
        return e2.replace("L", String(t2));
      }
      fromRegExp(e2) {
        let r2 = false;
        e2 instanceof RegExp && (r2 = e2.flags.includes("i"), e2 = e2.toString(), e2 = /\/(.+?)\//.exec(e2)?.[1] ?? "");
        let t2, a2, n2, o2 = /([.A-Za-z0-9])(?:\{(\d+)(?:,(\d+)|)\}|(\?|\*|\+))(?![^[]*]|[^{]*})/, s2 = o2.exec(e2);
        for (; s2 != null; ) {
          let f3 = s2[2], g2 = s2[3], b2 = s2[4];
          n2 = He2(this.faker, b2, f3, g2);
          let y2;
          s2[1] === "." ? y2 = this.faker.string.alphanumeric(n2) : r2 ? y2 = this.faker.string.fromCharacters([s2[1].toLowerCase(), s2[1].toUpperCase()], n2) : y2 = s2[1].repeat(n2), e2 = e2.slice(0, s2.index) + y2 + e2.slice(s2.index + s2[0].length), s2 = o2.exec(e2);
        }
        let l2 = /(\d-\d|\w-\w|\d|\w|[-!@#$&()`.+,/"])/, c2 = /\[(\^|)(-|)(.+?)\](?:\{(\d+)(?:,(\d+)|)\}|(\?|\*|\+)|)/;
        for (s2 = c2.exec(e2); s2 != null; ) {
          let f3 = s2[1] === "^", g2 = s2[2] === "-", b2 = s2[4], y2 = s2[5], N2 = s2[6], k2 = [], _2 = s2[3], C2 = l2.exec(_2);
          for (g2 && k2.push(45); C2 != null; ) {
            if (C2[0].includes("-")) {
              let E2 = C2[0].split("-").map((d2) => d2.codePointAt(0) ?? Number.NaN);
              if (t2 = E2[0], a2 = E2[1], t2 > a2) throw new m2("Character range provided is out of order.");
              for (let d2 = t2; d2 <= a2; d2++) if (r2 && Number.isNaN(Number(String.fromCodePoint(d2)))) {
                let Te2 = String.fromCodePoint(d2);
                k2.push(Te2.toUpperCase().codePointAt(0) ?? Number.NaN, Te2.toLowerCase().codePointAt(0) ?? Number.NaN);
              } else k2.push(d2);
            } else r2 && Number.isNaN(Number(C2[0])) ? k2.push(C2[0].toUpperCase().codePointAt(0) ?? Number.NaN, C2[0].toLowerCase().codePointAt(0) ?? Number.NaN) : k2.push(C2[0].codePointAt(0) ?? Number.NaN);
            _2 = _2.substring(C2[0].length), C2 = l2.exec(_2);
          }
          if (n2 = He2(this.faker, N2, b2, y2), f3) {
            let E2 = -1;
            for (let d2 = 48; d2 <= 57; d2++) {
              if (E2 = k2.indexOf(d2), E2 > -1) {
                k2.splice(E2, 1);
                continue;
              }
              k2.push(d2);
            }
            for (let d2 = 65; d2 <= 90; d2++) {
              if (E2 = k2.indexOf(d2), E2 > -1) {
                k2.splice(E2, 1);
                continue;
              }
              k2.push(d2);
            }
            for (let d2 = 97; d2 <= 122; d2++) {
              if (E2 = k2.indexOf(d2), E2 > -1) {
                k2.splice(E2, 1);
                continue;
              }
              k2.push(d2);
            }
          }
          let yr2 = this.multiple(() => String.fromCodePoint(this.arrayElement(k2)), { count: n2 }).join("");
          e2 = e2.slice(0, s2.index) + yr2 + e2.slice(s2.index + s2[0].length), s2 = c2.exec(e2);
        }
        let u2 = /(.)\{(\d+),(\d+)\}/;
        for (s2 = u2.exec(e2); s2 != null; ) {
          if (t2 = Number.parseInt(s2[2]), a2 = Number.parseInt(s2[3]), t2 > a2) throw new m2("Numbers out of order in {} quantifier.");
          n2 = this.faker.number.int({ min: t2, max: a2 }), e2 = e2.slice(0, s2.index) + s2[1].repeat(n2) + e2.slice(s2.index + s2[0].length), s2 = u2.exec(e2);
        }
        let h2 = /(.)\{(\d+)\}/;
        for (s2 = h2.exec(e2); s2 != null; ) n2 = Number.parseInt(s2[2]), e2 = e2.slice(0, s2.index) + s2[1].repeat(n2) + e2.slice(s2.index + s2[0].length), s2 = h2.exec(e2);
        return e2;
      }
      shuffle(e2, r2 = {}) {
        let { inplace: t2 = false } = r2;
        t2 || (e2 = [...e2]);
        for (let a2 = e2.length - 1; a2 > 0; --a2) {
          let n2 = this.faker.number.int(a2);
          [e2[a2], e2[n2]] = [e2[n2], e2[a2]];
        }
        return e2;
      }
      uniqueArray(e2, r2) {
        if (Array.isArray(e2)) {
          let n2 = [...new Set(e2)];
          return this.shuffle(n2).splice(0, r2);
        }
        let t2 = /* @__PURE__ */ new Set();
        try {
          if (typeof e2 == "function") {
            let a2 = 1e3 * r2, n2 = 0;
            for (; t2.size < r2 && n2 < a2; ) t2.add(e2()), n2++;
          }
        } catch {
        }
        return [...t2];
      }
      mustache(e2, r2) {
        if (e2 == null) return "";
        for (let t2 in r2) {
          let a2 = new RegExp(`{{${t2}}}`, "g"), n2 = r2[t2];
          typeof n2 == "string" && (n2 = n2.replaceAll("$", "$$$$")), e2 = e2.replace(a2, n2);
        }
        return e2;
      }
      maybe(e2, r2 = {}) {
        if (this.faker.datatype.boolean(r2)) return e2();
      }
      objectKey(e2) {
        let r2 = Object.keys(e2);
        return this.arrayElement(r2);
      }
      objectValue(e2) {
        let r2 = this.faker.helpers.objectKey(e2);
        return e2[r2];
      }
      objectEntry(e2) {
        let r2 = this.faker.helpers.objectKey(e2);
        return [r2, e2[r2]];
      }
      arrayElement(e2) {
        if (e2.length === 0) throw new m2("Cannot get value from empty dataset.");
        let r2 = e2.length > 1 ? this.faker.number.int({ max: e2.length - 1 }) : 0;
        return e2[r2];
      }
      weightedArrayElement(e2) {
        if (e2.length === 0) throw new m2("weightedArrayElement expects an array with at least one element");
        if (!e2.every((n2) => n2.weight > 0)) throw new m2("weightedArrayElement expects an array of { weight, value } objects where weight is a positive number");
        let r2 = e2.reduce((n2, { weight: o2 }) => n2 + o2, 0), t2 = this.faker.number.float({ min: 0, max: r2 }), a2 = 0;
        for (let { weight: n2, value: o2 } of e2) if (a2 += n2, t2 < a2) return o2;
        return e2.at(-1).value;
      }
      arrayElements(e2, r2) {
        if (e2.length === 0) return [];
        let t2 = this.rangeToNumber(r2 ?? { min: 1, max: e2.length });
        if (t2 >= e2.length) return this.shuffle(e2);
        if (t2 <= 0) return [];
        let a2 = [...e2], n2 = e2.length, o2 = n2 - t2, s2, l2;
        for (; n2-- > o2; ) l2 = this.faker.number.int(n2), s2 = a2[l2], a2[l2] = a2[n2], a2[n2] = s2;
        return a2.slice(o2);
      }
      enumValue(e2) {
        let r2 = Object.keys(e2).filter((a2) => Number.isNaN(Number(a2))), t2 = this.arrayElement(r2);
        return e2[t2];
      }
      rangeToNumber(e2) {
        return typeof e2 == "number" ? e2 : this.faker.number.int(e2);
      }
      multiple(e2, r2 = {}) {
        let t2 = this.rangeToNumber(r2.count ?? 3);
        return t2 <= 0 ? [] : Array.from({ length: t2 }, e2);
      }
    };
    z2 = class extends v2 {
      constructor(r2) {
        super(r2);
        this.faker = r2;
      }
      fake(r2) {
        r2 = typeof r2 == "string" ? r2 : this.arrayElement(r2);
        let t2 = r2.search(/{{[a-z]/), a2 = r2.indexOf("}}", t2);
        if (t2 === -1 || a2 === -1) return r2;
        let o2 = r2.substring(t2 + 2, a2 + 2).replace("}}", "").replace("{{", ""), s2 = Ke2(o2, this.faker), l2 = String(s2), c2 = r2.substring(0, t2) + l2 + r2.substring(a2 + 2);
        return this.fake(c2);
      }
    };
    W2 = class extends x2 {
      int(e2 = {}) {
        typeof e2 == "number" && (e2 = { max: e2 });
        let { min: r2 = 0, max: t2 = Number.MAX_SAFE_INTEGER, multipleOf: a2 = 1 } = e2;
        if (!Number.isInteger(a2)) throw new m2("multipleOf should be an integer.");
        if (a2 <= 0) throw new m2("multipleOf should be greater than 0.");
        let n2 = Math.ceil(r2 / a2), o2 = Math.floor(t2 / a2);
        if (n2 === o2) return n2 * a2;
        if (o2 < n2) throw t2 >= r2 ? new m2(`No suitable integer value between ${r2} and ${t2} found.`) : new m2(`Max ${t2} should be greater than min ${r2}.`);
        let l2 = this.faker._randomizer.next(), c2 = o2 - n2 + 1;
        return Math.floor(l2 * c2 + n2) * a2;
      }
      float(e2 = {}) {
        typeof e2 == "number" && (e2 = { max: e2 });
        let { min: r2 = 0, max: t2 = 1, fractionDigits: a2, multipleOf: n2, multipleOf: o2 = a2 == null ? void 0 : 10 ** -a2 } = e2;
        if (t2 < r2) throw new m2(`Max ${t2} should be greater than min ${r2}.`);
        if (a2 != null) {
          if (n2 != null) throw new m2("multipleOf and fractionDigits cannot be set at the same time.");
          if (!Number.isInteger(a2)) throw new m2("fractionDigits should be an integer.");
          if (a2 < 0) throw new m2("fractionDigits should be greater than or equal to 0.");
        }
        if (o2 != null) {
          if (o2 <= 0) throw new m2("multipleOf should be greater than 0.");
          let c2 = Math.log10(o2), u2 = o2 < 1 && Number.isInteger(c2) ? 10 ** -c2 : 1 / o2;
          return this.int({ min: r2 * u2, max: t2 * u2 }) / u2;
        }
        return this.faker._randomizer.next() * (t2 - r2) + r2;
      }
      binary(e2 = {}) {
        typeof e2 == "number" && (e2 = { max: e2 });
        let { min: r2 = 0, max: t2 = 1 } = e2;
        return this.int({ max: t2, min: r2 }).toString(2);
      }
      octal(e2 = {}) {
        typeof e2 == "number" && (e2 = { max: e2 });
        let { min: r2 = 0, max: t2 = 7 } = e2;
        return this.int({ max: t2, min: r2 }).toString(8);
      }
      hex(e2 = {}) {
        typeof e2 == "number" && (e2 = { max: e2 });
        let { min: r2 = 0, max: t2 = 15 } = e2;
        return this.int({ max: t2, min: r2 }).toString(16);
      }
      bigInt(e2 = {}) {
        (typeof e2 == "bigint" || typeof e2 == "number" || typeof e2 == "string" || typeof e2 == "boolean") && (e2 = { max: e2 });
        let r2 = BigInt(e2.min ?? 0), t2 = BigInt(e2.max ?? r2 + BigInt(999999999999999)), a2 = BigInt(e2.multipleOf ?? 1);
        if (t2 < r2) throw new m2(`Max ${t2} should be larger than min ${r2}.`);
        if (a2 <= BigInt(0)) throw new m2("multipleOf should be greater than 0.");
        let n2 = r2 / a2 + (r2 % a2 > 0n ? 1n : 0n), o2 = t2 / a2 - (t2 % a2 < 0n ? 1n : 0n);
        if (n2 === o2) return n2 * a2;
        if (o2 < n2) throw new m2(`No suitable bigint value between ${r2} and ${t2} found.`);
        let s2 = o2 - n2 + 1n, l2 = BigInt(this.faker.string.numeric({ length: s2.toString(10).length, allowLeadingZeros: true })) % s2;
        return (n2 + l2) * a2;
      }
      romanNumeral(e2 = {}) {
        typeof e2 == "number" && (e2 = { max: e2 });
        let { min: a2 = 1, max: n2 = 3999 } = e2;
        if (a2 < 1) throw new m2(`Min value ${a2} should be 1 or greater.`);
        if (n2 > 3999) throw new m2(`Max value ${n2} should be 3999 or less.`);
        let o2 = this.int({ min: a2, max: n2 }), s2 = [["M", 1e3], ["CM", 900], ["D", 500], ["CD", 400], ["C", 100], ["XC", 90], ["L", 50], ["XL", 40], ["X", 10], ["IX", 9], ["V", 5], ["IV", 4], ["I", 1]], l2 = "";
        for (let [c2, u2] of s2) l2 += c2.repeat(Math.floor(o2 / u2)), o2 %= u2;
        return l2;
      }
    };
    Se2 = "0123456789ABCDEFGHJKMNPQRSTVWXYZ";
    Y2 = [..."ABCDEFGHIJKLMNOPQRSTUVWXYZ"];
    Z2 = [..."abcdefghijklmnopqrstuvwxyz"];
    ze2 = [..."0123456789"];
    J2 = class extends x2 {
      fromCharacters(e2, r2 = 1) {
        if (r2 = this.faker.helpers.rangeToNumber(r2), r2 <= 0) return "";
        if (typeof e2 == "string" && (e2 = [...e2]), e2.length === 0) throw new m2("Unable to generate string: No characters to select from.");
        return this.faker.helpers.multiple(() => this.faker.helpers.arrayElement(e2), { count: r2 }).join("");
      }
      alpha(e2 = {}) {
        typeof e2 == "number" && (e2 = { length: e2 });
        let r2 = this.faker.helpers.rangeToNumber(e2.length ?? 1);
        if (r2 <= 0) return "";
        let { casing: t2 = "mixed" } = e2, { exclude: a2 = [] } = e2;
        typeof a2 == "string" && (a2 = [...a2]);
        let n2;
        switch (t2) {
          case "upper": {
            n2 = [...Y2];
            break;
          }
          case "lower": {
            n2 = [...Z2];
            break;
          }
          case "mixed": {
            n2 = [...Z2, ...Y2];
            break;
          }
        }
        return n2 = n2.filter((o2) => !a2.includes(o2)), this.fromCharacters(n2, r2);
      }
      alphanumeric(e2 = {}) {
        typeof e2 == "number" && (e2 = { length: e2 });
        let r2 = this.faker.helpers.rangeToNumber(e2.length ?? 1);
        if (r2 <= 0) return "";
        let { casing: t2 = "mixed" } = e2, { exclude: a2 = [] } = e2;
        typeof a2 == "string" && (a2 = [...a2]);
        let n2 = [...ze2];
        switch (t2) {
          case "upper": {
            n2.push(...Y2);
            break;
          }
          case "lower": {
            n2.push(...Z2);
            break;
          }
          case "mixed": {
            n2.push(...Z2, ...Y2);
            break;
          }
        }
        return n2 = n2.filter((o2) => !a2.includes(o2)), this.fromCharacters(n2, r2);
      }
      binary(e2 = {}) {
        let { prefix: r2 = "0b" } = e2, t2 = r2;
        return t2 += this.fromCharacters(["0", "1"], e2.length ?? 1), t2;
      }
      octal(e2 = {}) {
        let { prefix: r2 = "0o" } = e2, t2 = r2;
        return t2 += this.fromCharacters(["0", "1", "2", "3", "4", "5", "6", "7"], e2.length ?? 1), t2;
      }
      hexadecimal(e2 = {}) {
        let { casing: r2 = "mixed", prefix: t2 = "0x" } = e2, a2 = this.faker.helpers.rangeToNumber(e2.length ?? 1);
        if (a2 <= 0) return t2;
        let n2 = this.fromCharacters(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"], a2);
        return r2 === "upper" ? n2 = n2.toUpperCase() : r2 === "lower" && (n2 = n2.toLowerCase()), `${t2}${n2}`;
      }
      numeric(e2 = {}) {
        typeof e2 == "number" && (e2 = { length: e2 });
        let r2 = this.faker.helpers.rangeToNumber(e2.length ?? 1);
        if (r2 <= 0) return "";
        let { allowLeadingZeros: t2 = true } = e2, { exclude: a2 = [] } = e2;
        typeof a2 == "string" && (a2 = [...a2]);
        let n2 = ze2.filter((s2) => !a2.includes(s2));
        if (n2.length === 0 || n2.length === 1 && !t2 && n2[0] === "0") throw new m2("Unable to generate numeric string, because all possible digits are excluded.");
        let o2 = "";
        return !t2 && !a2.includes("0") && (o2 += this.faker.helpers.arrayElement(n2.filter((s2) => s2 !== "0"))), o2 += this.fromCharacters(n2, r2 - o2.length), o2;
      }
      sample(e2 = 10) {
        e2 = this.faker.helpers.rangeToNumber(e2);
        let r2 = { min: 33, max: 125 }, t2 = "";
        for (; t2.length < e2; ) t2 += String.fromCodePoint(this.faker.number.int(r2));
        return t2;
      }
      uuid() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replaceAll("x", () => this.faker.number.hex({ min: 0, max: 15 })).replaceAll("y", () => this.faker.number.hex({ min: 8, max: 11 }));
      }
      ulid(e2 = {}) {
        let { refDate: r2 = this.faker.defaultRefDate() } = e2, t2 = S2(r2);
        return Ve2(t2) + this.fromCharacters(Se2, 16);
      }
      nanoid(e2 = 21) {
        if (e2 = this.faker.helpers.rangeToNumber(e2), e2 <= 0) return "";
        let r2 = [{ value: () => this.alphanumeric(1), weight: 62 }, { value: () => this.faker.helpers.arrayElement(["_", "-"]), weight: 2 }], t2 = "";
        for (; t2.length < e2; ) {
          let a2 = this.faker.helpers.weightedArrayElement(r2);
          t2 += a2();
        }
        return t2;
      }
      symbol(e2 = 1) {
        return this.fromCharacters(["!", '"', "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "?", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~"], e2);
      }
    };
    $2 = class {
      _defaultRefDate = () => /* @__PURE__ */ new Date();
      get defaultRefDate() {
        return this._defaultRefDate;
      }
      setDefaultRefDate(e2 = () => /* @__PURE__ */ new Date()) {
        typeof e2 == "function" ? this._defaultRefDate = e2 : this._defaultRefDate = () => new Date(e2);
      }
      _randomizer;
      datatype = new K2(this);
      date = new B2(this);
      helpers = new v2(this);
      number = new W2(this);
      string = new J2(this);
      constructor(e2 = {}) {
        let { randomizer: r2, seed: t2 } = e2;
        r2 != null && t2 != null && r2.seed(t2), this._randomizer = r2 ?? Oe2(t2);
      }
      seed(e2 = P2()) {
        return this._randomizer.seed(e2), e2;
      }
    };
    fa2 = new $2();
    X2 = class extends p2 {
      dog() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.dog);
      }
      cat() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.cat);
      }
      snake() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.snake);
      }
      bear() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.bear);
      }
      lion() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.lion);
      }
      cetacean() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.cetacean);
      }
      horse() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.horse);
      }
      bird() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.bird);
      }
      cow() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.cow);
      }
      fish() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.fish);
      }
      crocodilia() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.crocodilia);
      }
      insect() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.insect);
      }
      rabbit() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.rabbit);
      }
      rodent() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.rodent);
      }
      type() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.type);
      }
      petName() {
        return this.faker.helpers.arrayElement(this.faker.definitions.animal.pet_name);
      }
    };
    Q2 = class extends p2 {
      author() {
        return this.faker.helpers.arrayElement(this.faker.definitions.book.author);
      }
      format() {
        return this.faker.helpers.arrayElement(this.faker.definitions.book.format);
      }
      genre() {
        return this.faker.helpers.arrayElement(this.faker.definitions.book.genre);
      }
      publisher() {
        return this.faker.helpers.arrayElement(this.faker.definitions.book.publisher);
      }
      series() {
        return this.faker.helpers.arrayElement(this.faker.definitions.book.series);
      }
      title() {
        return this.faker.helpers.arrayElement(this.faker.definitions.book.title);
      }
    };
    Hr = { 0: [[1999999, 2], [2279999, 3], [2289999, 4], [3689999, 3], [3699999, 4], [6389999, 3], [6397999, 4], [6399999, 7], [6449999, 3], [6459999, 7], [6479999, 3], [6489999, 7], [6549999, 3], [6559999, 4], [6999999, 3], [8499999, 4], [8999999, 5], [9499999, 6], [9999999, 7]], 1: [[99999, 3], [299999, 2], [349999, 3], [399999, 4], [499999, 3], [699999, 2], [999999, 4], [3979999, 3], [5499999, 4], [6499999, 5], [6799999, 4], [6859999, 5], [7139999, 4], [7169999, 3], [7319999, 4], [7399999, 7], [7749999, 5], [7753999, 7], [7763999, 5], [7764999, 7], [7769999, 5], [7782999, 7], [7899999, 5], [7999999, 4], [8004999, 5], [8049999, 5], [8379999, 5], [8384999, 7], [8671999, 5], [8675999, 4], [8697999, 5], [9159999, 6], [9165059, 7], [9168699, 6], [9169079, 7], [9195999, 6], [9196549, 7], [9729999, 6], [9877999, 4], [9911499, 6], [9911999, 7], [9989899, 6], [9999999, 7]] };
    q2 = class extends p2 {
      department() {
        return this.faker.helpers.arrayElement(this.faker.definitions.commerce.department);
      }
      productName() {
        return `${this.productAdjective()} ${this.productMaterial()} ${this.product()}`;
      }
      price(e2 = {}) {
        let { dec: r2 = 2, max: t2 = 1e3, min: a2 = 1, symbol: n2 = "" } = e2;
        if (a2 < 0 || t2 < 0) return `${n2}0`;
        if (a2 === t2) return `${n2}${a2.toFixed(r2)}`;
        let o2 = this.faker.number.float({ min: a2, max: t2, fractionDigits: r2 });
        if (r2 === 0) return `${n2}${o2.toFixed(r2)}`;
        let s2 = o2 * 10 ** r2 % 10, l2 = this.faker.helpers.weightedArrayElement([{ weight: 5, value: 9 }, { weight: 3, value: 5 }, { weight: 1, value: 0 }, { weight: 1, value: this.faker.number.int({ min: 0, max: 9 }) }]), c2 = (1 / 10) ** r2, u2 = s2 * c2, h2 = l2 * c2, f3 = o2 - u2 + h2;
        return a2 <= f3 && f3 <= t2 ? `${n2}${f3.toFixed(r2)}` : `${n2}${o2.toFixed(r2)}`;
      }
      productAdjective() {
        return this.faker.helpers.arrayElement(this.faker.definitions.commerce.product_name.adjective);
      }
      productMaterial() {
        return this.faker.helpers.arrayElement(this.faker.definitions.commerce.product_name.material);
      }
      product() {
        return this.faker.helpers.arrayElement(this.faker.definitions.commerce.product_name.product);
      }
      productDescription() {
        return this.faker.helpers.fake(this.faker.definitions.commerce.product_description);
      }
      isbn(e2 = {}) {
        typeof e2 == "number" && (e2 = { variant: e2 });
        let { variant: r2 = 13, separator: t2 = "-" } = e2, a2 = "978", [n2, o2] = this.faker.helpers.objectEntry(Hr), s2 = this.faker.string.numeric(8), l2 = Number.parseInt(s2.slice(0, -1)), c2 = o2.find(([y2]) => l2 <= y2)?.[1];
        if (!c2) throw new m2(`Unable to find a registrant length for the group ${n2}`);
        let u2 = s2.slice(0, c2), h2 = s2.slice(c2), f3 = [a2, n2, u2, h2];
        r2 === 10 && f3.shift();
        let g2 = f3.join(""), b2 = 0;
        for (let y2 = 0; y2 < r2 - 1; y2++) {
          let N2 = r2 === 10 ? y2 + 1 : y2 % 2 ? 3 : 1;
          b2 += N2 * Number.parseInt(g2[y2]);
        }
        return b2 = r2 === 10 ? b2 % 11 : (10 - b2 % 10) % 10, f3.push(b2 === 10 ? "X" : b2.toString()), f3.join(t2);
      }
    };
    ee2 = class extends p2 {
      name() {
        return this.faker.helpers.fake(this.faker.definitions.company.name_pattern);
      }
      catchPhrase() {
        return [this.catchPhraseAdjective(), this.catchPhraseDescriptor(), this.catchPhraseNoun()].join(" ");
      }
      buzzPhrase() {
        return [this.buzzVerb(), this.buzzAdjective(), this.buzzNoun()].join(" ");
      }
      catchPhraseAdjective() {
        return this.faker.helpers.arrayElement(this.faker.definitions.company.adjective);
      }
      catchPhraseDescriptor() {
        return this.faker.helpers.arrayElement(this.faker.definitions.company.descriptor);
      }
      catchPhraseNoun() {
        return this.faker.helpers.arrayElement(this.faker.definitions.company.noun);
      }
      buzzAdjective() {
        return this.faker.helpers.arrayElement(this.faker.definitions.company.buzz_adjective);
      }
      buzzVerb() {
        return this.faker.helpers.arrayElement(this.faker.definitions.company.buzz_verb);
      }
      buzzNoun() {
        return this.faker.helpers.arrayElement(this.faker.definitions.company.buzz_noun);
      }
    };
    re2 = class extends p2 {
      column() {
        return this.faker.helpers.arrayElement(this.faker.definitions.database.column);
      }
      type() {
        return this.faker.helpers.arrayElement(this.faker.definitions.database.type);
      }
      collation() {
        return this.faker.helpers.arrayElement(this.faker.definitions.database.collation);
      }
      engine() {
        return this.faker.helpers.arrayElement(this.faker.definitions.database.engine);
      }
      mongodbObjectId() {
        return this.faker.string.hexadecimal({ length: 24, casing: "lower", prefix: "" });
      }
    };
    Vr = { alpha: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"], formats: [{ country: "AL", total: 28, bban: [{ type: "n", count: 8 }, { type: "c", count: 16 }], format: "ALkk bbbs sssx cccc cccc cccc cccc" }, { country: "AD", total: 24, bban: [{ type: "n", count: 8 }, { type: "c", count: 12 }], format: "ADkk bbbb ssss cccc cccc cccc" }, { country: "AT", total: 20, bban: [{ type: "n", count: 5 }, { type: "n", count: 11 }], format: "ATkk bbbb bccc cccc cccc" }, { country: "AZ", total: 28, bban: [{ type: "a", count: 4 }, { type: "n", count: 20 }], format: "AZkk bbbb cccc cccc cccc cccc cccc" }, { country: "BH", total: 22, bban: [{ type: "a", count: 4 }, { type: "c", count: 14 }], format: "BHkk bbbb cccc cccc cccc cc" }, { country: "BE", total: 16, bban: [{ type: "n", count: 3 }, { type: "n", count: 9 }], format: "BEkk bbbc cccc ccxx" }, { country: "BA", total: 20, bban: [{ type: "n", count: 6 }, { type: "n", count: 10 }], format: "BAkk bbbs sscc cccc ccxx" }, { country: "BR", total: 29, bban: [{ type: "n", count: 13 }, { type: "n", count: 10 }, { type: "a", count: 1 }, { type: "c", count: 1 }], format: "BRkk bbbb bbbb ssss sccc cccc ccct n" }, { country: "BG", total: 22, bban: [{ type: "a", count: 4 }, { type: "n", count: 6 }, { type: "c", count: 8 }], format: "BGkk bbbb ssss ddcc cccc cc" }, { country: "CR", total: 22, bban: [{ type: "n", count: 1 }, { type: "n", count: 3 }, { type: "n", count: 14 }], format: "CRkk xbbb cccc cccc cccc cc" }, { country: "HR", total: 21, bban: [{ type: "n", count: 7 }, { type: "n", count: 10 }], format: "HRkk bbbb bbbc cccc cccc c" }, { country: "CY", total: 28, bban: [{ type: "n", count: 8 }, { type: "c", count: 16 }], format: "CYkk bbbs ssss cccc cccc cccc cccc" }, { country: "CZ", total: 24, bban: [{ type: "n", count: 10 }, { type: "n", count: 10 }], format: "CZkk bbbb ssss sscc cccc cccc" }, { country: "DK", total: 18, bban: [{ type: "n", count: 4 }, { type: "n", count: 10 }], format: "DKkk bbbb cccc cccc cc" }, { country: "DO", total: 28, bban: [{ type: "a", count: 4 }, { type: "n", count: 20 }], format: "DOkk bbbb cccc cccc cccc cccc cccc" }, { country: "TL", total: 23, bban: [{ type: "n", count: 3 }, { type: "n", count: 16 }], format: "TLkk bbbc cccc cccc cccc cxx" }, { country: "EE", total: 20, bban: [{ type: "n", count: 4 }, { type: "n", count: 12 }], format: "EEkk bbss cccc cccc cccx" }, { country: "FO", total: 18, bban: [{ type: "n", count: 4 }, { type: "n", count: 10 }], format: "FOkk bbbb cccc cccc cx" }, { country: "FI", total: 18, bban: [{ type: "n", count: 6 }, { type: "n", count: 8 }], format: "FIkk bbbb bbcc cccc cx" }, { country: "FR", total: 27, bban: [{ type: "n", count: 10 }, { type: "c", count: 11 }, { type: "n", count: 2 }], format: "FRkk bbbb bggg ggcc cccc cccc cxx" }, { country: "GE", total: 22, bban: [{ type: "a", count: 2 }, { type: "n", count: 16 }], format: "GEkk bbcc cccc cccc cccc cc" }, { country: "DE", total: 22, bban: [{ type: "n", count: 8 }, { type: "n", count: 10 }], format: "DEkk bbbb bbbb cccc cccc cc" }, { country: "GI", total: 23, bban: [{ type: "a", count: 4 }, { type: "c", count: 15 }], format: "GIkk bbbb cccc cccc cccc ccc" }, { country: "GR", total: 27, bban: [{ type: "n", count: 7 }, { type: "c", count: 16 }], format: "GRkk bbbs sssc cccc cccc cccc ccc" }, { country: "GL", total: 18, bban: [{ type: "n", count: 4 }, { type: "n", count: 10 }], format: "GLkk bbbb cccc cccc cc" }, { country: "GT", total: 28, bban: [{ type: "c", count: 4 }, { type: "c", count: 4 }, { type: "c", count: 16 }], format: "GTkk bbbb mmtt cccc cccc cccc cccc" }, { country: "HU", total: 28, bban: [{ type: "n", count: 8 }, { type: "n", count: 16 }], format: "HUkk bbbs sssk cccc cccc cccc cccx" }, { country: "IS", total: 26, bban: [{ type: "n", count: 6 }, { type: "n", count: 16 }], format: "ISkk bbbb sscc cccc iiii iiii ii" }, { country: "IE", total: 22, bban: [{ type: "a", count: 4 }, { type: "n", count: 6 }, { type: "n", count: 8 }], format: "IEkk aaaa bbbb bbcc cccc cc" }, { country: "IL", total: 23, bban: [{ type: "n", count: 6 }, { type: "n", count: 13 }], format: "ILkk bbbn nncc cccc cccc ccc" }, { country: "IT", total: 27, bban: [{ type: "a", count: 1 }, { type: "n", count: 10 }, { type: "c", count: 12 }], format: "ITkk xaaa aabb bbbc cccc cccc ccc" }, { country: "JO", total: 30, bban: [{ type: "a", count: 4 }, { type: "n", count: 4 }, { type: "n", count: 18 }], format: "JOkk bbbb nnnn cccc cccc cccc cccc cc" }, { country: "KZ", total: 20, bban: [{ type: "n", count: 3 }, { type: "c", count: 13 }], format: "KZkk bbbc cccc cccc cccc" }, { country: "XK", total: 20, bban: [{ type: "n", count: 4 }, { type: "n", count: 12 }], format: "XKkk bbbb cccc cccc cccc" }, { country: "KW", total: 30, bban: [{ type: "a", count: 4 }, { type: "c", count: 22 }], format: "KWkk bbbb cccc cccc cccc cccc cccc cc" }, { country: "LV", total: 21, bban: [{ type: "a", count: 4 }, { type: "c", count: 13 }], format: "LVkk bbbb cccc cccc cccc c" }, { country: "LB", total: 28, bban: [{ type: "n", count: 4 }, { type: "c", count: 20 }], format: "LBkk bbbb cccc cccc cccc cccc cccc" }, { country: "LI", total: 21, bban: [{ type: "n", count: 5 }, { type: "c", count: 12 }], format: "LIkk bbbb bccc cccc cccc c" }, { country: "LT", total: 20, bban: [{ type: "n", count: 5 }, { type: "n", count: 11 }], format: "LTkk bbbb bccc cccc cccc" }, { country: "LU", total: 20, bban: [{ type: "n", count: 3 }, { type: "c", count: 13 }], format: "LUkk bbbc cccc cccc cccc" }, { country: "MK", total: 19, bban: [{ type: "n", count: 3 }, { type: "c", count: 10 }, { type: "n", count: 2 }], format: "MKkk bbbc cccc cccc cxx" }, { country: "MT", total: 31, bban: [{ type: "a", count: 4 }, { type: "n", count: 5 }, { type: "c", count: 18 }], format: "MTkk bbbb ssss sccc cccc cccc cccc ccc" }, { country: "MR", total: 27, bban: [{ type: "n", count: 10 }, { type: "n", count: 13 }], format: "MRkk bbbb bsss sscc cccc cccc cxx" }, { country: "MU", total: 30, bban: [{ type: "a", count: 4 }, { type: "n", count: 4 }, { type: "n", count: 15 }, { type: "a", count: 3 }], format: "MUkk bbbb bbss cccc cccc cccc 000d dd" }, { country: "MC", total: 27, bban: [{ type: "n", count: 10 }, { type: "c", count: 11 }, { type: "n", count: 2 }], format: "MCkk bbbb bsss sscc cccc cccc cxx" }, { country: "MD", total: 24, bban: [{ type: "c", count: 2 }, { type: "c", count: 18 }], format: "MDkk bbcc cccc cccc cccc cccc" }, { country: "ME", total: 22, bban: [{ type: "n", count: 3 }, { type: "n", count: 15 }], format: "MEkk bbbc cccc cccc cccc xx" }, { country: "NL", total: 18, bban: [{ type: "a", count: 4 }, { type: "n", count: 10 }], format: "NLkk bbbb cccc cccc cc" }, { country: "NO", total: 15, bban: [{ type: "n", count: 4 }, { type: "n", count: 7 }], format: "NOkk bbbb cccc ccx" }, { country: "PK", total: 24, bban: [{ type: "a", count: 4 }, { type: "n", count: 16 }], format: "PKkk bbbb cccc cccc cccc cccc" }, { country: "PS", total: 29, bban: [{ type: "a", count: 4 }, { type: "n", count: 9 }, { type: "n", count: 12 }], format: "PSkk bbbb xxxx xxxx xccc cccc cccc c" }, { country: "PL", total: 28, bban: [{ type: "n", count: 8 }, { type: "n", count: 16 }], format: "PLkk bbbs sssx cccc cccc cccc cccc" }, { country: "PT", total: 25, bban: [{ type: "n", count: 8 }, { type: "n", count: 13 }], format: "PTkk bbbb ssss cccc cccc cccx x" }, { country: "QA", total: 29, bban: [{ type: "a", count: 4 }, { type: "c", count: 21 }], format: "QAkk bbbb cccc cccc cccc cccc cccc c" }, { country: "RO", total: 24, bban: [{ type: "a", count: 4 }, { type: "c", count: 16 }], format: "ROkk bbbb cccc cccc cccc cccc" }, { country: "SM", total: 27, bban: [{ type: "a", count: 1 }, { type: "n", count: 10 }, { type: "c", count: 12 }], format: "SMkk xaaa aabb bbbc cccc cccc ccc" }, { country: "SA", total: 24, bban: [{ type: "n", count: 2 }, { type: "c", count: 18 }], format: "SAkk bbcc cccc cccc cccc cccc" }, { country: "RS", total: 22, bban: [{ type: "n", count: 3 }, { type: "n", count: 15 }], format: "RSkk bbbc cccc cccc cccc xx" }, { country: "SK", total: 24, bban: [{ type: "n", count: 10 }, { type: "n", count: 10 }], format: "SKkk bbbb ssss sscc cccc cccc" }, { country: "SI", total: 19, bban: [{ type: "n", count: 5 }, { type: "n", count: 10 }], format: "SIkk bbss sccc cccc cxx" }, { country: "ES", total: 24, bban: [{ type: "n", count: 10 }, { type: "n", count: 10 }], format: "ESkk bbbb gggg xxcc cccc cccc" }, { country: "SE", total: 24, bban: [{ type: "n", count: 3 }, { type: "n", count: 17 }], format: "SEkk bbbc cccc cccc cccc cccc" }, { country: "CH", total: 21, bban: [{ type: "n", count: 5 }, { type: "c", count: 12 }], format: "CHkk bbbb bccc cccc cccc c" }, { country: "TN", total: 24, bban: [{ type: "n", count: 5 }, { type: "n", count: 15 }], format: "TNkk bbss sccc cccc cccc cccc" }, { country: "TR", total: 26, bban: [{ type: "n", count: 5 }, { type: "n", count: 1 }, { type: "n", count: 16 }], format: "TRkk bbbb bxcc cccc cccc cccc cc" }, { country: "AE", total: 23, bban: [{ type: "n", count: 3 }, { type: "n", count: 16 }], format: "AEkk bbbc cccc cccc cccc ccc" }, { country: "GB", total: 22, bban: [{ type: "a", count: 4 }, { type: "n", count: 6 }, { type: "n", count: 8 }], format: "GBkk bbbb ssss sscc cccc cc" }, { country: "VG", total: 24, bban: [{ type: "a", count: 4 }, { type: "n", count: 16 }], format: "VGkk bbbb cccc cccc cccc cccc" }], iso3166: ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "XK", "YE", "YT", "ZA", "ZM", "ZW"], mod97: (i2) => {
      let e2 = 0;
      for (let r2 of i2) e2 = (e2 * 10 + +r2) % 97;
      return e2;
    }, pattern10: ["01", "02", "03", "04", "05", "06", "07", "08", "09"], pattern100: ["001", "002", "003", "004", "005", "006", "007", "008", "009"], toDigitString: (i2) => i2.replaceAll(/[A-Z]/gi, (e2) => String((e2.toUpperCase().codePointAt(0) ?? Number.NaN) - 55)) };
    M2 = Vr;
    te2 = class extends p2 {
      accountNumber(e2 = {}) {
        typeof e2 == "number" && (e2 = { length: e2 });
        let { length: r2 = 8 } = e2;
        return this.faker.string.numeric({ length: r2, allowLeadingZeros: true });
      }
      accountName() {
        return [this.faker.helpers.arrayElement(this.faker.definitions.finance.account_type), "Account"].join(" ");
      }
      routingNumber() {
        let e2 = this.faker.string.numeric({ length: 8, allowLeadingZeros: true }), r2 = 0;
        for (let t2 = 0; t2 < e2.length; t2 += 3) r2 += Number(e2[t2]) * 3, r2 += Number(e2[t2 + 1]) * 7, r2 += Number(e2[t2 + 2]) || 0;
        return `${e2}${Math.ceil(r2 / 10) * 10 - r2}`;
      }
      maskedNumber(e2 = {}) {
        w2({ deprecated: "faker.finance.maskedNumber()", proposed: "faker.finance.iban().replace(/(?<=.{4})\\w(?=.{2})/g, '*') or a similar approach", since: "9.3.0", until: "10.0.0" }), typeof e2 == "number" && (e2 = { length: e2 });
        let { ellipsis: r2 = true, length: t2 = 4, parens: a2 = true } = e2, n2 = this.faker.string.numeric({ length: t2 });
        return r2 && (n2 = `...${n2}`), a2 && (n2 = `(${n2})`), n2;
      }
      amount(e2 = {}) {
        let { autoFormat: r2 = false, dec: t2 = 2, max: a2 = 1e3, min: n2 = 0, symbol: o2 = "" } = e2, s2 = this.faker.number.float({ max: a2, min: n2, fractionDigits: t2 }), l2 = r2 ? s2.toLocaleString(void 0, { minimumFractionDigits: t2 }) : s2.toFixed(t2);
        return o2 + l2;
      }
      transactionType() {
        return this.faker.helpers.arrayElement(this.faker.definitions.finance.transaction_type);
      }
      currency() {
        return this.faker.helpers.arrayElement(this.faker.definitions.finance.currency);
      }
      currencyCode() {
        return this.currency().code;
      }
      currencyName() {
        return this.currency().name;
      }
      currencySymbol() {
        let e2;
        do
          e2 = this.currency().symbol;
        while (e2.length === 0);
        return e2;
      }
      currencyNumericCode() {
        return this.currency().numericCode;
      }
      bitcoinAddress(e2 = {}) {
        let { type: r2 = this.faker.helpers.enumValue(be2), network: t2 = "mainnet" } = e2, a2 = Be2[r2], n2 = a2.prefix[t2], o2 = this.faker.number.int(a2.length), s2 = this.faker.string.alphanumeric({ length: o2 - n2.length, casing: a2.casing, exclude: a2.exclude });
        return n2 + s2;
      }
      litecoinAddress() {
        let e2 = this.faker.number.int({ min: 26, max: 33 });
        return this.faker.string.fromCharacters("LM3") + this.faker.string.fromCharacters("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ", e2 - 1);
      }
      creditCardNumber(e2 = {}) {
        typeof e2 == "string" && (e2 = { issuer: e2 });
        let { issuer: r2 = "" } = e2, t2, a2 = this.faker.definitions.finance.credit_card, n2 = r2.toLowerCase();
        if (n2 in a2) t2 = this.faker.helpers.arrayElement(a2[n2]);
        else if (r2.includes("#")) t2 = r2;
        else {
          let o2 = this.faker.helpers.objectValue(a2);
          t2 = this.faker.helpers.arrayElement(o2);
        }
        return t2 = t2.replaceAll("/", ""), this.faker.helpers.replaceCreditCardSymbols(t2);
      }
      creditCardCVV() {
        return this.faker.string.numeric({ length: 3, allowLeadingZeros: true });
      }
      creditCardIssuer() {
        return this.faker.helpers.objectKey(this.faker.definitions.finance.credit_card);
      }
      pin(e2 = {}) {
        typeof e2 == "number" && (e2 = { length: e2 });
        let { length: r2 = 4 } = e2;
        if (r2 < 1) throw new m2("minimum length is 1");
        return this.faker.string.numeric({ length: r2, allowLeadingZeros: true });
      }
      ethereumAddress() {
        return this.faker.string.hexadecimal({ length: 40, casing: "lower" });
      }
      iban(e2 = {}) {
        let { countryCode: r2, formatted: t2 = false } = e2, a2 = r2 ? M2.formats.find((c2) => c2.country === r2) : this.faker.helpers.arrayElement(M2.formats);
        if (!a2) throw new m2(`Country code ${r2} not supported.`);
        let n2 = "", o2 = 0;
        for (let c2 of a2.bban) {
          let u2 = c2.count;
          for (o2 += c2.count; u2 > 0; ) c2.type === "a" ? n2 += this.faker.helpers.arrayElement(M2.alpha) : c2.type === "c" ? this.faker.datatype.boolean(0.8) ? n2 += this.faker.number.int(9) : n2 += this.faker.helpers.arrayElement(M2.alpha) : u2 >= 3 && this.faker.datatype.boolean(0.3) ? this.faker.datatype.boolean() ? (n2 += this.faker.helpers.arrayElement(M2.pattern100), u2 -= 2) : (n2 += this.faker.helpers.arrayElement(M2.pattern10), u2--) : n2 += this.faker.number.int(9), u2--;
          n2 = n2.substring(0, o2);
        }
        let s2 = 98 - M2.mod97(M2.toDigitString(`${n2}${a2.country}00`));
        s2 < 10 && (s2 = `0${s2}`);
        let l2 = `${a2.country}${s2}${n2}`;
        return t2 ? zr(l2) : l2;
      }
      bic(e2 = {}) {
        let { includeBranchCode: r2 = this.faker.datatype.boolean() } = e2, t2 = this.faker.string.alpha({ length: 4, casing: "upper" }), a2 = this.faker.helpers.arrayElement(M2.iso3166), n2 = this.faker.string.alphanumeric({ length: 2, casing: "upper" }), o2 = r2 ? this.faker.datatype.boolean() ? this.faker.string.alphanumeric({ length: 3, casing: "upper" }) : "XXX" : "";
        return `${t2}${a2}${n2}${o2}`;
      }
      transactionDescription() {
        return this.faker.helpers.fake(this.faker.definitions.finance.transaction_description_pattern);
      }
    };
    ae2 = class extends p2 {
      adjective() {
        return this.faker.helpers.arrayElement(this.faker.definitions.food.adjective);
      }
      description() {
        return this.faker.helpers.fake(this.faker.definitions.food.description_pattern);
      }
      dish() {
        return this.faker.datatype.boolean() ? Ye2(this.faker.helpers.fake(this.faker.definitions.food.dish_pattern)) : Ye2(this.faker.helpers.arrayElement(this.faker.definitions.food.dish));
      }
      ethnicCategory() {
        return this.faker.helpers.arrayElement(this.faker.definitions.food.ethnic_category);
      }
      fruit() {
        return this.faker.helpers.arrayElement(this.faker.definitions.food.fruit);
      }
      ingredient() {
        return this.faker.helpers.arrayElement(this.faker.definitions.food.ingredient);
      }
      meat() {
        return this.faker.helpers.arrayElement(this.faker.definitions.food.meat);
      }
      spice() {
        return this.faker.helpers.arrayElement(this.faker.definitions.food.spice);
      }
      vegetable() {
        return this.faker.helpers.arrayElement(this.faker.definitions.food.vegetable);
      }
    };
    Wr = "\xA0";
    ne2 = class extends p2 {
      branch() {
        let e2 = this.faker.hacker.noun().replace(" ", "-"), r2 = this.faker.hacker.verb().replace(" ", "-");
        return `${e2}-${r2}`;
      }
      commitEntry(e2 = {}) {
        let { merge: r2 = this.faker.datatype.boolean({ probability: 0.2 }), eol: t2 = "CRLF", refDate: a2 } = e2, n2 = [`commit ${this.faker.git.commitSha()}`];
        r2 && n2.push(`Merge: ${this.commitSha({ length: 7 })} ${this.commitSha({ length: 7 })}`);
        let o2 = this.faker.person.firstName(), s2 = this.faker.person.lastName(), l2 = this.faker.person.fullName({ firstName: o2, lastName: s2 }), c2 = this.faker.internet.username({ firstName: o2, lastName: s2 }), u2 = this.faker.helpers.arrayElement([l2, c2]), h2 = this.faker.internet.email({ firstName: o2, lastName: s2 });
        u2 = u2.replaceAll(/^[.,:;"\\']|[<>\n]|[.,:;"\\']$/g, ""), n2.push(`Author: ${u2} <${h2}>`, `Date: ${this.commitDate({ refDate: a2 })}`, "", `${Wr.repeat(4)}${this.commitMessage()}`, "");
        let f3 = t2 === "CRLF" ? `\r
` : `
`;
        return n2.join(f3);
      }
      commitMessage() {
        return `${this.faker.hacker.verb()} ${this.faker.hacker.adjective()} ${this.faker.hacker.noun()}`;
      }
      commitDate(e2 = {}) {
        let { refDate: r2 = this.faker.defaultRefDate() } = e2, t2 = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], a2 = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], n2 = this.faker.date.recent({ days: 1, refDate: r2 }), o2 = t2[n2.getUTCDay()], s2 = a2[n2.getUTCMonth()], l2 = n2.getUTCDate(), c2 = n2.getUTCHours().toString().padStart(2, "0"), u2 = n2.getUTCMinutes().toString().padStart(2, "0"), h2 = n2.getUTCSeconds().toString().padStart(2, "0"), f3 = n2.getUTCFullYear(), g2 = this.faker.number.int({ min: -11, max: 12 }), b2 = Math.abs(g2).toString().padStart(2, "0"), y2 = "00", N2 = g2 >= 0 ? "+" : "-";
        return `${o2} ${s2} ${l2} ${c2}:${u2}:${h2} ${f3} ${N2}${b2}${y2}`;
      }
      commitSha(e2 = {}) {
        let { length: r2 = 40 } = e2;
        return this.faker.string.hexadecimal({ length: r2, casing: "lower", prefix: "" });
      }
    };
    ie2 = class extends p2 {
      abbreviation() {
        return this.faker.helpers.arrayElement(this.faker.definitions.hacker.abbreviation);
      }
      adjective() {
        return this.faker.helpers.arrayElement(this.faker.definitions.hacker.adjective);
      }
      noun() {
        return this.faker.helpers.arrayElement(this.faker.definitions.hacker.noun);
      }
      verb() {
        return this.faker.helpers.arrayElement(this.faker.definitions.hacker.verb);
      }
      ingverb() {
        return this.faker.helpers.arrayElement(this.faker.definitions.hacker.ingverb);
      }
      phrase() {
        let e2 = { abbreviation: this.abbreviation, adjective: this.adjective, ingverb: this.ingverb, noun: this.noun, verb: this.verb }, r2 = this.faker.helpers.arrayElement(this.faker.definitions.hacker.phrase);
        return this.faker.helpers.mustache(r2, e2);
      }
    };
    oe2 = class extends p2 {
      avatar() {
        return this.faker.helpers.arrayElement([this.personPortrait, this.avatarGitHub])();
      }
      avatarGitHub() {
        return `https://avatars.githubusercontent.com/u/${this.faker.number.int(1e8)}`;
      }
      personPortrait(e2 = {}) {
        let { sex: r2 = this.faker.person.sexType(), size: t2 = 512 } = e2;
        return `https://cdn.jsdelivr.net/gh/faker-js/assets-person-portrait/${r2}/${t2}/${this.faker.number.int({ min: 0, max: 99 })}.jpg`;
      }
      avatarLegacy() {
        return w2({ deprecated: "faker.image.avatarLegacy()", proposed: "faker.image.avatar() or faker.image.personPortrait()", since: "9.0.2", until: "10.0.0" }), `https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/${this.faker.number.int(1249)}.jpg`;
      }
      url(e2 = {}) {
        let { width: r2 = this.faker.number.int({ min: 1, max: 3999 }), height: t2 = this.faker.number.int({ min: 1, max: 3999 }) } = e2;
        return this.faker.helpers.arrayElement([this.urlLoremFlickr, ({ width: n2, height: o2 }) => this.urlPicsumPhotos({ width: n2, height: o2, grayscale: false, blur: 0 })])({ width: r2, height: t2 });
      }
      urlLoremFlickr(e2 = {}) {
        let { width: r2 = this.faker.number.int({ min: 1, max: 3999 }), height: t2 = this.faker.number.int({ min: 1, max: 3999 }), category: a2 } = e2;
        return `https://loremflickr.com/${r2}/${t2}${a2 == null ? "" : `/${a2}`}?lock=${this.faker.number.int()}`;
      }
      urlPicsumPhotos(e2 = {}) {
        let { width: r2 = this.faker.number.int({ min: 1, max: 3999 }), height: t2 = this.faker.number.int({ min: 1, max: 3999 }), grayscale: a2 = this.faker.datatype.boolean(), blur: n2 = this.faker.number.int({ max: 10 }) } = e2, o2 = `https://picsum.photos/seed/${this.faker.string.alphanumeric({ length: { min: 5, max: 10 } })}/${r2}/${t2}`, s2 = typeof n2 == "number" && n2 >= 1 && n2 <= 10;
        return (a2 || s2) && (o2 += "?", a2 && (o2 += "grayscale"), a2 && s2 && (o2 += "&"), s2 && (o2 += `blur=${n2}`)), o2;
      }
      urlPlaceholder(e2 = {}) {
        w2({ deprecated: "faker.image.urlPlaceholder()", proposed: "faker.image.url() or faker.image.dataUri()", since: "9.4.0", until: "10.0.0" });
        let { width: r2 = this.faker.number.int({ min: 1, max: 3500 }), height: t2 = this.faker.number.int({ min: 1, max: 3500 }), backgroundColor: a2 = this.faker.color.rgb({ format: "hex", prefix: "" }), textColor: n2 = this.faker.color.rgb({ format: "hex", prefix: "" }), format: o2 = this.faker.helpers.arrayElement(["gif", "jpeg", "jpg", "png", "webp"]), text: s2 = this.faker.lorem.words() } = e2, l2 = "https://via.placeholder.com";
        return l2 += `/${r2}`, l2 += `x${t2}`, l2 += `/${a2}`, l2 += `/${n2}`, l2 += `.${o2}`, l2 += `?text=${encodeURIComponent(s2)}`, l2;
      }
      dataUri(e2 = {}) {
        let { width: r2 = this.faker.number.int({ min: 1, max: 3999 }), height: t2 = this.faker.number.int({ min: 1, max: 3999 }), color: a2 = this.faker.color.rgb(), type: n2 = this.faker.helpers.arrayElement(["svg-uri", "svg-base64"]) } = e2, o2 = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full" width="${r2}" height="${t2}"><rect width="100%" height="100%" fill="${a2}"/><text x="${r2 / 2}" y="${t2 / 2}" font-size="20" alignment-baseline="middle" text-anchor="middle" fill="white">${r2}x${t2}</text></svg>`;
        return n2 === "svg-uri" ? `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(o2)}` : `data:image/svg+xml;base64,${de2(o2)}`;
      }
    };
    se2 = class extends p2 {
      zipCode(e2 = {}) {
        typeof e2 == "string" && (e2 = { format: e2 });
        let { state: r2 } = e2;
        if (r2 != null) {
          let a2 = this.faker.definitions.location.postcode_by_state[r2];
          if (a2 == null) throw new m2(`No zip code definition found for state "${r2}"`);
          return this.faker.helpers.fake(a2);
        }
        let { format: t2 = this.faker.definitions.location.postcode } = e2;
        return typeof t2 == "string" && (t2 = [t2]), t2 = this.faker.helpers.arrayElement(t2), this.faker.helpers.replaceSymbols(t2);
      }
      city() {
        return this.faker.helpers.fake(this.faker.definitions.location.city_pattern);
      }
      buildingNumber() {
        return this.faker.helpers.arrayElement(this.faker.definitions.location.building_number).replaceAll(/#+/g, (e2) => this.faker.string.numeric({ length: e2.length, allowLeadingZeros: false }));
      }
      street() {
        return this.faker.helpers.fake(this.faker.definitions.location.street_pattern);
      }
      streetAddress(e2 = {}) {
        typeof e2 == "boolean" && (e2 = { useFullAddress: e2 });
        let { useFullAddress: r2 } = e2, a2 = this.faker.definitions.location.street_address[r2 ? "full" : "normal"];
        return this.faker.helpers.fake(a2);
      }
      secondaryAddress() {
        return this.faker.helpers.fake(this.faker.definitions.location.secondary_address).replaceAll(/#+/g, (e2) => this.faker.string.numeric({ length: e2.length, allowLeadingZeros: false }));
      }
      county() {
        return this.faker.helpers.arrayElement(this.faker.definitions.location.county);
      }
      country() {
        return this.faker.helpers.arrayElement(this.faker.definitions.location.country);
      }
      continent() {
        return this.faker.helpers.arrayElement(this.faker.definitions.location.continent);
      }
      countryCode(e2 = {}) {
        typeof e2 == "string" && (e2 = { variant: e2 });
        let { variant: r2 = "alpha-2" } = e2, t2 = (() => {
          switch (r2) {
            case "numeric":
              return "numeric";
            case "alpha-3":
              return "alpha3";
            case "alpha-2":
              return "alpha2";
          }
        })();
        return this.faker.helpers.arrayElement(this.faker.definitions.location.country_code)[t2];
      }
      state(e2 = {}) {
        let { abbreviated: r2 = false } = e2, t2 = r2 ? this.faker.definitions.location.state_abbr : this.faker.definitions.location.state;
        return this.faker.helpers.arrayElement(t2);
      }
      latitude(e2 = {}) {
        let { max: r2 = 90, min: t2 = -90, precision: a2 = 4 } = e2;
        return this.faker.number.float({ min: t2, max: r2, fractionDigits: a2 });
      }
      longitude(e2 = {}) {
        let { max: r2 = 180, min: t2 = -180, precision: a2 = 4 } = e2;
        return this.faker.number.float({ max: r2, min: t2, fractionDigits: a2 });
      }
      direction(e2 = {}) {
        let { abbreviated: r2 = false } = e2;
        return r2 ? this.faker.helpers.arrayElement([...this.faker.definitions.location.direction.cardinal_abbr, ...this.faker.definitions.location.direction.ordinal_abbr]) : this.faker.helpers.arrayElement([...this.faker.definitions.location.direction.cardinal, ...this.faker.definitions.location.direction.ordinal]);
      }
      cardinalDirection(e2 = {}) {
        let { abbreviated: r2 = false } = e2;
        return r2 ? this.faker.helpers.arrayElement(this.faker.definitions.location.direction.cardinal_abbr) : this.faker.helpers.arrayElement(this.faker.definitions.location.direction.cardinal);
      }
      ordinalDirection(e2 = {}) {
        let { abbreviated: r2 = false } = e2;
        return r2 ? this.faker.helpers.arrayElement(this.faker.definitions.location.direction.ordinal_abbr) : this.faker.helpers.arrayElement(this.faker.definitions.location.direction.ordinal);
      }
      nearbyGPSCoordinate(e2 = {}) {
        let { origin: r2, radius: t2 = 10, isMetric: a2 = false } = e2;
        if (r2 == null) return [this.latitude(), this.longitude()];
        let n2 = this.faker.number.float({ max: 2 * Math.PI, fractionDigits: 5 }), o2 = a2 ? t2 : t2 * 1.60934, l2 = this.faker.number.float({ max: o2, fractionDigits: 3 }) * 0.995, c2 = 4e4 / 360, u2 = l2 / c2, h2 = [r2[0] + Math.sin(n2) * u2, r2[1] + Math.cos(n2) * u2];
        return h2[0] = h2[0] % 180, (h2[0] < -90 || h2[0] > 90) && (h2[0] = Math.sign(h2[0]) * 180 - h2[0], h2[1] += 180), h2[1] = (h2[1] % 360 + 540) % 360 - 180, [h2[0], h2[1]];
      }
      timeZone() {
        return this.faker.helpers.arrayElement(this.faker.definitions.location.time_zone);
      }
      language() {
        return this.faker.helpers.arrayElement(this.faker.definitions.location.language);
      }
    };
    Me2 = { fail: () => {
      throw new m2("No words found that match the given length.");
    }, closest: (i2, e2) => {
      let r2 = Ze2(i2, (s2) => s2.length), t2 = Object.keys(r2).map(Number), a2 = Math.min(...t2), n2 = Math.max(...t2), o2 = Math.min(e2.min - a2, n2 - e2.max);
      return i2.filter((s2) => s2.length === e2.min - o2 || s2.length === e2.max + o2);
    }, shortest: (i2) => {
      let e2 = Math.min(...i2.map((r2) => r2.length));
      return i2.filter((r2) => r2.length === e2);
    }, longest: (i2) => {
      let e2 = Math.max(...i2.map((r2) => r2.length));
      return i2.filter((r2) => r2.length === e2);
    }, "any-length": (i2) => [...i2] };
    ce2 = class extends p2 {
      word(e2 = {}) {
        return typeof e2 == "number" && (e2 = { length: e2 }), this.faker.helpers.arrayElement(T2({ ...e2, wordList: this.faker.definitions.lorem.word }));
      }
      words(e2 = 3) {
        return this.faker.helpers.multiple(() => this.word(), { count: e2 }).join(" ");
      }
      sentence(e2 = { min: 3, max: 10 }) {
        let r2 = this.words(e2);
        return `${r2.charAt(0).toUpperCase() + r2.substring(1)}.`;
      }
      slug(e2 = 3) {
        let r2 = this.words(e2);
        return this.faker.helpers.slugify(r2);
      }
      sentences(e2 = { min: 2, max: 6 }, r2 = " ") {
        return this.faker.helpers.multiple(() => this.sentence(), { count: e2 }).join(r2);
      }
      paragraph(e2 = 3) {
        return this.sentences(e2);
      }
      paragraphs(e2 = 3, r2 = `
`) {
        return this.faker.helpers.multiple(() => this.paragraph(), { count: e2 }).join(r2);
      }
      text() {
        let e2 = ["sentence", "sentences", "paragraph", "paragraphs", "lines"], r2 = this.faker.helpers.arrayElement(e2);
        return this[r2]();
      }
      lines(e2 = { min: 1, max: 5 }) {
        return this.sentences(e2, `
`);
      }
    };
    le2 = class extends p2 {
      album() {
        return this.faker.helpers.arrayElement(this.faker.definitions.music.album);
      }
      artist() {
        return this.faker.helpers.arrayElement(this.faker.definitions.music.artist);
      }
      genre() {
        return this.faker.helpers.arrayElement(this.faker.definitions.music.genre);
      }
      songName() {
        return this.faker.helpers.arrayElement(this.faker.definitions.music.song_name);
      }
    };
    me2 = class extends p2 {
      number(e2 = {}) {
        let { style: r2 = "human" } = e2, a2 = this.faker.definitions.phone_number.format[r2];
        if (!a2) throw new Error(`No definitions for ${r2} in this locale`);
        let n2 = this.faker.helpers.arrayElement(a2);
        return we2(this.faker, n2);
      }
      imei() {
        return this.faker.helpers.replaceCreditCardSymbols("##-######-######-L", "#");
      }
    };
    ue2 = class extends p2 {
      chemicalElement() {
        return this.faker.helpers.arrayElement(this.faker.definitions.science.chemical_element);
      }
      unit() {
        return this.faker.helpers.arrayElement(this.faker.definitions.science.unit);
      }
    };
    Yr = ["video", "audio", "image", "text", "application"];
    Zr = ["application/pdf", "audio/mpeg", "audio/wav", "image/png", "image/jpeg", "image/gif", "video/mp4", "video/mpeg", "text/html"];
    Jr = ["en", "wl", "ww"];
    Je2 = { index: "o", slot: "s", mac: "x", pci: "p" };
    Xr = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"];
    pe2 = class extends p2 {
      fileName(e2 = {}) {
        let { extensionCount: r2 = 1 } = e2, t2 = this.faker.word.words().toLowerCase().replaceAll(/\W/g, "_"), a2 = this.faker.helpers.multiple(() => this.fileExt(), { count: r2 }).join(".");
        return a2.length === 0 ? t2 : `${t2}.${a2}`;
      }
      commonFileName(e2) {
        return `${this.fileName({ extensionCount: 0 })}.${e2 || this.commonFileExt()}`;
      }
      mimeType() {
        let e2 = Object.keys(this.faker.definitions.system.mime_type);
        return this.faker.helpers.arrayElement(e2);
      }
      commonFileType() {
        return this.faker.helpers.arrayElement(Yr);
      }
      commonFileExt() {
        return this.fileExt(this.faker.helpers.arrayElement(Zr));
      }
      fileType() {
        let e2 = this.faker.definitions.system.mime_type, r2 = new Set(Object.keys(e2).map((t2) => t2.split("/")[0]));
        return this.faker.helpers.arrayElement([...r2]);
      }
      fileExt(e2) {
        let r2 = this.faker.definitions.system.mime_type;
        if (typeof e2 == "string") return this.faker.helpers.arrayElement(r2[e2].extensions);
        let t2 = new Set(Object.values(r2).flatMap(({ extensions: a2 }) => a2));
        return this.faker.helpers.arrayElement([...t2]);
      }
      directoryPath() {
        let e2 = this.faker.definitions.system.directory_path;
        return this.faker.helpers.arrayElement(e2);
      }
      filePath() {
        return `${this.directoryPath()}/${this.fileName()}`;
      }
      semver() {
        return [this.faker.number.int(9), this.faker.number.int(20), this.faker.number.int(20)].join(".");
      }
      networkInterface(e2 = {}) {
        let { interfaceType: r2 = this.faker.helpers.arrayElement(Jr), interfaceSchema: t2 = this.faker.helpers.objectKey(Je2) } = e2, a2, n2 = "";
        switch (t2) {
          case "index": {
            a2 = this.faker.string.numeric();
            break;
          }
          case "slot": {
            a2 = `${this.faker.string.numeric()}${this.faker.helpers.maybe(() => `f${this.faker.string.numeric()}`) ?? ""}${this.faker.helpers.maybe(() => `d${this.faker.string.numeric()}`) ?? ""}`;
            break;
          }
          case "mac": {
            a2 = this.faker.internet.mac("");
            break;
          }
          case "pci": {
            n2 = this.faker.helpers.maybe(() => `P${this.faker.string.numeric()}`) ?? "", a2 = `${this.faker.string.numeric()}s${this.faker.string.numeric()}${this.faker.helpers.maybe(() => `f${this.faker.string.numeric()}`) ?? ""}${this.faker.helpers.maybe(() => `d${this.faker.string.numeric()}`) ?? ""}`;
            break;
          }
        }
        return `${n2}${r2}${Je2[t2]}${a2}`;
      }
      cron(e2 = {}) {
        let { includeYear: r2 = false, includeNonStandard: t2 = false } = e2, a2 = [this.faker.number.int(59), "*"], n2 = [this.faker.number.int(23), "*"], o2 = [this.faker.number.int({ min: 1, max: 31 }), "*", "?"], s2 = [this.faker.number.int({ min: 1, max: 12 }), "*"], l2 = [this.faker.number.int(6), this.faker.helpers.arrayElement(Xr), "*", "?"], c2 = [this.faker.number.int({ min: 1970, max: 2099 }), "*"], u2 = this.faker.helpers.arrayElement(a2), h2 = this.faker.helpers.arrayElement(n2), f3 = this.faker.helpers.arrayElement(o2), g2 = this.faker.helpers.arrayElement(s2), b2 = this.faker.helpers.arrayElement(l2), y2 = this.faker.helpers.arrayElement(c2), N2 = `${u2} ${h2} ${f3} ${g2} ${b2}`;
        r2 && (N2 += ` ${y2}`);
        let k2 = ["@annually", "@daily", "@hourly", "@monthly", "@reboot", "@weekly", "@yearly"];
        return !t2 || this.faker.datatype.boolean() ? N2 : this.faker.helpers.arrayElement(k2);
      }
    };
    he2 = class extends p2 {
      vehicle() {
        return `${this.manufacturer()} ${this.model()}`;
      }
      manufacturer() {
        return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.manufacturer);
      }
      model() {
        return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.model);
      }
      type() {
        return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.type);
      }
      fuel() {
        return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.fuel);
      }
      vin() {
        let e2 = ["o", "i", "q", "O", "I", "Q"];
        return `${this.faker.string.alphanumeric({ length: 10, casing: "upper", exclude: e2 })}${this.faker.string.alpha({ length: 1, casing: "upper", exclude: e2 })}${this.faker.string.alphanumeric({ length: 1, casing: "upper", exclude: e2 })}${this.faker.string.numeric({ length: 5, allowLeadingZeros: true })}`;
      }
      color() {
        return this.faker.color.human();
      }
      vrm() {
        return `${this.faker.string.alpha({ length: 2, casing: "upper" })}${this.faker.string.numeric({ length: 2, allowLeadingZeros: true })}${this.faker.string.alpha({ length: 3, casing: "upper" })}`;
      }
      bicycle() {
        return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.bicycle_type);
      }
    };
    fe2 = class extends p2 {
      adjective(e2 = {}) {
        return typeof e2 == "number" && (e2 = { length: e2 }), this.faker.helpers.arrayElement(T2({ ...e2, wordList: this.faker.definitions.word.adjective }));
      }
      adverb(e2 = {}) {
        return typeof e2 == "number" && (e2 = { length: e2 }), this.faker.helpers.arrayElement(T2({ ...e2, wordList: this.faker.definitions.word.adverb }));
      }
      conjunction(e2 = {}) {
        return typeof e2 == "number" && (e2 = { length: e2 }), this.faker.helpers.arrayElement(T2({ ...e2, wordList: this.faker.definitions.word.conjunction }));
      }
      interjection(e2 = {}) {
        return typeof e2 == "number" && (e2 = { length: e2 }), this.faker.helpers.arrayElement(T2({ ...e2, wordList: this.faker.definitions.word.interjection }));
      }
      noun(e2 = {}) {
        return typeof e2 == "number" && (e2 = { length: e2 }), this.faker.helpers.arrayElement(T2({ ...e2, wordList: this.faker.definitions.word.noun }));
      }
      preposition(e2 = {}) {
        return typeof e2 == "number" && (e2 = { length: e2 }), this.faker.helpers.arrayElement(T2({ ...e2, wordList: this.faker.definitions.word.preposition }));
      }
      verb(e2 = {}) {
        return typeof e2 == "number" && (e2 = { length: e2 }), this.faker.helpers.arrayElement(T2({ ...e2, wordList: this.faker.definitions.word.verb }));
      }
      sample(e2 = {}) {
        let r2 = this.faker.helpers.shuffle([this.adjective, this.adverb, this.conjunction, this.interjection, this.noun, this.preposition, this.verb]);
        for (let t2 of r2) try {
          return t2(e2);
        } catch {
          continue;
        }
        throw new m2("No matching word data available for the current locale");
      }
      words(e2 = {}) {
        typeof e2 == "number" && (e2 = { count: e2 });
        let { count: r2 = { min: 1, max: 3 } } = e2;
        return this.faker.helpers.multiple(() => this.sample(), { count: r2 }).join(" ");
      }
    };
    Xe2 = class extends $2 {
      rawDefinitions;
      definitions;
      airline = new F2(this);
      animal = new X2(this);
      book = new Q2(this);
      color = new G2(this);
      commerce = new q2(this);
      company = new ee2(this);
      database = new re2(this);
      date = new V2(this);
      finance = new te2(this);
      food = new ae2(this);
      git = new ne2(this);
      hacker = new ie2(this);
      helpers = new z2(this);
      image = new oe2(this);
      internet = new O2(this);
      location = new se2(this);
      lorem = new ce2(this);
      music = new le2(this);
      person = new U2(this);
      phone = new me2(this);
      science = new ue2(this);
      system = new pe2(this);
      vehicle = new he2(this);
      word = new fe2(this);
      get address() {
        return w2({ deprecated: "faker.address", proposed: "faker.location", since: "8.0", until: "10.0" }), this.location;
      }
      get name() {
        return w2({ deprecated: "faker.name", proposed: "faker.person", since: "8.0", until: "10.0" }), this.person;
      }
      constructor(e2) {
        super({ randomizer: e2.randomizer, seed: e2.seed });
        let { locale: r2 } = e2;
        if (Array.isArray(r2)) {
          if (r2.length === 0) throw new m2("The locale option must contain at least one locale definition.");
          r2 = We2(r2);
        }
        this.rawDefinitions = r2, this.definitions = Ue2(this.rawDefinitions);
      }
      getMetadata() {
        return this.rawDefinitions.metadata ?? {};
      }
    };
    Qe2 = ["Academy Color Encoding System (ACES)", "Adobe RGB", "Adobe Wide Gamut RGB", "British Standard Colour (BS)", "CIE 1931 XYZ", "CIELAB", "CIELUV", "CIEUVW", "CMY", "CMYK", "DCI-P3", "Display-P3", "Federal Standard 595C", "HKS", "HSL", "HSLA", "HSLuv", "HSV", "HWB", "LCh", "LMS", "Munsell Color System", "Natural Color System (NSC)", "Pantone Matching System (PMS)", "ProPhoto RGB Color Space", "RAL", "RG", "RGBA", "RGK", "Rec. 2020", "Rec. 2100", "Rec. 601", "Rec. 709", "Uniform Color Spaces (UCSs)", "YDbDr", "YIQ", "YPbPr", "sRGB", "sYCC", "scRGB", "xvYCC"];
    Qr = { space: Qe2 };
    qe2 = Qr;
    er2 = ["ascii_bin", "ascii_general_ci", "cp1250_bin", "cp1250_general_ci", "utf8_bin", "utf8_general_ci", "utf8_unicode_ci"];
    rr2 = ["ARCHIVE", "BLACKHOLE", "CSV", "InnoDB", "MEMORY", "MyISAM"];
    tr2 = ["bigint", "binary", "bit", "blob", "boolean", "date", "datetime", "decimal", "double", "enum", "float", "geometry", "int", "mediumint", "point", "real", "serial", "set", "smallint", "text", "time", "timestamp", "tinyint", "varchar"];
    qr = { collation: er2, engine: rr2, type: tr2 };
    ar2 = qr;
    I2 = ["Africa/Abidjan", "Africa/Accra", "Africa/Addis_Ababa", "Africa/Algiers", "Africa/Asmara", "Africa/Bamako", "Africa/Bangui", "Africa/Banjul", "Africa/Bissau", "Africa/Blantyre", "Africa/Brazzaville", "Africa/Bujumbura", "Africa/Cairo", "Africa/Casablanca", "Africa/Ceuta", "Africa/Conakry", "Africa/Dakar", "Africa/Dar_es_Salaam", "Africa/Djibouti", "Africa/Douala", "Africa/El_Aaiun", "Africa/Freetown", "Africa/Gaborone", "Africa/Harare", "Africa/Johannesburg", "Africa/Juba", "Africa/Kampala", "Africa/Khartoum", "Africa/Kigali", "Africa/Kinshasa", "Africa/Lagos", "Africa/Libreville", "Africa/Lome", "Africa/Luanda", "Africa/Lubumbashi", "Africa/Lusaka", "Africa/Malabo", "Africa/Maputo", "Africa/Maseru", "Africa/Mbabane", "Africa/Mogadishu", "Africa/Monrovia", "Africa/Nairobi", "Africa/Ndjamena", "Africa/Niamey", "Africa/Nouakchott", "Africa/Ouagadougou", "Africa/Porto-Novo", "Africa/Sao_Tome", "Africa/Tripoli", "Africa/Tunis", "Africa/Windhoek", "America/Adak", "America/Anchorage", "America/Anguilla", "America/Antigua", "America/Araguaina", "America/Argentina/Buenos_Aires", "America/Argentina/Catamarca", "America/Argentina/Cordoba", "America/Argentina/Jujuy", "America/Argentina/La_Rioja", "America/Argentina/Mendoza", "America/Argentina/Rio_Gallegos", "America/Argentina/Salta", "America/Argentina/San_Juan", "America/Argentina/San_Luis", "America/Argentina/Tucuman", "America/Argentina/Ushuaia", "America/Aruba", "America/Asuncion", "America/Atikokan", "America/Bahia", "America/Bahia_Banderas", "America/Barbados", "America/Belem", "America/Belize", "America/Blanc-Sablon", "America/Boa_Vista", "America/Bogota", "America/Boise", "America/Cambridge_Bay", "America/Campo_Grande", "America/Cancun", "America/Caracas", "America/Cayenne", "America/Cayman", "America/Chicago", "America/Chihuahua", "America/Ciudad_Juarez", "America/Costa_Rica", "America/Creston", "America/Cuiaba", "America/Curacao", "America/Danmarkshavn", "America/Dawson", "America/Dawson_Creek", "America/Denver", "America/Detroit", "America/Dominica", "America/Edmonton", "America/Eirunepe", "America/El_Salvador", "America/Fort_Nelson", "America/Fortaleza", "America/Glace_Bay", "America/Goose_Bay", "America/Grand_Turk", "America/Grenada", "America/Guadeloupe", "America/Guatemala", "America/Guayaquil", "America/Guyana", "America/Halifax", "America/Havana", "America/Hermosillo", "America/Indiana/Indianapolis", "America/Indiana/Knox", "America/Indiana/Marengo", "America/Indiana/Petersburg", "America/Indiana/Tell_City", "America/Indiana/Vevay", "America/Indiana/Vincennes", "America/Indiana/Winamac", "America/Inuvik", "America/Iqaluit", "America/Jamaica", "America/Juneau", "America/Kentucky/Louisville", "America/Kentucky/Monticello", "America/Kralendijk", "America/La_Paz", "America/Lima", "America/Los_Angeles", "America/Lower_Princes", "America/Maceio", "America/Managua", "America/Manaus", "America/Marigot", "America/Martinique", "America/Matamoros", "America/Mazatlan", "America/Menominee", "America/Merida", "America/Metlakatla", "America/Mexico_City", "America/Miquelon", "America/Moncton", "America/Monterrey", "America/Montevideo", "America/Montserrat", "America/Nassau", "America/New_York", "America/Nome", "America/Noronha", "America/North_Dakota/Beulah", "America/North_Dakota/Center", "America/North_Dakota/New_Salem", "America/Nuuk", "America/Ojinaga", "America/Panama", "America/Paramaribo", "America/Phoenix", "America/Port-au-Prince", "America/Port_of_Spain", "America/Porto_Velho", "America/Puerto_Rico", "America/Punta_Arenas", "America/Rankin_Inlet", "America/Recife", "America/Regina", "America/Resolute", "America/Rio_Branco", "America/Santarem", "America/Santiago", "America/Santo_Domingo", "America/Sao_Paulo", "America/Scoresbysund", "America/Sitka", "America/St_Barthelemy", "America/St_Johns", "America/St_Kitts", "America/St_Lucia", "America/St_Thomas", "America/St_Vincent", "America/Swift_Current", "America/Tegucigalpa", "America/Thule", "America/Tijuana", "America/Toronto", "America/Tortola", "America/Vancouver", "America/Whitehorse", "America/Winnipeg", "America/Yakutat", "America/Yellowknife", "Antarctica/Casey", "Antarctica/Davis", "Antarctica/DumontDUrville", "Antarctica/Macquarie", "Antarctica/Mawson", "Antarctica/McMurdo", "Antarctica/Palmer", "Antarctica/Rothera", "Antarctica/Syowa", "Antarctica/Troll", "Antarctica/Vostok", "Arctic/Longyearbyen", "Asia/Aden", "Asia/Almaty", "Asia/Amman", "Asia/Anadyr", "Asia/Aqtau", "Asia/Aqtobe", "Asia/Ashgabat", "Asia/Atyrau", "Asia/Baghdad", "Asia/Bahrain", "Asia/Baku", "Asia/Bangkok", "Asia/Barnaul", "Asia/Beirut", "Asia/Bishkek", "Asia/Brunei", "Asia/Chita", "Asia/Choibalsan", "Asia/Colombo", "Asia/Damascus", "Asia/Dhaka", "Asia/Dili", "Asia/Dubai", "Asia/Dushanbe", "Asia/Famagusta", "Asia/Gaza", "Asia/Hebron", "Asia/Ho_Chi_Minh", "Asia/Hong_Kong", "Asia/Hovd", "Asia/Irkutsk", "Asia/Jakarta", "Asia/Jayapura", "Asia/Jerusalem", "Asia/Kabul", "Asia/Kamchatka", "Asia/Karachi", "Asia/Kathmandu", "Asia/Khandyga", "Asia/Kolkata", "Asia/Krasnoyarsk", "Asia/Kuala_Lumpur", "Asia/Kuching", "Asia/Kuwait", "Asia/Macau", "Asia/Magadan", "Asia/Makassar", "Asia/Manila", "Asia/Muscat", "Asia/Nicosia", "Asia/Novokuznetsk", "Asia/Novosibirsk", "Asia/Omsk", "Asia/Oral", "Asia/Phnom_Penh", "Asia/Pontianak", "Asia/Pyongyang", "Asia/Qatar", "Asia/Qostanay", "Asia/Qyzylorda", "Asia/Riyadh", "Asia/Sakhalin", "Asia/Samarkand", "Asia/Seoul", "Asia/Shanghai", "Asia/Singapore", "Asia/Srednekolymsk", "Asia/Taipei", "Asia/Tashkent", "Asia/Tbilisi", "Asia/Tehran", "Asia/Thimphu", "Asia/Tokyo", "Asia/Tomsk", "Asia/Ulaanbaatar", "Asia/Urumqi", "Asia/Ust-Nera", "Asia/Vientiane", "Asia/Vladivostok", "Asia/Yakutsk", "Asia/Yangon", "Asia/Yekaterinburg", "Asia/Yerevan", "Atlantic/Azores", "Atlantic/Bermuda", "Atlantic/Canary", "Atlantic/Cape_Verde", "Atlantic/Faroe", "Atlantic/Madeira", "Atlantic/Reykjavik", "Atlantic/South_Georgia", "Atlantic/St_Helena", "Atlantic/Stanley", "Australia/Adelaide", "Australia/Brisbane", "Australia/Broken_Hill", "Australia/Darwin", "Australia/Eucla", "Australia/Hobart", "Australia/Lindeman", "Australia/Lord_Howe", "Australia/Melbourne", "Australia/Perth", "Australia/Sydney", "Europe/Amsterdam", "Europe/Andorra", "Europe/Astrakhan", "Europe/Athens", "Europe/Belgrade", "Europe/Berlin", "Europe/Bratislava", "Europe/Brussels", "Europe/Bucharest", "Europe/Budapest", "Europe/Busingen", "Europe/Chisinau", "Europe/Copenhagen", "Europe/Dublin", "Europe/Gibraltar", "Europe/Guernsey", "Europe/Helsinki", "Europe/Isle_of_Man", "Europe/Istanbul", "Europe/Jersey", "Europe/Kaliningrad", "Europe/Kirov", "Europe/Kyiv", "Europe/Lisbon", "Europe/Ljubljana", "Europe/London", "Europe/Luxembourg", "Europe/Madrid", "Europe/Malta", "Europe/Mariehamn", "Europe/Minsk", "Europe/Monaco", "Europe/Moscow", "Europe/Oslo", "Europe/Paris", "Europe/Podgorica", "Europe/Prague", "Europe/Riga", "Europe/Rome", "Europe/Samara", "Europe/San_Marino", "Europe/Sarajevo", "Europe/Saratov", "Europe/Simferopol", "Europe/Skopje", "Europe/Sofia", "Europe/Stockholm", "Europe/Tallinn", "Europe/Tirane", "Europe/Ulyanovsk", "Europe/Vaduz", "Europe/Vatican", "Europe/Vienna", "Europe/Vilnius", "Europe/Volgograd", "Europe/Warsaw", "Europe/Zagreb", "Europe/Zurich", "Indian/Antananarivo", "Indian/Chagos", "Indian/Christmas", "Indian/Cocos", "Indian/Comoro", "Indian/Kerguelen", "Indian/Mahe", "Indian/Maldives", "Indian/Mauritius", "Indian/Mayotte", "Indian/Reunion", "Pacific/Apia", "Pacific/Auckland", "Pacific/Bougainville", "Pacific/Chatham", "Pacific/Chuuk", "Pacific/Easter", "Pacific/Efate", "Pacific/Fakaofo", "Pacific/Fiji", "Pacific/Funafuti", "Pacific/Galapagos", "Pacific/Gambier", "Pacific/Guadalcanal", "Pacific/Guam", "Pacific/Honolulu", "Pacific/Kanton", "Pacific/Kiritimati", "Pacific/Kosrae", "Pacific/Kwajalein", "Pacific/Majuro", "Pacific/Marquesas", "Pacific/Midway", "Pacific/Nauru", "Pacific/Niue", "Pacific/Norfolk", "Pacific/Noumea", "Pacific/Pago_Pago", "Pacific/Palau", "Pacific/Pitcairn", "Pacific/Pohnpei", "Pacific/Port_Moresby", "Pacific/Rarotonga", "Pacific/Saipan", "Pacific/Tahiti", "Pacific/Tarawa", "Pacific/Tongatapu", "Pacific/Wake", "Pacific/Wallis"];
    et = { time_zone: I2 };
    nr2 = et;
    ir2 = ["ADP", "AGP", "AI", "API", "ASCII", "CLI", "COM", "CSS", "DNS", "DRAM", "EXE", "FTP", "GB", "HDD", "HEX", "HTTP", "IB", "IP", "JBOD", "JSON", "OCR", "PCI", "PNG", "RAM", "RSS", "SAS", "SCSI", "SDD", "SMS", "SMTP", "SQL", "SSD", "SSL", "TCP", "THX", "TLS", "UDP", "USB", "UTF8", "VGA", "XML", "XSS"];
    rt = { abbreviation: ir2 };
    or2 = rt;
    sr2 = { smiley: ["\u2620\uFE0F", "\u2639\uFE0F", "\u263A\uFE0F", "\u2763\uFE0F", "\u2764\uFE0F", "\u2764\uFE0F\u200D\u{1F525}", "\u2764\uFE0F\u200D\u{1FA79}", "\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F", "\u{1F479}", "\u{1F47A}", "\u{1F47B}", "\u{1F47D}", "\u{1F47E}", "\u{1F47F}", "\u{1F480}", "\u{1F48B}", "\u{1F48C}", "\u{1F493}", "\u{1F494}", "\u{1F495}", "\u{1F496}", "\u{1F497}", "\u{1F498}", "\u{1F499}", "\u{1F49A}", "\u{1F49B}", "\u{1F49C}", "\u{1F49D}", "\u{1F49E}", "\u{1F49F}", "\u{1F4A2}", "\u{1F4A3}", "\u{1F4A4}", "\u{1F4A5}", "\u{1F4A6}", "\u{1F4A8}", "\u{1F4A9}", "\u{1F4AB}", "\u{1F4AC}", "\u{1F4AD}", "\u{1F4AF}", "\u{1F573}\uFE0F", "\u{1F5A4}", "\u{1F5E8}\uFE0F", "\u{1F5EF}\uFE0F", "\u{1F600}", "\u{1F601}", "\u{1F602}", "\u{1F603}", "\u{1F604}", "\u{1F605}", "\u{1F606}", "\u{1F607}", "\u{1F608}", "\u{1F609}", "\u{1F60A}", "\u{1F60B}", "\u{1F60C}", "\u{1F60D}", "\u{1F60E}", "\u{1F60F}", "\u{1F610}", "\u{1F611}", "\u{1F612}", "\u{1F613}", "\u{1F614}", "\u{1F615}", "\u{1F616}", "\u{1F617}", "\u{1F618}", "\u{1F619}", "\u{1F61A}", "\u{1F61B}", "\u{1F61C}", "\u{1F61D}", "\u{1F61E}", "\u{1F61F}", "\u{1F620}", "\u{1F621}", "\u{1F622}", "\u{1F623}", "\u{1F624}", "\u{1F625}", "\u{1F626}", "\u{1F627}", "\u{1F628}", "\u{1F629}", "\u{1F62A}", "\u{1F62B}", "\u{1F62C}", "\u{1F62D}", "\u{1F62E}", "\u{1F62E}\u200D\u{1F4A8}", "\u{1F62F}", "\u{1F630}", "\u{1F631}", "\u{1F632}", "\u{1F633}", "\u{1F634}", "\u{1F635}", "\u{1F635}\u200D\u{1F4AB}", "\u{1F636}", "\u{1F636}\u200D\u{1F32B}\uFE0F", "\u{1F637}", "\u{1F638}", "\u{1F639}", "\u{1F63A}", "\u{1F63B}", "\u{1F63C}", "\u{1F63D}", "\u{1F63E}", "\u{1F63F}", "\u{1F640}", "\u{1F641}", "\u{1F642}", "\u{1F643}", "\u{1F644}", "\u{1F648}", "\u{1F649}", "\u{1F64A}", "\u{1F90D}", "\u{1F90E}", "\u{1F910}", "\u{1F911}", "\u{1F912}", "\u{1F913}", "\u{1F914}", "\u{1F915}", "\u{1F916}", "\u{1F917}", "\u{1F920}", "\u{1F921}", "\u{1F922}", "\u{1F923}", "\u{1F924}", "\u{1F925}", "\u{1F927}", "\u{1F928}", "\u{1F929}", "\u{1F92A}", "\u{1F92B}", "\u{1F92C}", "\u{1F92D}", "\u{1F92E}", "\u{1F92F}", "\u{1F970}", "\u{1F971}", "\u{1F972}", "\u{1F973}", "\u{1F974}", "\u{1F975}", "\u{1F976}", "\u{1F978}", "\u{1F97A}", "\u{1F9D0}", "\u{1F9E1}"], body: ["\u261D\u{1F3FB}", "\u261D\u{1F3FC}", "\u261D\u{1F3FD}", "\u261D\u{1F3FE}", "\u261D\u{1F3FF}", "\u261D\uFE0F", "\u270A", "\u270A\u{1F3FB}", "\u270A\u{1F3FC}", "\u270A\u{1F3FD}", "\u270A\u{1F3FE}", "\u270A\u{1F3FF}", "\u270B", "\u270B\u{1F3FB}", "\u270B\u{1F3FC}", "\u270B\u{1F3FD}", "\u270B\u{1F3FE}", "\u270B\u{1F3FF}", "\u270C\u{1F3FB}", "\u270C\u{1F3FC}", "\u270C\u{1F3FD}", "\u270C\u{1F3FE}", "\u270C\u{1F3FF}", "\u270C\uFE0F", "\u270D\u{1F3FB}", "\u270D\u{1F3FC}", "\u270D\u{1F3FD}", "\u270D\u{1F3FE}", "\u270D\u{1F3FF}", "\u270D\uFE0F", "\u{1F440}", "\u{1F441}\uFE0F", "\u{1F442}", "\u{1F442}\u{1F3FB}", "\u{1F442}\u{1F3FC}", "\u{1F442}\u{1F3FD}", "\u{1F442}\u{1F3FE}", "\u{1F442}\u{1F3FF}", "\u{1F443}", "\u{1F443}\u{1F3FB}", "\u{1F443}\u{1F3FC}", "\u{1F443}\u{1F3FD}", "\u{1F443}\u{1F3FE}", "\u{1F443}\u{1F3FF}", "\u{1F444}", "\u{1F445}", "\u{1F446}", "\u{1F446}\u{1F3FB}", "\u{1F446}\u{1F3FC}", "\u{1F446}\u{1F3FD}", "\u{1F446}\u{1F3FE}", "\u{1F446}\u{1F3FF}", "\u{1F447}", "\u{1F447}\u{1F3FB}", "\u{1F447}\u{1F3FC}", "\u{1F447}\u{1F3FD}", "\u{1F447}\u{1F3FE}", "\u{1F447}\u{1F3FF}", "\u{1F448}", "\u{1F448}\u{1F3FB}", "\u{1F448}\u{1F3FC}", "\u{1F448}\u{1F3FD}", "\u{1F448}\u{1F3FE}", "\u{1F448}\u{1F3FF}", "\u{1F449}", "\u{1F449}\u{1F3FB}", "\u{1F449}\u{1F3FC}", "\u{1F449}\u{1F3FD}", "\u{1F449}\u{1F3FE}", "\u{1F449}\u{1F3FF}", "\u{1F44A}", "\u{1F44A}\u{1F3FB}", "\u{1F44A}\u{1F3FC}", "\u{1F44A}\u{1F3FD}", "\u{1F44A}\u{1F3FE}", "\u{1F44A}\u{1F3FF}", "\u{1F44B}", "\u{1F44B}\u{1F3FB}", "\u{1F44B}\u{1F3FC}", "\u{1F44B}\u{1F3FD}", "\u{1F44B}\u{1F3FE}", "\u{1F44B}\u{1F3FF}", "\u{1F44C}", "\u{1F44C}\u{1F3FB}", "\u{1F44C}\u{1F3FC}", "\u{1F44C}\u{1F3FD}", "\u{1F44C}\u{1F3FE}", "\u{1F44C}\u{1F3FF}", "\u{1F44D}", "\u{1F44D}\u{1F3FB}", "\u{1F44D}\u{1F3FC}", "\u{1F44D}\u{1F3FD}", "\u{1F44D}\u{1F3FE}", "\u{1F44D}\u{1F3FF}", "\u{1F44E}", "\u{1F44E}\u{1F3FB}", "\u{1F44E}\u{1F3FC}", "\u{1F44E}\u{1F3FD}", "\u{1F44E}\u{1F3FE}", "\u{1F44E}\u{1F3FF}", "\u{1F44F}", "\u{1F44F}\u{1F3FB}", "\u{1F44F}\u{1F3FC}", "\u{1F44F}\u{1F3FD}", "\u{1F44F}\u{1F3FE}", "\u{1F44F}\u{1F3FF}", "\u{1F450}", "\u{1F450}\u{1F3FB}", "\u{1F450}\u{1F3FC}", "\u{1F450}\u{1F3FD}", "\u{1F450}\u{1F3FE}", "\u{1F450}\u{1F3FF}", "\u{1F485}", "\u{1F485}\u{1F3FB}", "\u{1F485}\u{1F3FC}", "\u{1F485}\u{1F3FD}", "\u{1F485}\u{1F3FE}", "\u{1F485}\u{1F3FF}", "\u{1F4AA}", "\u{1F4AA}\u{1F3FB}", "\u{1F4AA}\u{1F3FC}", "\u{1F4AA}\u{1F3FD}", "\u{1F4AA}\u{1F3FE}", "\u{1F4AA}\u{1F3FF}", "\u{1F590}\u{1F3FB}", "\u{1F590}\u{1F3FC}", "\u{1F590}\u{1F3FD}", "\u{1F590}\u{1F3FE}", "\u{1F590}\u{1F3FF}", "\u{1F590}\uFE0F", "\u{1F595}", "\u{1F595}\u{1F3FB}", "\u{1F595}\u{1F3FC}", "\u{1F595}\u{1F3FD}", "\u{1F595}\u{1F3FE}", "\u{1F595}\u{1F3FF}", "\u{1F596}", "\u{1F596}\u{1F3FB}", "\u{1F596}\u{1F3FC}", "\u{1F596}\u{1F3FD}", "\u{1F596}\u{1F3FE}", "\u{1F596}\u{1F3FF}", "\u{1F64C}", "\u{1F64C}\u{1F3FB}", "\u{1F64C}\u{1F3FC}", "\u{1F64C}\u{1F3FD}", "\u{1F64C}\u{1F3FE}", "\u{1F64C}\u{1F3FF}", "\u{1F64F}", "\u{1F64F}\u{1F3FB}", "\u{1F64F}\u{1F3FC}", "\u{1F64F}\u{1F3FD}", "\u{1F64F}\u{1F3FE}", "\u{1F64F}\u{1F3FF}", "\u{1F90C}", "\u{1F90C}\u{1F3FB}", "\u{1F90C}\u{1F3FC}", "\u{1F90C}\u{1F3FD}", "\u{1F90C}\u{1F3FE}", "\u{1F90C}\u{1F3FF}", "\u{1F90F}", "\u{1F90F}\u{1F3FB}", "\u{1F90F}\u{1F3FC}", "\u{1F90F}\u{1F3FD}", "\u{1F90F}\u{1F3FE}", "\u{1F90F}\u{1F3FF}", "\u{1F918}", "\u{1F918}\u{1F3FB}", "\u{1F918}\u{1F3FC}", "\u{1F918}\u{1F3FD}", "\u{1F918}\u{1F3FE}", "\u{1F918}\u{1F3FF}", "\u{1F919}", "\u{1F919}\u{1F3FB}", "\u{1F919}\u{1F3FC}", "\u{1F919}\u{1F3FD}", "\u{1F919}\u{1F3FE}", "\u{1F919}\u{1F3FF}", "\u{1F91A}", "\u{1F91A}\u{1F3FB}", "\u{1F91A}\u{1F3FC}", "\u{1F91A}\u{1F3FD}", "\u{1F91A}\u{1F3FE}", "\u{1F91A}\u{1F3FF}", "\u{1F91B}", "\u{1F91B}\u{1F3FB}", "\u{1F91B}\u{1F3FC}", "\u{1F91B}\u{1F3FD}", "\u{1F91B}\u{1F3FE}", "\u{1F91B}\u{1F3FF}", "\u{1F91C}", "\u{1F91C}\u{1F3FB}", "\u{1F91C}\u{1F3FC}", "\u{1F91C}\u{1F3FD}", "\u{1F91C}\u{1F3FE}", "\u{1F91C}\u{1F3FF}", "\u{1F91D}", "\u{1F91E}", "\u{1F91E}\u{1F3FB}", "\u{1F91E}\u{1F3FC}", "\u{1F91E}\u{1F3FD}", "\u{1F91E}\u{1F3FE}", "\u{1F91E}\u{1F3FF}", "\u{1F91F}", "\u{1F91F}\u{1F3FB}", "\u{1F91F}\u{1F3FC}", "\u{1F91F}\u{1F3FD}", "\u{1F91F}\u{1F3FE}", "\u{1F91F}\u{1F3FF}", "\u{1F932}", "\u{1F932}\u{1F3FB}", "\u{1F932}\u{1F3FC}", "\u{1F932}\u{1F3FD}", "\u{1F932}\u{1F3FE}", "\u{1F932}\u{1F3FF}", "\u{1F933}", "\u{1F933}\u{1F3FB}", "\u{1F933}\u{1F3FC}", "\u{1F933}\u{1F3FD}", "\u{1F933}\u{1F3FE}", "\u{1F933}\u{1F3FF}", "\u{1F9B4}", "\u{1F9B5}", "\u{1F9B5}\u{1F3FB}", "\u{1F9B5}\u{1F3FC}", "\u{1F9B5}\u{1F3FD}", "\u{1F9B5}\u{1F3FE}", "\u{1F9B5}\u{1F3FF}", "\u{1F9B6}", "\u{1F9B6}\u{1F3FB}", "\u{1F9B6}\u{1F3FC}", "\u{1F9B6}\u{1F3FD}", "\u{1F9B6}\u{1F3FE}", "\u{1F9B6}\u{1F3FF}", "\u{1F9B7}", "\u{1F9BB}", "\u{1F9BB}\u{1F3FB}", "\u{1F9BB}\u{1F3FC}", "\u{1F9BB}\u{1F3FD}", "\u{1F9BB}\u{1F3FE}", "\u{1F9BB}\u{1F3FF}", "\u{1F9BE}", "\u{1F9BF}", "\u{1F9E0}", "\u{1FAC0}", "\u{1FAC1}"], person: ["\u{1F385}", "\u{1F385}\u{1F3FB}", "\u{1F385}\u{1F3FC}", "\u{1F385}\u{1F3FD}", "\u{1F385}\u{1F3FE}", "\u{1F385}\u{1F3FF}", "\u{1F466}", "\u{1F466}\u{1F3FB}", "\u{1F466}\u{1F3FC}", "\u{1F466}\u{1F3FD}", "\u{1F466}\u{1F3FE}", "\u{1F466}\u{1F3FF}", "\u{1F467}", "\u{1F467}\u{1F3FB}", "\u{1F467}\u{1F3FC}", "\u{1F467}\u{1F3FD}", "\u{1F467}\u{1F3FE}", "\u{1F467}\u{1F3FF}", "\u{1F468}", "\u{1F468}\u200D\u2695\uFE0F", "\u{1F468}\u200D\u2696\uFE0F", "\u{1F468}\u200D\u2708\uFE0F", "\u{1F468}\u200D\u{1F33E}", "\u{1F468}\u200D\u{1F373}", "\u{1F468}\u200D\u{1F37C}", "\u{1F468}\u200D\u{1F393}", "\u{1F468}\u200D\u{1F3A4}", "\u{1F468}\u200D\u{1F3A8}", "\u{1F468}\u200D\u{1F3EB}", "\u{1F468}\u200D\u{1F3ED}", "\u{1F468}\u200D\u{1F4BB}", "\u{1F468}\u200D\u{1F4BC}", "\u{1F468}\u200D\u{1F527}", "\u{1F468}\u200D\u{1F52C}", "\u{1F468}\u200D\u{1F680}", "\u{1F468}\u200D\u{1F692}", "\u{1F468}\u200D\u{1F9B0}", "\u{1F468}\u200D\u{1F9B1}", "\u{1F468}\u200D\u{1F9B2}", "\u{1F468}\u200D\u{1F9B3}", "\u{1F468}\u{1F3FB}", "\u{1F468}\u{1F3FB}\u200D\u2695\uFE0F", "\u{1F468}\u{1F3FB}\u200D\u2696\uFE0F", "\u{1F468}\u{1F3FB}\u200D\u2708\uFE0F", "\u{1F468}\u{1F3FB}\u200D\u{1F33E}", "\u{1F468}\u{1F3FB}\u200D\u{1F373}", "\u{1F468}\u{1F3FB}\u200D\u{1F37C}", "\u{1F468}\u{1F3FB}\u200D\u{1F393}", "\u{1F468}\u{1F3FB}\u200D\u{1F3A4}", "\u{1F468}\u{1F3FB}\u200D\u{1F3A8}", "\u{1F468}\u{1F3FB}\u200D\u{1F3EB}", "\u{1F468}\u{1F3FB}\u200D\u{1F3ED}", "\u{1F468}\u{1F3FB}\u200D\u{1F4BB}", "\u{1F468}\u{1F3FB}\u200D\u{1F4BC}", "\u{1F468}\u{1F3FB}\u200D\u{1F527}", "\u{1F468}\u{1F3FB}\u200D\u{1F52C}", "\u{1F468}\u{1F3FB}\u200D\u{1F680}", "\u{1F468}\u{1F3FB}\u200D\u{1F692}", "\u{1F468}\u{1F3FB}\u200D\u{1F9B0}", "\u{1F468}\u{1F3FB}\u200D\u{1F9B1}", "\u{1F468}\u{1F3FB}\u200D\u{1F9B2}", "\u{1F468}\u{1F3FB}\u200D\u{1F9B3}", "\u{1F468}\u{1F3FC}", "\u{1F468}\u{1F3FC}\u200D\u2695\uFE0F", "\u{1F468}\u{1F3FC}\u200D\u2696\uFE0F", "\u{1F468}\u{1F3FC}\u200D\u2708\uFE0F", "\u{1F468}\u{1F3FC}\u200D\u{1F33E}", "\u{1F468}\u{1F3FC}\u200D\u{1F373}", "\u{1F468}\u{1F3FC}\u200D\u{1F37C}", "\u{1F468}\u{1F3FC}\u200D\u{1F393}", "\u{1F468}\u{1F3FC}\u200D\u{1F3A4}", "\u{1F468}\u{1F3FC}\u200D\u{1F3A8}", "\u{1F468}\u{1F3FC}\u200D\u{1F3EB}", "\u{1F468}\u{1F3FC}\u200D\u{1F3ED}", "\u{1F468}\u{1F3FC}\u200D\u{1F4BB}", "\u{1F468}\u{1F3FC}\u200D\u{1F4BC}", "\u{1F468}\u{1F3FC}\u200D\u{1F527}", "\u{1F468}\u{1F3FC}\u200D\u{1F52C}", "\u{1F468}\u{1F3FC}\u200D\u{1F680}", "\u{1F468}\u{1F3FC}\u200D\u{1F692}", "\u{1F468}\u{1F3FC}\u200D\u{1F9B0}", "\u{1F468}\u{1F3FC}\u200D\u{1F9B1}", "\u{1F468}\u{1F3FC}\u200D\u{1F9B2}", "\u{1F468}\u{1F3FC}\u200D\u{1F9B3}", "\u{1F468}\u{1F3FD}", "\u{1F468}\u{1F3FD}\u200D\u2695\uFE0F", "\u{1F468}\u{1F3FD}\u200D\u2696\uFE0F", "\u{1F468}\u{1F3FD}\u200D\u2708\uFE0F", "\u{1F468}\u{1F3FD}\u200D\u{1F33E}", "\u{1F468}\u{1F3FD}\u200D\u{1F373}", "\u{1F468}\u{1F3FD}\u200D\u{1F37C}", "\u{1F468}\u{1F3FD}\u200D\u{1F393}", "\u{1F468}\u{1F3FD}\u200D\u{1F3A4}", "\u{1F468}\u{1F3FD}\u200D\u{1F3A8}", "\u{1F468}\u{1F3FD}\u200D\u{1F3EB}", "\u{1F468}\u{1F3FD}\u200D\u{1F3ED}", "\u{1F468}\u{1F3FD}\u200D\u{1F4BB}", "\u{1F468}\u{1F3FD}\u200D\u{1F4BC}", "\u{1F468}\u{1F3FD}\u200D\u{1F527}", "\u{1F468}\u{1F3FD}\u200D\u{1F52C}", "\u{1F468}\u{1F3FD}\u200D\u{1F680}", "\u{1F468}\u{1F3FD}\u200D\u{1F692}", "\u{1F468}\u{1F3FD}\u200D\u{1F9B0}", "\u{1F468}\u{1F3FD}\u200D\u{1F9B1}", "\u{1F468}\u{1F3FD}\u200D\u{1F9B2}", "\u{1F468}\u{1F3FD}\u200D\u{1F9B3}", "\u{1F468}\u{1F3FE}", "\u{1F468}\u{1F3FE}\u200D\u2695\uFE0F", "\u{1F468}\u{1F3FE}\u200D\u2696\uFE0F", "\u{1F468}\u{1F3FE}\u200D\u2708\uFE0F", "\u{1F468}\u{1F3FE}\u200D\u{1F33E}", "\u{1F468}\u{1F3FE}\u200D\u{1F373}", "\u{1F468}\u{1F3FE}\u200D\u{1F37C}", "\u{1F468}\u{1F3FE}\u200D\u{1F393}", "\u{1F468}\u{1F3FE}\u200D\u{1F3A4}", "\u{1F468}\u{1F3FE}\u200D\u{1F3A8}", "\u{1F468}\u{1F3FE}\u200D\u{1F3EB}", "\u{1F468}\u{1F3FE}\u200D\u{1F3ED}", "\u{1F468}\u{1F3FE}\u200D\u{1F4BB}", "\u{1F468}\u{1F3FE}\u200D\u{1F4BC}", "\u{1F468}\u{1F3FE}\u200D\u{1F527}", "\u{1F468}\u{1F3FE}\u200D\u{1F52C}", "\u{1F468}\u{1F3FE}\u200D\u{1F680}", "\u{1F468}\u{1F3FE}\u200D\u{1F692}", "\u{1F468}\u{1F3FE}\u200D\u{1F9B0}", "\u{1F468}\u{1F3FE}\u200D\u{1F9B1}", "\u{1F468}\u{1F3FE}\u200D\u{1F9B2}", "\u{1F468}\u{1F3FE}\u200D\u{1F9B3}", "\u{1F468}\u{1F3FF}", "\u{1F468}\u{1F3FF}\u200D\u2695\uFE0F", "\u{1F468}\u{1F3FF}\u200D\u2696\uFE0F", "\u{1F468}\u{1F3FF}\u200D\u2708\uFE0F", "\u{1F468}\u{1F3FF}\u200D\u{1F33E}", "\u{1F468}\u{1F3FF}\u200D\u{1F373}", "\u{1F468}\u{1F3FF}\u200D\u{1F37C}", "\u{1F468}\u{1F3FF}\u200D\u{1F393}", "\u{1F468}\u{1F3FF}\u200D\u{1F3A4}", "\u{1F468}\u{1F3FF}\u200D\u{1F3A8}", "\u{1F468}\u{1F3FF}\u200D\u{1F3EB}", "\u{1F468}\u{1F3FF}\u200D\u{1F3ED}", "\u{1F468}\u{1F3FF}\u200D\u{1F4BB}", "\u{1F468}\u{1F3FF}\u200D\u{1F4BC}", "\u{1F468}\u{1F3FF}\u200D\u{1F527}", "\u{1F468}\u{1F3FF}\u200D\u{1F52C}", "\u{1F468}\u{1F3FF}\u200D\u{1F680}", "\u{1F468}\u{1F3FF}\u200D\u{1F692}", "\u{1F468}\u{1F3FF}\u200D\u{1F9B0}", "\u{1F468}\u{1F3FF}\u200D\u{1F9B1}", "\u{1F468}\u{1F3FF}\u200D\u{1F9B2}", "\u{1F468}\u{1F3FF}\u200D\u{1F9B3}", "\u{1F469}", "\u{1F469}\u200D\u2695\uFE0F", "\u{1F469}\u200D\u2696\uFE0F", "\u{1F469}\u200D\u2708\uFE0F", "\u{1F469}\u200D\u{1F33E}", "\u{1F469}\u200D\u{1F373}", "\u{1F469}\u200D\u{1F37C}", "\u{1F469}\u200D\u{1F393}", "\u{1F469}\u200D\u{1F3A4}", "\u{1F469}\u200D\u{1F3A8}", "\u{1F469}\u200D\u{1F3EB}", "\u{1F469}\u200D\u{1F3ED}", "\u{1F469}\u200D\u{1F4BB}", "\u{1F469}\u200D\u{1F4BC}", "\u{1F469}\u200D\u{1F527}", "\u{1F469}\u200D\u{1F52C}", "\u{1F469}\u200D\u{1F680}", "\u{1F469}\u200D\u{1F692}", "\u{1F469}\u200D\u{1F9B0}", "\u{1F469}\u200D\u{1F9B1}", "\u{1F469}\u200D\u{1F9B2}", "\u{1F469}\u200D\u{1F9B3}", "\u{1F469}\u{1F3FB}", "\u{1F469}\u{1F3FB}\u200D\u2695\uFE0F", "\u{1F469}\u{1F3FB}\u200D\u2696\uFE0F", "\u{1F469}\u{1F3FB}\u200D\u2708\uFE0F", "\u{1F469}\u{1F3FB}\u200D\u{1F33E}", "\u{1F469}\u{1F3FB}\u200D\u{1F373}", "\u{1F469}\u{1F3FB}\u200D\u{1F37C}", "\u{1F469}\u{1F3FB}\u200D\u{1F393}", "\u{1F469}\u{1F3FB}\u200D\u{1F3A4}", "\u{1F469}\u{1F3FB}\u200D\u{1F3A8}", "\u{1F469}\u{1F3FB}\u200D\u{1F3EB}", "\u{1F469}\u{1F3FB}\u200D\u{1F3ED}", "\u{1F469}\u{1F3FB}\u200D\u{1F4BB}", "\u{1F469}\u{1F3FB}\u200D\u{1F4BC}", "\u{1F469}\u{1F3FB}\u200D\u{1F527}", "\u{1F469}\u{1F3FB}\u200D\u{1F52C}", "\u{1F469}\u{1F3FB}\u200D\u{1F680}", "\u{1F469}\u{1F3FB}\u200D\u{1F692}", "\u{1F469}\u{1F3FB}\u200D\u{1F9B0}", "\u{1F469}\u{1F3FB}\u200D\u{1F9B1}", "\u{1F469}\u{1F3FB}\u200D\u{1F9B2}", "\u{1F469}\u{1F3FB}\u200D\u{1F9B3}", "\u{1F469}\u{1F3FC}", "\u{1F469}\u{1F3FC}\u200D\u2695\uFE0F", "\u{1F469}\u{1F3FC}\u200D\u2696\uFE0F", "\u{1F469}\u{1F3FC}\u200D\u2708\uFE0F", "\u{1F469}\u{1F3FC}\u200D\u{1F33E}", "\u{1F469}\u{1F3FC}\u200D\u{1F373}", "\u{1F469}\u{1F3FC}\u200D\u{1F37C}", "\u{1F469}\u{1F3FC}\u200D\u{1F393}", "\u{1F469}\u{1F3FC}\u200D\u{1F3A4}", "\u{1F469}\u{1F3FC}\u200D\u{1F3A8}", "\u{1F469}\u{1F3FC}\u200D\u{1F3EB}", "\u{1F469}\u{1F3FC}\u200D\u{1F3ED}", "\u{1F469}\u{1F3FC}\u200D\u{1F4BB}", "\u{1F469}\u{1F3FC}\u200D\u{1F4BC}", "\u{1F469}\u{1F3FC}\u200D\u{1F527}", "\u{1F469}\u{1F3FC}\u200D\u{1F52C}", "\u{1F469}\u{1F3FC}\u200D\u{1F680}", "\u{1F469}\u{1F3FC}\u200D\u{1F692}", "\u{1F469}\u{1F3FC}\u200D\u{1F9B0}", "\u{1F469}\u{1F3FC}\u200D\u{1F9B1}", "\u{1F469}\u{1F3FC}\u200D\u{1F9B2}", "\u{1F469}\u{1F3FC}\u200D\u{1F9B3}", "\u{1F469}\u{1F3FD}", "\u{1F469}\u{1F3FD}\u200D\u2695\uFE0F", "\u{1F469}\u{1F3FD}\u200D\u2696\uFE0F", "\u{1F469}\u{1F3FD}\u200D\u2708\uFE0F", "\u{1F469}\u{1F3FD}\u200D\u{1F33E}", "\u{1F469}\u{1F3FD}\u200D\u{1F373}", "\u{1F469}\u{1F3FD}\u200D\u{1F37C}", "\u{1F469}\u{1F3FD}\u200D\u{1F393}", "\u{1F469}\u{1F3FD}\u200D\u{1F3A4}", "\u{1F469}\u{1F3FD}\u200D\u{1F3A8}", "\u{1F469}\u{1F3FD}\u200D\u{1F3EB}", "\u{1F469}\u{1F3FD}\u200D\u{1F3ED}", "\u{1F469}\u{1F3FD}\u200D\u{1F4BB}", "\u{1F469}\u{1F3FD}\u200D\u{1F4BC}", "\u{1F469}\u{1F3FD}\u200D\u{1F527}", "\u{1F469}\u{1F3FD}\u200D\u{1F52C}", "\u{1F469}\u{1F3FD}\u200D\u{1F680}", "\u{1F469}\u{1F3FD}\u200D\u{1F692}", "\u{1F469}\u{1F3FD}\u200D\u{1F9B0}", "\u{1F469}\u{1F3FD}\u200D\u{1F9B1}", "\u{1F469}\u{1F3FD}\u200D\u{1F9B2}", "\u{1F469}\u{1F3FD}\u200D\u{1F9B3}", "\u{1F469}\u{1F3FE}", "\u{1F469}\u{1F3FE}\u200D\u2695\uFE0F", "\u{1F469}\u{1F3FE}\u200D\u2696\uFE0F", "\u{1F469}\u{1F3FE}\u200D\u2708\uFE0F", "\u{1F469}\u{1F3FE}\u200D\u{1F33E}", "\u{1F469}\u{1F3FE}\u200D\u{1F373}", "\u{1F469}\u{1F3FE}\u200D\u{1F37C}", "\u{1F469}\u{1F3FE}\u200D\u{1F393}", "\u{1F469}\u{1F3FE}\u200D\u{1F3A4}", "\u{1F469}\u{1F3FE}\u200D\u{1F3A8}", "\u{1F469}\u{1F3FE}\u200D\u{1F3EB}", "\u{1F469}\u{1F3FE}\u200D\u{1F3ED}", "\u{1F469}\u{1F3FE}\u200D\u{1F4BB}", "\u{1F469}\u{1F3FE}\u200D\u{1F4BC}", "\u{1F469}\u{1F3FE}\u200D\u{1F527}", "\u{1F469}\u{1F3FE}\u200D\u{1F52C}", "\u{1F469}\u{1F3FE}\u200D\u{1F680}", "\u{1F469}\u{1F3FE}\u200D\u{1F692}", "\u{1F469}\u{1F3FE}\u200D\u{1F9B0}", "\u{1F469}\u{1F3FE}\u200D\u{1F9B1}", "\u{1F469}\u{1F3FE}\u200D\u{1F9B2}", "\u{1F469}\u{1F3FE}\u200D\u{1F9B3}", "\u{1F469}\u{1F3FF}", "\u{1F469}\u{1F3FF}\u200D\u2695\uFE0F", "\u{1F469}\u{1F3FF}\u200D\u2696\uFE0F", "\u{1F469}\u{1F3FF}\u200D\u2708\uFE0F", "\u{1F469}\u{1F3FF}\u200D\u{1F33E}", "\u{1F469}\u{1F3FF}\u200D\u{1F373}", "\u{1F469}\u{1F3FF}\u200D\u{1F37C}", "\u{1F469}\u{1F3FF}\u200D\u{1F393}", "\u{1F469}\u{1F3FF}\u200D\u{1F3A4}", "\u{1F469}\u{1F3FF}\u200D\u{1F3A8}", "\u{1F469}\u{1F3FF}\u200D\u{1F3EB}", "\u{1F469}\u{1F3FF}\u200D\u{1F3ED}", "\u{1F469}\u{1F3FF}\u200D\u{1F4BB}", "\u{1F469}\u{1F3FF}\u200D\u{1F4BC}", "\u{1F469}\u{1F3FF}\u200D\u{1F527}", "\u{1F469}\u{1F3FF}\u200D\u{1F52C}", "\u{1F469}\u{1F3FF}\u200D\u{1F680}", "\u{1F469}\u{1F3FF}\u200D\u{1F692}", "\u{1F469}\u{1F3FF}\u200D\u{1F9B0}", "\u{1F469}\u{1F3FF}\u200D\u{1F9B1}", "\u{1F469}\u{1F3FF}\u200D\u{1F9B2}", "\u{1F469}\u{1F3FF}\u200D\u{1F9B3}", "\u{1F46E}", "\u{1F46E}\u200D\u2640\uFE0F", "\u{1F46E}\u200D\u2642\uFE0F", "\u{1F46E}\u{1F3FB}", "\u{1F46E}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F46E}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F46E}\u{1F3FC}", "\u{1F46E}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F46E}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F46E}\u{1F3FD}", "\u{1F46E}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F46E}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F46E}\u{1F3FE}", "\u{1F46E}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F46E}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F46E}\u{1F3FF}", "\u{1F46E}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F46E}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F470}", "\u{1F470}\u200D\u2640\uFE0F", "\u{1F470}\u200D\u2642\uFE0F", "\u{1F470}\u{1F3FB}", "\u{1F470}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F470}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F470}\u{1F3FC}", "\u{1F470}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F470}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F470}\u{1F3FD}", "\u{1F470}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F470}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F470}\u{1F3FE}", "\u{1F470}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F470}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F470}\u{1F3FF}", "\u{1F470}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F470}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F471}", "\u{1F471}\u200D\u2640\uFE0F", "\u{1F471}\u200D\u2642\uFE0F", "\u{1F471}\u{1F3FB}", "\u{1F471}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F471}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F471}\u{1F3FC}", "\u{1F471}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F471}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F471}\u{1F3FD}", "\u{1F471}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F471}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F471}\u{1F3FE}", "\u{1F471}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F471}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F471}\u{1F3FF}", "\u{1F471}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F471}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F472}", "\u{1F472}\u{1F3FB}", "\u{1F472}\u{1F3FC}", "\u{1F472}\u{1F3FD}", "\u{1F472}\u{1F3FE}", "\u{1F472}\u{1F3FF}", "\u{1F473}", "\u{1F473}\u200D\u2640\uFE0F", "\u{1F473}\u200D\u2642\uFE0F", "\u{1F473}\u{1F3FB}", "\u{1F473}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F473}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F473}\u{1F3FC}", "\u{1F473}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F473}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F473}\u{1F3FD}", "\u{1F473}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F473}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F473}\u{1F3FE}", "\u{1F473}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F473}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F473}\u{1F3FF}", "\u{1F473}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F473}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F474}", "\u{1F474}\u{1F3FB}", "\u{1F474}\u{1F3FC}", "\u{1F474}\u{1F3FD}", "\u{1F474}\u{1F3FE}", "\u{1F474}\u{1F3FF}", "\u{1F475}", "\u{1F475}\u{1F3FB}", "\u{1F475}\u{1F3FC}", "\u{1F475}\u{1F3FD}", "\u{1F475}\u{1F3FE}", "\u{1F475}\u{1F3FF}", "\u{1F476}", "\u{1F476}\u{1F3FB}", "\u{1F476}\u{1F3FC}", "\u{1F476}\u{1F3FD}", "\u{1F476}\u{1F3FE}", "\u{1F476}\u{1F3FF}", "\u{1F477}", "\u{1F477}\u200D\u2640\uFE0F", "\u{1F477}\u200D\u2642\uFE0F", "\u{1F477}\u{1F3FB}", "\u{1F477}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F477}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F477}\u{1F3FC}", "\u{1F477}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F477}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F477}\u{1F3FD}", "\u{1F477}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F477}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F477}\u{1F3FE}", "\u{1F477}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F477}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F477}\u{1F3FF}", "\u{1F477}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F477}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F478}", "\u{1F478}\u{1F3FB}", "\u{1F478}\u{1F3FC}", "\u{1F478}\u{1F3FD}", "\u{1F478}\u{1F3FE}", "\u{1F478}\u{1F3FF}", "\u{1F47C}", "\u{1F47C}\u{1F3FB}", "\u{1F47C}\u{1F3FC}", "\u{1F47C}\u{1F3FD}", "\u{1F47C}\u{1F3FE}", "\u{1F47C}\u{1F3FF}", "\u{1F481}", "\u{1F481}\u200D\u2640\uFE0F", "\u{1F481}\u200D\u2642\uFE0F", "\u{1F481}\u{1F3FB}", "\u{1F481}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F481}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F481}\u{1F3FC}", "\u{1F481}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F481}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F481}\u{1F3FD}", "\u{1F481}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F481}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F481}\u{1F3FE}", "\u{1F481}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F481}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F481}\u{1F3FF}", "\u{1F481}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F481}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F482}", "\u{1F482}\u200D\u2640\uFE0F", "\u{1F482}\u200D\u2642\uFE0F", "\u{1F482}\u{1F3FB}", "\u{1F482}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F482}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F482}\u{1F3FC}", "\u{1F482}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F482}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F482}\u{1F3FD}", "\u{1F482}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F482}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F482}\u{1F3FE}", "\u{1F482}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F482}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F482}\u{1F3FF}", "\u{1F482}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F482}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F486}", "\u{1F486}\u200D\u2640\uFE0F", "\u{1F486}\u200D\u2642\uFE0F", "\u{1F486}\u{1F3FB}", "\u{1F486}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F486}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F486}\u{1F3FC}", "\u{1F486}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F486}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F486}\u{1F3FD}", "\u{1F486}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F486}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F486}\u{1F3FE}", "\u{1F486}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F486}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F486}\u{1F3FF}", "\u{1F486}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F486}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F487}", "\u{1F487}\u{1F3FB}", "\u{1F487}\u{1F3FC}", "\u{1F487}\u{1F3FD}", "\u{1F575}\u{1F3FB}", "\u{1F575}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F575}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F575}\u{1F3FC}", "\u{1F575}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F575}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F575}\u{1F3FD}", "\u{1F575}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F575}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F575}\u{1F3FE}", "\u{1F575}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F575}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F575}\u{1F3FF}", "\u{1F575}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F575}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F575}\uFE0F", "\u{1F575}\uFE0F\u200D\u2640\uFE0F", "\u{1F575}\uFE0F\u200D\u2642\uFE0F", "\u{1F645}", "\u{1F645}\u200D\u2640\uFE0F", "\u{1F645}\u200D\u2642\uFE0F", "\u{1F645}\u{1F3FB}", "\u{1F645}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F645}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F645}\u{1F3FC}", "\u{1F645}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F645}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F645}\u{1F3FD}", "\u{1F645}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F645}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F645}\u{1F3FE}", "\u{1F645}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F645}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F645}\u{1F3FF}", "\u{1F645}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F645}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F646}", "\u{1F646}\u200D\u2640\uFE0F", "\u{1F646}\u200D\u2642\uFE0F", "\u{1F646}\u{1F3FB}", "\u{1F646}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F646}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F646}\u{1F3FC}", "\u{1F646}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F646}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F646}\u{1F3FD}", "\u{1F646}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F646}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F646}\u{1F3FE}", "\u{1F646}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F646}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F646}\u{1F3FF}", "\u{1F646}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F646}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F647}", "\u{1F647}\u200D\u2640\uFE0F", "\u{1F647}\u200D\u2642\uFE0F", "\u{1F647}\u{1F3FB}", "\u{1F647}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F647}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F647}\u{1F3FC}", "\u{1F647}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F647}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F647}\u{1F3FD}", "\u{1F647}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F647}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F647}\u{1F3FE}", "\u{1F647}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F647}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F647}\u{1F3FF}", "\u{1F647}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F647}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F64B}", "\u{1F64B}\u200D\u2640\uFE0F", "\u{1F64B}\u200D\u2642\uFE0F", "\u{1F64B}\u{1F3FB}", "\u{1F64B}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F64B}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F64B}\u{1F3FC}", "\u{1F64B}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F64B}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F64B}\u{1F3FD}", "\u{1F64B}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F64B}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F64B}\u{1F3FE}", "\u{1F64B}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F64B}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F64B}\u{1F3FF}", "\u{1F64B}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F64B}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F64D}", "\u{1F64D}\u200D\u2640\uFE0F", "\u{1F64D}\u200D\u2642\uFE0F", "\u{1F64D}\u{1F3FB}", "\u{1F64D}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F64D}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F64D}\u{1F3FC}", "\u{1F64D}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F64D}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F64D}\u{1F3FD}", "\u{1F64D}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F64D}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F64D}\u{1F3FE}", "\u{1F64D}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F64D}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F64D}\u{1F3FF}", "\u{1F64D}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F64D}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F64E}", "\u{1F64E}\u200D\u2640\uFE0F", "\u{1F64E}\u200D\u2642\uFE0F", "\u{1F64E}\u{1F3FB}", "\u{1F64E}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F64E}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F64E}\u{1F3FC}", "\u{1F64E}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F64E}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F64E}\u{1F3FD}", "\u{1F64E}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F64E}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F64E}\u{1F3FE}", "\u{1F64E}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F64E}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F64E}\u{1F3FF}", "\u{1F64E}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F64E}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F926}", "\u{1F926}\u200D\u2640\uFE0F", "\u{1F926}\u200D\u2642\uFE0F", "\u{1F926}\u{1F3FB}", "\u{1F926}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F926}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F926}\u{1F3FC}", "\u{1F926}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F926}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F926}\u{1F3FD}", "\u{1F926}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F926}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F926}\u{1F3FE}", "\u{1F926}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F926}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F926}\u{1F3FF}", "\u{1F926}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F926}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F930}", "\u{1F930}\u{1F3FB}", "\u{1F930}\u{1F3FC}", "\u{1F930}\u{1F3FD}", "\u{1F930}\u{1F3FE}", "\u{1F930}\u{1F3FF}", "\u{1F931}", "\u{1F931}\u{1F3FB}", "\u{1F931}\u{1F3FC}", "\u{1F931}\u{1F3FD}", "\u{1F931}\u{1F3FE}", "\u{1F931}\u{1F3FF}", "\u{1F934}", "\u{1F934}\u{1F3FB}", "\u{1F934}\u{1F3FC}", "\u{1F934}\u{1F3FD}", "\u{1F934}\u{1F3FE}", "\u{1F934}\u{1F3FF}", "\u{1F935}", "\u{1F935}\u200D\u2640\uFE0F", "\u{1F935}\u200D\u2642\uFE0F", "\u{1F935}\u{1F3FB}", "\u{1F935}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F935}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F935}\u{1F3FC}", "\u{1F935}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F935}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F935}\u{1F3FD}", "\u{1F935}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F935}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F935}\u{1F3FE}", "\u{1F935}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F935}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F935}\u{1F3FF}", "\u{1F935}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F935}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F936}", "\u{1F936}\u{1F3FB}", "\u{1F936}\u{1F3FC}", "\u{1F936}\u{1F3FD}", "\u{1F936}\u{1F3FE}", "\u{1F936}\u{1F3FF}", "\u{1F937}", "\u{1F937}\u200D\u2640\uFE0F", "\u{1F937}\u200D\u2642\uFE0F", "\u{1F937}\u{1F3FB}", "\u{1F937}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F937}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F937}\u{1F3FC}", "\u{1F937}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F937}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F937}\u{1F3FD}", "\u{1F937}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F937}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F937}\u{1F3FE}", "\u{1F937}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F937}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F937}\u{1F3FF}", "\u{1F937}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F937}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F977}", "\u{1F977}\u{1F3FB}", "\u{1F977}\u{1F3FC}", "\u{1F977}\u{1F3FD}", "\u{1F977}\u{1F3FE}", "\u{1F977}\u{1F3FF}", "\u{1F9B8}", "\u{1F9B8}\u200D\u2640\uFE0F", "\u{1F9B8}\u200D\u2642\uFE0F", "\u{1F9B8}\u{1F3FB}", "\u{1F9B8}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F9B8}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F9B8}\u{1F3FC}", "\u{1F9B8}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F9B8}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F9B8}\u{1F3FD}", "\u{1F9B8}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F9B8}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F9B8}\u{1F3FE}", "\u{1F9B8}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F9B8}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F9B8}\u{1F3FF}", "\u{1F9B8}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F9B8}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F9B9}", "\u{1F9B9}\u200D\u2640\uFE0F", "\u{1F9B9}\u200D\u2642\uFE0F", "\u{1F9B9}\u{1F3FB}", "\u{1F9B9}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F9B9}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F9B9}\u{1F3FC}", "\u{1F9B9}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F9B9}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F9B9}\u{1F3FD}", "\u{1F9B9}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F9B9}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F9B9}\u{1F3FE}", "\u{1F9B9}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F9B9}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F9B9}\u{1F3FF}", "\u{1F9B9}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F9B9}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F9CF}", "\u{1F9CF}\u200D\u2640\uFE0F", "\u{1F9CF}\u200D\u2642\uFE0F", "\u{1F9CF}\u{1F3FB}", "\u{1F9CF}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F9CF}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F9CF}\u{1F3FC}", "\u{1F9CF}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F9CF}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F9CF}\u{1F3FD}", "\u{1F9CF}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F9CF}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F9CF}\u{1F3FE}", "\u{1F9CF}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F9CF}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F9CF}\u{1F3FF}", "\u{1F9CF}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F9CF}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F9D1}", "\u{1F9D1}\u200D\u2695\uFE0F", "\u{1F9D1}\u200D\u2696\uFE0F", "\u{1F9D1}\u200D\u2708\uFE0F", "\u{1F9D1}\u200D\u{1F33E}", "\u{1F9D1}\u200D\u{1F373}", "\u{1F9D1}\u200D\u{1F37C}", "\u{1F9D1}\u200D\u{1F384}", "\u{1F9D1}\u200D\u{1F393}", "\u{1F9D1}\u200D\u{1F3A4}", "\u{1F9D1}\u200D\u{1F3A8}", "\u{1F9D1}\u200D\u{1F3EB}", "\u{1F9D1}\u200D\u{1F3ED}", "\u{1F9D1}\u200D\u{1F4BB}", "\u{1F9D1}\u200D\u{1F4BC}", "\u{1F9D1}\u200D\u{1F527}", "\u{1F9D1}\u200D\u{1F52C}", "\u{1F9D1}\u200D\u{1F680}", "\u{1F9D1}\u200D\u{1F692}", "\u{1F9D1}\u200D\u{1F9B0}", "\u{1F9D1}\u200D\u{1F9B1}", "\u{1F9D1}\u200D\u{1F9B2}", "\u{1F9D1}\u200D\u{1F9B3}", "\u{1F9D1}\u{1F3FB}", "\u{1F9D1}\u{1F3FB}\u200D\u2695\uFE0F", "\u{1F9D1}\u{1F3FB}\u200D\u2696\uFE0F", "\u{1F9D1}\u{1F3FB}\u200D\u2708\uFE0F", "\u{1F9D1}\u{1F3FB}\u200D\u{1F33E}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F373}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F37C}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F384}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F393}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F3A4}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F3A8}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F3EB}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F3ED}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F4BB}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F4BC}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F527}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F52C}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F680}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F692}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F9B0}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F9B1}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F9B2}", "\u{1F9D1}\u{1F3FB}\u200D\u{1F9B3}", "\u{1F9D1}\u{1F3FC}", "\u{1F9D1}\u{1F3FC}\u200D\u2695\uFE0F", "\u{1F9D1}\u{1F3FC}\u200D\u2696\uFE0F", "\u{1F9D1}\u{1F3FC}\u200D\u2708\uFE0F", "\u{1F9D1}\u{1F3FC}\u200D\u{1F33E}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F373}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F37C}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F384}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F393}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F3A4}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F3A8}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F3EB}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F3ED}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F4BB}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F4BC}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F527}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F52C}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F680}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F692}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F9B0}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F9B1}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F9B2}", "\u{1F9D1}\u{1F3FC}\u200D\u{1F9B3}", "\u{1F9D1}\u{1F3FD}", "\u{1F9D1}\u{1F3FD}\u200D\u2695\uFE0F", "\u{1F9D1}\u{1F3FD}\u200D\u2696\uFE0F", "\u{1F9D1}\u{1F3FD}\u200D\u2708\uFE0F", "\u{1F9D1}\u{1F3FD}\u200D\u{1F33E}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F373}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F37C}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F384}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F393}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F3A4}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F3A8}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F3EB}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F3ED}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F4BB}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F4BC}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F527}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F52C}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F680}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F692}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F9B0}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F9B1}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F9B2}", "\u{1F9D1}\u{1F3FD}\u200D\u{1F9B3}", "\u{1F9D1}\u{1F3FE}", "\u{1F9D1}\u{1F3FE}\u200D\u2695\uFE0F", "\u{1F9D1}\u{1F3FE}\u200D\u2696\uFE0F", "\u{1F9D1}\u{1F3FE}\u200D\u2708\uFE0F", "\u{1F9D1}\u{1F3FE}\u200D\u{1F33E}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F373}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F37C}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F384}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F393}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F3A4}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F3A8}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F3EB}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F3ED}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F4BB}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F4BC}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F527}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F52C}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F680}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F692}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F9B0}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F9B1}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F9B2}", "\u{1F9D1}\u{1F3FE}\u200D\u{1F9B3}", "\u{1F9D1}\u{1F3FF}", "\u{1F9D1}\u{1F3FF}\u200D\u2695\uFE0F", "\u{1F9D1}\u{1F3FF}\u200D\u2696\uFE0F", "\u{1F9D1}\u{1F3FF}\u200D\u2708\uFE0F", "\u{1F9D1}\u{1F3FF}\u200D\u{1F33E}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F373}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F37C}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F384}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F393}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F3A4}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F3A8}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F3EB}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F3ED}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F4BB}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F4BC}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F527}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F52C}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F680}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F692}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F9B0}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F9B1}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F9B2}", "\u{1F9D1}\u{1F3FF}\u200D\u{1F9B3}", "\u{1F9D2}", "\u{1F9D2}\u{1F3FB}", "\u{1F9D2}\u{1F3FC}", "\u{1F9D2}\u{1F3FD}", "\u{1F9D2}\u{1F3FE}", "\u{1F9D2}\u{1F3FF}", "\u{1F9D3}", "\u{1F9D3}\u{1F3FB}", "\u{1F9D3}\u{1F3FC}", "\u{1F9D3}\u{1F3FD}", "\u{1F9D3}\u{1F3FE}", "\u{1F9D3}\u{1F3FF}", "\u{1F9D4}", "\u{1F9D4}\u200D\u2640\uFE0F", "\u{1F9D4}\u200D\u2642\uFE0F", "\u{1F9D4}\u{1F3FB}", "\u{1F9D4}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F9D4}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F9D4}\u{1F3FC}", "\u{1F9D4}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F9D4}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F9D4}\u{1F3FD}", "\u{1F9D4}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F9D4}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F9D4}\u{1F3FE}", "\u{1F9D4}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F9D4}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F9D4}\u{1F3FF}", "\u{1F9D4}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F9D4}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F9D5}", "\u{1F9D5}\u{1F3FB}", "\u{1F9D5}\u{1F3FC}", "\u{1F9D5}\u{1F3FD}", "\u{1F9D5}\u{1F3FE}", "\u{1F9D5}\u{1F3FF}", "\u{1F9D9}", "\u{1F9D9}\u200D\u2640\uFE0F", "\u{1F9D9}\u200D\u2642\uFE0F", "\u{1F9D9}\u{1F3FB}", "\u{1F9D9}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F9D9}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F9D9}\u{1F3FC}", "\u{1F9D9}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F9D9}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F9D9}\u{1F3FD}", "\u{1F9D9}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F9D9}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F9D9}\u{1F3FE}", "\u{1F9D9}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F9D9}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F9D9}\u{1F3FF}", "\u{1F9D9}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F9D9}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F9DA}", "\u{1F9DA}\u200D\u2640\uFE0F", "\u{1F9DA}\u200D\u2642\uFE0F", "\u{1F9DA}\u{1F3FB}", "\u{1F9DA}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F9DA}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F9DA}\u{1F3FC}", "\u{1F9DA}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F9DA}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F9DA}\u{1F3FD}", "\u{1F9DA}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F9DA}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F9DA}\u{1F3FE}", "\u{1F9DA}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F9DA}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F9DA}\u{1F3FF}", "\u{1F9DA}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F9DA}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F9DB}", "\u{1F9DB}\u200D\u2640\uFE0F", "\u{1F9DB}\u200D\u2642\uFE0F", "\u{1F9DB}\u{1F3FB}", "\u{1F9DB}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F9DB}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F9DB}\u{1F3FC}", "\u{1F9DB}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F9DB}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F9DB}\u{1F3FD}", "\u{1F9DB}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F9DB}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F9DB}\u{1F3FE}", "\u{1F9DB}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F9DB}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F9DB}\u{1F3FF}", "\u{1F9DB}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F9DB}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F9DC}", "\u{1F9DC}\u200D\u2640\uFE0F", "\u{1F9DC}\u200D\u2642\uFE0F", "\u{1F9DC}\u{1F3FB}", "\u{1F9DC}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F9DC}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F9DC}\u{1F3FC}", "\u{1F9DC}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F9DC}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F9DC}\u{1F3FD}", "\u{1F9DC}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F9DC}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F9DC}\u{1F3FE}", "\u{1F9DC}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F9DC}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F9DC}\u{1F3FF}", "\u{1F9DC}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F9DC}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F9DD}", "\u{1F9DD}\u200D\u2640\uFE0F", "\u{1F9DD}\u200D\u2642\uFE0F", "\u{1F9DD}\u{1F3FB}", "\u{1F9DD}\u{1F3FB}\u200D\u2640\uFE0F", "\u{1F9DD}\u{1F3FB}\u200D\u2642\uFE0F", "\u{1F9DD}\u{1F3FC}", "\u{1F9DD}\u{1F3FC}\u200D\u2640\uFE0F", "\u{1F9DD}\u{1F3FC}\u200D\u2642\uFE0F", "\u{1F9DD}\u{1F3FD}", "\u{1F9DD}\u{1F3FD}\u200D\u2640\uFE0F", "\u{1F9DD}\u{1F3FD}\u200D\u2642\uFE0F", "\u{1F9DD}\u{1F3FE}", "\u{1F9DD}\u{1F3FE}\u200D\u2640\uFE0F", "\u{1F9DD}\u{1F3FE}\u200D\u2642\uFE0F", "\u{1F9DD}\u{1F3FF}", "\u{1F9DD}\u{1F3FF}\u200D\u2640\uFE0F", "\u{1F9DD}\u{1F3FF}\u200D\u2642\uFE0F", "\u{1F9DE}", "\u{1F9DE}\u200D\u2640\uFE0F", "\u{1F9DE}\u200D\u2642\uFE0F", "\u{1F9DF}", "\u{1F9DF}\u200D\u2640\uFE0F", "\u{1F9DF}\u200D\u2642\uFE0F"], nature: ["\u2618\uFE0F", "\u{1F331}", "\u{1F332}", "\u{1F333}", "\u{1F334}", "\u{1F335}", "\u{1F337}", "\u{1F338}", "\u{1F339}", "\u{1F33A}", "\u{1F33B}", "\u{1F33C}", "\u{1F33E}", "\u{1F33F}", "\u{1F340}", "\u{1F341}", "\u{1F342}", "\u{1F343}", "\u{1F3F5}\uFE0F", "\u{1F400}", "\u{1F401}", "\u{1F402}", "\u{1F403}", "\u{1F404}", "\u{1F405}", "\u{1F406}", "\u{1F407}", "\u{1F408}", "\u{1F408}\u200D\u2B1B", "\u{1F409}", "\u{1F40A}", "\u{1F40B}", "\u{1F40C}", "\u{1F40D}", "\u{1F40E}", "\u{1F40F}", "\u{1F410}", "\u{1F411}", "\u{1F412}", "\u{1F413}", "\u{1F414}", "\u{1F415}", "\u{1F415}\u200D\u{1F9BA}", "\u{1F416}", "\u{1F417}", "\u{1F418}", "\u{1F419}", "\u{1F41A}", "\u{1F41B}", "\u{1F41C}", "\u{1F41D}", "\u{1F41E}", "\u{1F41F}", "\u{1F420}", "\u{1F421}", "\u{1F422}", "\u{1F423}", "\u{1F424}", "\u{1F425}", "\u{1F426}", "\u{1F427}", "\u{1F428}", "\u{1F429}", "\u{1F42A}", "\u{1F42B}", "\u{1F42C}", "\u{1F42D}", "\u{1F42E}", "\u{1F42F}", "\u{1F430}", "\u{1F431}", "\u{1F432}", "\u{1F433}", "\u{1F434}", "\u{1F435}", "\u{1F436}", "\u{1F437}", "\u{1F438}", "\u{1F439}", "\u{1F43A}", "\u{1F43B}", "\u{1F43B}\u200D\u2744\uFE0F", "\u{1F43C}", "\u{1F43D}", "\u{1F43E}", "\u{1F43F}\uFE0F", "\u{1F490}", "\u{1F4AE}", "\u{1F54A}\uFE0F", "\u{1F577}\uFE0F", "\u{1F578}\uFE0F", "\u{1F940}", "\u{1F981}", "\u{1F982}", "\u{1F983}", "\u{1F984}", "\u{1F985}", "\u{1F986}", "\u{1F987}", "\u{1F988}", "\u{1F989}", "\u{1F98A}", "\u{1F98B}", "\u{1F98C}", "\u{1F98D}", "\u{1F98E}", "\u{1F98F}", "\u{1F992}", "\u{1F993}", "\u{1F994}", "\u{1F995}", "\u{1F996}", "\u{1F997}", "\u{1F998}", "\u{1F999}", "\u{1F99A}", "\u{1F99B}", "\u{1F99C}", "\u{1F99D}", "\u{1F99F}", "\u{1F9A0}", "\u{1F9A1}", "\u{1F9A2}", "\u{1F9A3}", "\u{1F9A4}", "\u{1F9A5}", "\u{1F9A6}", "\u{1F9A7}", "\u{1F9A8}", "\u{1F9A9}", "\u{1F9AB}", "\u{1F9AC}", "\u{1F9AD}", "\u{1F9AE}", "\u{1FAB0}", "\u{1FAB1}", "\u{1FAB2}", "\u{1FAB3}", "\u{1FAB4}", "\u{1FAB6}"], food: ["\u2615", "\u{1F32D}", "\u{1F32E}", "\u{1F32F}", "\u{1F330}", "\u{1F336}\uFE0F", "\u{1F33D}", "\u{1F344}", "\u{1F345}", "\u{1F346}", "\u{1F347}", "\u{1F348}", "\u{1F349}", "\u{1F34A}", "\u{1F34B}", "\u{1F34C}", "\u{1F34D}", "\u{1F34E}", "\u{1F34F}", "\u{1F350}", "\u{1F351}", "\u{1F352}", "\u{1F353}", "\u{1F354}", "\u{1F355}", "\u{1F356}", "\u{1F357}", "\u{1F358}", "\u{1F359}", "\u{1F35A}", "\u{1F35B}", "\u{1F35C}", "\u{1F35D}", "\u{1F35E}", "\u{1F35F}", "\u{1F360}", "\u{1F361}", "\u{1F362}", "\u{1F363}", "\u{1F364}", "\u{1F365}", "\u{1F366}", "\u{1F367}", "\u{1F368}", "\u{1F369}", "\u{1F36A}", "\u{1F36B}", "\u{1F36C}", "\u{1F36D}", "\u{1F36E}", "\u{1F36F}", "\u{1F370}", "\u{1F371}", "\u{1F372}", "\u{1F373}", "\u{1F374}", "\u{1F375}", "\u{1F376}", "\u{1F377}", "\u{1F378}", "\u{1F379}", "\u{1F37A}", "\u{1F37B}", "\u{1F37C}", "\u{1F37D}\uFE0F", "\u{1F37E}", "\u{1F37F}", "\u{1F382}", "\u{1F3FA}", "\u{1F52A}", "\u{1F942}", "\u{1F943}", "\u{1F944}", "\u{1F950}", "\u{1F951}", "\u{1F952}", "\u{1F953}", "\u{1F954}", "\u{1F955}", "\u{1F956}", "\u{1F957}", "\u{1F958}", "\u{1F959}", "\u{1F95A}", "\u{1F95B}", "\u{1F95C}", "\u{1F95D}", "\u{1F95E}", "\u{1F95F}", "\u{1F960}", "\u{1F961}", "\u{1F962}", "\u{1F963}", "\u{1F964}", "\u{1F965}", "\u{1F966}", "\u{1F967}", "\u{1F968}", "\u{1F969}", "\u{1F96A}", "\u{1F96B}", "\u{1F96C}", "\u{1F96D}", "\u{1F96E}", "\u{1F96F}", "\u{1F980}", "\u{1F990}", "\u{1F991}", "\u{1F99E}", "\u{1F9AA}", "\u{1F9C0}", "\u{1F9C1}", "\u{1F9C2}", "\u{1F9C3}", "\u{1F9C4}", "\u{1F9C5}", "\u{1F9C6}", "\u{1F9C7}", "\u{1F9C8}", "\u{1F9C9}", "\u{1F9CA}", "\u{1F9CB}", "\u{1FAD0}", "\u{1FAD1}", "\u{1FAD2}", "\u{1FAD3}", "\u{1FAD4}", "\u{1FAD5}", "\u{1FAD6}"], travel: ["\u231A", "\u231B", "\u23F0", "\u23F1\uFE0F", "\u23F2\uFE0F", "\u23F3", "\u2600\uFE0F", "\u2601\uFE0F", "\u2602\uFE0F", "\u2603\uFE0F", "\u2604\uFE0F", "\u2614", "\u2668\uFE0F", "\u2693", "\u26A1", "\u26C4", "\u26C5", "\u26C8\uFE0F", "\u26E9\uFE0F", "\u26EA", "\u26F0\uFE0F", "\u26F1\uFE0F", "\u26F2", "\u26F4\uFE0F", "\u26F5", "\u26FA", "\u26FD", "\u2708\uFE0F", "\u2744\uFE0F", "\u2B50", "\u{1F300}", "\u{1F301}", "\u{1F302}", "\u{1F303}", "\u{1F304}", "\u{1F305}", "\u{1F306}", "\u{1F307}", "\u{1F308}", "\u{1F309}", "\u{1F30A}", "\u{1F30B}", "\u{1F30C}", "\u{1F30D}", "\u{1F30E}", "\u{1F30F}", "\u{1F310}", "\u{1F311}", "\u{1F312}", "\u{1F313}", "\u{1F314}", "\u{1F315}", "\u{1F316}", "\u{1F317}", "\u{1F318}", "\u{1F319}", "\u{1F31A}", "\u{1F31B}", "\u{1F31C}", "\u{1F31D}", "\u{1F31E}", "\u{1F31F}", "\u{1F320}", "\u{1F321}\uFE0F", "\u{1F324}\uFE0F", "\u{1F325}\uFE0F", "\u{1F326}\uFE0F", "\u{1F327}\uFE0F", "\u{1F328}\uFE0F", "\u{1F329}\uFE0F", "\u{1F32A}\uFE0F", "\u{1F32B}\uFE0F", "\u{1F32C}\uFE0F", "\u{1F3A0}", "\u{1F3A1}", "\u{1F3A2}", "\u{1F3AA}", "\u{1F3CD}\uFE0F", "\u{1F3CE}\uFE0F", "\u{1F3D4}\uFE0F", "\u{1F3D5}\uFE0F", "\u{1F3D6}\uFE0F", "\u{1F3D7}\uFE0F", "\u{1F3D8}\uFE0F", "\u{1F3D9}\uFE0F", "\u{1F3DA}\uFE0F", "\u{1F3DB}\uFE0F", "\u{1F3DC}\uFE0F", "\u{1F3DD}\uFE0F", "\u{1F3DE}\uFE0F", "\u{1F3DF}\uFE0F", "\u{1F3E0}", "\u{1F3E1}", "\u{1F3E2}", "\u{1F3E3}", "\u{1F3E4}", "\u{1F3E5}", "\u{1F3E6}", "\u{1F3E8}", "\u{1F3E9}", "\u{1F3EA}", "\u{1F3EB}", "\u{1F3EC}", "\u{1F3ED}", "\u{1F3EF}", "\u{1F3F0}", "\u{1F488}", "\u{1F492}", "\u{1F4A7}", "\u{1F4BA}", "\u{1F525}", "\u{1F54B}", "\u{1F54C}", "\u{1F54D}", "\u{1F550}", "\u{1F551}", "\u{1F552}", "\u{1F553}", "\u{1F554}", "\u{1F555}", "\u{1F556}", "\u{1F557}", "\u{1F558}", "\u{1F559}", "\u{1F55A}", "\u{1F55B}", "\u{1F55C}", "\u{1F55D}", "\u{1F55E}", "\u{1F55F}", "\u{1F560}", "\u{1F561}", "\u{1F562}", "\u{1F563}", "\u{1F564}", "\u{1F565}", "\u{1F566}", "\u{1F567}", "\u{1F570}\uFE0F", "\u{1F5FA}\uFE0F", "\u{1F5FB}", "\u{1F5FC}", "\u{1F5FD}", "\u{1F5FE}", "\u{1F680}", "\u{1F681}", "\u{1F682}", "\u{1F683}", "\u{1F684}", "\u{1F685}", "\u{1F686}", "\u{1F687}", "\u{1F688}", "\u{1F689}", "\u{1F68A}", "\u{1F68B}", "\u{1F68C}", "\u{1F68D}", "\u{1F68E}", "\u{1F68F}", "\u{1F690}", "\u{1F691}", "\u{1F692}", "\u{1F693}", "\u{1F694}", "\u{1F695}", "\u{1F696}", "\u{1F697}", "\u{1F698}", "\u{1F699}", "\u{1F69A}", "\u{1F69B}", "\u{1F69C}", "\u{1F69D}", "\u{1F69E}", "\u{1F69F}", "\u{1F6A0}", "\u{1F6A1}", "\u{1F6A2}", "\u{1F6A4}", "\u{1F6A5}", "\u{1F6A6}", "\u{1F6A7}", "\u{1F6A8}", "\u{1F6B2}", "\u{1F6CE}\uFE0F", "\u{1F6D1}", "\u{1F6D5}", "\u{1F6D6}", "\u{1F6E2}\uFE0F", "\u{1F6E3}\uFE0F", "\u{1F6E4}\uFE0F", "\u{1F6E5}\uFE0F", "\u{1F6E9}\uFE0F", "\u{1F6EB}", "\u{1F6EC}", "\u{1F6F0}\uFE0F", "\u{1F6F3}\uFE0F", "\u{1F6F4}", "\u{1F6F5}", "\u{1F6F6}", "\u{1F6F8}", "\u{1F6F9}", "\u{1F6FA}", "\u{1F6FB}", "\u{1F6FC}", "\u{1F9BC}", "\u{1F9BD}", "\u{1F9ED}", "\u{1F9F1}", "\u{1F9F3}", "\u{1FA82}", "\u{1FA90}", "\u{1FAA8}", "\u{1FAB5}"], activity: ["\u265F\uFE0F", "\u2660\uFE0F", "\u2663\uFE0F", "\u2665\uFE0F", "\u2666\uFE0F", "\u26BD", "\u26BE", "\u26F3", "\u26F8\uFE0F", "\u2728", "\u{1F004}", "\u{1F0CF}", "\u{1F380}", "\u{1F381}", "\u{1F383}", "\u{1F384}", "\u{1F386}", "\u{1F387}", "\u{1F388}", "\u{1F389}", "\u{1F38A}", "\u{1F38B}", "\u{1F38D}", "\u{1F38E}", "\u{1F38F}", "\u{1F390}", "\u{1F391}", "\u{1F396}\uFE0F", "\u{1F397}\uFE0F", "\u{1F39F}\uFE0F", "\u{1F3A3}", "\u{1F3A8}", "\u{1F3AB}", "\u{1F3AD}", "\u{1F3AE}", "\u{1F3AF}", "\u{1F3B0}", "\u{1F3B1}", "\u{1F3B2}", "\u{1F3B3}", "\u{1F3B4}", "\u{1F3BD}", "\u{1F3BE}", "\u{1F3BF}", "\u{1F3C0}", "\u{1F3C5}", "\u{1F3C6}", "\u{1F3C8}", "\u{1F3C9}", "\u{1F3CF}", "\u{1F3D0}", "\u{1F3D1}", "\u{1F3D2}", "\u{1F3D3}", "\u{1F3F8}", "\u{1F52E}", "\u{1F579}\uFE0F", "\u{1F5BC}\uFE0F", "\u{1F6F7}", "\u{1F93F}", "\u{1F945}", "\u{1F947}", "\u{1F948}", "\u{1F949}", "\u{1F94A}", "\u{1F94B}", "\u{1F94C}", "\u{1F94D}", "\u{1F94E}", "\u{1F94F}", "\u{1F9E7}", "\u{1F9E8}", "\u{1F9E9}", "\u{1F9F5}", "\u{1F9F6}", "\u{1F9F8}", "\u{1F9FF}", "\u{1FA80}", "\u{1FA81}", "\u{1FA84}", "\u{1FA85}", "\u{1FA86}", "\u{1FAA1}", "\u{1FAA2}"], object: ["\u2328\uFE0F", "\u260E\uFE0F", "\u2692\uFE0F", "\u2694\uFE0F", "\u2696\uFE0F", "\u2697\uFE0F", "\u2699\uFE0F", "\u26B0\uFE0F", "\u26B1\uFE0F", "\u26CF\uFE0F", "\u26D1\uFE0F", "\u26D3\uFE0F", "\u2702\uFE0F", "\u2709\uFE0F", "\u270F\uFE0F", "\u2712\uFE0F", "\u{1F392}", "\u{1F393}", "\u{1F399}\uFE0F", "\u{1F39A}\uFE0F", "\u{1F39B}\uFE0F", "\u{1F39E}\uFE0F", "\u{1F3A4}", "\u{1F3A5}", "\u{1F3A7}", "\u{1F3A9}", "\u{1F3AC}", "\u{1F3B5}", "\u{1F3B6}", "\u{1F3B7}", "\u{1F3B8}", "\u{1F3B9}", "\u{1F3BA}", "\u{1F3BB}", "\u{1F3BC}", "\u{1F3EE}", "\u{1F3F7}\uFE0F", "\u{1F3F9}", "\u{1F451}", "\u{1F452}", "\u{1F453}", "\u{1F454}", "\u{1F455}", "\u{1F456}", "\u{1F457}", "\u{1F458}", "\u{1F459}", "\u{1F45A}", "\u{1F45B}", "\u{1F45C}", "\u{1F45D}", "\u{1F45E}", "\u{1F45F}", "\u{1F460}", "\u{1F461}", "\u{1F462}", "\u{1F484}", "\u{1F489}", "\u{1F48A}", "\u{1F48D}", "\u{1F48E}", "\u{1F4A1}", "\u{1F4B0}", "\u{1F4B3}", "\u{1F4B4}", "\u{1F4B5}", "\u{1F4B6}", "\u{1F4B7}", "\u{1F4B8}", "\u{1F4B9}", "\u{1F4BB}", "\u{1F4BC}", "\u{1F4BD}", "\u{1F4BE}", "\u{1F4BF}", "\u{1F4C0}", "\u{1F4C1}", "\u{1F4C2}", "\u{1F4C3}", "\u{1F4C4}", "\u{1F4C5}", "\u{1F4C6}", "\u{1F4C7}", "\u{1F4C8}", "\u{1F4C9}", "\u{1F4CA}", "\u{1F4CB}", "\u{1F4CC}", "\u{1F4CD}", "\u{1F4CE}", "\u{1F4CF}", "\u{1F4D0}", "\u{1F4D1}", "\u{1F4D2}", "\u{1F4D3}", "\u{1F4D4}", "\u{1F4D5}", "\u{1F4D6}", "\u{1F4D7}", "\u{1F4D8}", "\u{1F4D9}", "\u{1F4DA}", "\u{1F4DC}", "\u{1F4DD}", "\u{1F4DE}", "\u{1F4DF}", "\u{1F4E0}", "\u{1F4E1}", "\u{1F4E2}", "\u{1F4E3}", "\u{1F4E4}", "\u{1F4E5}", "\u{1F4E6}", "\u{1F4E7}", "\u{1F4E8}", "\u{1F4E9}", "\u{1F4EA}", "\u{1F4EB}", "\u{1F4EC}", "\u{1F4ED}", "\u{1F4EE}", "\u{1F4EF}", "\u{1F4F0}", "\u{1F4F1}", "\u{1F4F2}", "\u{1F4F7}", "\u{1F4F8}", "\u{1F4F9}", "\u{1F4FA}", "\u{1F4FB}", "\u{1F4FC}", "\u{1F4FD}\uFE0F", "\u{1F4FF}", "\u{1F507}", "\u{1F508}", "\u{1F509}", "\u{1F50A}", "\u{1F50B}", "\u{1F50C}", "\u{1F50D}", "\u{1F50E}", "\u{1F50F}", "\u{1F510}", "\u{1F511}", "\u{1F512}", "\u{1F513}", "\u{1F514}", "\u{1F515}", "\u{1F516}", "\u{1F517}", "\u{1F526}", "\u{1F527}", "\u{1F528}", "\u{1F529}", "\u{1F52B}", "\u{1F52C}", "\u{1F52D}", "\u{1F56F}\uFE0F", "\u{1F576}\uFE0F", "\u{1F587}\uFE0F", "\u{1F58A}\uFE0F", "\u{1F58B}\uFE0F", "\u{1F58C}\uFE0F", "\u{1F58D}\uFE0F", "\u{1F5A5}\uFE0F", "\u{1F5A8}\uFE0F", "\u{1F5B1}\uFE0F", "\u{1F5B2}\uFE0F", "\u{1F5C2}\uFE0F", "\u{1F5C3}\uFE0F", "\u{1F5C4}\uFE0F", "\u{1F5D1}\uFE0F", "\u{1F5D2}\uFE0F", "\u{1F5D3}\uFE0F", "\u{1F5DC}\uFE0F", "\u{1F5DD}\uFE0F", "\u{1F5DE}\uFE0F", "\u{1F5E1}\uFE0F", "\u{1F5F3}\uFE0F", "\u{1F5FF}", "\u{1F6AA}", "\u{1F6AC}", "\u{1F6BD}", "\u{1F6BF}", "\u{1F6C1}", "\u{1F6CB}\uFE0F", "\u{1F6CD}\uFE0F", "\u{1F6CF}\uFE0F", "\u{1F6D2}", "\u{1F6D7}", "\u{1F6E0}\uFE0F", "\u{1F6E1}\uFE0F", "\u{1F941}", "\u{1F97B}", "\u{1F97C}", "\u{1F97D}", "\u{1F97E}", "\u{1F97F}", "\u{1F9AF}", "\u{1F9BA}", "\u{1F9E2}", "\u{1F9E3}", "\u{1F9E4}", "\u{1F9E5}", "\u{1F9E6}", "\u{1F9EA}", "\u{1F9EB}", "\u{1F9EC}", "\u{1F9EE}", "\u{1F9EF}", "\u{1F9F0}", "\u{1F9F2}", "\u{1F9F4}", "\u{1F9F7}", "\u{1F9F9}", "\u{1F9FA}", "\u{1F9FB}", "\u{1F9FC}", "\u{1F9FD}", "\u{1F9FE}", "\u{1FA70}", "\u{1FA71}", "\u{1FA72}", "\u{1FA73}", "\u{1FA74}", "\u{1FA78}", "\u{1FA79}", "\u{1FA7A}", "\u{1FA83}", "\u{1FA91}", "\u{1FA92}", "\u{1FA93}", "\u{1FA94}", "\u{1FA95}", "\u{1FA96}", "\u{1FA97}", "\u{1FA98}", "\u{1FA99}", "\u{1FA9A}", "\u{1FA9B}", "\u{1FA9C}", "\u{1FA9D}", "\u{1FA9E}", "\u{1FA9F}", "\u{1FAA0}", "\u{1FAA3}", "\u{1FAA4}", "\u{1FAA5}", "\u{1FAA6}", "\u{1FAA7}"], symbol: ["#\uFE0F\u20E3", "*\uFE0F\u20E3", "0\uFE0F\u20E3", "1\uFE0F\u20E3", "2\uFE0F\u20E3", "3\uFE0F\u20E3", "4\uFE0F\u20E3", "5\uFE0F\u20E3", "6\uFE0F\u20E3", "7\uFE0F\u20E3", "8\uFE0F\u20E3", "9\uFE0F\u20E3", "\xA9\uFE0F", "\xAE\uFE0F", "\u203C\uFE0F", "\u2049\uFE0F", "\u2122\uFE0F", "\u2139\uFE0F", "\u2194\uFE0F", "\u2195\uFE0F", "\u2196\uFE0F", "\u2197\uFE0F", "\u2198\uFE0F", "\u2199\uFE0F", "\u21A9\uFE0F", "\u21AA\uFE0F", "\u23CF\uFE0F", "\u23E9", "\u23EA", "\u23EB", "\u23EC", "\u23ED\uFE0F", "\u23EE\uFE0F", "\u23EF\uFE0F", "\u23F8\uFE0F", "\u23F9\uFE0F", "\u23FA\uFE0F", "\u24C2\uFE0F", "\u25AA\uFE0F", "\u25AB\uFE0F", "\u25B6\uFE0F", "\u25C0\uFE0F", "\u25FB\uFE0F", "\u25FC\uFE0F", "\u25FD", "\u25FE", "\u2611\uFE0F", "\u2622\uFE0F", "\u2623\uFE0F", "\u2626\uFE0F", "\u262A\uFE0F", "\u262E\uFE0F", "\u262F\uFE0F", "\u2638\uFE0F", "\u2640\uFE0F", "\u2642\uFE0F", "\u2648", "\u2649", "\u264A", "\u264B", "\u264C", "\u264D", "\u264E", "\u264F", "\u2650", "\u2651", "\u2652", "\u2653", "\u267B\uFE0F", "\u267E\uFE0F", "\u267F", "\u2695\uFE0F", "\u269B\uFE0F", "\u269C\uFE0F", "\u26A0\uFE0F", "\u26A7\uFE0F", "\u26AA", "\u26AB", "\u26CE", "\u26D4", "\u2705", "\u2714\uFE0F", "\u2716\uFE0F", "\u271D\uFE0F", "\u2721\uFE0F", "\u2733\uFE0F", "\u2734\uFE0F", "\u2747\uFE0F", "\u274C", "\u274E", "\u2753", "\u2754", "\u2755", "\u2757", "\u2795", "\u2796", "\u2797", "\u27A1\uFE0F", "\u27B0", "\u27BF", "\u2934\uFE0F", "\u2935\uFE0F", "\u2B05\uFE0F", "\u2B06\uFE0F", "\u2B07\uFE0F", "\u2B1B", "\u2B1C", "\u2B55", "\u3030\uFE0F", "\u303D\uFE0F", "\u3297\uFE0F", "\u3299\uFE0F", "\u{1F170}\uFE0F", "\u{1F171}\uFE0F", "\u{1F17E}\uFE0F", "\u{1F17F}\uFE0F", "\u{1F18E}", "\u{1F191}", "\u{1F192}", "\u{1F193}", "\u{1F194}", "\u{1F195}", "\u{1F196}", "\u{1F197}", "\u{1F198}", "\u{1F199}", "\u{1F19A}", "\u{1F201}", "\u{1F202}\uFE0F", "\u{1F21A}", "\u{1F22F}", "\u{1F232}", "\u{1F233}", "\u{1F234}", "\u{1F235}", "\u{1F236}", "\u{1F237}\uFE0F", "\u{1F238}", "\u{1F239}", "\u{1F23A}", "\u{1F250}", "\u{1F251}", "\u{1F3A6}", "\u{1F3E7}", "\u{1F4A0}", "\u{1F4B1}", "\u{1F4B2}", "\u{1F4DB}", "\u{1F4F3}", "\u{1F4F4}", "\u{1F4F5}", "\u{1F4F6}", "\u{1F500}", "\u{1F501}", "\u{1F502}", "\u{1F503}", "\u{1F504}", "\u{1F505}", "\u{1F506}", "\u{1F518}", "\u{1F519}", "\u{1F51A}", "\u{1F51B}", "\u{1F51C}", "\u{1F51D}", "\u{1F51E}", "\u{1F51F}", "\u{1F520}", "\u{1F521}", "\u{1F522}", "\u{1F523}", "\u{1F524}", "\u{1F52F}", "\u{1F530}", "\u{1F531}", "\u{1F532}", "\u{1F533}", "\u{1F534}", "\u{1F535}", "\u{1F536}", "\u{1F537}", "\u{1F538}", "\u{1F539}", "\u{1F53A}", "\u{1F53B}", "\u{1F53C}", "\u{1F53D}", "\u{1F549}\uFE0F", "\u{1F54E}", "\u{1F6AB}", "\u{1F6AD}", "\u{1F6AE}", "\u{1F6AF}", "\u{1F6B0}", "\u{1F6B1}", "\u{1F6B3}", "\u{1F6B7}", "\u{1F6B8}", "\u{1F6B9}", "\u{1F6BA}", "\u{1F6BB}", "\u{1F6BC}", "\u{1F6BE}", "\u{1F6C2}", "\u{1F6C3}", "\u{1F6C4}", "\u{1F6C5}", "\u{1F6D0}", "\u{1F7E0}", "\u{1F7E1}", "\u{1F7E2}", "\u{1F7E3}", "\u{1F7E4}", "\u{1F7E5}", "\u{1F7E6}", "\u{1F7E7}", "\u{1F7E8}", "\u{1F7E9}", "\u{1F7EA}", "\u{1F7EB}"], flag: ["\u{1F1E6}\u{1F1E8}", "\u{1F1E6}\u{1F1E9}", "\u{1F1E6}\u{1F1EA}", "\u{1F1E6}\u{1F1EB}", "\u{1F1E6}\u{1F1EC}", "\u{1F1E6}\u{1F1EE}", "\u{1F1E6}\u{1F1F1}", "\u{1F1E6}\u{1F1F2}", "\u{1F1E6}\u{1F1F4}", "\u{1F1E6}\u{1F1F6}", "\u{1F1E6}\u{1F1F7}", "\u{1F1E6}\u{1F1F8}", "\u{1F1E6}\u{1F1F9}", "\u{1F1E6}\u{1F1FA}", "\u{1F1E6}\u{1F1FC}", "\u{1F1E6}\u{1F1FD}", "\u{1F1E6}\u{1F1FF}", "\u{1F1E7}\u{1F1E6}", "\u{1F1E7}\u{1F1E7}", "\u{1F1E7}\u{1F1E9}", "\u{1F1E7}\u{1F1EA}", "\u{1F1E7}\u{1F1EB}", "\u{1F1E7}\u{1F1EC}", "\u{1F1E7}\u{1F1ED}", "\u{1F1E7}\u{1F1EE}", "\u{1F1E7}\u{1F1EF}", "\u{1F1E7}\u{1F1F1}", "\u{1F1E7}\u{1F1F2}", "\u{1F1E7}\u{1F1F3}", "\u{1F1E7}\u{1F1F4}", "\u{1F1E7}\u{1F1F6}", "\u{1F1E7}\u{1F1F7}", "\u{1F1E7}\u{1F1F8}", "\u{1F1E7}\u{1F1F9}", "\u{1F1E7}\u{1F1FB}", "\u{1F1E7}\u{1F1FC}", "\u{1F1E7}\u{1F1FE}", "\u{1F1E7}\u{1F1FF}", "\u{1F1E8}\u{1F1E6}", "\u{1F1E8}\u{1F1E8}", "\u{1F1E8}\u{1F1E9}", "\u{1F1E8}\u{1F1EB}", "\u{1F1E8}\u{1F1EC}", "\u{1F1E8}\u{1F1ED}", "\u{1F1E8}\u{1F1EE}", "\u{1F1E8}\u{1F1F0}", "\u{1F1E8}\u{1F1F1}", "\u{1F1E8}\u{1F1F2}", "\u{1F1E8}\u{1F1F3}", "\u{1F1E8}\u{1F1F4}", "\u{1F1E8}\u{1F1F5}", "\u{1F1E8}\u{1F1F7}", "\u{1F1E8}\u{1F1FA}", "\u{1F1E8}\u{1F1FB}", "\u{1F1E8}\u{1F1FC}", "\u{1F1E8}\u{1F1FD}", "\u{1F1E8}\u{1F1FE}", "\u{1F1E8}\u{1F1FF}", "\u{1F1E9}\u{1F1EA}", "\u{1F1E9}\u{1F1EC}", "\u{1F1E9}\u{1F1EF}", "\u{1F1E9}\u{1F1F0}", "\u{1F1E9}\u{1F1F2}", "\u{1F1E9}\u{1F1F4}", "\u{1F1E9}\u{1F1FF}", "\u{1F1EA}\u{1F1E6}", "\u{1F1EA}\u{1F1E8}", "\u{1F1EA}\u{1F1EA}", "\u{1F1EA}\u{1F1EC}", "\u{1F1EA}\u{1F1ED}", "\u{1F1EA}\u{1F1F7}", "\u{1F1EA}\u{1F1F8}", "\u{1F1EA}\u{1F1F9}", "\u{1F1EA}\u{1F1FA}", "\u{1F1EB}\u{1F1EE}", "\u{1F1EB}\u{1F1EF}", "\u{1F1EB}\u{1F1F0}", "\u{1F1EB}\u{1F1F2}", "\u{1F1EB}\u{1F1F4}", "\u{1F1EB}\u{1F1F7}", "\u{1F1EC}\u{1F1E6}", "\u{1F1EC}\u{1F1E7}", "\u{1F1EC}\u{1F1E9}", "\u{1F1EC}\u{1F1EA}", "\u{1F1EC}\u{1F1EB}", "\u{1F1EC}\u{1F1EC}", "\u{1F1EC}\u{1F1ED}", "\u{1F1EC}\u{1F1EE}", "\u{1F1EC}\u{1F1F1}", "\u{1F1EC}\u{1F1F2}", "\u{1F1EC}\u{1F1F3}", "\u{1F1EC}\u{1F1F5}", "\u{1F1EC}\u{1F1F6}", "\u{1F1EC}\u{1F1F7}", "\u{1F1EC}\u{1F1F8}", "\u{1F1EC}\u{1F1F9}", "\u{1F1EC}\u{1F1FA}", "\u{1F1EC}\u{1F1FC}", "\u{1F1EC}\u{1F1FE}", "\u{1F1ED}\u{1F1F0}", "\u{1F1ED}\u{1F1F2}", "\u{1F1ED}\u{1F1F3}", "\u{1F1ED}\u{1F1F7}", "\u{1F1ED}\u{1F1F9}", "\u{1F1ED}\u{1F1FA}", "\u{1F1EE}\u{1F1E8}", "\u{1F1EE}\u{1F1E9}", "\u{1F1EE}\u{1F1EA}", "\u{1F1EE}\u{1F1F1}", "\u{1F1EE}\u{1F1F2}", "\u{1F1EE}\u{1F1F3}", "\u{1F1EE}\u{1F1F4}", "\u{1F1EE}\u{1F1F6}", "\u{1F1EE}\u{1F1F7}", "\u{1F1EE}\u{1F1F8}", "\u{1F1EE}\u{1F1F9}", "\u{1F1EF}\u{1F1EA}", "\u{1F1EF}\u{1F1F2}", "\u{1F1EF}\u{1F1F4}", "\u{1F1EF}\u{1F1F5}", "\u{1F1F0}\u{1F1EA}", "\u{1F1F0}\u{1F1EC}", "\u{1F1F0}\u{1F1ED}", "\u{1F1F0}\u{1F1EE}", "\u{1F1F0}\u{1F1F2}", "\u{1F1F0}\u{1F1F3}", "\u{1F1F0}\u{1F1F5}", "\u{1F1F0}\u{1F1F7}", "\u{1F1F0}\u{1F1FC}", "\u{1F1F0}\u{1F1FE}", "\u{1F1F0}\u{1F1FF}", "\u{1F1F1}\u{1F1E6}", "\u{1F1F1}\u{1F1E7}", "\u{1F1F1}\u{1F1E8}", "\u{1F1F1}\u{1F1EE}", "\u{1F1F1}\u{1F1F0}", "\u{1F1F1}\u{1F1F7}", "\u{1F1F1}\u{1F1F8}", "\u{1F1F1}\u{1F1F9}", "\u{1F1F1}\u{1F1FA}", "\u{1F1F1}\u{1F1FB}", "\u{1F1F1}\u{1F1FE}", "\u{1F1F2}\u{1F1E6}", "\u{1F1F2}\u{1F1E8}", "\u{1F1F2}\u{1F1E9}", "\u{1F1F2}\u{1F1EA}", "\u{1F1F2}\u{1F1EB}", "\u{1F1F2}\u{1F1EC}", "\u{1F1F2}\u{1F1ED}", "\u{1F1F2}\u{1F1F0}", "\u{1F1F2}\u{1F1F1}", "\u{1F1F2}\u{1F1F2}", "\u{1F1F2}\u{1F1F3}", "\u{1F1F2}\u{1F1F4}", "\u{1F1F2}\u{1F1F5}", "\u{1F1F2}\u{1F1F6}", "\u{1F1F2}\u{1F1F7}", "\u{1F1F2}\u{1F1F8}", "\u{1F1F2}\u{1F1F9}", "\u{1F1F2}\u{1F1FA}", "\u{1F1F2}\u{1F1FB}", "\u{1F1F2}\u{1F1FC}", "\u{1F1F2}\u{1F1FD}", "\u{1F1F2}\u{1F1FE}", "\u{1F1F2}\u{1F1FF}", "\u{1F1F3}\u{1F1E6}", "\u{1F1F3}\u{1F1E8}", "\u{1F1F3}\u{1F1EA}", "\u{1F1F3}\u{1F1EB}", "\u{1F1F3}\u{1F1EC}", "\u{1F1F3}\u{1F1EE}", "\u{1F1F3}\u{1F1F1}", "\u{1F1F3}\u{1F1F4}", "\u{1F1F3}\u{1F1F5}", "\u{1F1F3}\u{1F1F7}", "\u{1F1F3}\u{1F1FA}", "\u{1F1F3}\u{1F1FF}", "\u{1F1F4}\u{1F1F2}", "\u{1F1F5}\u{1F1E6}", "\u{1F1F5}\u{1F1EA}", "\u{1F1F5}\u{1F1EB}", "\u{1F1F5}\u{1F1EC}", "\u{1F1F5}\u{1F1ED}", "\u{1F1F5}\u{1F1F0}", "\u{1F1F5}\u{1F1F1}", "\u{1F1F5}\u{1F1F2}", "\u{1F1F5}\u{1F1F3}", "\u{1F1F5}\u{1F1F7}", "\u{1F1F5}\u{1F1F8}", "\u{1F1F5}\u{1F1F9}", "\u{1F1F5}\u{1F1FC}", "\u{1F1F5}\u{1F1FE}", "\u{1F1F6}\u{1F1E6}", "\u{1F1F7}\u{1F1EA}", "\u{1F1F7}\u{1F1F4}", "\u{1F1F7}\u{1F1F8}", "\u{1F1F7}\u{1F1FA}", "\u{1F1F7}\u{1F1FC}", "\u{1F1F8}\u{1F1E6}", "\u{1F1F8}\u{1F1E7}", "\u{1F1F8}\u{1F1E8}", "\u{1F1F8}\u{1F1E9}", "\u{1F1F8}\u{1F1EA}", "\u{1F1F8}\u{1F1EC}", "\u{1F1F8}\u{1F1ED}", "\u{1F1F8}\u{1F1EE}", "\u{1F1F8}\u{1F1EF}", "\u{1F1F8}\u{1F1F0}", "\u{1F1F8}\u{1F1F1}", "\u{1F1F8}\u{1F1F2}", "\u{1F1F8}\u{1F1F3}", "\u{1F1F8}\u{1F1F4}", "\u{1F1F8}\u{1F1F7}", "\u{1F1F8}\u{1F1F8}", "\u{1F1F8}\u{1F1F9}", "\u{1F1F8}\u{1F1FB}", "\u{1F1F8}\u{1F1FD}", "\u{1F1F8}\u{1F1FE}", "\u{1F1F8}\u{1F1FF}", "\u{1F1F9}\u{1F1E6}", "\u{1F1F9}\u{1F1E8}", "\u{1F1F9}\u{1F1E9}", "\u{1F1F9}\u{1F1EB}", "\u{1F1F9}\u{1F1EC}", "\u{1F1F9}\u{1F1ED}", "\u{1F1F9}\u{1F1EF}", "\u{1F1F9}\u{1F1F0}", "\u{1F1F9}\u{1F1F1}", "\u{1F1F9}\u{1F1F2}", "\u{1F1F9}\u{1F1F3}", "\u{1F1F9}\u{1F1F4}", "\u{1F1F9}\u{1F1F7}", "\u{1F1F9}\u{1F1F9}", "\u{1F1F9}\u{1F1FB}", "\u{1F1F9}\u{1F1FC}", "\u{1F1F9}\u{1F1FF}", "\u{1F1FA}\u{1F1E6}", "\u{1F1FA}\u{1F1EC}", "\u{1F1FA}\u{1F1F2}", "\u{1F1FA}\u{1F1F3}", "\u{1F1FA}\u{1F1F8}", "\u{1F1FA}\u{1F1FE}", "\u{1F1FA}\u{1F1FF}", "\u{1F1FB}\u{1F1E6}", "\u{1F1FB}\u{1F1E8}", "\u{1F1FB}\u{1F1EA}", "\u{1F1FB}\u{1F1EC}", "\u{1F1FB}\u{1F1EE}", "\u{1F1FB}\u{1F1F3}", "\u{1F1FB}\u{1F1FA}", "\u{1F1FC}\u{1F1EB}", "\u{1F1FC}\u{1F1F8}", "\u{1F1FD}\u{1F1F0}", "\u{1F1FE}\u{1F1EA}", "\u{1F1FE}\u{1F1F9}", "\u{1F1FF}\u{1F1E6}", "\u{1F1FF}\u{1F1F2}", "\u{1F1FF}\u{1F1FC}", "\u{1F38C}", "\u{1F3C1}", "\u{1F3F3}\uFE0F", "\u{1F3F3}\uFE0F\u200D\u26A7\uFE0F", "\u{1F3F3}\uFE0F\u200D\u{1F308}", "\u{1F3F4}", "\u{1F3F4}\u200D\u2620\uFE0F", "\u{1F6A9}"] };
    cr2 = { informational: [100, 101, 102, 103], success: [200, 201, 202, 203, 204, 205, 206, 207, 208, 226], redirection: [300, 301, 302, 303, 304, 305, 306, 307, 308], clientError: [400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 431, 451], serverError: [500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511] };
    lr2 = ["ES256", "ES384", "ES512", "HS256", "HS384", "HS512", "PS256", "PS384", "PS512", "RS256", "RS384", "RS512", "none"];
    mr2 = ["FakerBot/{{system.semver}}", "Googlebot/2.1 (+http://www.google.com/bot.html)", 'Mozilla/5.0 (Linux; Android {{number.int({"min":5,"max":13})}}; {{helpers.arrayElement(["SM-G998U","SM-G998B","SM-G998N","SM-G998P","SM-T800"])}}) AppleWebKit/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}} (KHTML, like Gecko) Chrome/{{number.int({"min":55,"max":131})}}.{{system.semver}} Mobile Safari/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:{{number.int({"min":75, "max":133})}}.0) Gecko/20100101 Firefox/{{number.int({"min":75, "max":133})}}.0', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}.{{number.int({"min":0,"max":99})}} (KHTML, like Gecko) Version/16.1 Safari/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}.{{number.int({"min":0,"max":99})}}', 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_15_7) AppleWebKit/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}.{{number.int({"min":0,"max":99})}} (KHTML, like Gecko) Chrome/{{number.int({"min":55,"max":131})}}.{{system.semver}} Safari/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}.{{number.int({"min":0,"max":99})}}', 'Mozilla/5.0 (Windows NT {{helpers.arrayElement(["5.1","5.2","6.0","6.1","6.2","6.3","10.0"])}}; Win64; x64) AppleWebKit/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}} (KHTML, like Gecko) Chrome/{{number.int({"min":55,"max":131})}}.{{system.semver}} Safari/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}} Edg/{{number.int({"min":110,"max":131})}}.{{system.semver}}', 'Mozilla/5.0 (X11; Linux x86_64; rv:{{number.int({"min":75,"max":133})}}.0) Gecko/20100101 Firefox/{{number.int({"min":75,"max":133})}}.0', 'Mozilla/5.0 (compatible; MSIE {{number.int({"min":6,"max":10})}}.0; Windows NT {{helpers.arrayElement(["5.1","5.2","6.0","6.1","6.2","6.3","10.0"])}}; Trident/{{number.int({"min":4,"max":7})}}.0)', 'Mozilla/5.0 (iPhone; CPU iPhone OS {{number.int({"min":10,"max":18})}}_{{number.int({"min":0,"max":4})}} like Mac OS X) AppleWebKit/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}.{{number.int({"min":0,"max":99})}} (KHTML, like Gecko) Version/{{number.int({"min":10,"max":18})}}_{{number.int({"min":0,"max":4})}} Mobile/15E148 Safari/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}'];
    tt = { emoji: sr2, http_status_code: cr2, jwt_algorithm: lr2, user_agent_pattern: mr2 };
    ur2 = tt;
    pr2 = [{ alpha2: "AD", alpha3: "AND", numeric: "020" }, { alpha2: "AE", alpha3: "ARE", numeric: "784" }, { alpha2: "AF", alpha3: "AFG", numeric: "004" }, { alpha2: "AG", alpha3: "ATG", numeric: "028" }, { alpha2: "AI", alpha3: "AIA", numeric: "660" }, { alpha2: "AL", alpha3: "ALB", numeric: "008" }, { alpha2: "AM", alpha3: "ARM", numeric: "051" }, { alpha2: "AO", alpha3: "AGO", numeric: "024" }, { alpha2: "AQ", alpha3: "ATA", numeric: "010" }, { alpha2: "AR", alpha3: "ARG", numeric: "032" }, { alpha2: "AS", alpha3: "ASM", numeric: "016" }, { alpha2: "AT", alpha3: "AUT", numeric: "040" }, { alpha2: "AU", alpha3: "AUS", numeric: "036" }, { alpha2: "AW", alpha3: "ABW", numeric: "533" }, { alpha2: "AX", alpha3: "ALA", numeric: "248" }, { alpha2: "AZ", alpha3: "AZE", numeric: "031" }, { alpha2: "BA", alpha3: "BIH", numeric: "070" }, { alpha2: "BB", alpha3: "BRB", numeric: "052" }, { alpha2: "BD", alpha3: "BGD", numeric: "050" }, { alpha2: "BE", alpha3: "BEL", numeric: "056" }, { alpha2: "BF", alpha3: "BFA", numeric: "854" }, { alpha2: "BG", alpha3: "BGR", numeric: "100" }, { alpha2: "BH", alpha3: "BHR", numeric: "048" }, { alpha2: "BI", alpha3: "BDI", numeric: "108" }, { alpha2: "BJ", alpha3: "BEN", numeric: "204" }, { alpha2: "BL", alpha3: "BLM", numeric: "652" }, { alpha2: "BM", alpha3: "BMU", numeric: "060" }, { alpha2: "BN", alpha3: "BRN", numeric: "096" }, { alpha2: "BO", alpha3: "BOL", numeric: "068" }, { alpha2: "BQ", alpha3: "BES", numeric: "535" }, { alpha2: "BR", alpha3: "BRA", numeric: "076" }, { alpha2: "BS", alpha3: "BHS", numeric: "044" }, { alpha2: "BT", alpha3: "BTN", numeric: "064" }, { alpha2: "BV", alpha3: "BVT", numeric: "074" }, { alpha2: "BW", alpha3: "BWA", numeric: "072" }, { alpha2: "BY", alpha3: "BLR", numeric: "112" }, { alpha2: "BZ", alpha3: "BLZ", numeric: "084" }, { alpha2: "CA", alpha3: "CAN", numeric: "124" }, { alpha2: "CC", alpha3: "CCK", numeric: "166" }, { alpha2: "CD", alpha3: "COD", numeric: "180" }, { alpha2: "CF", alpha3: "CAF", numeric: "140" }, { alpha2: "CG", alpha3: "COG", numeric: "178" }, { alpha2: "CH", alpha3: "CHE", numeric: "756" }, { alpha2: "CI", alpha3: "CIV", numeric: "384" }, { alpha2: "CK", alpha3: "COK", numeric: "184" }, { alpha2: "CL", alpha3: "CHL", numeric: "152" }, { alpha2: "CM", alpha3: "CMR", numeric: "120" }, { alpha2: "CN", alpha3: "CHN", numeric: "156" }, { alpha2: "CO", alpha3: "COL", numeric: "170" }, { alpha2: "CR", alpha3: "CRI", numeric: "188" }, { alpha2: "CU", alpha3: "CUB", numeric: "192" }, { alpha2: "CV", alpha3: "CPV", numeric: "132" }, { alpha2: "CW", alpha3: "CUW", numeric: "531" }, { alpha2: "CX", alpha3: "CXR", numeric: "162" }, { alpha2: "CY", alpha3: "CYP", numeric: "196" }, { alpha2: "CZ", alpha3: "CZE", numeric: "203" }, { alpha2: "DE", alpha3: "DEU", numeric: "276" }, { alpha2: "DJ", alpha3: "DJI", numeric: "262" }, { alpha2: "DK", alpha3: "DNK", numeric: "208" }, { alpha2: "DM", alpha3: "DMA", numeric: "212" }, { alpha2: "DO", alpha3: "DOM", numeric: "214" }, { alpha2: "DZ", alpha3: "DZA", numeric: "012" }, { alpha2: "EC", alpha3: "ECU", numeric: "218" }, { alpha2: "EE", alpha3: "EST", numeric: "233" }, { alpha2: "EG", alpha3: "EGY", numeric: "818" }, { alpha2: "EH", alpha3: "ESH", numeric: "732" }, { alpha2: "ER", alpha3: "ERI", numeric: "232" }, { alpha2: "ES", alpha3: "ESP", numeric: "724" }, { alpha2: "ET", alpha3: "ETH", numeric: "231" }, { alpha2: "FI", alpha3: "FIN", numeric: "246" }, { alpha2: "FJ", alpha3: "FJI", numeric: "242" }, { alpha2: "FK", alpha3: "FLK", numeric: "238" }, { alpha2: "FM", alpha3: "FSM", numeric: "583" }, { alpha2: "FO", alpha3: "FRO", numeric: "234" }, { alpha2: "FR", alpha3: "FRA", numeric: "250" }, { alpha2: "GA", alpha3: "GAB", numeric: "266" }, { alpha2: "GB", alpha3: "GBR", numeric: "826" }, { alpha2: "GD", alpha3: "GRD", numeric: "308" }, { alpha2: "GE", alpha3: "GEO", numeric: "268" }, { alpha2: "GF", alpha3: "GUF", numeric: "254" }, { alpha2: "GG", alpha3: "GGY", numeric: "831" }, { alpha2: "GH", alpha3: "GHA", numeric: "288" }, { alpha2: "GI", alpha3: "GIB", numeric: "292" }, { alpha2: "GL", alpha3: "GRL", numeric: "304" }, { alpha2: "GM", alpha3: "GMB", numeric: "270" }, { alpha2: "GN", alpha3: "GIN", numeric: "324" }, { alpha2: "GP", alpha3: "GLP", numeric: "312" }, { alpha2: "GQ", alpha3: "GNQ", numeric: "226" }, { alpha2: "GR", alpha3: "GRC", numeric: "300" }, { alpha2: "GS", alpha3: "SGS", numeric: "239" }, { alpha2: "GT", alpha3: "GTM", numeric: "320" }, { alpha2: "GU", alpha3: "GUM", numeric: "316" }, { alpha2: "GW", alpha3: "GNB", numeric: "624" }, { alpha2: "GY", alpha3: "GUY", numeric: "328" }, { alpha2: "HK", alpha3: "HKG", numeric: "344" }, { alpha2: "HM", alpha3: "HMD", numeric: "334" }, { alpha2: "HN", alpha3: "HND", numeric: "340" }, { alpha2: "HR", alpha3: "HRV", numeric: "191" }, { alpha2: "HT", alpha3: "HTI", numeric: "332" }, { alpha2: "HU", alpha3: "HUN", numeric: "348" }, { alpha2: "ID", alpha3: "IDN", numeric: "360" }, { alpha2: "IE", alpha3: "IRL", numeric: "372" }, { alpha2: "IL", alpha3: "ISR", numeric: "376" }, { alpha2: "IM", alpha3: "IMN", numeric: "833" }, { alpha2: "IN", alpha3: "IND", numeric: "356" }, { alpha2: "IO", alpha3: "IOT", numeric: "086" }, { alpha2: "IQ", alpha3: "IRQ", numeric: "368" }, { alpha2: "IR", alpha3: "IRN", numeric: "364" }, { alpha2: "IS", alpha3: "ISL", numeric: "352" }, { alpha2: "IT", alpha3: "ITA", numeric: "380" }, { alpha2: "JE", alpha3: "JEY", numeric: "832" }, { alpha2: "JM", alpha3: "JAM", numeric: "388" }, { alpha2: "JO", alpha3: "JOR", numeric: "400" }, { alpha2: "JP", alpha3: "JPN", numeric: "392" }, { alpha2: "KE", alpha3: "KEN", numeric: "404" }, { alpha2: "KG", alpha3: "KGZ", numeric: "417" }, { alpha2: "KH", alpha3: "KHM", numeric: "116" }, { alpha2: "KI", alpha3: "KIR", numeric: "296" }, { alpha2: "KM", alpha3: "COM", numeric: "174" }, { alpha2: "KN", alpha3: "KNA", numeric: "659" }, { alpha2: "KP", alpha3: "PRK", numeric: "408" }, { alpha2: "KR", alpha3: "KOR", numeric: "410" }, { alpha2: "KW", alpha3: "KWT", numeric: "414" }, { alpha2: "KY", alpha3: "CYM", numeric: "136" }, { alpha2: "KZ", alpha3: "KAZ", numeric: "398" }, { alpha2: "LA", alpha3: "LAO", numeric: "418" }, { alpha2: "LB", alpha3: "LBN", numeric: "422" }, { alpha2: "LC", alpha3: "LCA", numeric: "662" }, { alpha2: "LI", alpha3: "LIE", numeric: "438" }, { alpha2: "LK", alpha3: "LKA", numeric: "144" }, { alpha2: "LR", alpha3: "LBR", numeric: "430" }, { alpha2: "LS", alpha3: "LSO", numeric: "426" }, { alpha2: "LT", alpha3: "LTU", numeric: "440" }, { alpha2: "LU", alpha3: "LUX", numeric: "442" }, { alpha2: "LV", alpha3: "LVA", numeric: "428" }, { alpha2: "LY", alpha3: "LBY", numeric: "434" }, { alpha2: "MA", alpha3: "MAR", numeric: "504" }, { alpha2: "MC", alpha3: "MCO", numeric: "492" }, { alpha2: "MD", alpha3: "MDA", numeric: "498" }, { alpha2: "ME", alpha3: "MNE", numeric: "499" }, { alpha2: "MF", alpha3: "MAF", numeric: "663" }, { alpha2: "MG", alpha3: "MDG", numeric: "450" }, { alpha2: "MH", alpha3: "MHL", numeric: "584" }, { alpha2: "MK", alpha3: "MKD", numeric: "807" }, { alpha2: "ML", alpha3: "MLI", numeric: "466" }, { alpha2: "MM", alpha3: "MMR", numeric: "104" }, { alpha2: "MN", alpha3: "MNG", numeric: "496" }, { alpha2: "MO", alpha3: "MAC", numeric: "446" }, { alpha2: "MP", alpha3: "MNP", numeric: "580" }, { alpha2: "MQ", alpha3: "MTQ", numeric: "474" }, { alpha2: "MR", alpha3: "MRT", numeric: "478" }, { alpha2: "MS", alpha3: "MSR", numeric: "500" }, { alpha2: "MT", alpha3: "MLT", numeric: "470" }, { alpha2: "MU", alpha3: "MUS", numeric: "480" }, { alpha2: "MV", alpha3: "MDV", numeric: "462" }, { alpha2: "MW", alpha3: "MWI", numeric: "454" }, { alpha2: "MX", alpha3: "MEX", numeric: "484" }, { alpha2: "MY", alpha3: "MYS", numeric: "458" }, { alpha2: "MZ", alpha3: "MOZ", numeric: "508" }, { alpha2: "NA", alpha3: "NAM", numeric: "516" }, { alpha2: "NC", alpha3: "NCL", numeric: "540" }, { alpha2: "NE", alpha3: "NER", numeric: "562" }, { alpha2: "NF", alpha3: "NFK", numeric: "574" }, { alpha2: "NG", alpha3: "NGA", numeric: "566" }, { alpha2: "NI", alpha3: "NIC", numeric: "558" }, { alpha2: "NL", alpha3: "NLD", numeric: "528" }, { alpha2: "NO", alpha3: "NOR", numeric: "578" }, { alpha2: "NP", alpha3: "NPL", numeric: "524" }, { alpha2: "NR", alpha3: "NRU", numeric: "520" }, { alpha2: "NU", alpha3: "NIU", numeric: "570" }, { alpha2: "NZ", alpha3: "NZL", numeric: "554" }, { alpha2: "OM", alpha3: "OMN", numeric: "512" }, { alpha2: "PA", alpha3: "PAN", numeric: "591" }, { alpha2: "PE", alpha3: "PER", numeric: "604" }, { alpha2: "PF", alpha3: "PYF", numeric: "258" }, { alpha2: "PG", alpha3: "PNG", numeric: "598" }, { alpha2: "PH", alpha3: "PHL", numeric: "608" }, { alpha2: "PK", alpha3: "PAK", numeric: "586" }, { alpha2: "PL", alpha3: "POL", numeric: "616" }, { alpha2: "PM", alpha3: "SPM", numeric: "666" }, { alpha2: "PN", alpha3: "PCN", numeric: "612" }, { alpha2: "PR", alpha3: "PRI", numeric: "630" }, { alpha2: "PS", alpha3: "PSE", numeric: "275" }, { alpha2: "PT", alpha3: "PRT", numeric: "620" }, { alpha2: "PW", alpha3: "PLW", numeric: "585" }, { alpha2: "PY", alpha3: "PRY", numeric: "600" }, { alpha2: "QA", alpha3: "QAT", numeric: "634" }, { alpha2: "RE", alpha3: "REU", numeric: "638" }, { alpha2: "RO", alpha3: "ROU", numeric: "642" }, { alpha2: "RS", alpha3: "SRB", numeric: "688" }, { alpha2: "RU", alpha3: "RUS", numeric: "643" }, { alpha2: "RW", alpha3: "RWA", numeric: "646" }, { alpha2: "SA", alpha3: "SAU", numeric: "682" }, { alpha2: "SB", alpha3: "SLB", numeric: "090" }, { alpha2: "SC", alpha3: "SYC", numeric: "690" }, { alpha2: "SD", alpha3: "SDN", numeric: "729" }, { alpha2: "SE", alpha3: "SWE", numeric: "752" }, { alpha2: "SG", alpha3: "SGP", numeric: "702" }, { alpha2: "SH", alpha3: "SHN", numeric: "654" }, { alpha2: "SI", alpha3: "SVN", numeric: "705" }, { alpha2: "SJ", alpha3: "SJM", numeric: "744" }, { alpha2: "SK", alpha3: "SVK", numeric: "703" }, { alpha2: "SL", alpha3: "SLE", numeric: "694" }, { alpha2: "SM", alpha3: "SMR", numeric: "674" }, { alpha2: "SN", alpha3: "SEN", numeric: "686" }, { alpha2: "SO", alpha3: "SOM", numeric: "706" }, { alpha2: "SR", alpha3: "SUR", numeric: "740" }, { alpha2: "SS", alpha3: "SSD", numeric: "728" }, { alpha2: "ST", alpha3: "STP", numeric: "678" }, { alpha2: "SV", alpha3: "SLV", numeric: "222" }, { alpha2: "SX", alpha3: "SXM", numeric: "534" }, { alpha2: "SY", alpha3: "SYR", numeric: "760" }, { alpha2: "SZ", alpha3: "SWZ", numeric: "748" }, { alpha2: "TC", alpha3: "TCA", numeric: "796" }, { alpha2: "TD", alpha3: "TCD", numeric: "148" }, { alpha2: "TF", alpha3: "ATF", numeric: "260" }, { alpha2: "TG", alpha3: "TGO", numeric: "768" }, { alpha2: "TH", alpha3: "THA", numeric: "764" }, { alpha2: "TJ", alpha3: "TJK", numeric: "762" }, { alpha2: "TK", alpha3: "TKL", numeric: "772" }, { alpha2: "TL", alpha3: "TLS", numeric: "626" }, { alpha2: "TM", alpha3: "TKM", numeric: "795" }, { alpha2: "TN", alpha3: "TUN", numeric: "788" }, { alpha2: "TO", alpha3: "TON", numeric: "776" }, { alpha2: "TR", alpha3: "TUR", numeric: "792" }, { alpha2: "TT", alpha3: "TTO", numeric: "780" }, { alpha2: "TV", alpha3: "TUV", numeric: "798" }, { alpha2: "TW", alpha3: "TWN", numeric: "158" }, { alpha2: "TZ", alpha3: "TZA", numeric: "834" }, { alpha2: "UA", alpha3: "UKR", numeric: "804" }, { alpha2: "UG", alpha3: "UGA", numeric: "800" }, { alpha2: "UM", alpha3: "UMI", numeric: "581" }, { alpha2: "US", alpha3: "USA", numeric: "840" }, { alpha2: "UY", alpha3: "URY", numeric: "858" }, { alpha2: "UZ", alpha3: "UZB", numeric: "860" }, { alpha2: "VA", alpha3: "VAT", numeric: "336" }, { alpha2: "VC", alpha3: "VCT", numeric: "670" }, { alpha2: "VE", alpha3: "VEN", numeric: "862" }, { alpha2: "VG", alpha3: "VGB", numeric: "092" }, { alpha2: "VI", alpha3: "VIR", numeric: "850" }, { alpha2: "VN", alpha3: "VNM", numeric: "704" }, { alpha2: "VU", alpha3: "VUT", numeric: "548" }, { alpha2: "WF", alpha3: "WLF", numeric: "876" }, { alpha2: "WS", alpha3: "WSM", numeric: "882" }, { alpha2: "YE", alpha3: "YEM", numeric: "887" }, { alpha2: "YT", alpha3: "MYT", numeric: "175" }, { alpha2: "ZA", alpha3: "ZAF", numeric: "710" }, { alpha2: "ZM", alpha3: "ZMB", numeric: "894" }, { alpha2: "ZW", alpha3: "ZWE", numeric: "716" }];
    at = { country_code: pr2, time_zone: I2 };
    hr2 = at;
    nt = { title: "Base", code: "base" };
    fr2 = nt;
    br2 = ["/Applications", "/bin", "/boot", "/boot/defaults", "/dev", "/etc", "/etc/defaults", "/etc/mail", "/etc/namedb", "/etc/periodic", "/etc/ppp", "/home", "/home/user", "/home/user/dir", "/lib", "/Library", "/lost+found", "/media", "/mnt", "/net", "/Network", "/opt", "/opt/bin", "/opt/include", "/opt/lib", "/opt/sbin", "/opt/share", "/private", "/private/tmp", "/private/var", "/proc", "/rescue", "/root", "/sbin", "/selinux", "/srv", "/sys", "/System", "/tmp", "/Users", "/usr", "/usr/X11R6", "/usr/bin", "/usr/include", "/usr/lib", "/usr/libdata", "/usr/libexec", "/usr/local/bin", "/usr/local/src", "/usr/obj", "/usr/ports", "/usr/sbin", "/usr/share", "/usr/src", "/var", "/var/log", "/var/mail", "/var/spool", "/var/tmp", "/var/yp"];
    dr2 = { "application/epub+zip": { extensions: ["epub"] }, "application/gzip": { extensions: ["gz"] }, "application/java-archive": { extensions: ["jar", "war", "ear"] }, "application/json": { extensions: ["json", "map"] }, "application/ld+json": { extensions: ["jsonld"] }, "application/msword": { extensions: ["doc", "dot"] }, "application/octet-stream": { extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"] }, "application/ogg": { extensions: ["ogx"] }, "application/pdf": { extensions: ["pdf"] }, "application/rtf": { extensions: ["rtf"] }, "application/vnd.amazon.ebook": { extensions: ["azw"] }, "application/vnd.apple.installer+xml": { extensions: ["mpkg"] }, "application/vnd.mozilla.xul+xml": { extensions: ["xul"] }, "application/vnd.ms-excel": { extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"] }, "application/vnd.ms-fontobject": { extensions: ["eot"] }, "application/vnd.ms-powerpoint": { extensions: ["ppt", "pps", "pot"] }, "application/vnd.oasis.opendocument.presentation": { extensions: ["odp"] }, "application/vnd.oasis.opendocument.spreadsheet": { extensions: ["ods"] }, "application/vnd.oasis.opendocument.text": { extensions: ["odt"] }, "application/vnd.openxmlformats-officedocument.presentationml.presentation": { extensions: ["pptx"] }, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": { extensions: ["xlsx"] }, "application/vnd.openxmlformats-officedocument.wordprocessingml.document": { extensions: ["docx"] }, "application/vnd.rar": { extensions: ["rar"] }, "application/vnd.visio": { extensions: ["vsd", "vst", "vss", "vsw"] }, "application/x-7z-compressed": { extensions: ["7z"] }, "application/x-abiword": { extensions: ["abw"] }, "application/x-bzip": { extensions: ["bz"] }, "application/x-bzip2": { extensions: ["bz2", "boz"] }, "application/x-csh": { extensions: ["csh"] }, "application/x-freearc": { extensions: ["arc"] }, "application/x-httpd-php": { extensions: ["php"] }, "application/x-sh": { extensions: ["sh"] }, "application/x-tar": { extensions: ["tar"] }, "application/xhtml+xml": { extensions: ["xhtml", "xht"] }, "application/xml": { extensions: ["xml", "xsl", "xsd", "rng"] }, "application/zip": { extensions: ["zip"] }, "audio/3gpp": { extensions: ["3gpp"] }, "audio/3gpp2": { extensions: ["3g2"] }, "audio/aac": { extensions: ["aac"] }, "audio/midi": { extensions: ["mid", "midi", "kar", "rmi"] }, "audio/mpeg": { extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"] }, "audio/ogg": { extensions: ["oga", "ogg", "spx", "opus"] }, "audio/opus": { extensions: ["opus"] }, "audio/wav": { extensions: ["wav"] }, "audio/webm": { extensions: ["weba"] }, "font/otf": { extensions: ["otf"] }, "font/ttf": { extensions: ["ttf"] }, "font/woff": { extensions: ["woff"] }, "font/woff2": { extensions: ["woff2"] }, "image/avif": { extensions: ["avif"] }, "image/bmp": { extensions: ["bmp"] }, "image/gif": { extensions: ["gif"] }, "image/jpeg": { extensions: ["jpeg", "jpg", "jpe"] }, "image/png": { extensions: ["png"] }, "image/svg+xml": { extensions: ["svg", "svgz"] }, "image/tiff": { extensions: ["tif", "tiff"] }, "image/vnd.microsoft.icon": { extensions: ["ico"] }, "image/webp": { extensions: ["webp"] }, "text/calendar": { extensions: ["ics", "ifb"] }, "text/css": { extensions: ["css"] }, "text/csv": { extensions: ["csv"] }, "text/html": { extensions: ["html", "htm", "shtml"] }, "text/javascript": { extensions: ["js", "mjs"] }, "text/plain": { extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"] }, "video/3gpp": { extensions: ["3gp", "3gpp"] }, "video/3gpp2": { extensions: ["3g2"] }, "video/mp2t": { extensions: ["ts"] }, "video/mp4": { extensions: ["mp4", "mp4v", "mpg4"] }, "video/mpeg": { extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"] }, "video/ogg": { extensions: ["ogv"] }, "video/webm": { extensions: ["webm"] }, "video/x-msvideo": { extensions: ["avi"] } };
    it = { directory_path: br2, mime_type: dr2 };
    gr2 = it;
    ot = { color: qe2, database: ar2, date: nr2, hacker: or2, internet: ur2, location: hr2, metadata: fr2, system: gr2 };
    Fi = ot;
  }
});

// node_modules/@faker-js/faker/dist/chunk-TVFJBHBT.js
var f2;
var init_chunk_TVFJBHBT = __esm({
  "node_modules/@faker-js/faker/dist/chunk-TVFJBHBT.js"() {
    "use strict";
    init_chunk_KERBADJJ();
    init_chunk_PC2QB7VM();
    f2 = new Xe2({ locale: [ys, Fi] });
  }
});

// node_modules/@faker-js/faker/dist/index.js
var init_dist = __esm({
  "node_modules/@faker-js/faker/dist/index.js"() {
    "use strict";
    init_chunk_TVFJBHBT();
  }
});

// src/models/PlacementGroup.ts
import mongoose18 from "mongoose";
var Schema10, academicYearSchema, ruleSchema, placementGroupSchema, PlacementGroup, PlacementGroup_default;
var init_PlacementGroup = __esm({
  "src/models/PlacementGroup.ts"() {
    "use strict";
    init_softDelete();
    ({ Schema: Schema10 } = mongoose18);
    academicYearSchema = new Schema10(
      {
        start: { type: String, required: true },
        end: { type: String, required: true }
      },
      { _id: false }
    );
    ruleSchema = new Schema10(
      {
        category: { type: String, required: true },
        subcategory: { type: String, required: true },
        operator: { type: String, required: true },
        value: { type: Schema10.Types.Mixed, required: true },
        type: { type: String },
        createdAt: { type: Date, default: Date.now }
      },
      { _id: false }
    );
    placementGroupSchema = new Schema10(
      {
        name: {
          type: String,
          required: true,
          trim: true
        },
        institute: {
          type: mongoose18.Schema.Types.ObjectId,
          ref: "Institute",
          required: true
        },
        academicYear: {
          type: academicYearSchema,
          required: true
        },
        departments: [{ type: mongoose18.Schema.Types.ObjectId }],
        purpose: {
          type: String,
          trim: true
        },
        expiryDate: {
          type: Date,
          required: true
        },
        criteria: {
          type: [ruleSchema],
          default: []
        },
        candidates: [
          {
            type: mongoose18.Schema.Types.ObjectId,
            ref: "Candidate"
          }
        ],
        pendingCandidates: [
          {
            type: mongoose18.Schema.Types.ObjectId,
            ref: "Candidate"
          }
        ],
        createdBy: {
          type: mongoose18.Schema.Types.ObjectId,
          ref: "User",
          required: true
        },
        archived: {
          type: Boolean,
          default: false
        },
        isSample: { type: Boolean, default: false }
      },
      {
        timestamps: true
      }
    );
    placementGroupSchema.index({ name: 1 });
    placementGroupSchema.index({ "academicYear.start": 1, "academicYear.end": 1 });
    placementGroupSchema.index({ expiryDate: 1 });
    placementGroupSchema.index({ institute: 1, archived: 1 });
    placementGroupSchema.plugin(softDeletePlugin);
    PlacementGroup = mongoose18.model("PlacementGroup", placementGroupSchema);
    PlacementGroup_default = PlacementGroup;
  }
});

// src/plugins/archiveProtection.ts
function archiveProtectionPlugin(schema) {
  schema.pre("save", function(next) {
    if (!this.isNew && this.isArchived && this.isModified() && !this.isModified("isArchived") && !this.isModified("deletedAt")) {
      return next(new Error("Cannot modify an archived document."));
    }
    next();
  });
  schema.pre("updateOne", function(next) {
    const update = this.getUpdate();
    if (!update) return next();
    if (update.$set?.isArchived === true) {
      return next();
    }
    if (update.isArchived === true || update.$set?.isArchived === true) {
      return next();
    }
    this.model.findOne(this.getQuery()).then((doc) => {
      if (doc?.isArchived) {
        return next(new Error("Cannot update an archived document."));
      }
      next();
    });
  });
  schema.pre("findOneAndUpdate", function(next) {
    const update = this.getUpdate();
    if (!update) return next();
    if (update.$set?.isArchived === true || update.isArchived === true) {
      return next();
    }
    this.model.findOne(this.getQuery()).then((doc) => {
      if (doc?.isArchived) {
        return next(new Error("Cannot update an archived document."));
      }
      next();
    });
  });
}
var init_archiveProtection = __esm({
  "src/plugins/archiveProtection.ts"() {
    "use strict";
  }
});

// src/models/Company.ts
import mongoose19 from "mongoose";
var Schema11, yearStatsSchema, companySchema, Company, Company_default;
var init_Company = __esm({
  "src/models/Company.ts"() {
    "use strict";
    init_archiveProtection();
    init_softDelete();
    ({ Schema: Schema11 } = mongoose19);
    yearStatsSchema = new Schema11(
      {
        year: { type: String, required: true },
        hired: { type: Number, required: true },
        highest: { type: Number, required: true },
        average: { type: Number, required: true }
      },
      { _id: false }
    );
    companySchema = new Schema11(
      {
        name: { type: String, required: true },
        description: String,
        generalInfo: {
          industry: [{ type: String }],
          yearStats: { type: [yearStatsSchema], required: false },
          rolesOffered: [{ type: String }]
        },
        hrContact: {
          name: String,
          phone: String,
          email: String,
          website: String
        },
        isArchived: { type: Boolean, default: false },
        createdAt: { type: Date, default: Date.now },
        updatedAt: { type: Date, default: Date.now },
        isSample: { type: Boolean, default: false }
      },
      { timestamps: true }
    );
    companySchema.index({ name: 1 });
    companySchema.index({ archived: 1 });
    companySchema.plugin(archiveProtectionPlugin);
    companySchema.plugin(softDeletePlugin);
    Company = mongoose19.model("Company", companySchema);
    Company_default = Company;
  }
});

// src/data/samples/institute/departments.ts
var sampleDepartments, departments_default;
var init_departments = __esm({
  "src/data/samples/institute/departments.ts"() {
    "use strict";
    sampleDepartments = [
      {
        name: "Information Technology",
        description: "Department of Information Technology"
      },
      {
        name: "Computer Science",
        description: "Department of Computer Science"
      },
      {
        name: "Artificial Intelligence and Machine Learning",
        description: "Department of Artificial Intelligence and Machine Learning"
      },
      {
        name: "Data Science",
        description: "Department of Data Science"
      },
      {
        name: "Cyber Security",
        description: "Department of Cyber Security"
      }
    ];
    departments_default = sampleDepartments;
  }
});

// src/utils/generateSampleInstituteData.ts
import { generate } from "generate-passphrase";
var CANDIDATES_LIMIT, PLACEMENT_GROUPS_MIN, PLACEMENT_GROUPS_MAX, COMPANIES_MIN, COMPANIES_MAX, DRIVES_MIN, DRIVES_MAX, StepStatus3, generateSampleInstituteData, generateSampleInstituteDepartments, generateRandomCandidate, generateSampleInstituteCandidates, generateSamplePlacementGroups, generateSampleCompanies, generateSampleDrives, generateSampleAppliedDrives, generateSampleInstituteData_default;
var init_generateSampleInstituteData = __esm({
  "src/utils/generateSampleInstituteData.ts"() {
    "use strict";
    init_dist();
    init_Institute();
    init_clerk();
    init_User();
    init_Candidate();
    init_PlacementGroup();
    init_Company();
    init_Drive();
    init_departments();
    init_AppliedDrive();
    CANDIDATES_LIMIT = 20;
    PLACEMENT_GROUPS_MIN = 3;
    PLACEMENT_GROUPS_MAX = 10;
    COMPANIES_MIN = 5;
    COMPANIES_MAX = 15;
    DRIVES_MIN = 7;
    DRIVES_MAX = 20;
    StepStatus3 = {
      PENDING: "pending",
      IN_PROGRESS: "in-progress",
      COMPLETED: "completed",
      FAILED: "failed"
    };
    generateSampleInstituteData = async (instituteId) => {
      const institute = await Institute_default.findById(instituteId);
      if (!institute) {
        throw new Error("Institute not found");
      }
      await generateSampleInstituteDepartments(instituteId);
      await generateSampleInstituteCandidates(instituteId);
      await generateSamplePlacementGroups(
        instituteId,
        institute.createdBy?.toString()
      );
      await generateSampleCompanies(instituteId);
      await generateSampleDrives(instituteId);
      await generateSampleAppliedDrives(instituteId);
    };
    generateSampleInstituteDepartments = async (instituteId) => {
      await Institute_default.updateOne(
        { _id: instituteId },
        { $set: { departments: departments_default } }
      );
      await Institute_default.updateOne(
        { _id: instituteId },
        {
          $push: {
            auditLogs: {
              action: "Added sample departments",
              user: "System",
              userId: "system",
              type: "info"
            }
          }
        }
      );
    };
    generateRandomCandidate = () => {
      const firstName = f2.person.firstName();
      const lastName = f2.person.lastName();
      const email = f2.internet.email({ firstName, lastName, provider: "example.com" }).toLowerCase();
      let username = f2.internet.username({ firstName, lastName }).toLowerCase();
      username = username.replace(/[^a-z0-9_-]/g, "_");
      return {
        firstName,
        lastName,
        email,
        username,
        gender: f2.helpers.arrayElement(["Male", "Female", "Other"]),
        dob: f2.date.birthdate({ min: 18, max: 30, mode: "age" }).toISOString()
      };
    };
    generateSampleInstituteCandidates = async (instituteId) => {
      const institute = await Institute_default.findById(instituteId);
      if (!institute) {
        throw new Error("Institute not found");
      }
      const passphrase = generate({
        fast: true,
        separator: "-",
        length: 3,
        numbers: false
      });
      const candidates = Array.from({ length: CANDIDATES_LIMIT }).map(
        () => generateRandomCandidate()
      );
      for (const candidate of candidates) {
        await clerk_default.users.createUser({
          skipPasswordChecks: true,
          firstName: candidate.firstName,
          lastName: candidate.lastName,
          password: passphrase,
          emailAddress: [candidate.email],
          username: candidate.username,
          legalAcceptedAt: /* @__PURE__ */ new Date(),
          privateMetadata: { isSample: true, sampleInstituteId: instituteId }
        });
        console.log("Created user:", candidate.username);
      }
      const dbUsers = await User_default.find({
        isSample: true,
        sampleInstituteId: instituteId
      }).lean();
      console.log("DB Users", dbUsers);
      for (const user of dbUsers) {
        const clerkUser = await clerk_default.users.getUser(user.clerkId);
        const newCandidate = new Candidate_default({
          userId: user._id,
          name: `${clerkUser.firstName} ${clerkUser.lastName}`,
          dob: f2.date.birthdate({ min: 18, max: 30, mode: "age" }),
          gender: f2.helpers.arrayElement(["Male", "Female", "Other"]),
          email: user.email,
          phone: f2.phone.number(),
          address: f2.location.streetAddress(true),
          summary: f2.lorem.paragraph(),
          profileImage: f2.image.avatar(),
          isSample: true,
          socialLinks: Array.from({
            length: f2.number.int({ min: 1, max: 3 })
          }).map(() => ({
            platform: f2.helpers.arrayElement([
              "linkedin",
              "github",
              "twitter",
              "facebook",
              "instagram",
              "portfolio"
            ]),
            url: f2.internet.url()
          })),
          education: Array.from({
            length: f2.number.int({ min: 1, max: 3 })
          }).map(() => {
            const startYear = f2.number.int({ min: 2010, max: 2022 });
            const endYear = f2.datatype.boolean() ? startYear + f2.number.int({ min: 1, max: 4 }) : null;
            const activeBacklogs = f2.number.int({ min: 0, max: 3 });
            const totalBacklogs = activeBacklogs + f2.number.int({ min: activeBacklogs, max: activeBacklogs + 10 });
            return {
              school: f2.company.name() + " University",
              degree: f2.helpers.arrayElement([
                "Bachelor of Science",
                "Bachelor of Arts",
                "Master of Science",
                "PhD",
                "Diploma",
                "Bachelor of Engineering"
              ]),
              board: f2.helpers.arrayElement([
                "University Board",
                "State Board of Education",
                "National Board",
                "International Board",
                "MSBTE",
                "Mumbai University"
              ]),
              branch: f2.helpers.arrayElement([
                "Computer Science",
                "Information Technology",
                "Engineering",
                "Business",
                "Arts",
                "Science"
              ]),
              startYear,
              endYear,
              current: endYear === null,
              type: f2.helpers.arrayElement([
                "fulltime",
                "parttime",
                "distance"
              ]),
              percentage: f2.number.float({
                min: 60,
                max: 95,
                fractionDigits: 1
              }),
              activeBacklogs,
              totalBacklogs,
              clearedBacklogs: totalBacklogs - activeBacklogs,
              backlogHistory: Array.from({
                length: totalBacklogs ? f2.number.int({ min: 0, max: totalBacklogs }) : 0
              }).map(() => ({
                subject: f2.helpers.arrayElement([
                  "Advanced Algorithms",
                  "Compiler Design",
                  "Database Systems",
                  "Computer Networks"
                ]),
                semester: f2.number.int({ min: 1, max: 8 }),
                cleared: f2.datatype.boolean(),
                attemptCount: f2.number.int({ min: 1, max: 3 }),
                clearedDate: f2.date.recent()
              })),
              createdAt: f2.date.recent()
            };
          }),
          workExperience: Array.from({
            length: f2.number.int({ min: 0, max: 2 })
          }).map(() => {
            const startDate = f2.date.past({ years: 3 });
            const endDate = f2.datatype.boolean() ? f2.date.between({ from: startDate, to: /* @__PURE__ */ new Date() }) : null;
            return {
              company: f2.company.name(),
              sector: f2.helpers.arrayElement([
                "Technology",
                "Finance",
                "Healthcare",
                "Education",
                "Retail"
              ]),
              title: f2.person.jobTitle(),
              location: `${f2.location.city()}, ${f2.location.state()}`,
              type: f2.helpers.arrayElement([
                "fulltime",
                "parttime",
                "internship",
                "contract",
                "freelance"
              ]),
              jobFunction: f2.helpers.arrayElement([
                "Development",
                "Design",
                "Data Analysis",
                "Marketing",
                "Sales"
              ]),
              startDate,
              endDate,
              current: endDate === null,
              description: f2.lorem.paragraph(),
              createdAt: f2.date.recent()
            };
          }),
          technicalSkills: Array.from({
            length: f2.number.int({ min: 3, max: 8 })
          }).map(() => ({
            skill: f2.helpers.arrayElement([
              "JavaScript",
              "Python",
              "Java",
              "C++",
              "React",
              "Node.js",
              "MongoDB",
              "SQL",
              "Machine Learning"
            ]),
            proficiency: f2.number.int({ min: 5, max: 10 }),
            createdAt: f2.date.recent()
          })),
          languages: Array.from({
            length: f2.number.int({ min: 1, max: 3 })
          }).map(() => ({
            language: f2.helpers.arrayElement([
              "English",
              "Spanish",
              "French",
              "German",
              "Chinese",
              "Japanese"
            ]),
            proficiency: f2.number.int({ min: 5, max: 10 }),
            createdAt: f2.date.recent()
          })),
          subjects: Array.from({
            length: f2.number.int({ min: 2, max: 5 })
          }).map(() => ({
            subject: f2.helpers.arrayElement([
              "Database Systems",
              "Artificial Intelligence",
              "Computer Networks",
              "Data Structures"
            ]),
            proficiency: f2.number.int({ min: 5, max: 10 }),
            createdAt: f2.date.recent()
          })),
          projects: Array.from({
            length: f2.number.int({ min: 1, max: 3 })
          }).map(() => {
            const startDate = f2.date.past({ years: 2 });
            const endDate = f2.datatype.boolean() ? f2.date.between({ from: startDate, to: /* @__PURE__ */ new Date() }) : null;
            return {
              title: f2.helpers.arrayElement([
                "Smart Home Automation System",
                "Machine Learning Stock Predictor",
                "E-commerce Platform",
                "Social Media Dashboard",
                "Personal Finance Tracker"
              ]),
              domain: f2.helpers.arrayElement([
                "Web Development",
                "Mobile Development",
                "Machine Learning",
                "IoT",
                "Cloud Computing"
              ]),
              startDate,
              endDate,
              current: endDate === null,
              associatedWith: f2.helpers.arrayElement([
                "personal",
                "academic",
                "professional"
              ]),
              description: f2.lorem.paragraph(),
              url: f2.internet.url(),
              createdAt: f2.date.recent()
            };
          }),
          certificates: Array.from({
            length: f2.number.int({ min: 0, max: 2 })
          }).map(() => {
            const issueDate = f2.date.past({ years: 2 });
            const doesExpire = f2.datatype.boolean();
            const hasScore = f2.datatype.boolean();
            return {
              title: f2.helpers.arrayElement([
                "AWS Certified Solutions Architect",
                "Google Cloud Professional",
                "Microsoft Certified: Azure Developer",
                "Certified Data Scientist",
                "Full Stack Web Development"
              ]),
              issuer: f2.company.name(),
              url: f2.internet.url(),
              licenseNumber: f2.datatype.boolean() ? f2.string.alphanumeric(10) : null,
              issueDate,
              doesExpire,
              expiryDate: doesExpire ? f2.date.future({ years: 3, refDate: issueDate }) : null,
              hasScore,
              score: hasScore ? f2.number.int({ min: 700, max: 990 }) : null,
              description: f2.lorem.sentence(),
              createdAt: f2.date.recent()
            };
          }),
          resumeUrl: "scriptopia-resumes/sample.pdf",
          institute: instituteId,
          instituteUid: f2.string.alphanumeric(10),
          createdAt: /* @__PURE__ */ new Date(),
          updatedAt: /* @__PURE__ */ new Date()
        });
        await newCandidate.save();
        institute.candidates.push(newCandidate._id);
      }
      await institute.save();
      await Institute_default.updateOne(
        { _id: instituteId },
        {
          $push: {
            auditLogs: {
              action: `Added ${CANDIDATES_LIMIT} sample candidates`,
              user: "System",
              userId: "system",
              type: "info"
            }
          }
        }
      );
    };
    generateSamplePlacementGroups = async (instituteId, createdBy) => {
      try {
        const institute = await Institute_default.findById(instituteId);
        if (!institute) {
          throw new Error("Institute not found");
        }
        const candidates = await Candidate_default.find({
          institute: instituteId,
          isSample: true
        });
        if (candidates.length === 0) {
          console.log("No sample candidates found to create placement groups");
          return;
        }
        const groupCount = f2.number.int({
          min: PLACEMENT_GROUPS_MIN,
          max: PLACEMENT_GROUPS_MAX
        });
        console.log(`Creating ${groupCount} sample placement groups`);
        const placementGroupIds = [];
        for (let i2 = 0; i2 < groupCount; i2++) {
          const startYear = f2.number.int({ min: 2019, max: 2024 });
          const endYear = startYear + 1;
          const departmentCount = f2.number.int({
            min: 1,
            max: Math.min(3, institute.departments.length)
          });
          const selectedDepartments = f2.helpers.shuffle(institute.departments).slice(0, departmentCount).map((dept) => dept._id);
          const candidateCount = f2.number.int({
            min: 1,
            max: Math.min(candidates.length, 20)
          });
          const selectedCandidates = f2.helpers.shuffle([...candidates]).slice(0, candidateCount).map((candidate) => candidate._id);
          const placementGroup = new PlacementGroup_default({
            name: `${f2.company.name()} ${startYear}-${endYear} Placement Drive`,
            institute: instituteId,
            academicYear: {
              start: startYear.toString(),
              end: endYear.toString()
            },
            departments: selectedDepartments,
            purpose: f2.helpers.arrayElement([
              "Campus recruitment drive",
              "Internship opportunity",
              "Summer placement",
              "Industrial training",
              "Pre-placement offer selection"
            ]),
            expiryDate: f2.date.between({
              from: /* @__PURE__ */ new Date(`${endYear}-01-01`),
              to: /* @__PURE__ */ new Date(`${endYear}-12-31`)
            }),
            candidates: selectedCandidates,
            pendingCandidates: [],
            createdBy,
            isSample: true,
            archived: f2.datatype.boolean(0.2)
          });
          const savedPlacementGroup = await placementGroup.save();
          placementGroupIds.push(savedPlacementGroup._id);
          console.log(`Created placement group: ${placementGroup.name}`);
        }
        await Institute_default.updateOne(
          { _id: instituteId },
          {
            $push: {
              placementGroups: { $each: placementGroupIds },
              auditLogs: {
                action: `Added ${groupCount} sample placement groups`,
                user: "System",
                userId: "system",
                type: "info"
              }
            }
          }
        );
        console.log(
          `Added ${groupCount} placement groups to institute ${instituteId}`
        );
      } catch (error) {
        console.error("Error generating placement groups:", error);
        throw error;
      }
    };
    generateSampleCompanies = async (instituteId) => {
      try {
        const companyCount = f2.number.int({
          min: COMPANIES_MIN,
          max: COMPANIES_MAX
        });
        console.log(`Creating ${companyCount} sample companies`);
        const companyIds = [];
        const industries = [
          "Technology",
          "Finance",
          "Healthcare",
          "Manufacturing",
          "Retail",
          "Consulting",
          "Education",
          "Telecommunications",
          "Energy",
          "Media",
          "Real Estate",
          "Automotive",
          "Aerospace",
          "Pharmaceuticals",
          "Transportation",
          "Food & Beverage",
          "Entertainment"
        ];
        const roles = [
          "Software Engineer",
          "Data Scientist",
          "Product Manager",
          "Business Analyst",
          "UX Designer",
          "Marketing Specialist",
          "Sales Representative",
          "Financial Analyst",
          "HR Specialist",
          "Operations Manager",
          "Network Administrator",
          "DevOps Engineer",
          "Quality Assurance Analyst",
          "Research Scientist",
          "Customer Success Manager",
          "Project Manager",
          "Technical Writer"
        ];
        for (let i2 = 0; i2 < companyCount; i2++) {
          const industryCount = f2.number.int({ min: 1, max: 3 });
          const companyIndustries = f2.helpers.arrayElements(
            industries,
            industryCount
          );
          const rolesCount = f2.number.int({ min: 2, max: 5 });
          const companyRoles = f2.helpers.arrayElements(roles, rolesCount);
          const currentYear = (/* @__PURE__ */ new Date()).getFullYear();
          const yearStats = Array.from({ length: 3 }).map((_2, index) => {
            const year = (currentYear - index).toString();
            const hired = f2.number.int({ min: 5, max: 50 });
            const highest = f2.number.int({ min: 12e5, max: 3e6 });
            const average = f2.number.int({ min: 6e5, max: highest });
            return {
              year,
              hired,
              highest,
              average
            };
          });
          const company = new Company_default({
            name: f2.company.name(),
            description: f2.company.catchPhrase() + ". " + f2.lorem.paragraph(2),
            generalInfo: {
              industry: companyIndustries,
              yearStats,
              rolesOffered: companyRoles
            },
            hrContact: {
              name: f2.person.fullName(),
              phone: f2.phone.number(),
              email: f2.internet.email(),
              website: f2.internet.url()
            },
            isArchived: f2.datatype.boolean(0.15),
            isSample: true,
            createdAt: f2.date.past({ years: 2 }),
            updatedAt: f2.date.recent()
          });
          const savedCompany = await company.save();
          companyIds.push(savedCompany._id);
          console.log(`Created company: ${company.name}`);
        }
        await Institute_default.updateOne(
          { _id: instituteId },
          {
            $push: {
              companies: { $each: companyIds },
              auditLogs: {
                action: `Added ${companyCount} sample companies`,
                user: "System",
                userId: "system",
                type: "info"
              }
            }
          }
        );
        console.log(`Added ${companyCount} companies to institute ${instituteId}`);
        return companyIds;
      } catch (error) {
        console.error("Error generating companies:", error);
        throw error;
      }
    };
    generateSampleDrives = async (instituteId) => {
      try {
        const institute = await Institute_default.findById(instituteId).populate("placementGroups").populate("companies");
        if (!institute) {
          throw new Error("Institute not found");
        }
        if (!institute.placementGroups || institute.placementGroups.length === 0) {
          console.log("No placement groups found, cannot create drives");
          return;
        }
        if (!institute.companies || institute.companies.length === 0) {
          console.log("No companies found, cannot create drives");
          return;
        }
        const driveCount = f2.number.int({
          min: DRIVES_MIN,
          max: DRIVES_MAX
        });
        console.log(`Creating ${driveCount} sample drives`);
        const customStepNames = [
          ["Resume Shortlisting", "Technical Interview", "HR Interview"],
          [
            "Application Screening",
            "Aptitude Test",
            "Technical Round",
            "Final Interview"
          ],
          [
            "Profile Review",
            "Coding Challenge",
            "Technical Discussion",
            "Culture Fit",
            "Offer Discussion"
          ],
          [
            "Resume Evaluation",
            "Group Discussion",
            "Technical Skills Assessment",
            "Managerial Round"
          ],
          [
            "Initial Screening",
            "Technical Assessment",
            "Team Fit Interview",
            "HR & Compensation Discussion"
          ],
          [
            "Application Review",
            "Online Coding Test",
            "System Design Discussion",
            "Behavioral Interview"
          ]
        ];
        const techSkills = [
          "JavaScript",
          "TypeScript",
          "React",
          "Node.js",
          "Python",
          "Java",
          "C++",
          "SQL",
          "MongoDB",
          "AWS",
          "Docker",
          "Kubernetes",
          "Git",
          "Machine Learning",
          "Data Analysis",
          "System Design",
          "API Development",
          "Cloud Computing",
          "DevOps",
          "Agile Methodology",
          "UI/UX Design",
          "Mobile Development"
        ];
        const employmentTypes = [
          "full_time",
          "part_time",
          "internship",
          "contract",
          "temporary"
        ];
        const currencies = ["INR", "USD", "EUR", "GBP"];
        for (let i2 = 0; i2 < driveCount; i2++) {
          const company = f2.helpers.arrayElement(institute.companies);
          const placementGroup = f2.helpers.arrayElement(
            institute.placementGroups
          );
          const placementGroupData = await PlacementGroup_default.findById(
            placementGroup._id
          );
          if (!placementGroupData || !placementGroupData.candidates || placementGroupData.candidates.length === 0) {
            continue;
          }
          const isPublished = f2.datatype.boolean(0.8);
          const hasEnded = isPublished ? f2.datatype.boolean(0.5) : false;
          const now = /* @__PURE__ */ new Date();
          const pastDate = f2.date.past({ years: 1 });
          const futureDate = f2.date.future({ years: 1 });
          let applicationStart, applicationEnd;
          const calculatedToDate = new Date(
            now.getTime() - 30 * 24 * 60 * 60 * 1e3
          );
          if (hasEnded) {
            applicationStart = f2.date.between({
              from: pastDate < calculatedToDate ? pastDate : calculatedToDate,
              to: calculatedToDate
            });
            applicationEnd = f2.date.between({
              from: applicationStart,
              to: now
            });
          } else {
            if (f2.datatype.boolean()) {
              applicationStart = f2.date.recent({ days: 30 });
              applicationEnd = f2.date.soon({ days: 30 });
            } else {
              applicationStart = f2.date.soon({ days: 10 });
              applicationEnd = f2.date.between({
                from: applicationStart,
                to: futureDate
              });
            }
          }
          let selectedCandidates = [];
          let hiredCandidates = [];
          let offerLetters = [];
          if (isPublished) {
            const selectionPercentage = f2.number.float({ min: 0.8, max: 1 });
            selectedCandidates = f2.helpers.shuffle([...placementGroupData.candidates]).slice(
              0,
              Math.floor(
                placementGroupData.candidates.length * selectionPercentage
              )
            );
            if (hasEnded && selectedCandidates.length > 0) {
              const hirePercentage = f2.number.float({ min: 0.1, max: 0.5 });
              hiredCandidates = f2.helpers.shuffle([...selectedCandidates]).slice(0, Math.ceil(selectedCandidates.length * hirePercentage));
              const offerLetterPercentage = f2.number.float({
                min: 0.7,
                max: 1
              });
              offerLetters = f2.helpers.shuffle([...hiredCandidates]).slice(
                0,
                Math.ceil(hiredCandidates.length * offerLetterPercentage)
              );
            }
          }
          const stepsTemplate = f2.helpers.arrayElement(customStepNames);
          const steps = stepsTemplate.map((stepName) => ({
            name: stepName,
            type: "CUSTOM",
            status: hasEnded ? StepStatus3.COMPLETED : f2.helpers.arrayElement([
              StepStatus3.PENDING,
              StepStatus3.IN_PROGRESS
            ]),
            schedule: {
              startTime: hasEnded ? f2.date.between({ from: applicationEnd, to: now }) : null,
              endTime: hasEnded ? f2.date.recent() : null,
              actualCompletionTime: hasEnded ? f2.date.recent() : null
            }
          }));
          const currencySelected = f2.helpers.arrayElement(currencies);
          const minSalary = f2.number.int({ min: 3e5, max: 1e6 });
          const maxSalary = f2.number.int({
            min: minSalary * 1.2,
            max: minSalary * 2
          });
          const selectedSkills = f2.helpers.arrayElements(
            techSkills,
            f2.number.int({ min: 3, max: 8 })
          );
          const drive = new Drive_default({
            institute: instituteId,
            title: `${company.name} ${f2.helpers.arrayElement([
              "Campus Recruitment",
              "Hiring Drive",
              "Career Fair",
              "Talent Hunt"
            ])} ${(/* @__PURE__ */ new Date()).getFullYear()}`,
            link: f2.internet.url(),
            description: {
              blocks: [
                {
                  key: f2.string.uuid(),
                  text: f2.lorem.paragraphs(3),
                  type: "unstyled",
                  depth: 0,
                  inlineStyleRanges: [],
                  entityRanges: [],
                  data: {}
                }
              ],
              entityMap: {}
            },
            company: company._id,
            location: f2.helpers.arrayElement([
              "Remote",
              "Hybrid",
              `${f2.location.city()}, ${f2.location.state()}`,
              `${f2.location.city()}`,
              "Multiple Locations"
            ]),
            type: f2.helpers.arrayElement(employmentTypes),
            url: f2.internet.url(),
            openings: f2.number.int({ min: 1, max: 20 }),
            salary: {
              min: minSalary,
              max: maxSalary,
              currency: currencySelected
            },
            applicationRange: {
              start: applicationStart,
              end: applicationEnd
            },
            skills: selectedSkills,
            workflow: {
              steps
            },
            assignments: [],
            mcqAssessments: [],
            codeAssessments: [],
            interviews: [],
            candidates: selectedCandidates,
            additionalDetails: {},
            placementGroup: placementGroup._id,
            published: isPublished,
            publishedOn: isPublished ? f2.date.recent({ days: 30 }) : null,
            hasEnded,
            hiredCandidates,
            offerLetters,
            isSample: true
          });
          await drive.save();
          institute.drives.push(drive._id);
          console.log(
            `Created drive: ${drive.title} (${isPublished ? "Published" : "Draft"}${hasEnded ? ", Ended" : ""})`
          );
        }
        await institute.save();
        await Institute_default.updateOne(
          { _id: instituteId },
          {
            $push: {
              auditLogs: {
                action: `Added ${driveCount} sample drives`,
                user: "System",
                userId: "system",
                type: "info"
              }
            }
          }
        );
        console.log(
          `Added ${driveCount} sample drives for institute ${instituteId}`
        );
      } catch (error) {
        console.error("Error generating drives:", error);
        throw error;
      }
    };
    generateSampleAppliedDrives = async (instituteId) => {
      try {
        const publishedDrives = await Drive_default.find({
          institute: instituteId,
          published: true
        }).populate("placementGroup");
        if (!publishedDrives || publishedDrives.length === 0) {
          console.log("No published drives found for this institute.");
          return;
        }
        for (const drive of publishedDrives) {
          const placementGroup = await PlacementGroup_default.findById(
            drive.placementGroup
          ).populate("candidates");
          if (!placementGroup || !placementGroup.candidates || placementGroup.candidates.length === 0) {
            console.log(
              `Skipping drive: ${drive.title} (No candidates in associated placement group)`
            );
            continue;
          }
          const totalCandidates = placementGroup.candidates.length;
          const appliedCount = Math.ceil(
            totalCandidates * f2.number.float({ min: 0.5, max: 1 })
          );
          console.log(
            `Generating ${appliedCount} applied drives for drive: ${drive.title}`
          );
          const appliedDrives = [];
          const selectedCandidates = f2.helpers.shuffle([...placementGroup.candidates]).slice(0, appliedCount);
          for (const candidateId of selectedCandidates) {
            const status = f2.helpers.arrayElement([
              "applied",
              "inprogress",
              "rejected",
              "hired"
            ]);
            let disqualifiedStage = null;
            let disqualifiedReason = null;
            if (status === "rejected") {
              const workflowSteps = drive.workflow?.steps || [];
              if (workflowSteps.length > 0) {
                const randomStep = f2.helpers.arrayElement(workflowSteps);
                disqualifiedStage = randomStep._id;
                disqualifiedReason = f2.helpers.arrayElement([
                  "Failed technical round",
                  "Did not meet minimum qualifications",
                  "Missed interview",
                  "Failed coding assessment"
                ]);
              }
            }
            let salary = null;
            let offerLetterKey = null;
            let offerLetterUploadedAt = null;
            if (status === "hired" && drive.hasEnded && drive.workflow?.steps?.slice(-1)[0]?.status === "completed") {
              salary = f2.number.int({
                min: drive.salary.min,
                max: drive.salary.max
              });
              offerLetterKey = f2.string.uuid();
              offerLetterUploadedAt = f2.date.between({
                from: drive.publishedOn || /* @__PURE__ */ new Date(),
                to: /* @__PURE__ */ new Date()
              });
            }
            const appliedDrive = {
              drive: drive._id,
              user: candidateId,
              disqualifiedStage,
              disqualifiedReason,
              scores: [],
              status,
              salary,
              offerLetterKey,
              offerLetterUploadedAt,
              isSample: true
            };
            appliedDrives.push(appliedDrive);
          }
          await AppliedDrive_default.insertMany(appliedDrives);
          console.log(
            `Created ${appliedDrives.length} applied drives for drive: ${drive.title}`
          );
        }
        console.log("Sample applied drives generation complete.");
      } catch (error) {
        console.error("Error generating sample applied drives:", error);
        throw error;
      }
    };
    generateSampleInstituteData_default = generateSampleInstituteData;
  }
});

// src/controllers/campus/institute/instituteController.ts
import jwt2 from "jsonwebtoken";
import { Upload as Upload3 } from "@aws-sdk/lib-storage";
import { GetObjectCommand as GetObjectCommand4 } from "@aws-sdk/client-s3";
import { Types } from "mongoose";
import { getSignedUrl as getSignedUrl3 } from "@aws-sdk/s3-request-presigner";
import mongoose20 from "mongoose";
var TOKEN_EXPIRY, MAX_FILE_SIZE, ALLOWED_FILE_TYPES, createInstitute, verifyInvite2, joinInstitute, getSettings2, updateInstitute, updateGeneralSettings2, updateLogo2, updateMembers2, updateRoles2, getCandidates2, getPendingCandidates, getDepartments2, requestToJoin, leaveInstitute, permissionFieldMap2, getInstitute, verifyRequest, cancelRequest, getCandidate2, acceptCandidate, rejectCandidate, getResume2, removeCandidate, instituteController_default;
var init_instituteController = __esm({
  "src/controllers/campus/institute/instituteController.ts"() {
    "use strict";
    init_sendResponse();
    init_Institute();
    init_User();
    init_loops();
    init_clerk();
    init_logger();
    init_s3();
    init_defaultInstituteRoles();
    init_institutePermissions();
    init_checkInstitutePermission();
    init_Candidate();
    init_Candidate();
    init_validation();
    init_getUserWithPermission();
    init_sendNotification();
    init_generateSampleInstituteData();
    TOKEN_EXPIRY = "24h";
    MAX_FILE_SIZE = 5 * 1024 * 1024;
    ALLOWED_FILE_TYPES = ["image/png", "image/jpeg", "image/jpg"];
    createInstitute = async (c2) => {
      try {
        const body = await c2.req.json();
        const { name, email, website, address, members, sampleData } = body;
        const sanitizedName = sanitizeInput(name);
        const sanitizedEmail = sanitizeInput(email);
        const sanitizedWebsite = sanitizeInput(website);
        const sanitizedAddress = address;
        console.log(sanitizedAddress);
        const clerkUserId = c2.get("auth")?.userId;
        if (!clerkUserId) {
          return sendError(c2, 401, "Authentication required");
        }
        const clerkUser = await clerk_default.users.getUser(clerkUserId);
        const fName = clerkUser.firstName || "";
        const lName = clerkUser.lastName || "";
        const uid = clerkUser.publicMetadata._id;
        if (!uid) {
          return sendError(c2, 400, "User metadata is missing");
        }
        if (!sanitizedName || !sanitizedEmail || !sanitizedWebsite || !sanitizedAddress || !members) {
          return sendError(c2, 400, "Please fill all required fields");
        }
        if (!validateEmail(sanitizedEmail)) {
          return sendError(c2, 400, "Invalid email address");
        }
        if (!validateWebsite(sanitizedWebsite)) {
          return sendError(c2, 400, "Invalid website address");
        }
        const existingInstitute = await Institute_default.findOne({
          email: sanitizedEmail
        });
        if (existingInstitute) {
          return sendError(c2, 400, "Institute with this email already exists");
        }
        const userInInstitute = await Institute_default.findOne({
          members: {
            $elemMatch: {
              user: uid,
              status: "active"
            }
          }
        });
        if (userInInstitute) {
          return sendError(c2, 400, "User is already part of an institute");
        }
        const membersArr = [];
        for (const member of members) {
          if (!member.email || !member.role) {
            return sendError(c2, 400, "Please fill all fields for members");
          }
          const sanitizedMemberEmail = sanitizeInput(member.email);
          if (!validateEmail(sanitizedMemberEmail)) {
            return sendError(
              c2,
              400,
              `Invalid email address for member: ${sanitizedMemberEmail}`
            );
          }
          const role = defaultInstituteRoles_default.find(
            (r2) => r2.name.toLowerCase() === member.role.toLowerCase()
          );
          if (!role) {
            return sendError(
              c2,
              400,
              `Invalid role for member: ${sanitizedMemberEmail}`
            );
          }
          membersArr.push({
            user: member.user,
            email: sanitizedMemberEmail,
            role: role?.slug,
            status: "pending"
          });
        }
        const adminRole = defaultInstituteRoles_default.find(
          (role) => role.slug === "administrator"
        );
        if (!adminRole) {
          return sendError(c2, 500, "Administrator role not found");
        }
        membersArr.push({
          user: typeof uid === "string" ? uid : "",
          email: clerkUser.emailAddresses[0].emailAddress,
          role: adminRole?.slug,
          status: "active"
        });
        const auditLog = {
          user: `${fName} ${lName}`,
          userId: uid,
          action: "Institute Created",
          type: "info",
          timestamp: /* @__PURE__ */ new Date()
        };
        const code = crypto.randomUUID();
        const session = await mongoose20.startSession();
        let institute;
        try {
          await session.withTransaction(async () => {
            institute = await Institute_default.create(
              [
                {
                  name: sanitizedName,
                  email: sanitizedEmail,
                  website: sanitizedWebsite,
                  address: sanitizedAddress,
                  members: membersArr,
                  roles: defaultInstituteRoles_default,
                  subscription: {
                    type: "trial",
                    status: "active",
                    startedOn: /* @__PURE__ */ new Date(),
                    endsOn: new Date((/* @__PURE__ */ new Date()).setDate((/* @__PURE__ */ new Date()).getDate() + 15)),
                    maxStudents: 50,
                    maxFaculty: 10,
                    features: []
                  },
                  auditLogs: [auditLog],
                  code,
                  createdBy: uid
                }
              ],
              { session }
            );
            institute = institute[0];
            await clerk_default.users.updateUser(clerkUserId, {
              publicMetadata: {
                ...clerkUser.publicMetadata,
                institute: {
                  _id: institute._id,
                  name: institute.name,
                  role: adminRole
                }
              }
            });
          });
        } catch (error) {
          logger_default.error(`Transaction failed in createInstitute: ${error}`);
          return sendError(c2, 500, "Failed to create institute", {
            message: "Database transaction failed"
          });
        } finally {
          await session.endSession();
        }
        for (const member of members) {
          const role = defaultInstituteRoles_default.find(
            (r2) => r2.name.toLowerCase() === member.role.toLowerCase()
          );
          const reqObj = {
            email: sanitizeInput(member.email),
            role: role?.slug,
            institute: institute?._id,
            inviter: fName || "",
            inviterId: uid,
            institutename: sanitizedName
          };
          const token = jwt2.sign(reqObj, process.env.JWT_SECRET, {
            expiresIn: TOKEN_EXPIRY
          });
          try {
            loops_default.sendTransactionalEmail({
              transactionalId: process.env.LOOPS_CAMPUS_INVITE_EMAIL,
              email: sanitizeInput(member.email),
              dataVariables: {
                inviter: fName || "",
                joinlink: `${process.env.ENTERPRISE_FRONTEND_URL}/join?token=${token}`,
                institutename: sanitizedName
              }
            });
          } catch (error) {
            logger_default.error(
              `Failed to send invite email to ${member.email}: ${error}`
            );
          }
        }
        if (sampleData) {
          await generateSampleInstituteData_default(
            institute?._id
          );
        }
        return sendSuccess(c2, 200, "Institute created successfully", {
          institute: institute?._id
        });
      } catch (error) {
        logger_default.error(`Failed to create institute: ${error}`);
        return sendError(c2, 500, "Failed to create institute", {
          message: "Internal server error"
        });
      }
    };
    verifyInvite2 = async (c2) => {
      try {
        const { token } = await c2.req.json();
        const cid = c2.get("auth")?.userId;
        if (!cid) {
          return sendError(c2, 401, "Authentication required");
        }
        if (!token) {
          return sendError(c2, 400, "Token is required");
        }
        const clerkUser = await clerk_default.users.getUser(cid);
        const email = clerkUser.emailAddresses[0].emailAddress;
        let decoded;
        try {
          decoded = jwt2.verify(token, process.env.JWT_SECRET);
        } catch (error) {
          if (error.name === "TokenExpiredError") {
            return sendError(c2, 400, "Invitation has expired");
          }
          return sendError(c2, 400, "Invalid token");
        }
        if (!decoded?.institute || !Types.ObjectId.isValid(decoded.institute)) {
          return sendError(c2, 400, "Invalid invitation");
        }
        const institute = await Institute_default.findById(decoded.institute);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        if (decoded.email !== email) {
          return sendError(c2, 400, "This invitation is not for your email address");
        }
        const instituteWithMember = await Institute_default.findOne({
          _id: decoded.institute,
          members: { $elemMatch: { email, status: "pending" } }
        });
        if (!instituteWithMember) {
          return sendError(c2, 400, "Invalid invitation");
        }
        return sendSuccess(c2, 200, "Invitation verified", {
          institute: decoded.institute,
          institutename: institute.name,
          role: decoded.role,
          inviter: decoded.inviter
        });
      } catch (error) {
        logger_default.error(`verifyInvite error: ${error}`);
        return sendError(c2, 500, "Failed to verify invitation", {
          message: "Internal server error"
        });
      }
    };
    joinInstitute = async (c2) => {
      try {
        const { status, token } = await c2.req.json();
        const userId = c2.get("auth")?._id;
        const cid = c2.get("auth")?.userId;
        if (!userId || !cid) {
          return sendError(c2, 401, "Authentication required");
        }
        if (!token) {
          return sendError(c2, 400, "Token is required");
        }
        if (status !== "accept" && status !== "reject") {
          return sendError(c2, 400, "Invalid status value");
        }
        const clerkUser = await clerk_default.users.getUser(cid);
        const email = clerkUser.emailAddresses[0].emailAddress;
        let decoded;
        try {
          decoded = jwt2.verify(token, process.env.JWT_SECRET);
        } catch (error) {
          if (error.name === "TokenExpiredError") {
            return sendError(c2, 400, "Invitation has expired");
          }
          return sendError(c2, 400, "Invalid token");
        }
        if (!decoded?.institute || !Types.ObjectId.isValid(decoded.institute)) {
          return sendError(c2, 400, "Invalid invitation");
        }
        if (decoded.email !== email) {
          return sendError(c2, 400, "This invitation is not for your email address");
        }
        const institute = await Institute_default.findById(decoded.institute);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const instituteWithMember = await Institute_default.findOne({
          _id: decoded.institute,
          members: { $elemMatch: { email, status: "pending" } }
        });
        if (!instituteWithMember) {
          return sendError(c2, 400, "Invalid invitation");
        }
        const userInInstitute = await Institute_default.findOne({
          _id: { $ne: decoded.institute },
          "members.user": userId,
          "members.status": "active"
        });
        if (userInInstitute) {
          return sendError(c2, 400, "You are already a member of another institute");
        }
        if (status === "accept") {
          const role = institute.roles.find((r2) => r2.slug === decoded.role);
          if (!role) {
            return sendError(c2, 400, "Invalid role in invitation");
          }
          const session = await mongoose20.startSession();
          try {
            await session.withTransaction(async () => {
              await clerk_default.users.updateUser(cid, {
                publicMetadata: {
                  ...clerkUser.publicMetadata,
                  institute: {
                    _id: decoded.institute,
                    name: institute.name,
                    role
                  }
                }
              });
              let inviterName = "Unknown";
              try {
                const inviterUser = await User_default.findById(decoded.inviterId);
                if (inviterUser?.clerkId) {
                  const inviterClerk = await clerk_default.users.getUser(
                    inviterUser.clerkId
                  );
                  inviterName = `${inviterClerk.firstName || ""} ${inviterClerk.lastName || ""}`.trim();
                }
              } catch (inviterError) {
                logger_default.error(`Failed to find inviter: ${inviterError}`);
              }
              const auditLog = {
                user: `${clerkUser.firstName || ""} ${clerkUser.lastName || ""}`.trim(),
                userId,
                action: `User Joined Institute. Invited By: ${inviterName}`,
                type: "info"
              };
              await Institute_default.updateOne(
                { _id: decoded.institute, "members.email": email },
                {
                  $set: { "members.$.status": "active", "members.$.user": userId },
                  $push: { auditLogs: auditLog }
                }
              );
            });
            await session.endSession();
          } catch (error) {
            await session.abortTransaction();
            await session.endSession();
            logger_default.error(`Transaction failed in joinInstitute: ${error}`);
            return sendError(c2, 500, "Failed to join institute", {
              message: "Database transaction failed"
            });
          }
        } else {
          await Institute_default.updateOne(
            { _id: decoded.institute },
            { $pull: { members: { email } } }
          );
        }
        const notifyingUsers = await getUserWithPermission_default({
          institute,
          permissions: ["manage_institute"]
        });
        console.log("Notifying users: ", notifyingUsers);
        if (notifyingUsers.length > 0) {
          await sendNotificationToCampus({
            userIds: notifyingUsers,
            title: "New Member Joined",
            message: `${clerkUser.firstName || ""} ${clerkUser.lastName || ""} has joined the institute.`
          });
        }
        return sendSuccess(
          c2,
          200,
          status === "accept" ? "Joined institute successfully" : "Invitation rejected",
          {
            id: decoded.institute
          }
        );
      } catch (error) {
        logger_default.error(`joinInstitute error: ${error}`);
        return sendError(c2, 500, "Failed to process invitation", {
          message: "Internal server error"
        });
      }
    };
    getSettings2 = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to view institute settings"
          );
        }
        if (!perms.data?.institute?._id) {
          return sendError(c2, 404, "Institute not found");
        }
        const instituteId = perms.data.institute._id;
        if (!Types.ObjectId.isValid(instituteId)) {
          return sendError(c2, 400, "Invalid institute ID");
        }
        const institute = await Institute_default.findById(instituteId).populate("auditLogs.user").populate("members.user").lean();
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const logoUrl = institute.logo;
        if (logoUrl) {
          try {
            const command = new GetObjectCommand4({
              Bucket: process.env.R2_S3_BUCKET,
              Key: logoUrl
            });
            const presignedUrl = await getSignedUrl3(s3_default, command, {
              expiresIn: 3600
            });
            institute.logo = presignedUrl;
          } catch (e2) {
            logger_default.error(`Failed to fetch logo: ${e2}`);
            institute.logo = null;
          }
        }
        const sanitizedInstitute = {
          ...institute,
          auditLogs: institute.auditLogs.map((log) => ({
            ...log,
            additionalData: void 0
          }))
        };
        return sendSuccess(c2, 200, "Settings retrieved successfully", {
          institute: sanitizedInstitute,
          permissions: institutePermissions_default
        });
      } catch (error) {
        logger_default.error(`getSettings error: ${error}`);
        return sendError(c2, 500, "Failed to fetch institute settings", {
          message: "Internal server error"
        });
      }
    };
    updateInstitute = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to manage institute settings"
          );
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId || !Types.ObjectId.isValid(instituteId)) {
          return sendError(c2, 404, "Institute not found");
        }
        const body = await c2.req.json();
        const institute = await Institute_default.findById(instituteId).lean();
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const currentUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const inviterName = `${currentUser.firstName || ""} ${currentUser.lastName || ""}`.trim();
        const oldMembers = institute.members || [];
        const newMembers = body.members || [];
        if (newMembers.length > 0) {
          const hasAdmin = newMembers.some((member) => {
            const role = institute.roles.find(
              (r2) => r2.slug === member.role
            );
            return role?.slug === "administrator" && member.status === "active";
          });
          if (!hasAdmin) {
            return sendError(
              c2,
              400,
              "At least one active administrator is required"
            );
          }
        }
        const oldEmails = oldMembers.map((m3) => m3.email);
        const newEmails = newMembers.map((m3) => m3.email);
        const removedEmails = oldEmails.filter(
          (email) => !newEmails.includes(email)
        );
        const metadataUpdatePromises = [];
        if (removedEmails.length > 0) {
          const removedMembers = oldMembers.filter(
            (member) => removedEmails.includes(member.email) && member.user
          );
          for (const member of removedMembers) {
            if (!member.user) continue;
            metadataUpdatePromises.push(
              (async () => {
                try {
                  const user = await User_default.findById(member.user);
                  if (!user?.clerkId) return;
                  const clerkUserToUpdate = await clerk_default.users.getUser(
                    user.clerkId
                  );
                  const currentMetadata = clerkUserToUpdate.publicMetadata;
                  if (currentMetadata.institute?._id === instituteId.toString()) {
                    await clerk_default.users.updateUser(user.clerkId, {
                      publicMetadata: {
                        ...currentMetadata,
                        institute: null
                      }
                    });
                  }
                } catch (error) {
                  logger_default.error(
                    `Failed to update Clerk metadata for removed user: ${member.user}`
                  );
                }
              })()
            );
          }
        }
        const existingMembers = newMembers.filter(
          (member) => oldEmails.includes(member.email) && member.status === "active"
        );
        for (const newMember of existingMembers) {
          const oldMember = oldMembers.find((m3) => m3.email === newMember.email);
          if (!oldMember?.user || oldMember.role === newMember.role) continue;
          metadataUpdatePromises.push(
            (async () => {
              try {
                const user = await User_default.findById(oldMember.user);
                if (!user?.clerkId) return;
                const clerkUserToUpdate = await clerk_default.users.getUser(
                  user.clerkId
                );
                const currentMetadata = clerkUserToUpdate.publicMetadata;
                if (currentMetadata.institute?._id === instituteId.toString()) {
                  const role = institute.roles.find(
                    (r2) => r2.slug === newMember.role
                  );
                  if (!role) return;
                  await clerk_default.users.updateUser(user.clerkId, {
                    publicMetadata: {
                      ...currentMetadata,
                      institute: {
                        ...currentMetadata.institute,
                        role
                      }
                    }
                  });
                }
              } catch (error) {
                logger_default.error(
                  `Failed to update role in Clerk metadata for user: ${oldMember.user}`
                );
              }
            })()
          );
        }
        const oldPendingEmails = oldMembers.filter((member) => member.status === "pending").map((member) => member.email);
        const newPendingMembers = newMembers.filter(
          (member) => member.status === "pending" && !oldPendingEmails.includes(member.email)
        );
        for (const member of newPendingMembers) {
          const sanitizedEmail = sanitizeInput(member.email);
          if (!validateEmail(sanitizedEmail)) {
            return sendError(
              c2,
              400,
              `Invalid email address for member: ${sanitizedEmail}`
            );
          }
          const role = institute.roles.find((r2) => r2.slug === member.role);
          if (!role) {
            logger_default.error(`Role not found for member: ${member.email}`);
            continue;
          }
          const reqObj = {
            email: sanitizedEmail,
            role: role.slug,
            institute: instituteId,
            inviter: inviterName,
            inviterId: currentUser?.publicMetadata?._id,
            institutename: body.name || institute.name
          };
          const token = jwt2.sign(reqObj, process.env.JWT_SECRET, {
            expiresIn: TOKEN_EXPIRY
          });
          try {
            await loops_default.sendTransactionalEmail({
              transactionalId: process.env.LOOPS_CAMPUS_INVITE_EMAIL,
              email: sanitizedEmail,
              dataVariables: {
                inviter: inviterName,
                joinlink: `${process.env.CAMPUS_FRONTEND_URL}/join?token=${token}`,
                institutename: body.name || institute.name
              }
            });
            logger_default.info(`Invite sent to: ${sanitizedEmail}`);
          } catch (error) {
            logger_default.error(`Failed to send invite to: ${sanitizedEmail}: ${error}`);
          }
        }
        await Promise.all(metadataUpdatePromises);
        const auditLog = {
          user: inviterName,
          userId: currentUser?.publicMetadata?._id,
          action: "Institute Updated",
          type: "info",
          timestamp: /* @__PURE__ */ new Date()
        };
        const sanitizedBody = {
          ...body,
          name: body.name ? sanitizeInput(body.name) : institute.name,
          email: body.email ? sanitizeInput(body.email) : institute.email,
          website: body.website ? sanitizeInput(body.website) : institute.website
        };
        const updatedInstitute = await Institute_default.findByIdAndUpdate(
          instituteId,
          {
            $set: {
              ...sanitizedBody
            }
          },
          { new: true }
        );
        if (updatedInstitute) {
          updatedInstitute.auditLogs.push(auditLog);
          await updatedInstitute.save();
        }
        if (!updatedInstitute) {
          return sendError(c2, 404, "Institute not found");
        }
        return sendSuccess(c2, 200, "Institute settings updated successfully", {
          _id: updatedInstitute._id,
          name: updatedInstitute.name
        });
      } catch (error) {
        logger_default.error(`updateInstitute error: ${error}`);
        return sendError(c2, 500, "Failed to update institute settings", {
          message: "Internal server error"
        });
      }
    };
    updateGeneralSettings2 = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to manage institute settings"
          );
        }
        const { name, email, website } = await c2.req.json();
        const instituteId = perms.data?.institute?._id;
        if (!instituteId || !Types.ObjectId.isValid(instituteId)) {
          return sendError(c2, 404, "Institute not found");
        }
        const sanitizedName = sanitizeInput(name);
        const sanitizedEmail = sanitizeInput(email);
        const sanitizedWebsite = sanitizeInput(website);
        if (!sanitizedName || !sanitizedEmail || !sanitizedWebsite) {
          return sendError(c2, 400, "Please fill all required fields");
        }
        if (!validateEmail(sanitizedEmail)) {
          return sendError(c2, 400, "Invalid email address");
        }
        if (!validateWebsite(sanitizedWebsite)) {
          return sendError(c2, 400, "Invalid website address");
        }
        const existingInstitute = await Institute_default.findOne({
          email: sanitizedEmail,
          _id: { $ne: instituteId }
        });
        if (existingInstitute) {
          return sendError(c2, 400, "Institute with this email already exists");
        }
        const user = await clerk_default.users.getUser(c2.get("auth").userId);
        const auditLog = {
          user: `${user.firstName || ""} ${user.lastName || ""}`.trim(),
          userId: c2.get("auth")._id,
          action: "Institute General Settings Updated",
          type: "info"
        };
        const institute = await Institute_default.findById(instituteId).populate(
          "members.user"
        );
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const session = await mongoose20.startSession();
        try {
          await session.withTransaction(async () => {
            if (sanitizedName !== institute.name) {
              const updatePromises = [];
              for (const member of institute.members) {
                if (!member.user || member.status !== "active") continue;
                const userDoc = await User_default.findById(member.user);
                if (!userDoc?.clerkId) continue;
                updatePromises.push(
                  (async () => {
                    try {
                      const u2 = await clerk_default.users.getUser(userDoc.clerkId);
                      const publicMetadata = u2.publicMetadata;
                      if (publicMetadata.institute && publicMetadata.institute._id === instituteId.toString()) {
                        publicMetadata.institute.name = sanitizedName;
                        await clerk_default.users.updateUser(userDoc.clerkId, {
                          publicMetadata
                        });
                      }
                    } catch (error) {
                      logger_default.error(
                        `Failed to update institute name for user ${userDoc.clerkId}: ${error}`
                      );
                    }
                  })()
                );
              }
              await Promise.all(updatePromises);
            }
            institute.name = sanitizedName;
            institute.email = sanitizedEmail;
            institute.website = sanitizedWebsite;
            institute.auditLogs.push(auditLog);
            await institute.save({ session });
          });
          await session.endSession();
        } catch (error) {
          await session.abortTransaction();
          await session.endSession();
          logger_default.error(`Transaction failed in updateGeneralSettings: ${error}`);
          return sendError(c2, 500, "Failed to update institute settings", {
            message: "Database transaction failed"
          });
        }
        return sendSuccess(c2, 200, "Institute settings updated successfully", {
          _id: institute._id,
          name: institute.name,
          email: institute.email,
          website: institute.website
        });
      } catch (error) {
        logger_default.error(`updateGeneralSettings error: ${error}`);
        return sendError(c2, 500, "Failed to update institute settings", {
          message: "Internal server error"
        });
      }
    };
    updateLogo2 = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to update institute logo"
          );
        }
        const orgId = perms.data?.institute?._id;
        if (!orgId || !Types.ObjectId.isValid(orgId)) {
          return sendError(c2, 404, "Institute not found");
        }
        const file = await c2.req.json();
        if (!file.logo) {
          return sendError(c2, 400, "Please provide a logo image");
        }
        const logoData = file.logo;
        const matches = logoData.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/);
        if (!matches || matches.length !== 3) {
          return sendError(c2, 400, "Invalid image format");
        }
        const contentType = matches[1];
        const base64Data = matches[2];
        if (!ALLOWED_FILE_TYPES.includes(contentType)) {
          return sendError(
            c2,
            400,
            `File type not allowed. Accepted types: ${ALLOWED_FILE_TYPES.join(
              ", "
            )}`
          );
        }
        const buffer = Buffer.from(base64Data, "base64");
        if (buffer.length > MAX_FILE_SIZE) {
          return sendError(
            c2,
            400,
            `File size exceeds the ${MAX_FILE_SIZE / (1024 * 1024)}MB limit`
          );
        }
        const uploadParams = {
          Bucket: process.env.R2_S3_BUCKET,
          Key: `inst-logos/${orgId}.${contentType.split("/")[1]}`,
          Body: buffer,
          ContentEncoding: "base64",
          ContentType: contentType
        };
        const upload = new Upload3({
          client: s3_default,
          params: uploadParams
        });
        await upload.done();
        const user = await clerk_default.users.getUser(c2.get("auth").userId);
        const auditLog = {
          user: `${user.firstName || ""} ${user.lastName || ""}`.trim(),
          userId: c2.get("auth")._id,
          action: "Institute Logo Updated",
          type: "info"
        };
        const updatedOrg = await Institute_default.findByIdAndUpdate(
          orgId,
          {
            $set: { logo: uploadParams.Key },
            $push: { auditLogs: auditLog }
          },
          { new: true }
        );
        if (!updatedOrg) {
          return sendError(c2, 404, "Institute not found");
        }
        return sendSuccess(c2, 200, "Logo updated successfully");
      } catch (error) {
        logger_default.error(`updateLogo error: ${error}`);
        return sendError(c2, 500, "Failed to update institute logo", {
          message: "Internal server error"
        });
      }
    };
    updateMembers2 = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to update institute members"
          );
        }
        const { members } = await c2.req.json();
        const instituteId = perms.data?.institute?._id;
        if (!instituteId || !Types.ObjectId.isValid(instituteId)) {
          return sendError(c2, 404, "Institute not found");
        }
        if (!Array.isArray(members)) {
          return sendError(c2, 400, "Members must be an array");
        }
        const hasAdmin = members.some((member) => {
          return member.role === "administrator" && member.status === "active";
        });
        if (!hasAdmin) {
          return sendError(c2, 400, "At least one active administrator is required");
        }
        const institute = await Institute_default.findById(instituteId);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const fullName = `${clerkUser.firstName || ""} ${clerkUser.lastName || ""}`.trim();
        const oldMembers = institute.members;
        const oldMemberEmails = oldMembers.map((member) => member.email);
        const newMemberEmails = members.map((member) => member.email);
        const removedMemberEmails = oldMemberEmails.filter(
          (email) => !newMemberEmails.includes(email)
        );
        const session = await mongoose20.startSession();
        try {
          await session.withTransaction(async () => {
            if (removedMemberEmails.length > 0) {
              const removedMembers = oldMembers.filter(
                (member) => removedMemberEmails.includes(member.email) && member.user
              );
              for (const member of removedMembers) {
                if (!member.user) continue;
                try {
                  const user = await User_default.findById(member.user);
                  if (!user?.clerkId) continue;
                  const clerkUserToUpdate = await clerk_default.users.getUser(
                    user.clerkId
                  );
                  const currentMetadata = clerkUserToUpdate.publicMetadata;
                  if (currentMetadata.institute?._id === instituteId.toString()) {
                    await clerk_default.users.updateUser(user.clerkId, {
                      publicMetadata: {
                        ...currentMetadata,
                        institute: null
                      }
                    });
                  }
                } catch (error) {
                  logger_default.error(
                    `Failed to update Clerk metadata for user: ${member.user}: ${error}`
                  );
                }
              }
            }
            const existingMembers = members.filter(
              (member) => oldMemberEmails.includes(member.email) && member.status === "active"
            );
            for (const newMember of existingMembers) {
              const oldMember = oldMembers.find((m3) => m3.email === newMember.email);
              if (!oldMember?.user || oldMember.role === newMember.role) continue;
              try {
                const user = await User_default.findById(oldMember.user);
                if (!user?.clerkId) continue;
                const clerkUserToUpdate = await clerk_default.users.getUser(
                  user.clerkId
                );
                const currentMetadata = clerkUserToUpdate.publicMetadata;
                if (currentMetadata.institute?._id === instituteId.toString()) {
                  const role = institute.roles.find(
                    (r2) => r2.slug === newMember.role
                  );
                  await clerk_default.users.updateUser(user.clerkId, {
                    publicMetadata: {
                      ...currentMetadata,
                      institute: {
                        ...currentMetadata.institute,
                        role
                      }
                    }
                  });
                }
              } catch (error) {
                logger_default.error(
                  `Failed to update role in Clerk metadata for user: ${oldMember.user}: ${error}`
                );
              }
            }
            const oldPendingMembers = oldMembers.filter(
              (member) => member.status === "pending"
            );
            const oldPendingEmails = oldPendingMembers.map((m3) => m3.email);
            const newPendingMembers = members.filter(
              (member) => member.status === "pending"
            );
            const newPendingEmails = newPendingMembers.map((m3) => m3.email);
            const newInviteEmails = newPendingEmails.filter(
              (email) => !oldPendingEmails.includes(email)
            );
            for (const email of newInviteEmails) {
              const member = members.find((m3) => m3.email === email);
              if (!validateEmail(email)) {
                logger_default.warn(`Skipping invalid email: ${email}`);
                continue;
              }
              const role = institute.roles.find((r2) => r2.slug === member.role);
              if (!role) {
                logger_default.warn(`Skipping member with invalid role: ${email}`);
                continue;
              }
              const reqObj = {
                email,
                role: role.slug,
                institute: instituteId,
                inviter: clerkUser.firstName || "",
                inviterId: c2.get("auth")._id,
                institutename: institute.name
              };
              const token = jwt2.sign(reqObj, process.env.JWT_SECRET, {
                expiresIn: TOKEN_EXPIRY
              });
              try {
                await loops_default.sendTransactionalEmail({
                  transactionalId: process.env.LOOPS_INVITE_EMAIL,
                  email,
                  dataVariables: {
                    inviter: clerkUser.firstName || "",
                    joinlink: `${process.env.ENTERPRISE_FRONTEND_URL}/join?token=${token}`,
                    institutename: institute.name
                  }
                });
              } catch (error) {
                logger_default.error(`Failed to send invite to: ${email}: ${error}`);
              }
            }
            const finalMembers = members.map((member) => ({
              user: member.user?.id || null,
              email: sanitizeInput(member.email),
              role: member.role,
              addedOn: member.addedOn || /* @__PURE__ */ new Date(),
              status: member.status
            }));
            const auditLog = {
              user: fullName,
              userId: c2.get("auth")._id,
              action: "Institute Members Updated",
              type: "info",
              timestamp: /* @__PURE__ */ new Date()
            };
            await Institute_default.findByIdAndUpdate(
              instituteId,
              {
                $set: { members: finalMembers },
                $push: { auditLogs: auditLog }
              },
              { session }
            );
          });
          await session.endSession();
        } catch (error) {
          await session.abortTransaction();
          await session.endSession();
          logger_default.error(`Transaction failed in updateMembers: ${error}`);
          return sendError(c2, 500, "Failed to update institute members", {
            message: "Database transaction failed"
          });
        }
        return sendSuccess(c2, 200, "Institute members updated successfully");
      } catch (error) {
        logger_default.error(`updateMembers error: ${error}`);
        return sendError(c2, 500, "Failed to update institute members", {
          message: "Internal server error"
        });
      }
    };
    updateRoles2 = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to update institute roles"
          );
        }
        const { roles } = await c2.req.json();
        const instituteId = perms.data?.institute?._id;
        if (!instituteId || !Types.ObjectId.isValid(instituteId)) {
          return sendError(c2, 404, "Institute not found");
        }
        if (!Array.isArray(roles)) {
          return sendError(c2, 400, "Roles must be an array");
        }
        const finalRoles = [];
        for (const role of roles) {
          if (!role.name || !role.slug) {
            return sendError(c2, 400, "Each role must have a name and slug");
          }
          if (typeof role.slug !== "string" || !/^[a-z0-9_-]+$/.test(role.slug)) {
            return sendError(c2, 400, `Invalid role slug format: ${role.slug}`);
          }
          if (finalRoles.some((r2) => r2.slug === role.slug)) {
            return sendError(c2, 400, `Duplicate role slug: ${role.slug}`);
          }
          const roleObj = {
            name: sanitizeInput(role.name),
            slug: role.slug,
            description: role.description ? sanitizeInput(role.description) : "",
            permissions: Array.isArray(role.permissions) ? role.permissions.filter(
              (p3) => institutePermissions_default.includes(p3)
            ) : [],
            default: !!role.default
          };
          finalRoles.push(roleObj);
        }
        const institute = await Institute_default.findById(instituteId);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const defaultSystemRoles = defaultInstituteRoles_default.map((role) => role.slug);
        const userModifiedSystemRoles = finalRoles.some(
          (role) => defaultSystemRoles.includes(role.slug) && !defaultInstituteRoles_default.some(
            (defaultRole) => defaultRole.slug === role.slug && JSON.stringify(defaultRole.permissions) === JSON.stringify(role.permissions)
          )
        );
        if (userModifiedSystemRoles) {
          return sendError(c2, 400, "Cannot modify default system roles");
        }
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const fullName = `${clerkUser.firstName || ""} ${clerkUser.lastName || ""}`.trim();
        const auditLog = {
          user: fullName,
          userId: c2.get("auth")._id,
          action: "Institute Roles Updated",
          type: "info"
        };
        const existingDefaultRoles = defaultInstituteRoles_default.filter(
          (role) => !finalRoles.some((r2) => r2.slug === role.slug)
        );
        const updatedInstitute = await Institute_default.findByIdAndUpdate(
          instituteId,
          {
            $set: { roles: [...finalRoles, ...existingDefaultRoles] },
            $push: { auditLogs: auditLog }
          },
          { new: true }
        );
        if (!updatedInstitute) {
          return sendError(c2, 404, "Institute not found");
        }
        return sendSuccess(c2, 200, "Institute roles updated successfully", {
          roles: updatedInstitute.roles
        });
      } catch (error) {
        logger_default.error(`updateRoles error: ${error}`);
        return sendError(c2, 500, "Failed to update institute roles", {
          message: "Internal server error"
        });
      }
    };
    getCandidates2 = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_institute"]);
        if (!perms.allowed) {
          return sendError(c2, 403, "You don't have permission to view candidates");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId || !Types.ObjectId.isValid(instituteId)) {
          return sendError(c2, 404, "Institute not found");
        }
        const institute = await Institute_default.findOne({ _id: instituteId }).populate({
          path: "candidates",
          select: "-passwordHash -resetToken -refreshToken",
          options: { lean: true }
        }).lean();
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        console.log(`Returning ${institute?.candidates?.length || 0} candidates`);
        return sendSuccess(
          c2,
          200,
          "Candidates fetched successfully",
          institute?.candidates || []
        );
      } catch (error) {
        logger_default.error(`getCandidates error: ${error}`);
        return sendError(c2, 500, "Failed to fetch candidates", {
          message: "Internal server error"
        });
      }
    };
    getPendingCandidates = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to view pending candidates"
          );
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId || !Types.ObjectId.isValid(instituteId)) {
          return sendError(c2, 404, "Institute not found");
        }
        const institute = await Institute_default.findOne({ _id: instituteId }).populate({
          path: "pendingCandidates",
          select: "-passwordHash -resetToken -refreshToken"
        }).lean();
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        return sendSuccess(
          c2,
          200,
          "Pending Candidates fetched successfully",
          institute?.pendingCandidates || []
        );
      } catch (error) {
        logger_default.error(`getPendingCandidates error: ${error}`);
        return sendError(c2, 500, "Failed to fetch pending candidates", {
          message: "Internal server error"
        });
      }
    };
    getDepartments2 = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_institute"]);
        if (!perms.allowed) {
          return sendError(c2, 403, "You don't have permission to view departments");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId || !Types.ObjectId.isValid(instituteId)) {
          return sendError(c2, 404, "Institute not found");
        }
        const institute = await Institute_default.findById(instituteId).select("departments").lean();
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        return sendSuccess(
          c2,
          200,
          "Departments fetched successfully",
          institute.departments || []
        );
      } catch (error) {
        logger_default.error(`getDepartments error: ${error}`);
        return sendError(c2, 500, "Failed to fetch departments", {
          message: "Internal server error"
        });
      }
    };
    requestToJoin = async (c2) => {
      try {
        const { code, uid } = await c2.req.json();
        const userId = c2.get("auth")?._id;
        if (!userId) {
          return sendError(c2, 401, "Authentication required");
        }
        if (!code || !uid) {
          return sendError(c2, 400, "Institute code and candidate ID are required");
        }
        const sanitizedCode = sanitizeInput(code);
        const sanitizedUid = sanitizeInput(uid);
        const candidate = await Candidate_default.findOne({ userId });
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        const institute = await Institute_default.findOne({ code: sanitizedCode });
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        if (institute.pendingCandidates.some(
          (c3) => c3?.toString() === candidate?._id?.toString()
        )) {
          return sendError(
            c2,
            400,
            "You have already requested to join this institute"
          );
        }
        if (institute.candidates.some(
          (c3) => c3?.toString() === candidate._id.toString()
        )) {
          return sendError(c2, 400, "You are already a candidate of this institute");
        }
        if (institute.members.some((m3) => m3.user?.toString() === userId)) {
          return sendError(
            c2,
            400,
            "You are already a faculty member of this institute"
          );
        }
        if (candidate.institute) {
          return sendError(c2, 400, "You already belong to another institute");
        }
        const existingCandidate = await Candidate_default.findOne({
          instituteUid: sanitizedUid,
          institute: institute._id
        });
        if (existingCandidate) {
          return sendError(
            c2,
            400,
            "A candidate with this unique ID already exists in this institute"
          );
        }
        const session = await mongoose20.startSession();
        try {
          await session.withTransaction(async () => {
            await Institute_default.findByIdAndUpdate(
              institute._id,
              {
                $push: { pendingCandidates: candidate._id }
              },
              { session }
            );
            candidate.instituteUid = sanitizedUid;
            await candidate.save({ session });
          });
          await session.endSession();
        } catch (error) {
          await session.abortTransaction();
          await session.endSession();
          logger_default.error(`Transaction failed in requestToJoin: ${error}`);
          return sendError(c2, 500, "Failed to send join request", {
            message: "Database transaction failed"
          });
        }
        const notifyingUsers = await getUserWithPermission_default({
          institute,
          permissions: ["verify_candidates"]
        });
        if (notifyingUsers.length > 0) {
          await sendNotificationToCampus({
            userIds: notifyingUsers,
            title: "New Candidate Request",
            message: `New candidate request from ${candidate.name} (${candidate.email})`
          });
        }
        return sendSuccess(c2, 200, "Request to join institute sent successfully", {
          name: institute.name
        });
      } catch (error) {
        logger_default.error(`requestToJoin error: ${error}`);
        return sendError(c2, 500, "Failed to request to join institute", {
          message: "Internal server error"
        });
      }
    };
    leaveInstitute = async (c2) => {
      const userId = c2.get("auth")?.userId;
      if (!userId) {
        return sendError(c2, 401, "Authentication required");
      }
      try {
        const clerkUser = await clerk_default.users.getUser(userId);
        if (!clerkUser) {
          return sendError(c2, 404, "User not found");
        }
        const userMeta = clerkUser.publicMetadata;
        if (!userMeta.institute) {
          return sendError(c2, 404, "You are not a member of any institute");
        }
        const instituteId = userMeta.institute._id;
        if (!Types.ObjectId.isValid(instituteId)) {
          return sendError(c2, 400, "Invalid institute ID in user metadata");
        }
        const institute = await Institute_default.findById(instituteId);
        if (!institute) {
          await clerk_default.users.updateUser(userId, {
            publicMetadata: {
              ...userMeta,
              institute: null
            }
          });
          return sendError(c2, 404, "Institute not found");
        }
        const memberId = c2.get("auth")?._id;
        if (!memberId) {
          return sendError(c2, 401, "User ID not found");
        }
        const member = institute.members.find(
          (m3) => m3.user?.toString() === memberId
        );
        if (!member) {
          await clerk_default.users.updateUser(userId, {
            publicMetadata: {
              ...userMeta,
              institute: null
            }
          });
          return sendError(c2, 404, "You are not a member of this institute");
        }
        if (member.status !== "active") {
          return sendError(c2, 400, "Your membership is not active");
        }
        if (memberId === institute.createdBy?.toString()) {
          return sendError(c2, 400, "Institute owners cannot leave the institute");
        }
        if (member.role === "administrator") {
          const activeAdmins = institute.members.filter(
            (m3) => m3.status === "active" && m3.role === "administrator"
          );
          if (activeAdmins.length <= 1) {
            return sendError(
              c2,
              400,
              "Cannot leave institute as you are the last administrator"
            );
          }
        }
        const session = await mongoose20.startSession();
        try {
          await session.withTransaction(async () => {
            member.status = "inactive";
            await institute.save({ session });
            await clerk_default.users.updateUser(clerkUser.id, {
              publicMetadata: {
                ...userMeta,
                institute: null
              }
            });
          });
          await session.endSession();
        } catch (error) {
          await session.abortTransaction();
          await session.endSession();
          logger_default.error(`Transaction failed in leaveInstitute: ${error}`);
          return sendError(c2, 500, "Failed to leave institute", {
            message: "Database transaction failed"
          });
        }
        const notifyingUsers = await getUserWithPermission_default({
          institute,
          permissions: ["manage_institute"]
        });
        if (notifyingUsers.length > 0) {
          await sendNotificationToCampus({
            userIds: notifyingUsers,
            title: "Member Left Institute",
            message: `${clerkUser.firstName} ${clerkUser.lastName} has left the institute`
          });
        }
        return sendSuccess(c2, 200, "Left institute successfully", {
          message: "You have successfully left the institute"
        });
      } catch (error) {
        logger_default.error(`leaveInstitute error: ${error}`);
        return sendError(c2, 500, "Failed to leave institute", {
          message: "Internal server error"
        });
      }
    };
    permissionFieldMap2 = {
      view_institute: [
        "name",
        "email",
        "website",
        "logo",
        "members",
        "roles",
        "departments",
        "auditLogs",
        "subscriptions",
        "candidates",
        "drives",
        "code",
        "companies",
        "placementGroups"
      ],
      manage_institute: [
        "name",
        "email",
        "website",
        "logo",
        "members",
        "roles",
        "departments",
        "auditLogs",
        "subscriptions",
        "candidates",
        "drives",
        "code",
        "companies",
        "placementGroups"
      ],
      view_billing: ["name", "email", "website", "subscriptions"],
      manage_billing: ["name", "email", "website", "subscriptions"],
      view_analytics: [
        "name",
        "email",
        "website",
        "logo",
        "departments",
        "candidates",
        "drives",
        "placementGroups",
        "companies"
      ],
      interviewer: [
        "name",
        "email",
        "website",
        "logo",
        "departments",
        "candidates",
        "drives",
        "placementGroups",
        "companies"
      ]
    };
    getInstitute = async (c2) => {
      try {
        const userId = c2.get("auth")?._id;
        if (!userId) {
          return sendError(c2, 401, "Authentication required");
        }
        const institute = await Institute_default.findOne({
          members: {
            $elemMatch: {
              user: userId,
              status: "active"
            }
          }
        }).populate({
          path: "members.user"
        }).populate("candidates").populate("pendingCandidates").populate("companies").populate("drives").lean();
        if (!institute) {
          return sendError(
            c2,
            404,
            "Institute not found or you are not an active member"
          );
        }
        const member = institute.members.find(
          (m3) => m3?.user?._id?.toString() === userId.toString()
        );
        if (!member?.role) {
          return sendError(c2, 403, "Invalid member access");
        }
        const role = institute.roles.find(
          (r2) => r2.slug === member.role
        );
        if (!role?.permissions?.length) {
          return sendError(c2, 403, "No permissions found for your role");
        }
        const fieldsToSelect = [
          ...new Set(
            role.permissions.flatMap(
              (permission) => permissionFieldMap2[permission] || []
            )
          )
        ];
        const [selectedInstitute, userDoc] = await Promise.all([
          Institute_default.findById(institute._id).select(fieldsToSelect.join(" ")).populate({
            path: "members.user"
          }).populate({
            path: "candidates"
          }).populate({
            path: "pendingCandidates"
          }).populate("companies").populate("placementGroups").populate("drives"),
          User_default.findOne({ _id: userId }).lean()
        ]);
        if (!selectedInstitute || !userDoc) {
          return sendError(c2, 404, "Required data not found");
        }
        const user = {
          ...member,
          _id: member._id?.toString(),
          user: member.user ? member.user._id : void 0,
          permissions: role.permissions,
          createdAt: member.createdAt || /* @__PURE__ */ new Date()
        };
        const logoUrl = selectedInstitute.logo;
        if (logoUrl) {
          try {
            const command = new GetObjectCommand4({
              Bucket: process.env.R2_S3_BUCKET,
              Key: logoUrl
            });
            const presignedUrl = await getSignedUrl3(s3_default, command, {
              expiresIn: 3600
            });
            selectedInstitute.logo = presignedUrl;
          } catch (e2) {
            logger_default.error(`Failed to fetch logo: ${e2}`);
            selectedInstitute.logo = null;
          }
        }
        return sendSuccess(c2, 200, "Institute fetched successfully", {
          institute: selectedInstitute,
          user
        });
      } catch (error) {
        logger_default.error("Failed to fetch institute: " + error);
        return sendError(c2, 500, "Failed to fetch institute", {
          message: "Internal server error"
        });
      }
    };
    verifyRequest = async (c2) => {
      try {
        const userId = c2.get("auth")?._id;
        if (!userId) {
          return sendError(c2, 401, "Authentication required");
        }
        const candidate = await Candidate_default.findOne({ userId });
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        const isCandidatePending = await Institute_default.findOne({
          pendingCandidates: candidate._id
        });
        if (!isCandidatePending) {
          return sendSuccess(c2, 200, "No pending requests found", { exist: false });
        }
        return sendSuccess(c2, 200, "Pending request found", {
          exist: true,
          name: isCandidatePending.name
        });
      } catch (error) {
        logger_default.error("Failed to verify request: " + error);
        return sendError(c2, 500, "Failed to verify request", {
          message: "Internal server error"
        });
      }
    };
    cancelRequest = async (c2) => {
      try {
        const userId = c2.get("auth")?._id;
        if (!userId) {
          return sendError(c2, 401, "Authentication required");
        }
        const candidate = await Candidate_default.findOne({ userId });
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        const isCandidatePending = await Institute_default.findOne({
          pendingCandidates: candidate._id
        });
        if (!isCandidatePending) {
          return sendSuccess(c2, 200, "No pending request found", { exist: false });
        }
        const session = await mongoose20.startSession();
        try {
          await session.withTransaction(async () => {
            await Institute_default.updateOne(
              { _id: isCandidatePending._id },
              { $pull: { pendingCandidates: candidate._id } },
              { session }
            );
            candidate.instituteUid = void 0;
            await candidate.save({ session });
          });
          await session.endSession();
        } catch (error) {
          await session.abortTransaction();
          await session.endSession();
          logger_default.error(`Transaction failed in cancelRequest: ${error}`);
          return sendError(c2, 500, "Failed to cancel request", {
            message: "Database transaction failed"
          });
        }
        return sendSuccess(c2, 200, "Request cancelled successfully", {
          exist: true,
          name: isCandidatePending.name
        });
      } catch (error) {
        logger_default.error("Failed to cancel request: " + error);
        return sendError(c2, 500, "Failed to cancel request", {
          message: "Internal server error"
        });
      }
    };
    getCandidate2 = async (c2) => {
      try {
        const cid = c2.req.param("cid");
        if (!cid || !Types.ObjectId.isValid(cid)) {
          return sendError(c2, 400, "Invalid candidate ID");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to view candidate details"
          );
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 404, "Institute not found");
        }
        const institute = await Institute_default.findById(instituteId).populate({
          path: "candidates",
          select: "-passwordHash -resetToken -refreshToken"
        }).populate({
          path: "pendingCandidates",
          select: "-passwordHash -resetToken -refreshToken"
        });
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        if (institute.candidates.some((c3) => c3?._id.toString() === cid)) {
          const candidate = institute.candidates.find(
            (c3) => c3?._id.toString() === cid
          );
          return sendSuccess(c2, 200, "Candidate found", candidate);
        }
        if (institute.pendingCandidates.some((c3) => c3?._id.toString() === cid)) {
          const candidate = institute.pendingCandidates.find(
            (c3) => c3?._id.toString() === cid
          );
          return sendSuccess(c2, 200, "Candidate found", candidate);
        }
        return sendError(c2, 404, "Candidate not found in this institute");
      } catch (error) {
        logger_default.error("Failed to get candidate details: " + error);
        return sendError(c2, 500, "Failed to get candidate details", {
          message: "Internal server error"
        });
      }
    };
    acceptCandidate = async (c2) => {
      try {
        const candidateId = c2.req.param("cid");
        if (!candidateId || !Types.ObjectId.isValid(candidateId)) {
          return sendError(c2, 400, "Invalid candidate ID");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["verify_candidates"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to verify candidates"
          );
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 404, "Institute not found");
        }
        const institute = await Institute_default.findById(instituteId);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const candidate = await Candidate_default.findById(candidateId);
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        const pendingCandidate = institute.pendingCandidates.find(
          (c3) => c3?.toString() === candidateId
        );
        if (!pendingCandidate) {
          return sendError(c2, 404, "Pending candidate not found");
        }
        if (candidate.institute && candidate.institute.toString() !== instituteId.toString()) {
          return sendError(
            c2,
            400,
            "Candidate is already part of another institute"
          );
        }
        const existingCandidate = await Candidate_default.findOne({
          instituteUid: candidate.instituteUid,
          institute: instituteId,
          _id: { $ne: candidateId }
        });
        if (existingCandidate) {
          return sendError(
            c2,
            400,
            "A candidate with this unique ID already exists in this institute"
          );
        }
        const session = await mongoose20.startSession();
        try {
          await session.withTransaction(async () => {
            institute.pendingCandidates = institute.pendingCandidates.filter(
              (c3) => c3?.toString() !== candidateId
            );
            institute.candidates.push(candidate._id);
            await institute.save({ session });
            candidate.institute = new Types.ObjectId(instituteId);
            candidate.notifications.push({
              message: `You have been accepted to ${institute.name}`,
              type: "institute",
              timestamp: /* @__PURE__ */ new Date()
            });
            await candidate.save({ session });
          });
          await session.endSession();
        } catch (error) {
          await session.abortTransaction();
          await session.endSession();
          logger_default.error(`Transaction failed in acceptCandidate: ${error}`);
          return sendError(c2, 500, "Failed to accept candidate", {
            message: "Database transaction failed"
          });
        }
        await sendNotificationToCandidate({
          candidateIds: [candidateId],
          title: "Campus Join Request Accepted",
          message: `You have been accepted to ${institute.name}`
        });
        return sendSuccess(c2, 200, "Candidate accepted successfully");
      } catch (error) {
        logger_default.error("Failed to accept candidate: " + error);
        return sendError(c2, 500, "Failed to accept candidate", {
          message: "Internal server error"
        });
      }
    };
    rejectCandidate = async (c2) => {
      try {
        const candidateId = c2.req.param("cid");
        if (!candidateId || !Types.ObjectId.isValid(candidateId)) {
          return sendError(c2, 400, "Invalid candidate ID");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["verify_candidates"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to verify candidates"
          );
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 404, "Institute not found");
        }
        const institute = await Institute_default.findById(instituteId);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const candidate = await Candidate_default.findById(candidateId);
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        const pendingCandidate = institute.pendingCandidates.find(
          (c3) => c3?.toString() === candidateId
        );
        if (!pendingCandidate) {
          return sendError(c2, 404, "Pending candidate not found");
        }
        const session = await mongoose20.startSession();
        try {
          await session.withTransaction(async () => {
            institute.pendingCandidates = institute.pendingCandidates.filter(
              (c3) => c3?.toString() !== candidateId
            );
            await institute.save({ session });
            candidate.instituteUid = void 0;
            candidate.notifications.push({
              message: `Your request to join ${institute.name} has been rejected`,
              type: "institute",
              timestamp: /* @__PURE__ */ new Date()
            });
            await candidate.save({ session });
          });
          await session.endSession();
        } catch (error) {
          await session.abortTransaction();
          await session.endSession();
          logger_default.error(`Transaction failed in rejectCandidate: ${error}`);
          return sendError(c2, 500, "Failed to reject candidate", {
            message: "Database transaction failed"
          });
        }
        await sendNotificationToCandidate({
          candidateIds: [candidateId],
          title: "Campus Join Request Rejected",
          message: `Your request to join ${institute.name} has been rejected`
        });
        return sendSuccess(c2, 200, "Candidate rejected successfully");
      } catch (error) {
        logger_default.error("Failed to reject candidate: " + error);
        return sendError(c2, 500, "Failed to reject candidate", {
          message: "Internal server error"
        });
      }
    };
    getResume2 = async (c2) => {
      try {
        const cid = c2.req.param("cid");
        if (!cid || !Types.ObjectId.isValid(cid)) {
          return sendError(c2, 400, "Invalid candidate ID");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["view_institute"]);
        if (!perms.allowed) {
          return sendError(c2, 403, "You don't have permission to view resumes");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 404, "Institute not found");
        }
        const candidate = await Candidate_default.findOne({
          _id: cid,
          institute: instituteId
        });
        if (!candidate) {
          return sendError(
            c2,
            404,
            "Candidate not found or doesn't belong to your institute"
          );
        }
        const command = new GetObjectCommand4({
          Bucket: process.env.R2_S3_RESUME_BUCKET,
          Key: candidate?.isSample ? "sample.pdf" : `${candidate._id}.pdf`
        });
        const url = await getSignedUrl3(s3_default, command, { expiresIn: 600 });
        return sendSuccess(c2, 200, "Resume URL generated", { url });
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to get resume", {
          message: "Internal server error"
        });
      }
    };
    removeCandidate = async (c2) => {
      try {
        const candidateId = c2.req.param("cid");
        if (!candidateId || !Types.ObjectId.isValid(candidateId)) {
          return sendError(c2, 400, "Invalid candidate ID");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to remove candidates"
          );
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 404, "Institute not found");
        }
        const institute = await Institute_default.findById(instituteId);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const candidate = await Candidate_default.findById(candidateId);
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        const isInInstitute = institute.candidates.some(
          (c3) => c3?.toString() === candidateId
        );
        if (!isInInstitute) {
          return sendError(c2, 404, "Candidate not found in this institute");
        }
        const session = await mongoose20.startSession();
        try {
          await session.withTransaction(async () => {
            institute.candidates = institute.candidates.filter(
              (c3) => c3?.toString() !== candidateId
            );
            await institute.save({ session });
            candidate.institute = void 0;
            candidate.notifications.push({
              message: `You have been removed from ${institute.name}`,
              type: "institute",
              timestamp: /* @__PURE__ */ new Date()
            });
            await candidate.save({ session });
          });
          await session.endSession();
        } catch (error) {
          await session.abortTransaction();
          await session.endSession();
          logger_default.error(`Transaction failed in removeCandidate: ${error}`);
          return sendError(c2, 500, "Failed to remove candidate", {
            message: "Database transaction failed"
          });
        }
        return sendSuccess(c2, 200, "Candidate removed successfully");
      } catch (error) {
        logger_default.error("Failed to remove candidate: " + error);
        return sendError(c2, 500, "Failed to remove candidate", {
          message: "Internal server error"
        });
      }
    };
    instituteController_default = {
      createInstitute,
      verifyInvite: verifyInvite2,
      joinInstitute,
      getSettings: getSettings2,
      updateGeneralSettings: updateGeneralSettings2,
      getCandidates: getCandidates2,
      updateLogo: updateLogo2,
      updateMembers: updateMembers2,
      updateRoles: updateRoles2,
      getDepartments: getDepartments2,
      getInstitute,
      updateInstitute,
      getPendingCandidates,
      requestToJoin,
      verifyRequest,
      cancelRequest,
      getCandidate: getCandidate2,
      acceptCandidate,
      rejectCandidate,
      removeCandidate,
      getResume: getResume2,
      leaveInstitute
    };
  }
});

// src/controllers/campus/institute/instituteAnalyticsController.ts
var getInstituteAnalytics, getBasicInstituteStats, getDriveAnalytics, getPlacementAnalytics, getCompanyAnalytics, getCandidateAnalytics, getTimelineAnalytics, getActiveTimeframe, getInstituteAnalyticsByTimeRange, getDepartmentAnalytics, getOfferLetterAnalytics, getComprehensiveDashboardStats, getRecentActivity, getOngoingApplications, getUpcomingEvents, instituteAnalyticsController_default;
var init_instituteAnalyticsController = __esm({
  "src/controllers/campus/institute/instituteAnalyticsController.ts"() {
    "use strict";
    init_Institute();
    init_Drive();
    init_AppliedDrive();
    init_Company();
    init_PlacementGroup();
    init_checkInstitutePermission();
    init_sendResponse();
    getInstituteAnalytics = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_institute"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute ID is required");
        }
        const basicStats = await getBasicInstituteStats(instituteId);
        const driveStats = await getDriveAnalytics(instituteId);
        const placementStats = await getPlacementAnalytics(instituteId);
        const companyStats = await getCompanyAnalytics(instituteId);
        const candidateStats = await getCandidateAnalytics(instituteId);
        const timelineStats = await getTimelineAnalytics(instituteId);
        return sendSuccess(c2, 200, "Institute analytics fetched successfully", {
          basicStats,
          driveStats,
          placementStats,
          companyStats,
          candidateStats,
          timelineStats
        });
      } catch (error) {
        console.error("Error fetching institute analytics:", error);
        return sendError(c2, 500, "Error fetching institute analytics");
      }
    };
    getBasicInstituteStats = async (instituteId) => {
      const institute = await Institute_default.findById(instituteId).select(
        "name email website departments candidates pendingCandidates drives companies placementGroups"
      ).lean();
      if (!institute) {
        throw new Error("Institute not found");
      }
      const totalDrives = institute.drives?.length || 0;
      const totalCompanies = institute.companies?.length || 0;
      const totalCandidates = institute.candidates?.length || 0;
      const totalPendingCandidates = institute.pendingCandidates?.length || 0;
      const totalPlacementGroups = institute.placementGroups?.length || 0;
      const totalDepartments = institute.departments?.length || 0;
      return {
        instituteName: institute.name,
        instituteEmail: institute.email,
        instituteWebsite: institute.website,
        totalDrives,
        totalCompanies,
        totalCandidates,
        totalPendingCandidates,
        totalPlacementGroups,
        totalDepartments
      };
    };
    getDriveAnalytics = async (instituteId) => {
      const drives = await Drive_default.find({ institute: instituteId }).select(
        "title published publishedOn hasEnded type openings salary applicationRange skills hiredCandidates"
      ).lean();
      const totalDrives = drives.length;
      const publishedDrives = drives.filter((drive) => drive.published).length;
      const unpublishedDrives = totalDrives - publishedDrives;
      const ongoingDrives = drives.filter(
        (drive) => drive.published && !drive.hasEnded
      ).length;
      const completedDrives = drives.filter((drive) => drive.hasEnded).length;
      const driveTypes = drives.reduce((acc, drive) => {
        const type = drive.type;
        acc[type] = (acc[type] || 0) + 1;
        return acc;
      }, {});
      const salaryData = drives.filter((drive) => drive.salary?.min != null && drive.salary?.max != null).map((drive) => ({
        min: drive.salary?.min ?? 0,
        max: drive.salary?.max ?? 0,
        currency: drive.salary?.currency || "INR"
      }));
      const avgMinSalary = salaryData.length > 0 ? salaryData.reduce((sum, salary) => sum + salary.min, 0) / salaryData.length : 0;
      const avgMaxSalary = salaryData.length > 0 ? salaryData.reduce((sum, salary) => sum + salary.max, 0) / salaryData.length : 0;
      const highestOfferedSalary = salaryData.length > 0 ? Math.max(...salaryData.map((salary) => salary.max)) : 0;
      const totalOpenings = drives.reduce(
        (sum, drive) => sum + (drive.openings || 0),
        0
      );
      const filledPositions = drives.reduce(
        (sum, drive) => sum + (drive.hiredCandidates?.length || 0),
        0
      );
      const skillsFrequency = drives.reduce((acc, drive) => {
        if (drive.skills && Array.isArray(drive.skills)) {
          drive.skills.forEach((skill) => {
            acc[skill] = (acc[skill] || 0) + 1;
          });
        }
        return acc;
      }, {});
      const sortedSkills = Object.entries(skillsFrequency).sort((a2, b2) => b2[1] - a2[1]).slice(0, 10).map(([skill, count]) => ({ skill, count }));
      return {
        totalDrives,
        publishedDrives,
        unpublishedDrives,
        ongoingDrives,
        completedDrives,
        driveTypes,
        salaryStatistics: {
          avgMinSalary,
          avgMaxSalary,
          highestOfferedSalary,
          commonCurrency: salaryData[0]?.currency || "INR"
        },
        openings: {
          total: totalOpenings,
          filled: filledPositions,
          vacant: totalOpenings - filledPositions,
          fillRate: totalOpenings > 0 ? filledPositions / totalOpenings * 100 : 0
        },
        topSkills: sortedSkills
      };
    };
    getPlacementAnalytics = async (instituteId) => {
      const placementGroups = await PlacementGroup_default.find({ institute: instituteId }).select(
        "name academicYear departments candidates pendingCandidates archived expiryDate"
      ).lean();
      const groupsByYear = placementGroups.reduce((acc, group) => {
        const yearKey = `${group.academicYear.start}-${group.academicYear.end}`;
        if (!acc[yearKey]) {
          acc[yearKey] = [];
        }
        acc[yearKey].push(group);
        return acc;
      }, {});
      const yearlyStats = Object.entries(groupsByYear).map(([year, groups]) => {
        const totalGroups = groups.length;
        const totalCandidates = groups.reduce(
          (sum, group) => sum + (group.candidates?.length || 0),
          0
        );
        const totalPendingCandidates = groups.reduce(
          (sum, group) => sum + (group.pendingCandidates?.length || 0),
          0
        );
        const activeGroups = groups.filter(
          (group) => !group.archived && new Date(group.expiryDate) > /* @__PURE__ */ new Date()
        ).length;
        return {
          academicYear: year,
          totalGroups,
          activeGroups,
          archivedGroups: totalGroups - activeGroups,
          totalCandidates,
          totalPendingCandidates
        };
      });
      const drives = await Drive_default.find({
        institute: instituteId,
        placementGroup: { $exists: true, $ne: null }
      }).select("placementGroup hiredCandidates").lean();
      const drivesByPlacementGroup = drives.reduce((acc, drive) => {
        const groupId = drive.placementGroup?.toString();
        if (groupId) {
          if (!acc[groupId]) {
            acc[groupId] = { driveCount: 0, hiredCount: 0 };
          }
          acc[groupId].driveCount++;
          acc[groupId].hiredCount += drive.hiredCandidates?.length || 0;
        }
        return acc;
      }, {});
      const placementGroupStats = placementGroups.map((group) => {
        const groupId = group._id.toString();
        const driveStats = drivesByPlacementGroup[groupId] || {
          driveCount: 0,
          hiredCount: 0
        };
        const totalCandidates = group.candidates?.length || 0;
        return {
          groupId,
          name: group.name,
          academicYear: `${group.academicYear.start}-${group.academicYear.end}`,
          totalCandidates,
          placementRate: totalCandidates > 0 ? driveStats.hiredCount / totalCandidates * 100 : 0,
          driveCount: driveStats.driveCount,
          hiredCount: driveStats.hiredCount,
          isActive: !group.archived && new Date(group.expiryDate) > /* @__PURE__ */ new Date()
        };
      });
      return {
        totalPlacementGroups: placementGroups.length,
        activePlacementGroups: placementGroups.filter(
          (group) => !group.archived && new Date(group.expiryDate) > /* @__PURE__ */ new Date()
        ).length,
        archivedPlacementGroups: placementGroups.filter((group) => group.archived).length,
        expiredPlacementGroups: placementGroups.filter(
          (group) => !group.archived && new Date(group.expiryDate) <= /* @__PURE__ */ new Date()
        ).length,
        yearlyStats,
        placementGroupStats
      };
    };
    getCompanyAnalytics = async (instituteId) => {
      const institute = await Institute_default.findById(instituteId).select("companies").lean();
      if (!institute || !institute.companies) {
        return {
          totalCompanies: 0,
          activeCompanies: 0,
          inactiveCompanies: 0,
          topHiringCompanies: [],
          industryDistribution: {},
          yearlyCompanyTrends: []
        };
      }
      const companyIds = institute.companies;
      const companies = await Company_default.find({ _id: { $in: companyIds } }).select(
        "name isArchived generalInfo.industry generalInfo.yearStats generalInfo.rolesOffered"
      ).lean();
      const drives = await Drive_default.find({
        institute: instituteId,
        company: { $in: companyIds }
      }).select("company hiredCandidates salary publishedOn hasEnded").lean();
      const drivesByCompany = drives.reduce(
        (acc, drive) => {
          const companyId = drive.company?.toString();
          if (companyId) {
            if (!acc[companyId]) {
              acc[companyId] = {
                driveCount: 0,
                hiredCount: 0,
                totalSalaryOffered: 0,
                salaryDataPoints: 0
              };
            }
            acc[companyId].driveCount++;
            acc[companyId].hiredCount += drive.hiredCandidates?.length || 0;
            if (drive.salary?.min && drive.salary?.max) {
              const avgSalary = (drive.salary.min + drive.salary.max) / 2;
              acc[companyId].totalSalaryOffered += avgSalary;
              acc[companyId].salaryDataPoints++;
            }
          }
          return acc;
        },
        {}
      );
      const activeCompanies = companies.filter(
        (company) => !company.isArchived
      ).length;
      const inactiveCompanies = companies.filter(
        (company) => company.isArchived
      ).length;
      const industryDistribution = companies.reduce((acc, company) => {
        if (company.generalInfo?.industry) {
          company.generalInfo.industry.forEach((industry) => {
            acc[industry] = (acc[industry] || 0) + 1;
          });
        }
        return acc;
      }, {});
      const topHiringCompanies = Object.entries(drivesByCompany).map(([companyId, stats]) => {
        const company = companies.find((c2) => c2._id.toString() === companyId);
        const avgSalary = stats.salaryDataPoints > 0 ? stats.totalSalaryOffered / stats.salaryDataPoints : 0;
        return {
          companyId,
          name: company?.name || "Unknown Company",
          hiredCount: stats.hiredCount,
          driveCount: stats.driveCount,
          avgSalaryOffered: avgSalary,
          isActive: company ? !company.isArchived : false
        };
      }).sort((a2, b2) => b2.hiredCount - a2.hiredCount).slice(0, 10);
      const roleDistribution = companies.reduce((acc, company) => {
        if (company.generalInfo?.rolesOffered) {
          company.generalInfo.rolesOffered.forEach((role) => {
            acc[role] = (acc[role] || 0) + 1;
          });
        }
        return acc;
      }, {});
      const yearlyData = {};
      companies.forEach((company) => {
        if (company.generalInfo?.yearStats) {
          company.generalInfo.yearStats.forEach((yearStat) => {
            const year = yearStat.year;
            if (!yearlyData[year]) {
              yearlyData[year] = { companies: 0, drives: 0, hired: 0 };
            }
            yearlyData[year].companies++;
            yearlyData[year].hired += yearStat.hired || 0;
          });
        }
      });
      drives.forEach((drive) => {
        if (drive.publishedOn) {
          const year = new Date(drive.publishedOn).getFullYear().toString();
          if (!yearlyData[year]) {
            yearlyData[year] = { companies: 0, drives: 0, hired: 0 };
          }
          yearlyData[year].drives++;
          yearlyData[year].hired += drive.hiredCandidates?.length || 0;
        }
      });
      const yearlyCompanyTrends = Object.entries(yearlyData).map(([year, data]) => ({
        year,
        ...data
      })).sort((a2, b2) => a2.year.localeCompare(b2.year));
      return {
        totalCompanies: companies.length,
        activeCompanies,
        inactiveCompanies,
        topHiringCompanies,
        industryDistribution,
        roleDistribution,
        yearlyCompanyTrends
      };
    };
    getCandidateAnalytics = async (instituteId) => {
      const institute = await Institute_default.findById(instituteId).select("candidates pendingCandidates").lean();
      if (!institute) {
        return {
          totalCandidates: 0,
          pendingCandidates: 0,
          placementStats: {
            placed: 0,
            unplaced: 0,
            placementRate: 0
          },
          applicationStats: {
            totalApplications: 0,
            avgApplicationsPerCandidate: 0,
            statusDistribution: {}
          }
        };
      }
      const candidateIds = institute.candidates || [];
      const pendingCandidateIds = institute.pendingCandidates || [];
      const totalCandidates = candidateIds.length;
      const totalPendingCandidates = pendingCandidateIds.length;
      const drives = await Drive_default.find({ institute: instituteId }).select("hiredCandidates").lean();
      const placedCandidatesSet = /* @__PURE__ */ new Set();
      drives.forEach((drive) => {
        if (drive.hiredCandidates) {
          drive.hiredCandidates.forEach((candidateId) => {
            placedCandidatesSet.add(candidateId.toString());
          });
        }
      });
      const placedCandidates = placedCandidatesSet.size;
      const unplacedCandidates = totalCandidates - placedCandidates;
      const placementRate = totalCandidates > 0 ? placedCandidates / totalCandidates * 100 : 0;
      const applications = await AppliedDrive_default.find({
        user: { $in: candidateIds }
      }).select("user status scores").lean();
      const totalApplications = applications.length;
      const avgApplicationsPerCandidate = totalCandidates > 0 ? totalApplications / totalCandidates : 0;
      const statusDistribution = applications.reduce((acc, app15) => {
        const status = app15.status;
        acc[status] = (acc[status] || 0) + 1;
        return acc;
      }, {});
      const applicationsPerCandidate = applications.reduce((acc, app15) => {
        const candidateId = app15.user.toString();
        acc[candidateId] = (acc[candidateId] || 0) + 1;
        return acc;
      }, {});
      const applicationsDistribution = {
        noApplications: candidateIds.length - Object.keys(applicationsPerCandidate).length,
        oneApplication: Object.values(applicationsPerCandidate).filter(
          (count) => count === 1
        ).length,
        twoToFiveApplications: Object.values(applicationsPerCandidate).filter(
          (count) => count >= 2 && count <= 5
        ).length,
        sixToTenApplications: Object.values(applicationsPerCandidate).filter(
          (count) => count >= 6 && count <= 10
        ).length,
        moreThanTenApplications: Object.values(applicationsPerCandidate).filter(
          (count) => count > 10
        ).length
      };
      const scoreData = applications.flatMap((app15) => app15.scores || []);
      const scoreDistribution = scoreData.reduce((acc, scoreItem) => {
        const score = scoreItem.score ?? 0;
        const scoreRange = Math.floor(score / 10) * 10;
        const rangeKey = `${scoreRange}-${scoreRange + 9}`;
        acc[rangeKey] = (acc[rangeKey] || 0) + 1;
        return acc;
      }, {});
      return {
        totalCandidates,
        pendingCandidates: totalPendingCandidates,
        placementStats: {
          placed: placedCandidates,
          unplaced: unplacedCandidates,
          placementRate
        },
        applicationStats: {
          totalApplications,
          avgApplicationsPerCandidate,
          statusDistribution,
          applicationsDistribution,
          scoreDistribution
        }
      };
    };
    getTimelineAnalytics = async (instituteId) => {
      const drives = await Drive_default.find({ institute: instituteId }).select(
        "publishedOn applicationRange hasEnded createdAt updatedAt hiredCandidates"
      ).lean();
      const driveCreationByMonth = {};
      const drivePublishingByMonth = {};
      const driveCompletionByMonth = {};
      const hiringByMonth = {};
      drives.forEach((drive) => {
        if (drive.createdAt) {
          const creationMonth = new Date(drive.createdAt).toISOString().slice(0, 7);
          driveCreationByMonth[creationMonth] = (driveCreationByMonth[creationMonth] || 0) + 1;
        }
        if (drive.publishedOn) {
          const publishMonth = new Date(drive.publishedOn).toISOString().slice(0, 7);
          drivePublishingByMonth[publishMonth] = (drivePublishingByMonth[publishMonth] || 0) + 1;
        }
        if (drive.hasEnded && drive.updatedAt) {
          const completionMonth = new Date(drive.updatedAt).toISOString().slice(0, 7);
          driveCompletionByMonth[completionMonth] = (driveCompletionByMonth[completionMonth] || 0) + 1;
        }
        if (drive.hiredCandidates && drive.hiredCandidates.length > 0 && drive.updatedAt) {
          const hiringMonth = new Date(drive.updatedAt).toISOString().slice(0, 7);
          hiringByMonth[hiringMonth] = (hiringByMonth[hiringMonth] || 0) + drive.hiredCandidates.length;
        }
      });
      const applications = await AppliedDrive_default.find({}).populate({
        path: "drive",
        match: { institute: instituteId },
        select: "_id"
      }).select("createdAt status").lean();
      const instituteApplications = applications.filter((app15) => app15.drive);
      const applicationsByMonth = {};
      instituteApplications.forEach((app15) => {
        if (app15.createdAt) {
          const applicationMonth = new Date(app15.createdAt).toISOString().slice(0, 7);
          applicationsByMonth[applicationMonth] = (applicationsByMonth[applicationMonth] || 0) + 1;
        }
      });
      const sortMonths = (monthData) => {
        return Object.entries(monthData).map(([month, count]) => ({ month, count })).sort((a2, b2) => a2.month.localeCompare(b2.month));
      };
      return {
        driveCreationTimeline: sortMonths(driveCreationByMonth),
        drivePublishingTimeline: sortMonths(drivePublishingByMonth),
        driveCompletionTimeline: sortMonths(driveCompletionByMonth),
        applicationTimeline: sortMonths(applicationsByMonth),
        hiringTimeline: sortMonths(hiringByMonth),
        activeTimeframe: getActiveTimeframe(drives)
      };
    };
    getActiveTimeframe = (drives) => {
      if (drives.length === 0) {
        return { start: null, end: null, durationMonths: 0 };
      }
      const dates = drives.flatMap((drive) => [
        drive.createdAt,
        drive.publishedOn,
        drive.applicationRange?.start,
        drive.applicationRange?.end,
        drive.updatedAt
      ]).filter((date) => date);
      if (dates.length === 0) {
        return { start: null, end: null, durationMonths: 0 };
      }
      const startDate = new Date(
        Math.min(...dates.map((d2) => new Date(d2).getTime()))
      );
      const endDate = new Date(
        Math.max(...dates.map((d2) => new Date(d2).getTime()))
      );
      const durationMonths = (endDate.getFullYear() - startDate.getFullYear()) * 12 + (endDate.getMonth() - startDate.getMonth());
      return {
        start: startDate.toISOString(),
        end: endDate.toISOString(),
        durationMonths
      };
    };
    getInstituteAnalyticsByTimeRange = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_institute"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute ID is required");
        }
        const startDate = c2.req.query("startDate");
        const endDate = c2.req.query("endDate");
        if (!startDate || !endDate) {
          return sendError(c2, 400, "Start date and end date are required");
        }
        const start = new Date(startDate);
        const end = new Date(endDate);
        if (isNaN(start.getTime()) || isNaN(end.getTime())) {
          return sendError(c2, 400, "Invalid date format");
        }
        const drives = await Drive_default.find({
          institute: instituteId,
          createdAt: { $gte: start, $lte: end }
        }).select("_id title publishedOn hasEnded hiredCandidates").lean();
        const applications = await AppliedDrive_default.find({
          createdAt: { $gte: start, $lte: end }
        }).populate({
          path: "drive",
          match: { institute: instituteId },
          select: "_id"
        }).select("status createdAt updatedAt").lean();
        const instituteApplications = applications.filter((app15) => app15.drive);
        const totalDrives = drives.length;
        const completedDrives = drives.filter((drive) => drive.hasEnded).length;
        const publishedDrives = drives.filter((drive) => drive.publishedOn).length;
        const totalApplications = instituteApplications.length;
        const totalHired = drives.reduce(
          (sum, drive) => sum + (drive.hiredCandidates?.length || 0),
          0
        );
        const applicationStatusBreakdown = instituteApplications.reduce(
          (acc, app15) => {
            const status = app15.status;
            acc[status] = (acc[status] || 0) + 1;
            return acc;
          },
          {}
        );
        const drivesByMonth = {};
        const applicationsByMonth = {};
        const hiresByMonth = {};
        drives.forEach((drive) => {
          const monthKey = new Date(drive.createdAt).toISOString().slice(0, 7);
          drivesByMonth[monthKey] = (drivesByMonth[monthKey] || 0) + 1;
          if (drive.hiredCandidates?.length) {
            hiresByMonth[monthKey] = (hiresByMonth[monthKey] || 0) + drive.hiredCandidates.length;
          }
        });
        instituteApplications.forEach((app15) => {
          const monthKey = new Date(app15.createdAt).toISOString().slice(0, 7);
          applicationsByMonth[monthKey] = (applicationsByMonth[monthKey] || 0) + 1;
        });
        return sendSuccess(c2, 200, "Time range analytics fetched successfully", {
          timeRange: {
            start: start.toISOString(),
            end: end.toISOString(),
            durationDays: Math.floor(
              (end.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24)
            )
          },
          summary: {
            totalDrives,
            completedDrives,
            publishedDrives,
            totalApplications,
            totalHired,
            applicationStatusBreakdown
          },
          monthlyTrends: {
            drivesByMonth: Object.entries(drivesByMonth).map(([month, count]) => ({
              month,
              count
            })),
            applicationsByMonth: Object.entries(applicationsByMonth).map(
              ([month, count]) => ({ month, count })
            ),
            hiresByMonth: Object.entries(hiresByMonth).map(([month, count]) => ({
              month,
              count
            }))
          }
        });
      } catch (error) {
        console.error("Error fetching time range analytics:", error);
        return sendError(c2, 500, "Error fetching time range analytics");
      }
    };
    getDepartmentAnalytics = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_institute"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute ID is required");
        }
        const institute = await Institute_default.findById(instituteId).select("departments").lean();
        if (!institute || !institute.departments) {
          return sendError(c2, 404, "Institute or departments not found");
        }
        const departments = institute.departments;
        const placementGroups = await PlacementGroup_default.find({
          institute: instituteId,
          departments: { $exists: true, $ne: [] }
        }).select("name departments candidates").lean();
        const departmentToPlacementGroups = {};
        const departmentToCandidates = {};
        placementGroups.forEach((group) => {
          group.departments.forEach((deptId) => {
            const deptIdStr = deptId.toString();
            if (!departmentToPlacementGroups[deptIdStr]) {
              departmentToPlacementGroups[deptIdStr] = [];
            }
            departmentToPlacementGroups[deptIdStr].push(group.name);
            if (!departmentToCandidates[deptIdStr]) {
              departmentToCandidates[deptIdStr] = /* @__PURE__ */ new Set();
            }
            if (group.candidates && Array.isArray(group.candidates)) {
              group.candidates.forEach((candidateId) => {
                departmentToCandidates[deptIdStr].add(candidateId.toString());
              });
            }
          });
        });
        const departmentStats = departments.map((dept) => {
          const deptId = dept._id.toString();
          const placementGroups2 = departmentToPlacementGroups[deptId] || [];
          const candidates = departmentToCandidates[deptId] ? Array.from(departmentToCandidates[deptId]) : [];
          return {
            departmentId: deptId,
            name: dept.name,
            description: dept.description,
            placementGroups: {
              count: placementGroups2.length,
              names: placementGroups2
            },
            candidates: {
              count: candidates.length,
              ids: candidates
            }
          };
        });
        const hiredByDepartment = {};
        const allCandidateIds = /* @__PURE__ */ new Set();
        Object.values(departmentToCandidates).forEach((candidateSet) => {
          candidateSet.forEach((candidateId) => {
            allCandidateIds.add(candidateId);
          });
        });
        const appliedDrives = await AppliedDrive_default.find({
          user: { $in: Array.from(allCandidateIds) },
          status: "hired"
        }).select("user").lean();
        const hiredCandidateIds = new Set(
          appliedDrives.map((ad) => ad.user.toString())
        );
        Object.entries(departmentToCandidates).forEach(([deptId, candidateSet]) => {
          const hiredCount = Array.from(candidateSet).filter(
            (candidateId) => hiredCandidateIds.has(candidateId)
          ).length;
          hiredByDepartment[deptId] = hiredCount;
        });
        const enhancedDepartmentStats = departmentStats.map((dept) => {
          const hiredCount = hiredByDepartment[dept.departmentId] || 0;
          const totalCandidates = dept.candidates.count;
          return {
            ...dept,
            placementMetrics: {
              totalCandidates,
              hiredCandidates: hiredCount,
              placementRate: totalCandidates > 0 ? hiredCount / totalCandidates * 100 : 0
            }
          };
        });
        return sendSuccess(c2, 200, "Department analytics fetched successfully", {
          totalDepartments: departments.length,
          departmentStats: enhancedDepartmentStats,
          summary: {
            departmentsWithPlacements: Object.keys(departmentToPlacementGroups).length,
            departmentsWithCandidates: Object.keys(departmentToCandidates).length,
            topDepartmentsByPlacementRate: enhancedDepartmentStats.sort(
              (a2, b2) => b2.placementMetrics.placementRate - a2.placementMetrics.placementRate
            ).slice(0, 5).map((dept) => ({
              name: dept.name,
              placementRate: dept.placementMetrics.placementRate,
              hiredCount: dept.placementMetrics.hiredCandidates
            }))
          }
        });
      } catch (error) {
        console.error("Error fetching department analytics:", error);
        return sendError(c2, 500, "Error fetching department analytics");
      }
    };
    getOfferLetterAnalytics = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_institute"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute ID is required");
        }
        const drives = await Drive_default.find({
          institute: instituteId,
          offerLetters: { $exists: true, $ne: [] }
        }).select("title offerLetters company").populate("company", "name").lean();
        const appliedDrives = await AppliedDrive_default.find({
          drive: { $in: drives.map((drive) => drive._id) },
          offerLetterKey: { $exists: true, $ne: null }
        }).select("drive user offerLetterKey offerLetterUploadedAt salary").populate({
          path: "drive",
          match: { title: { $exists: true } },
          select: "title",
          model: "Drive"
        }).populate({
          path: "drive",
          match: { title: { $exists: true } },
          select: "title"
        }).populate({
          path: "user",
          select: "name email",
          model: "Candidate"
        }).lean();
        const totalOfferLetters = appliedDrives.length;
        const totalDrivesWithOffers = drives.length;
        const salaries = appliedDrives.filter((ad) => typeof ad.salary === "number" && ad.salary > 0).map((ad) => ad.salary);
        const avgSalary = salaries.length > 0 ? salaries.reduce((sum, salary) => sum + salary, 0) / salaries.length : 0;
        const minSalary = salaries.length > 0 ? Math.min(...salaries) : 0;
        const maxSalary = salaries.length > 0 ? Math.max(...salaries) : 0;
        const offerLetterTimeline = {};
        appliedDrives.forEach((ad) => {
          if (ad.offerLetterUploadedAt) {
            const monthKey = new Date(ad.offerLetterUploadedAt).toISOString().slice(0, 7);
            offerLetterTimeline[monthKey] = (offerLetterTimeline[monthKey] || 0) + 1;
          }
        });
        const offersByCompany = {};
        drives.forEach((drive) => {
          const companyId = drive.company?._id?.toString();
          const companyName = typeof drive.company === "object" && drive.company !== null && "name" in drive.company ? drive.company.name : "Unknown Company";
          if (companyId) {
            if (!offersByCompany[companyId]) {
              offersByCompany[companyId] = { count: 0, companyName };
            }
            offersByCompany[companyId].count += drive.offerLetters?.length || 0;
          }
        });
        const topCompaniesByOffers = Object.entries(offersByCompany).map(([companyId, data]) => ({
          companyId,
          companyName: data.companyName,
          offerCount: data.count
        })).sort((a2, b2) => b2.offerCount - a2.offerCount).slice(0, 10);
        return sendSuccess(c2, 200, "Offer letter analytics fetched successfully", {
          summary: {
            totalOfferLetters,
            totalDrivesWithOffers,
            offerLettersWithSalary: salaries.length,
            salaryStatistics: {
              average: avgSalary,
              minimum: minSalary,
              maximum: maxSalary
            }
          },
          offerLetterTimeline: Object.entries(offerLetterTimeline).map(([month, count]) => ({ month, count })).sort((a2, b2) => a2.month.localeCompare(b2.month)),
          topCompaniesByOffers,
          recentOffers: appliedDrives.sort((a2, b2) => {
            const dateA = a2.offerLetterUploadedAt ? new Date(a2.offerLetterUploadedAt).getTime() : 0;
            const dateB = b2.offerLetterUploadedAt ? new Date(b2.offerLetterUploadedAt).getTime() : 0;
            return dateB - dateA;
          }).slice(0, 10).map((ad) => ({
            candidateName: typeof ad.user === "object" && "name" in ad.user ? ad.user.name : "Unknown",
            driveTitle: typeof ad.drive === "object" && "title" in ad.drive ? ad.drive.title : "Unknown",
            uploadedAt: ad.offerLetterUploadedAt,
            salary: ad.salary || "Not specified"
          }))
        });
      } catch (error) {
        console.error("Error fetching offer letter analytics:", error);
        return sendError(c2, 500, "Error fetching offer letter analytics");
      }
    };
    getComprehensiveDashboardStats = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_institute"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute ID is required");
        }
        const institute = await Institute_default.findById(instituteId).select("name email website departments candidates pendingCandidates").lean();
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const drives = await Drive_default.find({ institute: instituteId }).select("title published hasEnded applicationRange hiredCandidates type").lean();
        const activeDrives = drives.filter(
          (drive) => drive.published && !drive.hasEnded
        ).length;
        const completedDrives = drives.filter((drive) => drive.hasEnded).length;
        const upcomingDrives = drives.filter(
          (drive) => drive.published && drive.applicationRange?.start && new Date(drive.applicationRange.start) > /* @__PURE__ */ new Date()
        ).length;
        const driveTypeDistribution = drives.reduce((acc, drive) => {
          const type = drive.type;
          acc[type] = (acc[type] || 0) + 1;
          return acc;
        }, {});
        const totalCandidates = institute.candidates?.length || 0;
        const totalHired = drives.reduce(
          (sum, drive) => sum + (drive.hiredCandidates?.length || 0),
          0
        );
        const placementRate = totalCandidates > 0 ? totalHired / totalCandidates * 100 : 0;
        const recentActivity = await getRecentActivity(instituteId);
        const ongoingApplications = await getOngoingApplications(instituteId);
        const upcomingEvents = await getUpcomingEvents(instituteId);
        return sendSuccess(c2, 200, "Dashboard statistics fetched successfully", {
          institute: {
            name: institute.name,
            email: institute.email,
            website: institute.website,
            departmentCount: institute.departments?.length || 0
          },
          quickStats: {
            totalCandidates,
            pendingCandidates: institute.pendingCandidates?.length || 0,
            totalDrives: drives.length,
            activeDrives,
            completedDrives,
            upcomingDrives,
            totalHired,
            placementRate: placementRate.toFixed(2) + "%"
          },
          driveTypeDistribution,
          recentActivity,
          ongoingApplications,
          upcomingEvents
        });
      } catch (error) {
        console.error("Error fetching dashboard statistics:", error);
        return sendError(c2, 500, "Error fetching dashboard statistics");
      }
    };
    getRecentActivity = async (instituteId) => {
      const thirtyDaysAgo = /* @__PURE__ */ new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      const recentDrives = await Drive_default.find({
        institute: instituteId,
        createdAt: { $gte: thirtyDaysAgo }
      }).select("title createdAt published publishedOn").sort({ createdAt: -1 }).limit(5).lean();
      const recentApplications = await AppliedDrive_default.find({
        createdAt: { $gte: thirtyDaysAgo }
      }).populate({
        path: "drive",
        match: { institute: instituteId },
        select: "title"
      }).populate("user", "name email").select("createdAt status").sort({ createdAt: -1 }).limit(5).lean();
      const filteredApplications = recentApplications.filter((app15) => app15.drive);
      const activities = [
        ...recentDrives.map((drive) => ({
          type: "drive_created",
          title: drive.title,
          status: drive.published ? "published" : "draft",
          timestamp: drive.createdAt,
          publishedOn: drive.publishedOn
        })),
        ...filteredApplications.map((app15) => ({
          type: "application_submitted",
          driveTitle: typeof app15.drive === "object" && app15.drive !== null && "title" in app15.drive ? app15.drive.title : void 0,
          candidateName: typeof app15.user === "object" && app15.user !== null && "name" in app15.user ? app15.user.name : void 0,
          candidateEmail: typeof app15.user === "object" && app15.user !== null && "email" in app15.user ? app15.user.email : void 0,
          status: app15.status,
          timestamp: app15.createdAt
        }))
      ].sort(
        (a2, b2) => new Date(b2.timestamp).getTime() - new Date(a2.timestamp).getTime()
      ).slice(0, 10);
      return activities;
    };
    getOngoingApplications = async (instituteId) => {
      const activeDrives = await Drive_default.find({
        institute: instituteId,
        published: true,
        hasEnded: false
      }).select("_id title applicationRange").lean();
      const applicationCounts = await Promise.all(
        activeDrives.map(async (drive) => {
          const totalCount = await AppliedDrive_default.countDocuments({
            drive: drive._id
          });
          const inProgressCount = await AppliedDrive_default.countDocuments({
            drive: drive._id,
            status: "inprogress"
          });
          const rejectedCount = await AppliedDrive_default.countDocuments({
            drive: drive._id,
            status: "rejected"
          });
          const hiredCount = await AppliedDrive_default.countDocuments({
            drive: drive._id,
            status: "hired"
          });
          return {
            driveId: drive._id,
            driveTitle: drive.title,
            applicationDeadline: drive.applicationRange?.end,
            totalApplications: totalCount,
            inProgress: inProgressCount,
            rejected: rejectedCount,
            hired: hiredCount,
            pending: totalCount - inProgressCount - rejectedCount - hiredCount
          };
        })
      );
      return applicationCounts;
    };
    getUpcomingEvents = async (instituteId) => {
      const today = /* @__PURE__ */ new Date();
      const upcomingDeadlines = await Drive_default.find({
        institute: instituteId,
        published: true,
        hasEnded: false,
        "applicationRange.end": { $gt: today }
      }).select("title applicationRange").sort({ "applicationRange.end": 1 }).limit(5).lean();
      const upcomingStarts = await Drive_default.find({
        institute: instituteId,
        published: true,
        hasEnded: false,
        "applicationRange.start": { $gt: today }
      }).select("title applicationRange").sort({ "applicationRange.start": 1 }).limit(5).lean();
      const events = [
        ...upcomingDeadlines.map((drive) => ({
          type: "application_deadline",
          driveTitle: drive.title,
          date: drive.applicationRange?.end,
          daysRemaining: Math.ceil(
            (drive.applicationRange?.end ? new Date(drive.applicationRange.end).getTime() - today.getTime() : 0) / (1e3 * 60 * 60 * 24)
          )
        })),
        ...upcomingStarts.map((drive) => ({
          type: "drive_start",
          driveTitle: drive.title,
          date: drive.applicationRange?.start,
          daysRemaining: Math.ceil(
            ((drive.applicationRange?.start ? new Date(drive.applicationRange.start).getTime() : 0) - today.getTime()) / (1e3 * 60 * 60 * 24)
          )
        }))
      ].sort((a2, b2) => {
        const dateA = a2.date ? new Date(a2.date).getTime() : 0;
        const dateB = b2.date ? new Date(b2.date).getTime() : 0;
        return dateA - dateB;
      }).slice(0, 10);
      return events;
    };
    instituteAnalyticsController_default = {
      getInstituteAnalytics,
      getInstituteAnalyticsByTimeRange,
      getDepartmentAnalytics,
      getOfferLetterAnalytics,
      getComprehensiveDashboardStats
    };
  }
});

// src/routes/instituteRoute.ts
import { Hono as Hono6 } from "hono";
var app6, instituteRoute_default;
var init_instituteRoute = __esm({
  "src/routes/instituteRoute.ts"() {
    "use strict";
    init_instituteController();
    init_notifcationController();
    init_instituteAnalyticsController();
    app6 = new Hono6();
    app6.get("/notifications", notifcationController_default.getNotifications);
    app6.post("/notifications/read", notifcationController_default.readNotification);
    app6.post("/create", instituteController_default.createInstitute);
    app6.post("/verify", instituteController_default.verifyInvite);
    app6.post("/join", instituteController_default.joinInstitute);
    app6.post("/leave", instituteController_default.leaveInstitute);
    app6.get("/settings", instituteController_default.getSettings);
    app6.post("/settings/general", instituteController_default.updateGeneralSettings);
    app6.post("/settings/logo", instituteController_default.updateLogo);
    app6.post("/settings/members", instituteController_default.updateMembers);
    app6.post("/settings/roles", instituteController_default.updateRoles);
    app6.get("/candidates", instituteController_default.getCandidates);
    app6.get("/candidates/pending", instituteController_default.getPendingCandidates);
    app6.get("/settings", instituteController_default.getDepartments);
    app6.get("/", instituteController_default.getInstitute);
    app6.put("/", instituteController_default.updateInstitute);
    app6.get("/request", instituteController_default.verifyRequest);
    app6.post("/request", instituteController_default.requestToJoin);
    app6.delete("/request", instituteController_default.cancelRequest);
    app6.get("/candidate/:cid", instituteController_default.getCandidate);
    app6.post("/candidate/:cid/accept", instituteController_default.acceptCandidate);
    app6.post("/candidate/:cid/reject", instituteController_default.rejectCandidate);
    app6.post("/candidate/:cid/remove", instituteController_default.removeCandidate);
    app6.get("/candidate/:cid/resume", instituteController_default.getResume);
    app6.get("/analytics", instituteAnalyticsController_default.getInstituteAnalytics);
    app6.get("/analytics/timerange", instituteAnalyticsController_default.getInstituteAnalyticsByTimeRange);
    app6.get("/analytics/departments", instituteAnalyticsController_default.getDepartmentAnalytics);
    app6.get("/analytics/offerletters", instituteAnalyticsController_default.getOfferLetterAnalytics);
    app6.get("/analytics/dashboard", instituteAnalyticsController_default.getComprehensiveDashboardStats);
    instituteRoute_default = app6;
  }
});

// src/models/AssignmentSubmission.ts
import mongoose21 from "mongoose";
var assignmentSubmissionSchema, AssignmentSubmission, AssignmentSubmission_default;
var init_AssignmentSubmission = __esm({
  "src/models/AssignmentSubmission.ts"() {
    "use strict";
    init_softDelete();
    assignmentSubmissionSchema = new mongoose21.Schema(
      {
        assignmentId: {
          type: mongoose21.Schema.Types.ObjectId,
          required: true,
          ref: "Assignment"
        },
        candidateId: {
          type: mongoose21.Schema.Types.ObjectId,
          required: true,
          ref: "Candidate"
        },
        postingId: {
          type: mongoose21.Schema.Types.ObjectId,
          required: true,
          ref: "Posting"
        },
        fileSubmission: {
          type: String
        },
        textSubmission: {
          type: String
        },
        linkSubmission: {
          type: String
        },
        grade: {
          type: Number,
          default: 0
        }
      },
      { timestamps: true }
    );
    assignmentSubmissionSchema.plugin(softDeletePlugin);
    AssignmentSubmission = mongoose21.model(
      "AssignmentSubmission",
      assignmentSubmissionSchema
    );
    AssignmentSubmission_default = AssignmentSubmission;
  }
});

// node_modules/zod/dist/esm/v3/helpers/util.js
var util, objectUtil, ZodParsedType, getParsedType;
var init_util = __esm({
  "node_modules/zod/dist/esm/v3/helpers/util.js"() {
    "use strict";
    (function(util2) {
      util2.assertEqual = (_2) => {
      };
      function assertIs(_arg) {
      }
      util2.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      util2.assertNever = assertNever;
      util2.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
          obj[item] = item;
        }
        return obj;
      };
      util2.getValidEnumValues = (obj) => {
        const validKeys = util2.objectKeys(obj).filter((k2) => typeof obj[obj[k2]] !== "number");
        const filtered = {};
        for (const k2 of validKeys) {
          filtered[k2] = obj[k2];
        }
        return util2.objectValues(filtered);
      };
      util2.objectValues = (obj) => {
        return util2.objectKeys(obj).map(function(e2) {
          return obj[e2];
        });
      };
      util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
        const keys = [];
        for (const key in object) {
          if (Object.prototype.hasOwnProperty.call(object, key)) {
            keys.push(key);
          }
        }
        return keys;
      };
      util2.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item))
            return item;
        }
        return void 0;
      };
      util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
      function joinValues(array, separator = " | ") {
        return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
      }
      util2.joinValues = joinValues;
      util2.jsonStringifyReplacer = (_2, value) => {
        if (typeof value === "bigint") {
          return value.toString();
        }
        return value;
      };
    })(util || (util = {}));
    (function(objectUtil2) {
      objectUtil2.mergeShapes = (first, second) => {
        return {
          ...first,
          ...second
          // second overwrites first
        };
      };
    })(objectUtil || (objectUtil = {}));
    ZodParsedType = util.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set"
    ]);
    getParsedType = (data) => {
      const t2 = typeof data;
      switch (t2) {
        case "undefined":
          return ZodParsedType.undefined;
        case "string":
          return ZodParsedType.string;
        case "number":
          return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
          return ZodParsedType.boolean;
        case "function":
          return ZodParsedType.function;
        case "bigint":
          return ZodParsedType.bigint;
        case "symbol":
          return ZodParsedType.symbol;
        case "object":
          if (Array.isArray(data)) {
            return ZodParsedType.array;
          }
          if (data === null) {
            return ZodParsedType.null;
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return ZodParsedType.promise;
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return ZodParsedType.map;
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return ZodParsedType.set;
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return ZodParsedType.date;
          }
          return ZodParsedType.object;
        default:
          return ZodParsedType.unknown;
      }
    };
  }
});

// node_modules/zod/dist/esm/v3/ZodError.js
var ZodIssueCode, quotelessJson, ZodError;
var init_ZodError = __esm({
  "node_modules/zod/dist/esm/v3/ZodError.js"() {
    "use strict";
    init_util();
    ZodIssueCode = util.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of",
      "not_finite"
    ]);
    quotelessJson = (obj) => {
      const json = JSON.stringify(obj, null, 2);
      return json.replace(/"([^"]+)":/g, "$1:");
    };
    ZodError = class _ZodError extends Error {
      get errors() {
        return this.issues;
      }
      constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
          this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(this, actualProto);
        } else {
          this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
      }
      format(_mapper) {
        const mapper = _mapper || function(issue) {
          return issue.message;
        };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
          for (const issue of error.issues) {
            if (issue.code === "invalid_union") {
              issue.unionErrors.map(processError);
            } else if (issue.code === "invalid_return_type") {
              processError(issue.returnTypeError);
            } else if (issue.code === "invalid_arguments") {
              processError(issue.argumentsError);
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(mapper(issue));
            } else {
              let curr = fieldErrors;
              let i2 = 0;
              while (i2 < issue.path.length) {
                const el = issue.path[i2];
                const terminal = i2 === issue.path.length - 1;
                if (!terminal) {
                  curr[el] = curr[el] || { _errors: [] };
                } else {
                  curr[el] = curr[el] || { _errors: [] };
                  curr[el]._errors.push(mapper(issue));
                }
                curr = curr[el];
                i2++;
              }
            }
          }
        };
        processError(this);
        return fieldErrors;
      }
      static assert(value) {
        if (!(value instanceof _ZodError)) {
          throw new Error(`Not a ZodError: ${value}`);
        }
      }
      toString() {
        return this.message;
      }
      get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
        return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
          } else {
            formErrors.push(mapper(sub));
          }
        }
        return { formErrors, fieldErrors };
      }
      get formErrors() {
        return this.flatten();
      }
    };
    ZodError.create = (issues) => {
      const error = new ZodError(issues);
      return error;
    };
  }
});

// node_modules/zod/dist/esm/v3/locales/en.js
var errorMap, en_default;
var init_en = __esm({
  "node_modules/zod/dist/esm/v3/locales/en.js"() {
    "use strict";
    init_ZodError();
    init_util();
    errorMap = (issue, _ctx) => {
      let message;
      switch (issue.code) {
        case ZodIssueCode.invalid_type:
          if (issue.received === ZodParsedType.undefined) {
            message = "Required";
          } else {
            message = `Expected ${issue.expected}, received ${issue.received}`;
          }
          break;
        case ZodIssueCode.invalid_literal:
          message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
          break;
        case ZodIssueCode.unrecognized_keys:
          message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
          break;
        case ZodIssueCode.invalid_union:
          message = `Invalid input`;
          break;
        case ZodIssueCode.invalid_union_discriminator:
          message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
          break;
        case ZodIssueCode.invalid_enum_value:
          message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
          break;
        case ZodIssueCode.invalid_arguments:
          message = `Invalid function arguments`;
          break;
        case ZodIssueCode.invalid_return_type:
          message = `Invalid function return type`;
          break;
        case ZodIssueCode.invalid_date:
          message = `Invalid date`;
          break;
        case ZodIssueCode.invalid_string:
          if (typeof issue.validation === "object") {
            if ("includes" in issue.validation) {
              message = `Invalid input: must include "${issue.validation.includes}"`;
              if (typeof issue.validation.position === "number") {
                message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
              }
            } else if ("startsWith" in issue.validation) {
              message = `Invalid input: must start with "${issue.validation.startsWith}"`;
            } else if ("endsWith" in issue.validation) {
              message = `Invalid input: must end with "${issue.validation.endsWith}"`;
            } else {
              util.assertNever(issue.validation);
            }
          } else if (issue.validation !== "regex") {
            message = `Invalid ${issue.validation}`;
          } else {
            message = "Invalid";
          }
          break;
        case ZodIssueCode.too_small:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
          else
            message = "Invalid input";
          break;
        case ZodIssueCode.too_big:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "bigint")
            message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
          else
            message = "Invalid input";
          break;
        case ZodIssueCode.custom:
          message = `Invalid input`;
          break;
        case ZodIssueCode.invalid_intersection_types:
          message = `Intersection results could not be merged`;
          break;
        case ZodIssueCode.not_multiple_of:
          message = `Number must be a multiple of ${issue.multipleOf}`;
          break;
        case ZodIssueCode.not_finite:
          message = "Number must be finite";
          break;
        default:
          message = _ctx.defaultError;
          util.assertNever(issue);
      }
      return { message };
    };
    en_default = errorMap;
  }
});

// node_modules/zod/dist/esm/v3/errors.js
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
var overrideErrorMap;
var init_errors = __esm({
  "node_modules/zod/dist/esm/v3/errors.js"() {
    "use strict";
    init_en();
    overrideErrorMap = en_default;
  }
});

// node_modules/zod/dist/esm/v3/helpers/parseUtil.js
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      // contextual error map is first priority
      ctx.schemaErrorMap,
      // then schema-bound map if available
      overrideMap,
      // then global override map
      overrideMap === en_default ? void 0 : en_default
      // then global default map
    ].filter((x3) => !!x3)
  });
  ctx.common.issues.push(issue);
}
var makeIssue, EMPTY_PATH, ParseStatus, INVALID, DIRTY, OK, isAborted, isDirty, isValid, isAsync;
var init_parseUtil = __esm({
  "node_modules/zod/dist/esm/v3/helpers/parseUtil.js"() {
    "use strict";
    init_errors();
    init_en();
    makeIssue = (params) => {
      const { data, path, errorMaps, issueData } = params;
      const fullPath = [...path, ...issueData.path || []];
      const fullIssue = {
        ...issueData,
        path: fullPath
      };
      if (issueData.message !== void 0) {
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message
        };
      }
      let errorMessage = "";
      const maps = errorMaps.filter((m3) => !!m3).slice().reverse();
      for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
      }
      return {
        ...issueData,
        path: fullPath,
        message: errorMessage
      };
    };
    EMPTY_PATH = [];
    ParseStatus = class _ParseStatus {
      constructor() {
        this.value = "valid";
      }
      dirty() {
        if (this.value === "valid")
          this.value = "dirty";
      }
      abort() {
        if (this.value !== "aborted")
          this.value = "aborted";
      }
      static mergeArray(status, results) {
        const arrayValue = [];
        for (const s2 of results) {
          if (s2.status === "aborted")
            return INVALID;
          if (s2.status === "dirty")
            status.dirty();
          arrayValue.push(s2.value);
        }
        return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value
          });
        }
        return _ParseStatus.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
          const { key, value } = pair;
          if (key.status === "aborted")
            return INVALID;
          if (value.status === "aborted")
            return INVALID;
          if (key.status === "dirty")
            status.dirty();
          if (value.status === "dirty")
            status.dirty();
          if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
            finalObject[key.value] = value.value;
          }
        }
        return { status: status.value, value: finalObject };
      }
    };
    INVALID = Object.freeze({
      status: "aborted"
    });
    DIRTY = (value) => ({ status: "dirty", value });
    OK = (value) => ({ status: "valid", value });
    isAborted = (x3) => x3.status === "aborted";
    isDirty = (x3) => x3.status === "dirty";
    isValid = (x3) => x3.status === "valid";
    isAsync = (x3) => typeof Promise !== "undefined" && x3 instanceof Promise;
  }
});

// node_modules/zod/dist/esm/v3/helpers/typeAliases.js
var init_typeAliases = __esm({
  "node_modules/zod/dist/esm/v3/helpers/typeAliases.js"() {
    "use strict";
  }
});

// node_modules/zod/dist/esm/v3/helpers/errorUtil.js
var errorUtil;
var init_errorUtil = __esm({
  "node_modules/zod/dist/esm/v3/helpers/errorUtil.js"() {
    "use strict";
    (function(errorUtil2) {
      errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
      errorUtil2.toString = (message) => typeof message === "string" ? message : message?.message;
    })(errorUtil || (errorUtil = {}));
  }
});

// node_modules/zod/dist/esm/v3/types.js
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message ?? ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: message ?? required_error ?? ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: message ?? invalid_type_error ?? ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
function timeRegexSource(args) {
  let secondsRegexSource = `[0-5]\\d`;
  if (args.precision) {
    secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
  }
  const secondsQuantifier = args.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
function isValidJWT(jwt4, alg) {
  if (!jwtRegex.test(jwt4))
    return false;
  try {
    const [header] = jwt4.split(".");
    const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base64));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if ("typ" in decoded && decoded?.typ !== "JWT")
      return false;
    if (!decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch {
    return false;
  }
}
function isValidCidr(ip, version) {
  if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / 10 ** decCount;
}
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
function mergeValues(a2, b2) {
  const aType = getParsedType(a2);
  const bType = getParsedType(b2);
  if (a2 === b2) {
    return { valid: true, data: a2 };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b2);
    const sharedKeys = util.objectKeys(a2).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a2, ...b2 };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a2[key], b2[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a2.length !== b2.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a2.length; index++) {
      const itemA = a2[index];
      const itemB = b2[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a2 === +b2) {
    return { valid: true, data: a2 };
  } else {
    return { valid: false };
  }
}
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
function cleanParams(params, data) {
  const p3 = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
  const p22 = typeof p3 === "string" ? { message: p3 } : p3;
  return p22;
}
function custom(check, _params = {}, fatal) {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      const r2 = check(data);
      if (r2 instanceof Promise) {
        return r2.then((r3) => {
          if (!r3) {
            const params = cleanParams(_params, data);
            const _fatal = params.fatal ?? fatal ?? true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
        });
      }
      if (!r2) {
        const params = cleanParams(_params, data);
        const _fatal = params.fatal ?? fatal ?? true;
        ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
      }
      return;
    });
  return ZodAny.create();
}
var ParseInputLazyPath, handleResult, ZodType, cuidRegex, cuid2Regex, ulidRegex, uuidRegex, nanoidRegex, jwtRegex, durationRegex, emailRegex, _emojiRegex, emojiRegex, ipv4Regex, ipv4CidrRegex, ipv6Regex, ipv6CidrRegex, base64Regex, base64urlRegex, dateRegexSource, dateRegex, ZodString, ZodNumber, ZodBigInt, ZodBoolean, ZodDate, ZodSymbol, ZodUndefined, ZodNull, ZodAny, ZodUnknown, ZodNever, ZodVoid, ZodArray, ZodObject, ZodUnion, getDiscriminator, ZodDiscriminatedUnion, ZodIntersection, ZodTuple, ZodRecord, ZodMap, ZodSet, ZodFunction, ZodLazy, ZodLiteral, ZodEnum, ZodNativeEnum, ZodPromise, ZodEffects, ZodOptional, ZodNullable, ZodDefault, ZodCatch, ZodNaN, BRAND, ZodBranded, ZodPipeline, ZodReadonly, late, ZodFirstPartyTypeKind, instanceOfType, stringType, numberType, nanType, bigIntType, booleanType, dateType, symbolType, undefinedType, nullType, anyType, unknownType, neverType, voidType, arrayType, objectType, strictObjectType, unionType, discriminatedUnionType, intersectionType, tupleType, recordType, mapType, setType, functionType, lazyType, literalType, enumType, nativeEnumType, promiseType, effectsType, optionalType, nullableType, preprocessType, pipelineType, ostring, onumber, oboolean, coerce, NEVER;
var init_types = __esm({
  "node_modules/zod/dist/esm/v3/types.js"() {
    "use strict";
    init_ZodError();
    init_errors();
    init_errorUtil();
    init_parseUtil();
    init_util();
    ParseInputLazyPath = class {
      constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
      }
      get path() {
        if (!this._cachedPath.length) {
          if (Array.isArray(this._key)) {
            this._cachedPath.push(...this._path, ...this._key);
          } else {
            this._cachedPath.push(...this._path, this._key);
          }
        }
        return this._cachedPath;
      }
    };
    handleResult = (ctx, result) => {
      if (isValid(result)) {
        return { success: true, data: result.value };
      } else {
        if (!ctx.common.issues.length) {
          throw new Error("Validation failed but no issues detected.");
        }
        return {
          success: false,
          get error() {
            if (this._error)
              return this._error;
            const error = new ZodError(ctx.common.issues);
            this._error = error;
            return this._error;
          }
        };
      }
    };
    ZodType = class {
      get description() {
        return this._def.description;
      }
      _getType(input) {
        return getParsedType(input.data);
      }
      _getOrReturnCtx(input, ctx) {
        return ctx || {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        };
      }
      _processInputParams(input) {
        return {
          status: new ParseStatus(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        };
      }
      _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
          throw new Error("Synchronous parse encountered promise.");
        }
        return result;
      }
      _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
      }
      parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      safeParse(data, params) {
        const ctx = {
          common: {
            issues: [],
            async: params?.async ?? false,
            contextualErrorMap: params?.errorMap
          },
          path: params?.path || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
      }
      "~validate"(data) {
        const ctx = {
          common: {
            issues: [],
            async: !!this["~standard"].async
          },
          path: [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        if (!this["~standard"].async) {
          try {
            const result = this._parseSync({ data, path: [], parent: ctx });
            return isValid(result) ? {
              value: result.value
            } : {
              issues: ctx.common.issues
            };
          } catch (err) {
            if (err?.message?.toLowerCase()?.includes("encountered")) {
              this["~standard"].async = true;
            }
            ctx.common = {
              issues: [],
              async: true
            };
          }
        }
        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        });
      }
      async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      async safeParseAsync(data, params) {
        const ctx = {
          common: {
            issues: [],
            contextualErrorMap: params?.errorMap,
            async: true
          },
          path: params?.path || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
      }
      refine(check, message) {
        const getIssueProperties = (val) => {
          if (typeof message === "string" || typeof message === "undefined") {
            return { message };
          } else if (typeof message === "function") {
            return message(val);
          } else {
            return message;
          }
        };
        return this._refinement((val, ctx) => {
          const result = check(val);
          const setError = () => ctx.addIssue({
            code: ZodIssueCode.custom,
            ...getIssueProperties(val)
          });
          if (typeof Promise !== "undefined" && result instanceof Promise) {
            return result.then((data) => {
              if (!data) {
                setError();
                return false;
              } else {
                return true;
              }
            });
          }
          if (!result) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
          if (!check(val)) {
            ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
            return false;
          } else {
            return true;
          }
        });
      }
      _refinement(refinement) {
        return new ZodEffects({
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "refinement", refinement }
        });
      }
      superRefine(refinement) {
        return this._refinement(refinement);
      }
      constructor(def) {
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
        this["~standard"] = {
          version: 1,
          vendor: "zod",
          validate: (data) => this["~validate"](data)
        };
      }
      optional() {
        return ZodOptional.create(this, this._def);
      }
      nullable() {
        return ZodNullable.create(this, this._def);
      }
      nullish() {
        return this.nullable().optional();
      }
      array() {
        return ZodArray.create(this);
      }
      promise() {
        return ZodPromise.create(this, this._def);
      }
      or(option) {
        return ZodUnion.create([this, option], this._def);
      }
      and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
      }
      transform(transform) {
        return new ZodEffects({
          ...processCreateParams(this._def),
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "transform", transform }
        });
      }
      default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
          ...processCreateParams(this._def),
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodDefault
        });
      }
      brand() {
        return new ZodBranded({
          typeName: ZodFirstPartyTypeKind.ZodBranded,
          type: this,
          ...processCreateParams(this._def)
        });
      }
      catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
          ...processCreateParams(this._def),
          innerType: this,
          catchValue: catchValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodCatch
        });
      }
      describe(description) {
        const This = this.constructor;
        return new This({
          ...this._def,
          description
        });
      }
      pipe(target) {
        return ZodPipeline.create(this, target);
      }
      readonly() {
        return ZodReadonly.create(this);
      }
      isOptional() {
        return this.safeParse(void 0).success;
      }
      isNullable() {
        return this.safeParse(null).success;
      }
    };
    cuidRegex = /^c[^\s-]{8,}$/i;
    cuid2Regex = /^[0-9a-z]+$/;
    ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
    uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
    nanoidRegex = /^[a-z0-9_-]{21}$/i;
    jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
    durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
    _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
    ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
    ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
    base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
    dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
    dateRegex = new RegExp(`^${dateRegexSource}$`);
    ZodString = class _ZodString extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.string,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.length < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.length > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "length") {
            const tooBig = input.data.length > check.value;
            const tooSmall = input.data.length < check.value;
            if (tooBig || tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              if (tooBig) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              } else if (tooSmall) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              }
              status.dirty();
            }
          } else if (check.kind === "email") {
            if (!emailRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "email",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "emoji") {
            if (!emojiRegex) {
              emojiRegex = new RegExp(_emojiRegex, "u");
            }
            if (!emojiRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "emoji",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "uuid") {
            if (!uuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "uuid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "nanoid") {
            if (!nanoidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "nanoid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid") {
            if (!cuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cuid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid2") {
            if (!cuid2Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cuid2",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ulid") {
            if (!ulidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "ulid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "url") {
            try {
              new URL(input.data);
            } catch {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "url",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "regex") {
            check.regex.lastIndex = 0;
            const testResult = check.regex.test(input.data);
            if (!testResult) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "regex",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "trim") {
            input.data = input.data.trim();
          } else if (check.kind === "includes") {
            if (!input.data.includes(check.value, check.position)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { includes: check.value, position: check.position },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "toLowerCase") {
            input.data = input.data.toLowerCase();
          } else if (check.kind === "toUpperCase") {
            input.data = input.data.toUpperCase();
          } else if (check.kind === "startsWith") {
            if (!input.data.startsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { startsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "endsWith") {
            if (!input.data.endsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { endsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "datetime") {
            const regex = datetimeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "datetime",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "date") {
            const regex = dateRegex;
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "date",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "time") {
            const regex = timeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "time",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "duration") {
            if (!durationRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "duration",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ip") {
            if (!isValidIP(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "ip",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "jwt") {
            if (!isValidJWT(input.data, check.alg)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "jwt",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cidr") {
            if (!isValidCidr(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cidr",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64") {
            if (!base64Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "base64",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64url") {
            if (!base64urlRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "base64url",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _regex(regex, validation, message) {
        return this.refinement((data) => regex.test(data), {
          validation,
          code: ZodIssueCode.invalid_string,
          ...errorUtil.errToObj(message)
        });
      }
      _addCheck(check) {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      email(message) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
      }
      url(message) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
      }
      emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
      }
      uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
      }
      nanoid(message) {
        return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
      }
      cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
      }
      cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
      }
      ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
      }
      base64(message) {
        return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
      }
      base64url(message) {
        return this._addCheck({
          kind: "base64url",
          ...errorUtil.errToObj(message)
        });
      }
      jwt(options) {
        return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
      }
      ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
      }
      cidr(options) {
        return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
      }
      datetime(options) {
        if (typeof options === "string") {
          return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            local: false,
            message: options
          });
        }
        return this._addCheck({
          kind: "datetime",
          precision: typeof options?.precision === "undefined" ? null : options?.precision,
          offset: options?.offset ?? false,
          local: options?.local ?? false,
          ...errorUtil.errToObj(options?.message)
        });
      }
      date(message) {
        return this._addCheck({ kind: "date", message });
      }
      time(options) {
        if (typeof options === "string") {
          return this._addCheck({
            kind: "time",
            precision: null,
            message: options
          });
        }
        return this._addCheck({
          kind: "time",
          precision: typeof options?.precision === "undefined" ? null : options?.precision,
          ...errorUtil.errToObj(options?.message)
        });
      }
      duration(message) {
        return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
      }
      regex(regex, message) {
        return this._addCheck({
          kind: "regex",
          regex,
          ...errorUtil.errToObj(message)
        });
      }
      includes(value, options) {
        return this._addCheck({
          kind: "includes",
          value,
          position: options?.position,
          ...errorUtil.errToObj(options?.message)
        });
      }
      startsWith(value, message) {
        return this._addCheck({
          kind: "startsWith",
          value,
          ...errorUtil.errToObj(message)
        });
      }
      endsWith(value, message) {
        return this._addCheck({
          kind: "endsWith",
          value,
          ...errorUtil.errToObj(message)
        });
      }
      min(minLength, message) {
        return this._addCheck({
          kind: "min",
          value: minLength,
          ...errorUtil.errToObj(message)
        });
      }
      max(maxLength, message) {
        return this._addCheck({
          kind: "max",
          value: maxLength,
          ...errorUtil.errToObj(message)
        });
      }
      length(len, message) {
        return this._addCheck({
          kind: "length",
          value: len,
          ...errorUtil.errToObj(message)
        });
      }
      /**
       * Equivalent to `.min(1)`
       */
      nonempty(message) {
        return this.min(1, errorUtil.errToObj(message));
      }
      trim() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "trim" }]
        });
      }
      toLowerCase() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toLowerCase" }]
        });
      }
      toUpperCase() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toUpperCase" }]
        });
      }
      get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
      }
      get isDate() {
        return !!this._def.checks.find((ch) => ch.kind === "date");
      }
      get isTime() {
        return !!this._def.checks.find((ch) => ch.kind === "time");
      }
      get isDuration() {
        return !!this._def.checks.find((ch) => ch.kind === "duration");
      }
      get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
      }
      get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
      }
      get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
      }
      get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
      }
      get isNANOID() {
        return !!this._def.checks.find((ch) => ch.kind === "nanoid");
      }
      get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
      }
      get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
      }
      get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
      }
      get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
      }
      get isCIDR() {
        return !!this._def.checks.find((ch) => ch.kind === "cidr");
      }
      get isBase64() {
        return !!this._def.checks.find((ch) => ch.kind === "base64");
      }
      get isBase64url() {
        return !!this._def.checks.find((ch) => ch.kind === "base64url");
      }
      get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    ZodString.create = (params) => {
      return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: params?.coerce ?? false,
        ...processCreateParams(params)
      });
    };
    ZodNumber = class _ZodNumber extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.number,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "int") {
            if (!util.isInteger(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: "integer",
                received: "float",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (floatSafeRemainder(input.data, check.value) !== 0) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "finite") {
            if (!Number.isFinite(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_finite,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new _ZodNumber({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new _ZodNumber({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      int(message) {
        return this._addCheck({
          kind: "int",
          message: errorUtil.toString(message)
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil.toString(message)
        });
      }
      finite(message) {
        return this._addCheck({
          kind: "finite",
          message: errorUtil.toString(message)
        });
      }
      safe(message) {
        return this._addCheck({
          kind: "min",
          inclusive: true,
          value: Number.MIN_SAFE_INTEGER,
          message: errorUtil.toString(message)
        })._addCheck({
          kind: "max",
          inclusive: true,
          value: Number.MAX_SAFE_INTEGER,
          message: errorUtil.toString(message)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
      get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
      }
      get isFinite() {
        let max = null;
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
            return true;
          } else if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          } else if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return Number.isFinite(min) && Number.isFinite(max);
      }
    };
    ZodNumber.create = (params) => {
      return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: params?.coerce || false,
        ...processCreateParams(params)
      });
    };
    ZodBigInt = class _ZodBigInt extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
      }
      _parse(input) {
        if (this._def.coerce) {
          try {
            input.data = BigInt(input.data);
          } catch {
            return this._getInvalidInput(input);
          }
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
          return this._getInvalidInput(input);
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                type: "bigint",
                minimum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                type: "bigint",
                maximum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (input.data % check.value !== BigInt(0)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _getInvalidInput(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.bigint,
          received: ctx.parsedType
        });
        return INVALID;
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new _ZodBigInt({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new _ZodBigInt({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil.toString(message)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    ZodBigInt.create = (params) => {
      return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: params?.coerce ?? false,
        ...processCreateParams(params)
      });
    };
    ZodBoolean = class extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.boolean,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    };
    ZodBoolean.create = (params) => {
      return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: params?.coerce || false,
        ...processCreateParams(params)
      });
    };
    ZodDate = class _ZodDate extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.date,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        if (Number.isNaN(input.data.getTime())) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_date
          });
          return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.getTime() < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                message: check.message,
                inclusive: true,
                exact: false,
                minimum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.getTime() > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                message: check.message,
                inclusive: true,
                exact: false,
                maximum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        };
      }
      _addCheck(check) {
        return new _ZodDate({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      min(minDate, message) {
        return this._addCheck({
          kind: "min",
          value: minDate.getTime(),
          message: errorUtil.toString(message)
        });
      }
      max(maxDate, message) {
        return this._addCheck({
          kind: "max",
          value: maxDate.getTime(),
          message: errorUtil.toString(message)
        });
      }
      get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min != null ? new Date(min) : null;
      }
      get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max != null ? new Date(max) : null;
      }
    };
    ZodDate.create = (params) => {
      return new ZodDate({
        checks: [],
        coerce: params?.coerce || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
      });
    };
    ZodSymbol = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.symbol,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    };
    ZodSymbol.create = (params) => {
      return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
      });
    };
    ZodUndefined = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.undefined,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    };
    ZodUndefined.create = (params) => {
      return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
      });
    };
    ZodNull = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.null,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    };
    ZodNull.create = (params) => {
      return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
      });
    };
    ZodAny = class extends ZodType {
      constructor() {
        super(...arguments);
        this._any = true;
      }
      _parse(input) {
        return OK(input.data);
      }
    };
    ZodAny.create = (params) => {
      return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
      });
    };
    ZodUnknown = class extends ZodType {
      constructor() {
        super(...arguments);
        this._unknown = true;
      }
      _parse(input) {
        return OK(input.data);
      }
    };
    ZodUnknown.create = (params) => {
      return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
      });
    };
    ZodNever = class extends ZodType {
      _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.never,
          received: ctx.parsedType
        });
        return INVALID;
      }
    };
    ZodNever.create = (params) => {
      return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
      });
    };
    ZodVoid = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.void,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    };
    ZodVoid.create = (params) => {
      return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
      });
    };
    ZodArray = class _ZodArray extends ZodType {
      _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          });
          return INVALID;
        }
        if (def.exactLength !== null) {
          const tooBig = ctx.data.length > def.exactLength.value;
          const tooSmall = ctx.data.length < def.exactLength.value;
          if (tooBig || tooSmall) {
            addIssueToContext(ctx, {
              code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
              minimum: tooSmall ? def.exactLength.value : void 0,
              maximum: tooBig ? def.exactLength.value : void 0,
              type: "array",
              inclusive: true,
              exact: true,
              message: def.exactLength.message
            });
            status.dirty();
          }
        }
        if (def.minLength !== null) {
          if (ctx.data.length < def.minLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def.minLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.minLength.message
            });
            status.dirty();
          }
        }
        if (def.maxLength !== null) {
          if (ctx.data.length > def.maxLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def.maxLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.maxLength.message
            });
            status.dirty();
          }
        }
        if (ctx.common.async) {
          return Promise.all([...ctx.data].map((item, i2) => {
            return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
          })).then((result2) => {
            return ParseStatus.mergeArray(status, result2);
          });
        }
        const result = [...ctx.data].map((item, i2) => {
          return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
        });
        return ParseStatus.mergeArray(status, result);
      }
      get element() {
        return this._def.type;
      }
      min(minLength, message) {
        return new _ZodArray({
          ...this._def,
          minLength: { value: minLength, message: errorUtil.toString(message) }
        });
      }
      max(maxLength, message) {
        return new _ZodArray({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil.toString(message) }
        });
      }
      length(len, message) {
        return new _ZodArray({
          ...this._def,
          exactLength: { value: len, message: errorUtil.toString(message) }
        });
      }
      nonempty(message) {
        return this.min(1, message);
      }
    };
    ZodArray.create = (schema, params) => {
      return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
      });
    };
    ZodObject = class _ZodObject extends ZodType {
      constructor() {
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
      }
      _getCached() {
        if (this._cached !== null)
          return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        this._cached = { shape, keys };
        return this._cached;
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
          for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
              extraKeys.push(key);
            }
          }
        }
        const pairs = [];
        for (const key of shapeKeys) {
          const keyValidator = shape[key];
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (this._def.catchall instanceof ZodNever) {
          const unknownKeys = this._def.unknownKeys;
          if (unknownKeys === "passthrough") {
            for (const key of extraKeys) {
              pairs.push({
                key: { status: "valid", value: key },
                value: { status: "valid", value: ctx.data[key] }
              });
            }
          } else if (unknownKeys === "strict") {
            if (extraKeys.length > 0) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.unrecognized_keys,
                keys: extraKeys
              });
              status.dirty();
            }
          } else if (unknownKeys === "strip") {
          } else {
            throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
          }
        } else {
          const catchall = this._def.catchall;
          for (const key of extraKeys) {
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: catchall._parse(
                new ParseInputLazyPath(ctx, value, ctx.path, key)
                //, ctx.child(key), value, getParsedType(value)
              ),
              alwaysSet: key in ctx.data
            });
          }
        }
        if (ctx.common.async) {
          return Promise.resolve().then(async () => {
            const syncPairs = [];
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              syncPairs.push({
                key,
                value,
                alwaysSet: pair.alwaysSet
              });
            }
            return syncPairs;
          }).then((syncPairs) => {
            return ParseStatus.mergeObjectSync(status, syncPairs);
          });
        } else {
          return ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get shape() {
        return this._def.shape();
      }
      strict(message) {
        errorUtil.errToObj;
        return new _ZodObject({
          ...this._def,
          unknownKeys: "strict",
          ...message !== void 0 ? {
            errorMap: (issue, ctx) => {
              const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: errorUtil.errToObj(message).message ?? defaultError
                };
              return {
                message: defaultError
              };
            }
          } : {}
        });
      }
      strip() {
        return new _ZodObject({
          ...this._def,
          unknownKeys: "strip"
        });
      }
      passthrough() {
        return new _ZodObject({
          ...this._def,
          unknownKeys: "passthrough"
        });
      }
      // const AugmentFactory =
      //   <Def extends ZodObjectDef>(def: Def) =>
      //   <Augmentation extends ZodRawShape>(
      //     augmentation: Augmentation
      //   ): ZodObject<
      //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
      //     Def["unknownKeys"],
      //     Def["catchall"]
      //   > => {
      //     return new ZodObject({
      //       ...def,
      //       shape: () => ({
      //         ...def.shape(),
      //         ...augmentation,
      //       }),
      //     }) as any;
      //   };
      extend(augmentation) {
        return new _ZodObject({
          ...this._def,
          shape: () => ({
            ...this._def.shape(),
            ...augmentation
          })
        });
      }
      /**
       * Prior to zod@1.0.12 there was a bug in the
       * inferred type of merged objects. Please
       * upgrade if you are experiencing issues.
       */
      merge(merging) {
        const merged = new _ZodObject({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: () => ({
            ...this._def.shape(),
            ...merging._def.shape()
          }),
          typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
      }
      // merge<
      //   Incoming extends AnyZodObject,
      //   Augmentation extends Incoming["shape"],
      //   NewOutput extends {
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   },
      //   NewInput extends {
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }
      // >(
      //   merging: Incoming
      // ): ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"],
      //   NewOutput,
      //   NewInput
      // > {
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      setKey(key, schema) {
        return this.augment({ [key]: schema });
      }
      // merge<Incoming extends AnyZodObject>(
      //   merging: Incoming
      // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
      // ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"]
      // > {
      //   // const mergedShape = objectUtil.mergeShapes(
      //   //   this._def.shape(),
      //   //   merging._def.shape()
      //   // );
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      catchall(index) {
        return new _ZodObject({
          ...this._def,
          catchall: index
        });
      }
      pick(mask) {
        const shape = {};
        for (const key of util.objectKeys(mask)) {
          if (mask[key] && this.shape[key]) {
            shape[key] = this.shape[key];
          }
        }
        return new _ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      omit(mask) {
        const shape = {};
        for (const key of util.objectKeys(this.shape)) {
          if (!mask[key]) {
            shape[key] = this.shape[key];
          }
        }
        return new _ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      /**
       * @deprecated
       */
      deepPartial() {
        return deepPartialify(this);
      }
      partial(mask) {
        const newShape = {};
        for (const key of util.objectKeys(this.shape)) {
          const fieldSchema = this.shape[key];
          if (mask && !mask[key]) {
            newShape[key] = fieldSchema;
          } else {
            newShape[key] = fieldSchema.optional();
          }
        }
        return new _ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      required(mask) {
        const newShape = {};
        for (const key of util.objectKeys(this.shape)) {
          if (mask && !mask[key]) {
            newShape[key] = this.shape[key];
          } else {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional) {
              newField = newField._def.innerType;
            }
            newShape[key] = newField;
          }
        }
        return new _ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      keyof() {
        return createZodEnum(util.objectKeys(this.shape));
      }
    };
    ZodObject.create = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.strictCreate = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.lazycreate = (shape, params) => {
      return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodUnion = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
          for (const result of results) {
            if (result.result.status === "valid") {
              return result.result;
            }
          }
          for (const result of results) {
            if (result.result.status === "dirty") {
              ctx.common.issues.push(...result.ctx.common.issues);
              return result.result;
            }
          }
          const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          });
          return INVALID;
        }
        if (ctx.common.async) {
          return Promise.all(options.map(async (option) => {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            return {
              result: await option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              }),
              ctx: childCtx
            };
          })).then(handleResults);
        } else {
          let dirty = void 0;
          const issues = [];
          for (const option of options) {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            const result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            });
            if (result.status === "valid") {
              return result;
            } else if (result.status === "dirty" && !dirty) {
              dirty = { result, ctx: childCtx };
            }
            if (childCtx.common.issues.length) {
              issues.push(childCtx.common.issues);
            }
          }
          if (dirty) {
            ctx.common.issues.push(...dirty.ctx.common.issues);
            return dirty.result;
          }
          const unionErrors = issues.map((issues2) => new ZodError(issues2));
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          });
          return INVALID;
        }
      }
      get options() {
        return this._def.options;
      }
    };
    ZodUnion.create = (types, params) => {
      return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
      });
    };
    getDiscriminator = (type) => {
      if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
      } else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
      } else if (type instanceof ZodLiteral) {
        return [type.value];
      } else if (type instanceof ZodEnum) {
        return type.options;
      } else if (type instanceof ZodNativeEnum) {
        return util.objectValues(type.enum);
      } else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
      } else if (type instanceof ZodUndefined) {
        return [void 0];
      } else if (type instanceof ZodNull) {
        return [null];
      } else if (type instanceof ZodOptional) {
        return [void 0, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodNullable) {
        return [null, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodBranded) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodReadonly) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodCatch) {
        return getDiscriminator(type._def.innerType);
      } else {
        return [];
      }
    };
    ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union_discriminator,
            options: Array.from(this.optionsMap.keys()),
            path: [discriminator]
          });
          return INVALID;
        }
        if (ctx.common.async) {
          return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        } else {
          return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      get discriminator() {
        return this._def.discriminator;
      }
      get options() {
        return this._def.options;
      }
      get optionsMap() {
        return this._def.optionsMap;
      }
      /**
       * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
       * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
       * have a different value for each object in the union.
       * @param discriminator the name of the discriminator property
       * @param types an array of object schemas
       * @param params
       */
      static create(discriminator, options, params) {
        const optionsMap = /* @__PURE__ */ new Map();
        for (const type of options) {
          const discriminatorValues = getDiscriminator(type.shape[discriminator]);
          if (!discriminatorValues.length) {
            throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
          }
          for (const value of discriminatorValues) {
            if (optionsMap.has(value)) {
              throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
            }
            optionsMap.set(value, type);
          }
        }
        return new _ZodDiscriminatedUnion({
          typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
          discriminator,
          options,
          optionsMap,
          ...processCreateParams(params)
        });
      }
    };
    ZodIntersection = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
          if (isAborted(parsedLeft) || isAborted(parsedRight)) {
            return INVALID;
          }
          const merged = mergeValues(parsedLeft.value, parsedRight.value);
          if (!merged.valid) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_intersection_types
            });
            return INVALID;
          }
          if (isDirty(parsedLeft) || isDirty(parsedRight)) {
            status.dirty();
          }
          return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
          return Promise.all([
            this._def.left._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          ]).then(([left, right]) => handleParsed(left, right));
        } else {
          return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }));
        }
      }
    };
    ZodIntersection.create = (left, right, params) => {
      return new ZodIntersection({
        left,
        right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
      });
    };
    ZodTuple = class _ZodTuple extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          });
          return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          status.dirty();
        }
        const items = [...ctx.data].map((item, itemIndex) => {
          const schema = this._def.items[itemIndex] || this._def.rest;
          if (!schema)
            return null;
          return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x3) => !!x3);
        if (ctx.common.async) {
          return Promise.all(items).then((results) => {
            return ParseStatus.mergeArray(status, results);
          });
        } else {
          return ParseStatus.mergeArray(status, items);
        }
      }
      get items() {
        return this._def.items;
      }
      rest(rest) {
        return new _ZodTuple({
          ...this._def,
          rest
        });
      }
    };
    ZodTuple.create = (schemas, params) => {
      if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      }
      return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
      });
    };
    ZodRecord = class _ZodRecord extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
          pairs.push({
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (ctx.common.async) {
          return ParseStatus.mergeObjectAsync(status, pairs);
        } else {
          return ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get element() {
        return this._def.valueType;
      }
      static create(first, second, third) {
        if (second instanceof ZodType) {
          return new _ZodRecord({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(third)
          });
        }
        return new _ZodRecord({
          keyType: ZodString.create(),
          valueType: first,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(second)
        });
      }
    };
    ZodMap = class extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.map,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
          return {
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
            value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
          };
        });
        if (ctx.common.async) {
          const finalMap = /* @__PURE__ */ new Map();
          return Promise.resolve().then(async () => {
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          });
        } else {
          const finalMap = /* @__PURE__ */ new Map();
          for (const pair of pairs) {
            const key = pair.key;
            const value = pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        }
      }
    };
    ZodMap.create = (keyType, valueType, params) => {
      return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
      });
    };
    ZodSet = class _ZodSet extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.set,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
          if (ctx.data.size < def.minSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def.minSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.minSize.message
            });
            status.dirty();
          }
        }
        if (def.maxSize !== null) {
          if (ctx.data.size > def.maxSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def.maxSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.maxSize.message
            });
            status.dirty();
          }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
          const parsedSet = /* @__PURE__ */ new Set();
          for (const element of elements2) {
            if (element.status === "aborted")
              return INVALID;
            if (element.status === "dirty")
              status.dirty();
            parsedSet.add(element.value);
          }
          return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i2) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i2)));
        if (ctx.common.async) {
          return Promise.all(elements).then((elements2) => finalizeSet(elements2));
        } else {
          return finalizeSet(elements);
        }
      }
      min(minSize, message) {
        return new _ZodSet({
          ...this._def,
          minSize: { value: minSize, message: errorUtil.toString(message) }
        });
      }
      max(maxSize, message) {
        return new _ZodSet({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil.toString(message) }
        });
      }
      size(size, message) {
        return this.min(size, message).max(size, message);
      }
      nonempty(message) {
        return this.min(1, message);
      }
    };
    ZodSet.create = (valueType, params) => {
      return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
      });
    };
    ZodFunction = class _ZodFunction extends ZodType {
      constructor() {
        super(...arguments);
        this.validate = this.implement;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.function,
            received: ctx.parsedType
          });
          return INVALID;
        }
        function makeArgsIssue(args, error) {
          return makeIssue({
            data: args,
            path: ctx.path,
            errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x3) => !!x3),
            issueData: {
              code: ZodIssueCode.invalid_arguments,
              argumentsError: error
            }
          });
        }
        function makeReturnsIssue(returns, error) {
          return makeIssue({
            data: returns,
            path: ctx.path,
            errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x3) => !!x3),
            issueData: {
              code: ZodIssueCode.invalid_return_type,
              returnTypeError: error
            }
          });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
          const me3 = this;
          return OK(async function(...args) {
            const error = new ZodError([]);
            const parsedArgs = await me3._def.args.parseAsync(args, params).catch((e2) => {
              error.addIssue(makeArgsIssue(args, e2));
              throw error;
            });
            const result = await Reflect.apply(fn, this, parsedArgs);
            const parsedReturns = await me3._def.returns._def.type.parseAsync(result, params).catch((e2) => {
              error.addIssue(makeReturnsIssue(result, e2));
              throw error;
            });
            return parsedReturns;
          });
        } else {
          const me3 = this;
          return OK(function(...args) {
            const parsedArgs = me3._def.args.safeParse(args, params);
            if (!parsedArgs.success) {
              throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
            }
            const result = Reflect.apply(fn, this, parsedArgs.data);
            const parsedReturns = me3._def.returns.safeParse(result, params);
            if (!parsedReturns.success) {
              throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
            }
            return parsedReturns.data;
          });
        }
      }
      parameters() {
        return this._def.args;
      }
      returnType() {
        return this._def.returns;
      }
      args(...items) {
        return new _ZodFunction({
          ...this._def,
          args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
      }
      returns(returnType) {
        return new _ZodFunction({
          ...this._def,
          returns: returnType
        });
      }
      implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      static create(args, returns, params) {
        return new _ZodFunction({
          args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
          returns: returns || ZodUnknown.create(),
          typeName: ZodFirstPartyTypeKind.ZodFunction,
          ...processCreateParams(params)
        });
      }
    };
    ZodLazy = class extends ZodType {
      get schema() {
        return this._def.getter();
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
    };
    ZodLazy.create = (getter, params) => {
      return new ZodLazy({
        getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
      });
    };
    ZodLiteral = class extends ZodType {
      _parse(input) {
        if (input.data !== this._def.value) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_literal,
            expected: this._def.value
          });
          return INVALID;
        }
        return { status: "valid", value: input.data };
      }
      get value() {
        return this._def.value;
      }
    };
    ZodLiteral.create = (value, params) => {
      return new ZodLiteral({
        value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
      });
    };
    ZodEnum = class _ZodEnum extends ZodType {
      _parse(input) {
        if (typeof input.data !== "string") {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          });
          return INVALID;
        }
        if (!this._cache) {
          this._cache = new Set(this._def.values);
        }
        if (!this._cache.has(input.data)) {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return INVALID;
        }
        return OK(input.data);
      }
      get options() {
        return this._def.values;
      }
      get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      extract(values, newDef = this._def) {
        return _ZodEnum.create(values, {
          ...this._def,
          ...newDef
        });
      }
      exclude(values, newDef = this._def) {
        return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
          ...this._def,
          ...newDef
        });
      }
    };
    ZodEnum.create = createZodEnum;
    ZodNativeEnum = class extends ZodType {
      _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
          const expectedValues = util.objectValues(nativeEnumValues);
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          });
          return INVALID;
        }
        if (!this._cache) {
          this._cache = new Set(util.getValidEnumValues(this._def.values));
        }
        if (!this._cache.has(input.data)) {
          const expectedValues = util.objectValues(nativeEnumValues);
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return INVALID;
        }
        return OK(input.data);
      }
      get enum() {
        return this._def.values;
      }
    };
    ZodNativeEnum.create = (values, params) => {
      return new ZodNativeEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
      });
    };
    ZodPromise = class extends ZodType {
      unwrap() {
        return this._def.type;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.promise,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
          return this._def.type.parseAsync(data, {
            path: ctx.path,
            errorMap: ctx.common.contextualErrorMap
          });
        }));
      }
    };
    ZodPromise.create = (schema, params) => {
      return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
      });
    };
    ZodEffects = class extends ZodType {
      innerType() {
        return this._def.schema;
      }
      sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
          addIssue: (arg) => {
            addIssueToContext(ctx, arg);
            if (arg.fatal) {
              status.abort();
            } else {
              status.dirty();
            }
          },
          get path() {
            return ctx.path;
          }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
          const processed = effect.transform(ctx.data, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(processed).then(async (processed2) => {
              if (status.value === "aborted")
                return INVALID;
              const result = await this._def.schema._parseAsync({
                data: processed2,
                path: ctx.path,
                parent: ctx
              });
              if (result.status === "aborted")
                return INVALID;
              if (result.status === "dirty")
                return DIRTY(result.value);
              if (status.value === "dirty")
                return DIRTY(result.value);
              return result;
            });
          } else {
            if (status.value === "aborted")
              return INVALID;
            const result = this._def.schema._parseSync({
              data: processed,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return INVALID;
            if (result.status === "dirty")
              return DIRTY(result.value);
            if (status.value === "dirty")
              return DIRTY(result.value);
            return result;
          }
        }
        if (effect.type === "refinement") {
          const executeRefinement = (acc) => {
            const result = effect.refinement(acc, checkCtx);
            if (ctx.common.async) {
              return Promise.resolve(result);
            }
            if (result instanceof Promise) {
              throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
            }
            return acc;
          };
          if (ctx.common.async === false) {
            const inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            executeRefinement(inner.value);
            return { status: status.value, value: inner.value };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
              if (inner.status === "aborted")
                return INVALID;
              if (inner.status === "dirty")
                status.dirty();
              return executeRefinement(inner.value).then(() => {
                return { status: status.value, value: inner.value };
              });
            });
          }
        }
        if (effect.type === "transform") {
          if (ctx.common.async === false) {
            const base = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (!isValid(base))
              return INVALID;
            const result = effect.transform(base.value, checkCtx);
            if (result instanceof Promise) {
              throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
            }
            return { status: status.value, value: result };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
              if (!isValid(base))
                return INVALID;
              return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
                status: status.value,
                value: result
              }));
            });
          }
        }
        util.assertNever(effect);
      }
    };
    ZodEffects.create = (schema, effect, params) => {
      return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
      });
    };
    ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
      return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
      });
    };
    ZodOptional = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
          return OK(void 0);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    ZodOptional.create = (type, params) => {
      return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
      });
    };
    ZodNullable = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
          return OK(null);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    ZodNullable.create = (type, params) => {
      return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
      });
    };
    ZodDefault = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
          data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      removeDefault() {
        return this._def.innerType;
      }
    };
    ZodDefault.create = (type, params) => {
      return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : () => params.default,
        ...processCreateParams(params)
      });
    };
    ZodCatch = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const newCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          }
        };
        const result = this._def.innerType._parse({
          data: newCtx.data,
          path: newCtx.path,
          parent: {
            ...newCtx
          }
        });
        if (isAsync(result)) {
          return result.then((result2) => {
            return {
              status: "valid",
              value: result2.status === "valid" ? result2.value : this._def.catchValue({
                get error() {
                  return new ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          });
        } else {
          return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        }
      }
      removeCatch() {
        return this._def.innerType;
      }
    };
    ZodCatch.create = (type, params) => {
      return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params)
      });
    };
    ZodNaN = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.nan,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return { status: "valid", value: input.data };
      }
    };
    ZodNaN.create = (params) => {
      return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
      });
    };
    BRAND = Symbol("zod_brand");
    ZodBranded = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      unwrap() {
        return this._def.type;
      }
    };
    ZodPipeline = class _ZodPipeline extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
          const handleAsync = async () => {
            const inResult = await this._def.in._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return DIRTY(inResult.value);
            } else {
              return this._def.out._parseAsync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          };
          return handleAsync();
        } else {
          const inResult = this._def.in._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return {
              status: "dirty",
              value: inResult.value
            };
          } else {
            return this._def.out._parseSync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        }
      }
      static create(a2, b2) {
        return new _ZodPipeline({
          in: a2,
          out: b2,
          typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
      }
    };
    ZodReadonly = class extends ZodType {
      _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data) => {
          if (isValid(data)) {
            data.value = Object.freeze(data.value);
          }
          return data;
        };
        return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    ZodReadonly.create = (type, params) => {
      return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
      });
    };
    late = {
      object: ZodObject.lazycreate
    };
    (function(ZodFirstPartyTypeKind2) {
      ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
      ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
      ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
      ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
      ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
      ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
      ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
      ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
      ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
      ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
      ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
      ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
      ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
      ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
      ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
      ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
      ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
      ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
      ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
      ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
      ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
      ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
      ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
      ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
      ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
      ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
      ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
      ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
      ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
      ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
      ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
      ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
      ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
      ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
      ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
      ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
    })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
    instanceOfType = (cls, params = {
      message: `Input not instance of ${cls.name}`
    }) => custom((data) => data instanceof cls, params);
    stringType = ZodString.create;
    numberType = ZodNumber.create;
    nanType = ZodNaN.create;
    bigIntType = ZodBigInt.create;
    booleanType = ZodBoolean.create;
    dateType = ZodDate.create;
    symbolType = ZodSymbol.create;
    undefinedType = ZodUndefined.create;
    nullType = ZodNull.create;
    anyType = ZodAny.create;
    unknownType = ZodUnknown.create;
    neverType = ZodNever.create;
    voidType = ZodVoid.create;
    arrayType = ZodArray.create;
    objectType = ZodObject.create;
    strictObjectType = ZodObject.strictCreate;
    unionType = ZodUnion.create;
    discriminatedUnionType = ZodDiscriminatedUnion.create;
    intersectionType = ZodIntersection.create;
    tupleType = ZodTuple.create;
    recordType = ZodRecord.create;
    mapType = ZodMap.create;
    setType = ZodSet.create;
    functionType = ZodFunction.create;
    lazyType = ZodLazy.create;
    literalType = ZodLiteral.create;
    enumType = ZodEnum.create;
    nativeEnumType = ZodNativeEnum.create;
    promiseType = ZodPromise.create;
    effectsType = ZodEffects.create;
    optionalType = ZodOptional.create;
    nullableType = ZodNullable.create;
    preprocessType = ZodEffects.createWithPreprocess;
    pipelineType = ZodPipeline.create;
    ostring = () => stringType().optional();
    onumber = () => numberType().optional();
    oboolean = () => booleanType().optional();
    coerce = {
      string: (arg) => ZodString.create({ ...arg, coerce: true }),
      number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
      boolean: (arg) => ZodBoolean.create({
        ...arg,
        coerce: true
      }),
      bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
      date: (arg) => ZodDate.create({ ...arg, coerce: true })
    };
    NEVER = INVALID;
  }
});

// node_modules/zod/dist/esm/v3/external.js
var external_exports = {};
__export(external_exports, {
  BRAND: () => BRAND,
  DIRTY: () => DIRTY,
  EMPTY_PATH: () => EMPTY_PATH,
  INVALID: () => INVALID,
  NEVER: () => NEVER,
  OK: () => OK,
  ParseStatus: () => ParseStatus,
  Schema: () => ZodType,
  ZodAny: () => ZodAny,
  ZodArray: () => ZodArray,
  ZodBigInt: () => ZodBigInt,
  ZodBoolean: () => ZodBoolean,
  ZodBranded: () => ZodBranded,
  ZodCatch: () => ZodCatch,
  ZodDate: () => ZodDate,
  ZodDefault: () => ZodDefault,
  ZodDiscriminatedUnion: () => ZodDiscriminatedUnion,
  ZodEffects: () => ZodEffects,
  ZodEnum: () => ZodEnum,
  ZodError: () => ZodError,
  ZodFirstPartyTypeKind: () => ZodFirstPartyTypeKind,
  ZodFunction: () => ZodFunction,
  ZodIntersection: () => ZodIntersection,
  ZodIssueCode: () => ZodIssueCode,
  ZodLazy: () => ZodLazy,
  ZodLiteral: () => ZodLiteral,
  ZodMap: () => ZodMap,
  ZodNaN: () => ZodNaN,
  ZodNativeEnum: () => ZodNativeEnum,
  ZodNever: () => ZodNever,
  ZodNull: () => ZodNull,
  ZodNullable: () => ZodNullable,
  ZodNumber: () => ZodNumber,
  ZodObject: () => ZodObject,
  ZodOptional: () => ZodOptional,
  ZodParsedType: () => ZodParsedType,
  ZodPipeline: () => ZodPipeline,
  ZodPromise: () => ZodPromise,
  ZodReadonly: () => ZodReadonly,
  ZodRecord: () => ZodRecord,
  ZodSchema: () => ZodType,
  ZodSet: () => ZodSet,
  ZodString: () => ZodString,
  ZodSymbol: () => ZodSymbol,
  ZodTransformer: () => ZodEffects,
  ZodTuple: () => ZodTuple,
  ZodType: () => ZodType,
  ZodUndefined: () => ZodUndefined,
  ZodUnion: () => ZodUnion,
  ZodUnknown: () => ZodUnknown,
  ZodVoid: () => ZodVoid,
  addIssueToContext: () => addIssueToContext,
  any: () => anyType,
  array: () => arrayType,
  bigint: () => bigIntType,
  boolean: () => booleanType,
  coerce: () => coerce,
  custom: () => custom,
  date: () => dateType,
  datetimeRegex: () => datetimeRegex,
  defaultErrorMap: () => en_default,
  discriminatedUnion: () => discriminatedUnionType,
  effect: () => effectsType,
  enum: () => enumType,
  function: () => functionType,
  getErrorMap: () => getErrorMap,
  getParsedType: () => getParsedType,
  instanceof: () => instanceOfType,
  intersection: () => intersectionType,
  isAborted: () => isAborted,
  isAsync: () => isAsync,
  isDirty: () => isDirty,
  isValid: () => isValid,
  late: () => late,
  lazy: () => lazyType,
  literal: () => literalType,
  makeIssue: () => makeIssue,
  map: () => mapType,
  nan: () => nanType,
  nativeEnum: () => nativeEnumType,
  never: () => neverType,
  null: () => nullType,
  nullable: () => nullableType,
  number: () => numberType,
  object: () => objectType,
  objectUtil: () => objectUtil,
  oboolean: () => oboolean,
  onumber: () => onumber,
  optional: () => optionalType,
  ostring: () => ostring,
  pipeline: () => pipelineType,
  preprocess: () => preprocessType,
  promise: () => promiseType,
  quotelessJson: () => quotelessJson,
  record: () => recordType,
  set: () => setType,
  setErrorMap: () => setErrorMap,
  strictObject: () => strictObjectType,
  string: () => stringType,
  symbol: () => symbolType,
  transformer: () => effectsType,
  tuple: () => tupleType,
  undefined: () => undefinedType,
  union: () => unionType,
  unknown: () => unknownType,
  util: () => util,
  void: () => voidType
});
var init_external = __esm({
  "node_modules/zod/dist/esm/v3/external.js"() {
    "use strict";
    init_errors();
    init_parseUtil();
    init_typeAliases();
    init_util();
    init_types();
    init_ZodError();
  }
});

// node_modules/zod/dist/esm/v3/index.js
var init_v3 = __esm({
  "node_modules/zod/dist/esm/v3/index.js"() {
    "use strict";
    init_external();
    init_external();
  }
});

// node_modules/zod/dist/esm/index.js
var init_esm = __esm({
  "node_modules/zod/dist/esm/index.js"() {
    "use strict";
    init_v3();
    init_v3();
  }
});

// src/controllers/campus/drives/driveController.ts
import mongoose22 from "mongoose";
import { Upload as Upload4 } from "@aws-sdk/lib-storage";
import { GetObjectCommand as GetObjectCommand5 } from "@aws-sdk/client-s3";
import { getSignedUrl as getSignedUrl4 } from "@aws-sdk/s3-request-presigner";
import crypto2 from "crypto";
var MAX_FILE_SIZE2, ALLOWED_FILE_EXTENSIONS, ObjectIdSchema, validateObjectId, validateFileUpload, generateSecureUrlSlug, createAuditLog, getDrives, getDrive, getDriveBySlug, createDrive, createWorkflow, updateAts, updateAssignment, updateInterview, publishDrive, deleteDrive, getAssignment, saveAssignmentSubmission, gradeAssignment, getAssignmentSubmission, getAppliedDrives, getCandidatesForDrive, endDrive, uploadOfferLetter, getOfferLetter, driveController_default;
var init_driveController = __esm({
  "src/controllers/campus/drives/driveController.ts"() {
    "use strict";
    init_Drive();
    init_checkInstitutePermission();
    init_sendResponse();
    init_logger();
    init_Institute();
    init_clerk();
    init_AssignmentSubmission();
    init_s3();
    init_loops();
    init_Candidate();
    init_AppliedDrive();
    init_sendNotification();
    init_PlacementGroup();
    init_esm();
    init_getUserWithPermission();
    MAX_FILE_SIZE2 = 5 * 1024 * 1024;
    ALLOWED_FILE_EXTENSIONS = /* @__PURE__ */ new Set([".pdf", ".doc", ".docx", ".zip"]);
    ObjectIdSchema = external_exports.string().refine((id) => mongoose22.Types.ObjectId.isValid(id), {
      message: "Invalid ObjectId format"
    });
    validateObjectId = (id) => {
      try {
        return ObjectIdSchema.parse(id) ? true : false;
      } catch (error) {
        return false;
      }
    };
    validateFileUpload = (file) => {
      if (!file) {
        return { valid: false, message: "No file provided" };
      }
      if (file.size > MAX_FILE_SIZE2) {
        return {
          valid: false,
          message: `File size exceeds maximum limit of ${MAX_FILE_SIZE2 / (1024 * 1024)}MB`
        };
      }
      const fileName = file.name || "";
      const fileExt = fileName.substring(fileName.lastIndexOf(".")).toLowerCase();
      if (!ALLOWED_FILE_EXTENSIONS.has(fileExt)) {
        return { valid: false, message: "File type not allowed" };
      }
      return { valid: true };
    };
    generateSecureUrlSlug = () => {
      return crypto2.randomBytes(16).toString("hex");
    };
    createAuditLog = async (c2, instituteId, action) => {
      try {
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const auditLog = {
          user: `${clerkUser.firstName || ""} ${clerkUser.lastName || ""}`.trim(),
          userId: clerkUser.id,
          action,
          type: "info"
        };
        await Institute_default.findByIdAndUpdate(instituteId, {
          $push: { auditLogs: auditLog }
        });
      } catch (error) {
        logger_default.warn(`Failed to create audit log: ${error}`);
      }
    };
    getDrives = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const page = parseInt(c2.req.query("page") || "1", 10);
        const limit = Math.min(parseInt(c2.req.query("limit") || "20", 10), 100);
        const skip = (page - 1) * limit;
        if (isNaN(page) || page < 1 || isNaN(limit) || limit < 1) {
          return sendError(c2, 400, "Invalid pagination parameters");
        }
        const totalDrives = await Drive_default.countDocuments({
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        });
        const drives = await Drive_default.find({
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        }).select(
          "title url published publishedOn company applicationRange hasEnded"
        ).populate("company", "name").sort({ updatedAt: -1 }).skip(skip).limit(limit);
        const institute = await Institute_default.findById(
          perms.data?.institute?._id
        ).select("departments");
        return sendSuccess(c2, 200, "Drives fetched successfully", {
          drives,
          departments: institute?.departments || [],
          pagination: {
            total: totalDrives,
            page,
            pages: Math.ceil(totalDrives / limit),
            limit
          }
        });
      } catch (e2) {
        logger_default.error(`Error in getDrives: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    getDrive = async (c2) => {
      try {
        const driveId = c2.req.param("id");
        if (!validateObjectId(driveId)) {
          return sendError(c2, 400, "Invalid drive ID format");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(driveId),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        }).populate("mcqAssessments.assessmentId").populate("codeAssessments.assessmentId").populate("candidates").populate({
          path: "candidates",
          populate: {
            path: "appliedDrives",
            model: "AppliedDrive"
          }
        }).populate("institute", "name departments").populate("company", "name").populate({
          path: "assignments.submissions",
          select: "-textSubmission"
        }).populate("interviews.interview").populate("hiredCandidates").populate("placementGroup", "name");
        if (!drive) {
          return sendError(c2, 404, "Drive not found");
        }
        return sendSuccess(c2, 200, "Drive fetched successfully", drive);
      } catch (e2) {
        logger_default.error(`Error in getDrive: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    getDriveBySlug = async (c2) => {
      try {
        const slug = c2.req.param("slug");
        if (!slug || slug.length < 8) {
          return sendError(c2, 400, "Invalid drive URL");
        }
        const authData = c2.get("auth");
        const userId = authData?._id;
        if (!userId) {
          return sendError(c2, 401, "Authentication required");
        }
        const drive = await Drive_default.findOne({ url: slug }).select("-ats.negativePrompts -ats.positivePrompts").populate("mcqAssessments.assessmentId", "title").populate("codeAssessments.assessmentId", "title").populate("candidates", "name email").populate("institute", "name").populate({
          path: "assignments.submissions",
          match: { candidateId: userId },
          select: "_id submittedAt grade"
        });
        if (!drive) {
          return sendError(c2, 404, "Drive not found");
        }
        const instituteUser = await Institute_default.findOne({
          _id: drive.institute?._id,
          "members.userId": userId
        });
        const isCandidate = await Candidate_default.exists({
          userId,
          institute: drive.institute?._id
        });
        if (!instituteUser && !isCandidate) {
          return sendError(c2, 403, "You don't have permission to view this drive");
        }
        return sendSuccess(c2, 200, "Drive fetched successfully", drive);
      } catch (e2) {
        logger_default.error(`Error in getDriveBySlug: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    createDrive = async (c2) => {
      try {
        if (!c2.req.header("content-type")?.includes("application/json")) {
          return sendError(c2, 415, "Unsupported Media Type: Expecting JSON");
        }
        const drive = await c2.req.json();
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          logger_default.warn("Unauthorized access attempt to create drive");
          return sendError(c2, 401, "Unauthorized");
        }
        if (!drive.placementGroup || !validateObjectId(drive.placementGroup)) {
          return sendError(c2, 400, "Valid placement group ID is required");
        }
        if (!drive.title || typeof drive.title !== "string" || drive.title.length < 3) {
          return sendError(
            c2,
            400,
            "Valid title is required (minimum 3 characters)"
          );
        }
        if (drive.additionalDetails) {
          try {
            Object.entries(drive.additionalDetails).forEach(
              ([category, fields]) => {
                Object.entries(fields).forEach(
                  ([field, config]) => {
                    if (typeof config.required !== "boolean" || typeof config.allowEmpty !== "boolean") {
                      throw new Error(
                        `Invalid configuration for ${category}.${field}`
                      );
                    }
                  }
                );
              }
            );
          } catch (error) {
            return sendError(
              c2,
              400,
              `Invalid additionalDetails structure: ${error}`
            );
          }
        }
        const placementGroup = await PlacementGroup_default.findById(drive.placementGroup);
        if (!placementGroup) {
          return sendError(c2, 404, "Placement group not found");
        }
        const newDrive = new Drive_default({
          ...drive,
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        });
        await newDrive.save();
        await Institute_default.findByIdAndUpdate(
          new mongoose22.Types.ObjectId(perms.data?.institute?._id),
          {
            $push: { drives: newDrive._id }
          }
        );
        await createAuditLog(
          c2,
          new mongoose22.Types.ObjectId(
            new mongoose22.Types.ObjectId(perms.data?.institute?._id)
          ),
          `Created New Drive: ${drive.title}`
        );
        const institute = await Institute_default.findById(perms.data?.institute?._id);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const notifyingUsers = await getUserWithPermission_default({
          institute,
          permissions: ["manage_drive"]
        });
        console.log("Notifying users:", notifyingUsers);
        if (notifyingUsers.length > 0) {
          await sendNotificationToCampus({
            userIds: notifyingUsers,
            title: "New Drive Created",
            message: `A new drive has been created for the position ${drive.title} at ${drive.company?.name}.`
          });
        }
        return sendSuccess(c2, 201, "Drive created successfully", newDrive);
      } catch (e2) {
        logger_default.error(`Error creating drive: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    createWorkflow = async (c2) => {
      try {
        if (!c2.req.header("content-type")?.includes("application/json")) {
          return sendError(c2, 415, "Unsupported Media Type: Expecting JSON");
        }
        const { formattedData, _id } = await c2.req.json();
        if (!formattedData || !_id || !validateObjectId(_id)) {
          return sendError(c2, 400, "Invalid request parameters");
        }
        if (!Array.isArray(formattedData.steps)) {
          return sendError(c2, 400, "Invalid workflow format");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(_id),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        });
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        drive.workflow = formattedData;
        await drive.save();
        await createAuditLog(
          c2,
          new mongoose22.Types.ObjectId(perms.data?.institute?._id),
          `Created New Workflow for Drive: ${drive.title}`
        );
        return sendSuccess(c2, 201, "Workflow created successfully", drive);
      } catch (e2) {
        logger_default.error(`Error in createWorkflow: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    updateAts = async (c2) => {
      try {
        if (!c2.req.header("content-type")?.includes("application/json")) {
          return sendError(c2, 415, "Unsupported Media Type: Expecting JSON");
        }
        const { minimumScore, negativePrompts, positivePrompts, _id } = await c2.req.json();
        if (!validateObjectId(_id)) {
          return sendError(c2, 400, "Invalid drive ID format");
        }
        if (typeof minimumScore !== "number" || minimumScore < 0 || minimumScore > 100) {
          return sendError(
            c2,
            400,
            "Minimum score must be a number between 0 and 100"
          );
        }
        if (!Array.isArray(positivePrompts) || !Array.isArray(negativePrompts)) {
          return sendError(c2, 400, "Prompts must be arrays");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(_id),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        });
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        if (!drive.ats) {
          drive.ats = {
            _id: new mongoose22.Types.ObjectId(),
            minimumScore,
            negativePrompts,
            positivePrompts,
            status: "pending",
            createdAt: /* @__PURE__ */ new Date(),
            updatedAt: /* @__PURE__ */ new Date()
          };
        } else {
          drive.ats.minimumScore = minimumScore;
          drive.ats.negativePrompts = negativePrompts;
          drive.ats.positivePrompts = positivePrompts;
          drive.ats.updatedAt = /* @__PURE__ */ new Date();
        }
        if (!drive.workflow) {
          return sendError(c2, 400, "Workflow not found, create workflow first");
        }
        const atsStepIndex = drive.workflow.steps.findIndex(
          (step) => step.type === "RESUME_SCREENING"
        );
        if (atsStepIndex >= 0 && drive.ats && drive.ats._id) {
          drive.workflow.steps[atsStepIndex]._id = new mongoose22.Types.ObjectId(
            drive.ats._id.toString()
          );
        }
        await drive.save();
        await createAuditLog(
          c2,
          new mongoose22.Types.ObjectId(perms.data?.institute?._id),
          `Updated ATS for Drive: ${drive.title}`
        );
        const sanitizedDrive = JSON.parse(JSON.stringify(drive.toObject()));
        if (sanitizedDrive.ats) {
          sanitizedDrive.ats.positivePrompts = [];
          sanitizedDrive.ats.negativePrompts = [];
        }
        return sendSuccess(c2, 200, "ATS updated successfully", sanitizedDrive);
      } catch (e2) {
        logger_default.error(`Error in updateAts: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    updateAssignment = async (c2) => {
      try {
        if (!c2.req.header("content-type")?.includes("application/json")) {
          return sendError(c2, 415, "Unsupported Media Type: Expecting JSON");
        }
        const { name, description, driveId, step, submissionType } = await c2.req.json();
        if (!name || typeof name !== "string" || !description || typeof description !== "string") {
          return sendError(c2, 400, "Name and description are required");
        }
        if (!validateObjectId(driveId)) {
          return sendError(c2, 400, "Invalid drive ID format");
        }
        if (typeof step !== "number" || step < 0) {
          return sendError(c2, 400, "Invalid step index");
        }
        if (!submissionType || !["text", "file", "link"].includes(submissionType)) {
          return sendError(
            c2,
            400,
            "Valid submissionType required (text, file, or link)"
          );
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(driveId),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        });
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        if (!drive.workflow) {
          return sendError(c2, 400, "Workflow not found, create workflow first");
        }
        if (!drive.workflow.steps || step >= drive.workflow.steps.length) {
          return sendError(c2, 400, "Invalid workflow step");
        }
        const _id = new mongoose22.Types.ObjectId();
        const workflowId = drive.workflow.steps[step]._id;
        drive.assignments.push({
          _id,
          name,
          description,
          workflowId,
          submissionType
        });
        await drive.save();
        await createAuditLog(
          c2,
          new mongoose22.Types.ObjectId(perms.data?.institute?._id),
          `Created New Assignment "${name}" for Drive: ${drive.title}`
        );
        return sendSuccess(c2, 201, "Assignment created successfully", drive);
      } catch (e2) {
        logger_default.error(`Error in updateAssignment: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    updateInterview = async (c2) => {
      try {
        if (!c2.req.header("content-type")?.includes("application/json")) {
          return sendError(c2, 415, "Unsupported Media Type: Expecting JSON");
        }
        const { driveId, step } = await c2.req.json();
        if (!validateObjectId(driveId)) {
          return sendError(c2, 400, "Invalid drive ID format");
        }
        if (typeof step !== "number" || step < 0) {
          return sendError(c2, 400, "Invalid step index");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(driveId),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        });
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        if (!drive.workflow) {
          return sendError(c2, 400, "Workflow not found, create workflow first");
        }
        if (!drive.workflow.steps || step >= drive.workflow.steps.length) {
          return sendError(c2, 400, "Invalid workflow step");
        }
        const _id = new mongoose22.Types.ObjectId();
        if (drive.workflow.steps[step]) {
          const workflowStep = drive.workflow.steps[step];
          workflowStep._id = _id;
        } else {
          return sendError(c2, 400, "Invalid step index");
        }
        await drive.save();
        await createAuditLog(
          c2,
          new mongoose22.Types.ObjectId(perms.data?.institute?._id),
          `Created New Interview for Drive: ${drive.title}`
        );
        return sendSuccess(c2, 201, "Interview created successfully", drive);
      } catch (e2) {
        logger_default.error(`Error in updateInterview: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    publishDrive = async (c2) => {
      try {
        if (!c2.req.header("content-type")?.includes("application/json")) {
          return sendError(c2, 415, "Unsupported Media Type: Expecting JSON");
        }
        const { id } = await c2.req.json();
        if (!validateObjectId(id)) {
          return sendError(c2, 400, "Invalid drive ID format");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(id),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        }).populate("institute", "name").populate("company", "name");
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        if (!drive.workflow || !drive.workflow.steps || drive.workflow.steps.length === 0) {
          return sendError(c2, 400, "Cannot publish drive without workflow");
        }
        const placementGroup = await PlacementGroup_default.findById(
          drive.placementGroup
        ).populate("candidates");
        if (!placementGroup) {
          return sendError(c2, 404, "Placement group not found");
        }
        if (!placementGroup.candidates || placementGroup.candidates.length === 0) {
          return sendError(
            c2,
            400,
            "Cannot publish drive with empty placement group"
          );
        }
        drive.published = true;
        drive.publishedOn = /* @__PURE__ */ new Date();
        let urlSlug;
        let isUnique = false;
        while (!isUnique) {
          urlSlug = generateSecureUrlSlug();
          const existingDrive = await Drive_default.findOne({ url: urlSlug });
          isUnique = !existingDrive;
        }
        drive.url = urlSlug;
        await drive.save();
        await createAuditLog(
          c2,
          new mongoose22.Types.ObjectId(perms.data?.institute?._id),
          `Published Drive: ${drive.title}`
        );
        if (!drive.applicationRange || !drive.applicationRange.end) {
          return sendError(c2, 400, "Application deadline is required");
        }
        if (placementGroup.candidates.length > 0) {
          const candidateIds = placementGroup.candidates.map(
            (c3) => c3._id?.toString()
          );
          const candidates = await Candidate_default.find({
            _id: { $in: candidateIds }
          });
          await sendNotificationToCandidate({
            candidateIds: candidates.map((c3) => c3.userId?.toString()),
            title: "New Drive Added",
            message: `A new drive has been created for the position ${drive.title} at ${drive.company?.name || "a company"}. Please check your campus drives dashboard for more details.`
          });
        }
        const institute = await Institute_default.findById(perms.data?.institute?._id);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const notifyingUsers = await getUserWithPermission_default({
          institute,
          permissions: ["manage_drive"]
        });
        if (notifyingUsers.length > 0) {
          await sendNotificationToCampus({
            userIds: notifyingUsers,
            title: "New Drive Published",
            message: `A new drive has been published for the position ${drive.title} at ${drive.company?.name}.`
          });
        }
        return sendSuccess(c2, 200, "Drive published successfully", drive);
      } catch (e2) {
        logger_default.error(`Error in publishDrive: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    deleteDrive = async (c2) => {
      try {
        const driveId = c2.req.param("id");
        if (!validateObjectId(driveId)) {
          return sendError(c2, 400, "Invalid drive ID format");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(driveId),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        }).populate("company", "name");
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        await createAuditLog(
          c2,
          new mongoose22.Types.ObjectId(perms.data?.institute?._id),
          `Deleted Drive: ${drive.title}`
        );
        await Institute_default.findByIdAndUpdate(
          new mongoose22.Types.ObjectId(perms.data?.institute?._id),
          {
            $pull: { drives: drive._id }
          }
        );
        await Drive_default.findByIdAndDelete(driveId);
        await AssignmentSubmission_default.deleteMany({
          driveId: new mongoose22.Types.ObjectId(driveId)
        });
        await AppliedDrive_default.deleteMany({
          drive: new mongoose22.Types.ObjectId(driveId)
        });
        const institute = await Institute_default.findById(perms.data?.institute?._id);
        const notifyingUsers = await getUserWithPermission_default({
          institute,
          permissions: ["manage_drive"]
        });
        if (notifyingUsers.length > 0) {
          await sendNotificationToCampus({
            userIds: notifyingUsers,
            title: "Drive Deleted",
            message: `The drive for the position ${drive.title} at ${drive.company?.name} has been deleted.`
          });
        }
        return sendSuccess(c2, 200, "Drive deleted successfully");
      } catch (e2) {
        logger_default.error(`Error in deleteDrive: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    getAssignment = async (c2) => {
      try {
        const { id, aid } = c2.req.param();
        if (!validateObjectId(id) || !validateObjectId(aid)) {
          return sendError(c2, 400, "Invalid ID format");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        let drive;
        if (perms.allowed) {
          drive = await Drive_default.findOne({
            _id: new mongoose22.Types.ObjectId(id),
            institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
          });
        } else {
          const authData = c2.get("auth");
          const userId = authData?._id;
          if (!userId) {
            return sendError(c2, 401, "Authentication required");
          }
          const candidate = await Candidate_default.findOne({ userId });
          if (!candidate) {
            return sendError(c2, 404, "Candidate not found");
          }
          drive = await Drive_default.findOne({
            _id: new mongoose22.Types.ObjectId(id),
            institute: candidate.institute,
            published: true
          });
        }
        if (!drive) {
          return sendError(c2, 404, "Drive not found or access denied");
        }
        const assignment = drive.assignments.find((a2) => a2._id?.toString() === aid);
        if (!assignment) {
          return sendError(c2, 404, "Assignment not found");
        }
        return sendSuccess(c2, 200, "Assignment fetched successfully", assignment);
      } catch (e2) {
        logger_default.error(`Error in getAssignment: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    saveAssignmentSubmission = async (c2) => {
      try {
        const { id, aid } = c2.req.param();
        if (!validateObjectId(id) || !validateObjectId(aid)) {
          return sendError(c2, 400, "Invalid ID format");
        }
        const authData = c2.get("auth");
        const userId = authData?._id;
        if (!userId) {
          return sendError(c2, 401, "Authentication required");
        }
        const user = await Candidate_default.findOne({ userId });
        if (!user) {
          return sendError(c2, 404, "User not found");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(id),
          published: true,
          institute: user.institute
        });
        if (!drive) {
          return sendError(c2, 404, "Drive not found or not published");
        }
        const assignment = drive.assignments.find((a2) => a2._id?.toString() === aid);
        if (!assignment) {
          return sendError(c2, 404, "Assignment not found");
        }
        const driveStep = drive.workflow?.steps.find(
          (step) => step._id?.toString() === assignment.workflowId?.toString()
        );
        if (!driveStep || driveStep.status !== "in-progress") {
          return sendError(
            c2,
            400,
            "Submission deadline has passed or step not active"
          );
        }
        const existingSubmission = await AssignmentSubmission_default.findOne({
          assignmentId: assignment._id,
          candidateId: userId
        });
        if (existingSubmission) {
          return sendError(c2, 409, "You have already submitted this assignment");
        }
        let textSubmission, linkSubmission;
        if (assignment.submissionType === "file") {
          if (!c2.req.header("content-type")?.includes("multipart/form-data")) {
            return sendError(c2, 415, "File upload requires multipart/form-data");
          }
          const formData = await c2.req.formData();
          const file = formData.get("file");
          const fileValidation = validateFileUpload(file);
          if (!fileValidation.valid) {
            return sendError(c2, 400, fileValidation.message || "Invalid file");
          }
          try {
            const fileKey = `${aid}/${userId}_${Date.now()}.zip`;
            const uploadParams = {
              Bucket: process.env.R2_S3_ASSIGNMENT_BUCKET,
              Key: fileKey,
              Body: file,
              ContentType: file?.type || "application/zip"
            };
            const upload = new Upload4({
              client: s3_default,
              params: uploadParams
            });
            await upload.done();
          } catch (uploadError) {
            logger_default.error(`File upload failed: ${uploadError}`);
            return sendError(c2, 500, "Failed to upload file");
          }
        } else if (assignment.submissionType === "text" || assignment.submissionType === "link") {
          if (!c2.req.header("content-type")?.includes("application/json")) {
            return sendError(c2, 415, "Text/link submissions require JSON");
          }
          const body = await c2.req.json();
          if (assignment.submissionType === "text") {
            if (!body.textSubmission || typeof body.textSubmission !== "string") {
              return sendError(c2, 400, "Text submission is required");
            }
            textSubmission = body.textSubmission;
          } else {
            if (!body.linkSubmission || typeof body.linkSubmission !== "string" || !body.linkSubmission.match(/^https?:\/\/.+/)) {
              return sendError(c2, 400, "Valid URL submission is required");
            }
            linkSubmission = body.linkSubmission;
          }
        }
        const submission = new AssignmentSubmission_default({
          driveId: drive._id,
          candidateId: userId,
          textSubmission,
          linkSubmission,
          submittedAt: /* @__PURE__ */ new Date()
        });
        assignment.submissions.push(submission._id);
        try {
          await loops_default.sendTransactionalEmail({
            transactionalId: "cm13tu50l02mc80gpi76joqvy",
            email: user.email,
            dataVariables: {
              institute: drive?.institute?.toString() || "the institute",
              assignmentName: assignment.name || "the assignment",
              driveName: drive.title || "the drive"
            }
          });
        } catch (emailError) {
          logger_default.warn(`Failed to send confirmation email: ${emailError}`);
        }
        const session = await mongoose22.startSession();
        session.startTransaction();
        try {
          await submission.save({ session });
          await drive.save({ session });
          await session.commitTransaction();
        } catch (error) {
          await session.abortTransaction();
          throw error;
        } finally {
          session.endSession();
        }
        return sendSuccess(c2, 201, "Submission saved successfully", {
          submissionId: submission._id,
          submittedAt: submission.createdAt
        });
      } catch (e2) {
        logger_default.error(`Error in saveAssignmentSubmission: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    gradeAssignment = async (c2) => {
      try {
        if (!c2.req.header("content-type")?.includes("application/json")) {
          return sendError(c2, 415, "Unsupported Media Type: Expecting JSON");
        }
        const { id, aid } = c2.req.param();
        const { grade, cid } = await c2.req.json();
        if (!validateObjectId(id) || !validateObjectId(aid) || !validateObjectId(cid)) {
          return sendError(c2, 400, "Invalid ID format");
        }
        if (typeof grade !== "number" || grade < 0 || grade > 100) {
          return sendError(c2, 400, "Grade must be a number between 0 and 100");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(id),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        });
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        const assignment = drive.assignments.find((a2) => a2._id?.toString() === aid);
        if (!assignment) {
          return sendError(c2, 404, "Assignment not found");
        }
        const submission = await AssignmentSubmission_default.findOne({
          assignmentId: assignment._id,
          candidateId: new mongoose22.Types.ObjectId(cid)
        });
        if (!submission) {
          return sendError(c2, 404, "Submission not found");
        }
        submission.grade = grade;
        await submission.save();
        await createAuditLog(
          c2,
          new mongoose22.Types.ObjectId(perms.data?.institute?._id),
          `Graded assignment submission for Drive: ${drive.title}`
        );
        return sendSuccess(c2, 200, "Grade saved successfully", {
          submissionId: submission._id,
          grade
        });
      } catch (e2) {
        logger_default.error(`Error in gradeAssignment: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    getAssignmentSubmission = async (c2) => {
      try {
        const { id, aid, sid } = c2.req.param();
        if (!validateObjectId(id) || !validateObjectId(aid) || !sid) {
          return sendError(c2, 400, "Invalid parameters");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(id),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        });
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        const assignment = drive.assignments.find((a2) => a2._id?.toString() === aid);
        if (!assignment) {
          return sendError(c2, 404, "Assignment not found");
        }
        try {
          if (!/^[a-zA-Z0-9_-]+$/.test(sid)) {
            return sendError(c2, 400, "Invalid submission ID format");
          }
          const command = new GetObjectCommand5({
            Bucket: process.env.R2_S3_ASSIGNMENT_BUCKET,
            Key: `${aid}/${sid}.zip`
          });
          const url = await getSignedUrl4(s3_default, command, { expiresIn: 300 });
          return sendSuccess(c2, 200, "File URL generated", { url });
        } catch (e2) {
          logger_default.error(`Failed to generate signed URL: ${e2}`);
          return sendError(c2, 500, "Failed to generate file access URL");
        }
      } catch (e2) {
        logger_default.error(`Error in getAssignmentSubmission: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    getAppliedDrives = async (c2) => {
      try {
        const driveId = c2.req.param("id");
        if (!validateObjectId(driveId)) {
          return sendError(c2, 400, "Invalid drive ID format");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(driveId),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        });
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        const page = parseInt(c2.req.query("page") || "1", 10);
        const limit = Math.min(parseInt(c2.req.query("limit") || "20", 10), 100);
        const skip = (page - 1) * limit;
        const totalApplications = await AppliedDrive_default.countDocuments({
          drive: new mongoose22.Types.ObjectId(driveId)
        });
        const appliedDrives = await AppliedDrive_default.find({
          drive: new mongoose22.Types.ObjectId(driveId)
        }).populate({
          path: "drive",
          select: "title company"
        }).populate({
          path: "user",
          select: "name email profileImage"
        }).sort({ appliedAt: -1 }).skip(skip).limit(limit);
        return sendSuccess(c2, 200, "Applied drives fetched successfully", {
          applications: appliedDrives,
          pagination: {
            total: totalApplications,
            page,
            pages: Math.ceil(totalApplications / limit),
            limit
          }
        });
      } catch (e2) {
        logger_default.error(`Error in getAppliedDrives: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    getCandidatesForDrive = async (c2) => {
      try {
        const driveId = c2.req.param("id");
        if (!validateObjectId(driveId)) {
          return sendError(c2, 400, "Invalid drive ID format");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(driveId),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        }).populate(
          "candidates",
          "name email department phone instituteUid resumeUrl status"
        ).lean();
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        if (!drive.candidates || !Array.isArray(drive.candidates)) {
          return sendError(c2, 404, "No candidates found for this drive");
        }
        const page = parseInt(c2.req.query("page") || "1", 10);
        const limit = Math.min(parseInt(c2.req.query("limit") || "10", 10), 200);
        const searchQuery = c2.req.query("search");
        let filteredCandidates = drive.candidates;
        if (searchQuery && searchQuery.trim()) {
          const searchRegex = new RegExp(searchQuery, "i");
          filteredCandidates = filteredCandidates.filter((candidate) => {
            return searchRegex.test(candidate.name) || searchRegex.test(candidate.email) || searchRegex.test(candidate.instituteUid) || searchRegex.test(candidate.phone) || searchRegex.test(candidate.department);
          });
        }
        const total = filteredCandidates.length;
        const paginatedCandidates = filteredCandidates;
        const candidates = [];
        for (const candidate of paginatedCandidates) {
          const appliedPosting = await AppliedDrive_default.findOne({
            user: candidate._id,
            drive: new mongoose22.Types.ObjectId(driveId)
          });
          if (appliedPosting) {
            candidates.push({
              ...candidate,
              appliedPostingId: appliedPosting._id,
              status: appliedPosting.status
            });
          }
        }
        const lastUpdated = (/* @__PURE__ */ new Date()).toISOString();
        const updatedBy = c2.get("user")?.login || "system";
        return sendSuccess(c2, 200, "Candidates fetched successfully", {
          candidates,
          pagination: {
            total,
            page,
            pages: Math.ceil(total / limit),
            limit
          },
          meta: {
            lastUpdated,
            updatedBy
          }
        });
      } catch (e2) {
        logger_default.error(`Error in getCandidatesForDrive: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    endDrive = async (c2) => {
      try {
        if (!c2.req.header("content-type")?.includes("application/json")) {
          return sendError(c2, 415, "Unsupported Media Type: Expecting JSON");
        }
        const { driveId } = await c2.req.json();
        if (!validateObjectId(driveId)) {
          return sendError(c2, 400, "Invalid drive ID format");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(driveId),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        }).populate("institute", "name").populate("company", "name");
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        if (drive.hasEnded) {
          return sendError(c2, 400, "Drive has already ended");
        }
        const session = await mongoose22.startSession();
        session.startTransaction();
        try {
          drive.hasEnded = true;
          if (drive.workflow?.steps) {
            drive.workflow.steps.forEach((step) => {
              step.status = "completed";
            });
          }
          const appliedDrives = await AppliedDrive_default.find({
            drive: new mongoose22.Types.ObjectId(driveId),
            status: { $in: ["applied", "inprogress", "hired"] }
          }).session(session);
          const candidateIds = appliedDrives.map(
            (applied) => applied.user.toString()
          );
          if (appliedDrives.length > 0) {
            await Promise.all(
              appliedDrives.map(async (applied) => {
                applied.status = "hired";
                drive.hiredCandidates.push(applied.user);
                return applied.save({ session });
              })
            );
          }
          await drive.save({ session });
          await session.commitTransaction();
          if (candidateIds.length > 0) {
            const candidates = await Candidate_default.find({
              _id: {
                $in: candidateIds.map((id) => new mongoose22.Types.ObjectId(id))
              }
            });
            await sendNotificationToCandidate({
              candidateIds: candidates.map((c3) => c3.userId?.toString()),
              title: "Upload Offer Letter",
              message: `Congratulations for being selected as ${drive.title} at ${drive.company?.name || "the company"}. Please upload your offer letter as soon as possible via the drive dashboard.`
            });
          }
          await createAuditLog(
            c2,
            new mongoose22.Types.ObjectId(perms.data?.institute?._id),
            `Ended Drive: ${drive.title} with ${drive.hiredCandidates.length} hired candidates`
          );
          const institute = await Institute_default.findById(perms.data?.institute?._id);
          if (!institute) {
            return sendError(c2, 404, "Institute not found");
          }
          const notifyingUsers = await getUserWithPermission_default({
            institute,
            permissions: ["manage_drive"]
          });
          if (notifyingUsers.length > 0) {
            await sendNotificationToCampus({
              userIds: notifyingUsers,
              title: "Drive Ended",
              message: `The drive for the position ${drive.title} at ${drive.company?.name} has ended.`
            });
          }
          return sendSuccess(c2, 200, "Drive ended successfully", {
            driveId: drive._id,
            hiredCount: drive.hiredCandidates.length
          });
        } catch (error) {
          await session.abortTransaction();
          throw error;
        } finally {
          session.endSession();
        }
      } catch (e2) {
        logger_default.error(`Error in endDrive: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    uploadOfferLetter = async (c2) => {
      try {
        if (!c2.req.header("content-type")?.includes("multipart/form-data")) {
          return sendError(
            c2,
            415,
            "Unsupported Media Type: Expecting multipart/form-data"
          );
        }
        const authData = c2.get("auth");
        const userId = authData?._id;
        if (!userId) {
          return sendError(c2, 401, "Authentication required");
        }
        const formData = await c2.req.formData();
        const file = formData.get("file");
        const id = formData.get("driveId")?.toString();
        const ctc = formData.get("ctc")?.toString();
        if (!file || !id || !ctc) {
          return sendError(c2, 400, "Missing required fields (file, driveId, ctc)");
        }
        if (!validateObjectId(id)) {
          return sendError(c2, 400, "Invalid drive ID format");
        }
        const ctcNumber = Number(ctc);
        if (isNaN(ctcNumber) || ctcNumber <= 0) {
          return sendError(c2, 400, "CTC must be a positive number");
        }
        const fileValidation = validateFileUpload(file);
        if (!fileValidation.valid) {
          return sendError(c2, 400, fileValidation.message || "Invalid file");
        }
        const candidate = await Candidate_default.findOne({ userId });
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        const drive = await Drive_default.findById(id);
        if (!drive) {
          return sendError(c2, 404, "Drive not found");
        }
        if (!drive.hasEnded) {
          return sendError(c2, 400, "Drive has not ended yet");
        }
        const appliedDrive = await AppliedDrive_default.findOne({
          user: candidate._id,
          drive: new mongoose22.Types.ObjectId(id)
        });
        if (!appliedDrive) {
          return sendError(c2, 404, "You haven't applied to this drive");
        }
        if (appliedDrive.status !== "hired") {
          return sendError(
            c2,
            400,
            "Only hired candidates can upload offer letters"
          );
        }
        appliedDrive.salary = ctcNumber;
        const fileKey = `${id}/${candidate._id}_${Date.now()}`;
        try {
          const uploadParams = {
            Bucket: process.env.R2_S3_OFFERLETTER_BUCKET,
            Key: fileKey,
            Body: file,
            ContentType: file.type || "application/pdf"
          };
          const upload = new Upload4({
            client: s3_default,
            params: uploadParams
          });
          await upload.done();
        } catch (uploadError) {
          logger_default.error(`File upload failed: ${uploadError}`);
          return sendError(c2, 500, "Failed to upload offer letter");
        }
        const session = await mongoose22.startSession();
        session.startTransaction();
        try {
          if (!drive.offerLetters) {
            drive.offerLetters = [candidate._id];
          } else if (!drive.offerLetters.includes(candidate._id)) {
            drive.offerLetters.push(candidate._id);
          }
          appliedDrive.offerLetterKey = fileKey;
          appliedDrive.offerLetterUploadedAt = /* @__PURE__ */ new Date();
          await drive.save({ session });
          await appliedDrive.save({ session });
          await session.commitTransaction();
        } catch (error) {
          await session.abortTransaction();
          throw error;
        } finally {
          session.endSession();
        }
        return sendSuccess(c2, 200, "Offer letter uploaded successfully", {
          uploadedAt: appliedDrive.offerLetterUploadedAt
        });
      } catch (e2) {
        logger_default.error(`Error in uploadOfferLetter: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    getOfferLetter = async (c2) => {
      try {
        const { did, id } = c2.req.param();
        if (!validateObjectId(did) || !validateObjectId(id)) {
          return sendError(c2, 400, "Invalid ID format");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const drive = await Drive_default.findOne({
          _id: new mongoose22.Types.ObjectId(did),
          institute: new mongoose22.Types.ObjectId(perms.data?.institute?._id)
        });
        if (!drive) {
          return sendError(c2, 404, "Drive not found or you don't have permission");
        }
        const candidate = await Candidate_default.findOne({ _id: id });
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        if (!drive.offerLetters?.includes(candidate._id)) {
          return sendError(
            c2,
            404,
            "Candidate has not uploaded an offer letter yet"
          );
        }
        const appliedDrive = await AppliedDrive_default.findOne({
          drive: new mongoose22.Types.ObjectId(did),
          user: new mongoose22.Types.ObjectId(id)
        });
        if (!appliedDrive || !appliedDrive.offerLetterKey && !candidate.isSample) {
          return sendError(c2, 404, "Offer letter record not found");
        }
        try {
          const command = new GetObjectCommand5({
            Bucket: process.env.R2_S3_OFFERLETTER_BUCKET,
            Key: appliedDrive.offerLetterKey || ""
          });
          const url = candidate?.isSample ? "https://www.peoplebox.ai//wp-content/uploads/2024/09/Job-offer-letter-sample.webp" : await getSignedUrl4(s3_default, command, { expiresIn: 300 });
          return sendSuccess(c2, 200, "File URL generated", {
            url,
            uploadedAt: appliedDrive.offerLetterUploadedAt,
            salary: appliedDrive.salary
          });
        } catch (e2) {
          logger_default.error(`Failed to generate signed URL: ${e2}`);
          return sendError(c2, 500, "Failed to generate file access URL");
        }
      } catch (e2) {
        logger_default.error(`Error in getOfferLetter: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    driveController_default = {
      getDrives,
      getDrive,
      createDrive,
      createWorkflow,
      updateAts,
      updateAssignment,
      updateInterview,
      publishDrive,
      deleteDrive,
      getDriveBySlug,
      getAssignment,
      saveAssignmentSubmission,
      gradeAssignment,
      getAssignmentSubmission,
      getAppliedDrives,
      getCandidatesForDrive,
      endDrive,
      uploadOfferLetter,
      getOfferLetter
    };
  }
});

// node_modules/uuid/dist/esm/stringify.js
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}
var byteToHex;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm/stringify.js"() {
    "use strict";
    byteToHex = [];
    for (let i2 = 0; i2 < 256; ++i2) {
      byteToHex.push((i2 + 256).toString(16).slice(1));
    }
  }
});

// node_modules/uuid/dist/esm/rng.js
import { randomFillSync } from "crypto";
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm/rng.js"() {
    "use strict";
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// node_modules/uuid/dist/esm/native.js
import { randomUUID } from "crypto";
var native_default;
var init_native = __esm({
  "node_modules/uuid/dist/esm/native.js"() {
    "use strict";
    native_default = { randomUUID };
  }
});

// node_modules/uuid/dist/esm/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random ?? options.rng?.() ?? rng();
  if (rnds.length < 16) {
    throw new Error("Random bytes length must be >= 16");
  }
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    if (offset < 0 || offset + 16 > buf.length) {
      throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
    }
    for (let i2 = 0; i2 < 16; ++i2) {
      buf[offset + i2] = rnds[i2];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm/v4.js"() {
    "use strict";
    init_native();
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm/index.js
var init_esm2 = __esm({
  "node_modules/uuid/dist/esm/index.js"() {
    "use strict";
    init_v4();
  }
});

// src/models/Meet.ts
import mongoose23 from "mongoose";
var meetSchema, Meet, Meet_default;
var init_Meet = __esm({
  "src/models/Meet.ts"() {
    "use strict";
    init_softDelete();
    meetSchema = new mongoose23.Schema({
      candidates: {
        type: [mongoose23.Schema.Types.ObjectId],
        ref: "Candidate"
      },
      completed: { type: [mongoose23.Schema.Types.ObjectId], ref: "Candidate" },
      current: { type: mongoose23.Schema.Types.ObjectId, ref: "Candidate" },
      interviewers: { type: [mongoose23.Schema.Types.ObjectId], ref: "User" },
      code: { type: String }
    });
    meetSchema.plugin(softDeletePlugin);
    Meet = mongoose23.model("Meet", meetSchema);
    Meet_default = Meet;
  }
});

// src/controllers/campus/workflow/instituteWorkflowController.ts
import { InvokeCommand as InvokeCommand2, LambdaClient as LambdaClient2 } from "@aws-sdk/client-lambda";
import mongoose24 from "mongoose";
var REGION2, RequestSchema, advanceWorkflow, handleResumeScreening, handleAssignmentRound, handleAssessmentRound, handleCustomRound, handleInterviewRound, logWorkflowAdvance, instituteWorkflowController_default;
var init_instituteWorkflowController = __esm({
  "src/controllers/campus/workflow/instituteWorkflowController.ts"() {
    "use strict";
    init_loops();
    init_clerk();
    init_esm2();
    init_esm();
    init_Drive();
    init_Institute();
    init_Candidate();
    init_sendResponse();
    init_checkInstitutePermission();
    init_User();
    init_Meet();
    init_AppliedDrive();
    init_getUserWithPermission();
    init_sendNotification();
    REGION2 = "ap-south-1";
    RequestSchema = external_exports.object({
      _id: external_exports.string().regex(/^[0-9a-fA-F]{24}$/, "Invalid MongoDB ObjectId format")
    });
    advanceWorkflow = async (c2) => {
      try {
        const bodyResult = RequestSchema.safeParse(await c2.req.json());
        if (!bodyResult.success) {
          return sendError(c2, 400, "Invalid request data", bodyResult.error);
        }
        const { _id } = bodyResult.data;
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized to manage drives");
        }
        const authUserId = c2.get("auth")?._id;
        if (!authUserId) {
          return sendError(c2, 401, "Authentication required");
        }
        const user = await User_default.findById(authUserId);
        if (!user) {
          return sendError(c2, 404, "User not found");
        }
        const session = await mongoose24.startSession();
        session.startTransaction();
        try {
          const drive = await Drive_default.findById(_id).populate("candidates").session(session);
          if (!drive) {
            await session.abortTransaction();
            session.endSession();
            return sendError(c2, 404, "Drive not found");
          }
          if (drive.institute && perms.data?.institute?._id && drive.institute.toString() !== perms.data.institute._id.toString()) {
            await session.abortTransaction();
            session.endSession();
            return sendError(c2, 403, "Not authorized to manage this drive");
          }
          const workflow = drive?.workflow;
          if (!workflow || !Array.isArray(workflow.steps) || workflow.steps.length === 0) {
            await session.abortTransaction();
            session.endSession();
            return sendError(c2, 400, "Invalid workflow configuration");
          }
          const currentStepIndex = workflow.steps.findIndex(
            (step) => step.status === "in-progress"
          );
          if (currentStepIndex === -1 && workflow.steps.every((step) => step.status === "completed")) {
            await session.abortTransaction();
            session.endSession();
            return sendError(c2, 400, "Workflow already completed");
          }
          if (currentStepIndex === -1) {
            workflow.steps[0].status = "in-progress";
            workflow.steps[0].schedule = {
              ...workflow.steps[0].schedule,
              startTime: /* @__PURE__ */ new Date()
            };
            workflow.steps[0].startedBy = authUserId;
          } else {
            workflow.steps[currentStepIndex].status = "completed";
            workflow.steps[currentStepIndex].schedule = {
              ...workflow.steps[currentStepIndex].schedule,
              actualCompletionTime: /* @__PURE__ */ new Date()
            };
            if (currentStepIndex + 1 < workflow.steps.length) {
              workflow.steps[currentStepIndex + 1].status = "in-progress";
              workflow.steps[currentStepIndex + 1].schedule = {
                ...workflow.steps[currentStepIndex + 1].schedule,
                startTime: /* @__PURE__ */ new Date()
              };
              workflow.steps[currentStepIndex + 1].startedBy = authUserId;
            } else {
              drive.set("status", "completed");
            }
          }
          const nextStepIndex = currentStepIndex === -1 ? 0 : currentStepIndex + 1;
          if (nextStepIndex < workflow.steps.length) {
            const currentStep = workflow.steps[nextStepIndex];
            try {
              switch (currentStep.type) {
                case "RESUME_SCREENING":
                  await handleResumeScreening(
                    drive,
                    perms.data.institute?._id,
                    session
                  );
                  break;
                case "ASSIGNMENT":
                  await handleAssignmentRound(drive, currentStep, session);
                  break;
                case "CODING_ASSESSMENT":
                case "MCQ_ASSESSMENT":
                  await handleAssessmentRound(drive, currentStep, session);
                  break;
                case "INTERVIEW":
                  await handleInterviewRound(
                    drive,
                    currentStep,
                    session,
                    authUserId
                  );
                  break;
                case "CUSTOM":
                  await handleCustomRound(drive, session);
                  break;
                default:
                  console.warn(`Unhandled step type: ${currentStep.type}`);
              }
            } catch (stepError) {
              const errorMessage = stepError instanceof Error ? stepError.message : "Unknown error";
              console.error(
                `Error handling step type ${currentStep.type}:`,
                stepError
              );
              await session.abortTransaction();
              session.endSession();
              return sendError(
                c2,
                500,
                `Error processing workflow step: ${errorMessage}`
              );
            }
          }
          await drive.save({ session });
          await logWorkflowAdvance(c2, drive, perms, session);
          await session.commitTransaction();
          session.endSession();
          const updatedDrive = await Drive_default.findById(_id).populate("candidates").populate("institute");
          const institute = await Institute_default.findById(drive.institute);
          if (!institute) {
            return sendError(c2, 404, "Institute not found");
          }
          const notifyingUsers = await getUserWithPermission_default({
            institute,
            permissions: ["manage_drive"]
          });
          if (notifyingUsers.length > 0) {
            await sendNotificationToCampus({
              userIds: notifyingUsers,
              title: "Drive Workflow Advanced",
              message: `The workflow for drive "${drive.title}" has been advanced to the next step.`
            });
          }
          return sendSuccess(
            c2,
            200,
            "Workflow advanced successfully",
            updatedDrive
          );
        } catch (txError) {
          await session.abortTransaction();
          session.endSession();
          throw txError;
        }
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Unknown error";
        console.error("Workflow advancement error:", error);
        return sendError(c2, 500, "Internal Server Error", {
          message: errorMessage
        });
      }
    };
    handleResumeScreening = async (drive, orgId, session) => {
      if (!orgId) {
        throw new Error("Organization ID is required for resume screening");
      }
      await Drive_default.findByIdAndUpdate(
        drive._id,
        { "ats.status": "processing" },
        { session }
      );
      const resumes = await Promise.all(
        drive.candidates.map(async (candidateId) => {
          const candidate = await Candidate_default.findById(candidateId).session(
            session
          );
          if (!candidate || !candidate.resumeExtract) {
            return null;
          }
          return {
            candidateId: candidate._id.toString(),
            resume: candidate.resumeExtract
          };
        })
      );
      const validResumes = resumes.filter(Boolean);
      if (validResumes.length === 0) {
        throw new Error("No valid resumes found for screening");
      }
      const org = await Institute_default.findById(orgId).populate("members.user").session(session);
      if (!org) {
        throw new Error("Institute not found");
      }
      const step = drive.workflow.steps.find(
        (step2) => step2.type === "RESUME_SCREENING"
      );
      if (!step || !step.startedBy) {
        throw new Error("Resume screening step not properly initialized");
      }
      const member = org.members.find(
        (member2) => member2.user && member2.user._id.toString() === step.startedBy.toString()
      );
      if (!member) {
        throw new Error("Step initiator not found in institute members");
      }
      const dbUser = await User_default.findById(member.user?._id).session(session);
      if (!dbUser || !dbUser.clerkId) {
        throw new Error("User data incomplete for resume screening notification");
      }
      const clerkUser = await clerk_default.users.getUser(dbUser.clerkId);
      const requestId = v4_default();
      const event = {
        requestId,
        driveDescription: drive.description || "",
        skills: Array.isArray(drive.skills) ? drive.skills.join(",") : "",
        negativePrompts: Array.isArray(drive.ats?.negativePrompts) ? drive.ats.negativePrompts.join(",") : "",
        positivePrompts: Array.isArray(drive.ats?.positivePrompts) ? drive.ats.positivePrompts.join(",") : "",
        driveId: drive._id.toString(),
        resumes: validResumes,
        mailData: {
          name: `${clerkUser.firstName || ""} ${clerkUser.lastName || ""}`.trim() || "User",
          email: member.email || dbUser.email,
          drive: drive.title,
          resumeScreenUrl: `${process.env.ENTERPRISE_FRONTEND_URL}/drives/${drive.url}/ats`
        }
      };
      try {
        const lambdaClient = new LambdaClient2({
          region: REGION2,
          // Best practice: Use IAM roles instead of hard-coded credentials
          // If credentials must be used, they should be fetched from a secure service
          credentials: {
            accessKeyId: process.env.AWS_LAMBDA_ACCESS_KEY_ID,
            secretAccessKey: process.env.AWS_LAMBDA_SECRET_ACCESS_KEY
          }
        });
        await lambdaClient.send(
          new InvokeCommand2({
            FunctionName: "resume-screener",
            Payload: JSON.stringify(event),
            ClientContext: JSON.stringify({
              requestId,
              source: "workflow-engine",
              driveId: drive._id.toString()
            })
          })
        );
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Unknown error";
        console.error("Lambda invocation error:", error);
        throw new Error(`Failed to initiate resume screening: ${errorMessage}`);
      }
    };
    handleAssignmentRound = async (drive, step, session) => {
      if (!step || !step.name) {
        throw new Error("Invalid assignment step configuration");
      }
      const assignment = drive.assignments?.find(
        (a2) => a2.name === step.name
      );
      if (!assignment) {
        throw new Error(`Assignment "${step.name}" not found in drive`);
      }
      const institute = await Institute_default.findById(drive.institute).session(session);
      if (!institute) {
        throw new Error("Institute not found");
      }
      const candidates = await Candidate_default.find({
        _id: { $in: drive.candidates },
        "appliedDrives.drive": drive._id,
        "appliedDrives.status": { $ne: "rejected" }
      }).session(session);
      if (candidates.length === 0) {
        console.warn(`No eligible candidates found for assignment "${step.name}"`);
        return;
      }
      await AppliedDrive_default.updateMany(
        {
          drive: drive._id,
          candidate: { $in: candidates.map((c2) => c2._id) },
          status: { $ne: "rejected" }
        },
        { $set: { status: "assignment" } },
        { session }
      );
      const BATCH_SIZE = 50;
      const candidateBatches = [];
      for (let i2 = 0; i2 < candidates.length; i2 += BATCH_SIZE) {
        candidateBatches.push(candidates.slice(i2, i2 + BATCH_SIZE));
      }
      for (const batch of candidateBatches) {
        try {
          await Promise.all(
            batch.map(
              (candidate) => loops_default.sendTransactionalEmail({
                transactionalId: "cm0zk1vd900966e8e6czepc4d",
                email: candidate.email,
                dataVariables: {
                  name: candidate.name,
                  driveName: drive.title,
                  company: institute.name,
                  assignmentLink: `${process.env.CANDIDATE_FRONTEND_URL}/drives/${drive._id}/assignments/${assignment._id}`
                }
              }).catch((err) => {
                console.error(`Failed to send email to ${candidate.email}:`, err);
              })
            )
          );
          if (batch !== candidateBatches[candidateBatches.length - 1]) {
            await new Promise((resolve) => setTimeout(resolve, 2e3));
          }
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : "Unknown error";
          console.error("Error sending assignment emails:", error);
          throw new Error(`Failed to send assignment emails: ${errorMessage}`);
        }
      }
    };
    handleAssessmentRound = async (drive, step, session) => {
      if (!step || !step._id) {
        throw new Error("Invalid assessment step configuration");
      }
      const isCodeAssessment = step.type === "CODING_ASSESSMENT";
      const assessmentType = isCodeAssessment ? "codeAssessments" : "mcqAssessments";
      const assessment = drive[assessmentType]?.find(
        (a2) => a2.workflowId && a2.workflowId.toString() === step._id.toString()
      );
      if (!assessment) {
        throw new Error(
          `${isCodeAssessment ? "Coding" : "MCQ"} assessment not found for step ${step.name}`
        );
      }
      if (!assessment.assessmentId) {
        throw new Error(`Assessment ID is missing for ${step.name}`);
      }
      const institute = await Institute_default.findById(drive.institute).session(session);
      if (!institute) {
        throw new Error("Institute not found");
      }
      const candidates = await Candidate_default.find({
        _id: { $in: drive.candidates },
        "appliedDrives.drive": drive._id,
        "appliedDrives.status": { $ne: "rejected" }
      }).session(session);
      if (candidates.length === 0) {
        console.warn(`No eligible candidates found for assessment "${step.name}"`);
        return;
      }
      await AppliedDrive_default.updateMany(
        {
          drive: drive._id,
          candidate: { $in: candidates.map((c2) => c2._id) },
          status: { $ne: "rejected" }
        },
        { $set: { status: "assessment" } },
        { session }
      );
      const assessmentDisplayType = isCodeAssessment ? "Coding" : "MCQ";
      const typeCode = isCodeAssessment ? "c" : "m";
      const BATCH_SIZE = 50;
      for (let i2 = 0; i2 < candidates.length; i2 += BATCH_SIZE) {
        const batch = candidates.slice(i2, i2 + BATCH_SIZE);
        try {
          await Promise.all(
            batch.map(
              (candidate) => loops_default.sendTransactionalEmail({
                transactionalId: "cm16lbamn012iyfq0agp9wl54",
                email: candidate.email,
                dataVariables: {
                  name: candidate.name,
                  postingName: drive.title,
                  type: assessmentDisplayType,
                  assessmentLink: `${process.env.SCRIPTOPIA_FRONTEND_URL}/assessments/${typeCode}/${assessment.assessmentId}`,
                  company: institute.name
                }
              }).catch((err) => {
                console.error(`Failed to send email to ${candidate.email}:`, err);
              })
            )
          );
          if (i2 + BATCH_SIZE < candidates.length) {
            await new Promise((resolve) => setTimeout(resolve, 2e3));
          }
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : "Unknown error";
          console.error("Error sending assessment emails:", error);
          throw new Error(`Failed to send assessment emails: ${errorMessage}`);
        }
      }
    };
    handleCustomRound = async (drive, session) => {
      if (!drive._id) {
        throw new Error("Drive ID is required");
      }
      const result = await AppliedDrive_default.updateMany(
        {
          drive: drive._id,
          status: { $ne: "rejected" }
        },
        {
          $set: { status: "inprogress" }
        },
        { session }
      );
      if (result.modifiedCount === 0) {
        console.warn("No candidate applications were updated for the custom round");
      }
      return result;
    };
    handleInterviewRound = async (drive, step, session, userId) => {
      if (!step || !step._id) {
        throw new Error("Invalid interview step configuration");
      }
      const interviewConfig = drive.interviews?.find(
        (interview2) => interview2.workflowId && interview2.workflowId.toString() === step._id.toString()
      );
      if (!interviewConfig) {
        throw new Error(
          `Interview configuration not found for step ${step.name || "unknown"}`
        );
      }
      if (!interviewConfig.interview) {
        throw new Error(
          `Interview ID is missing for step ${step.name || "unknown"}`
        );
      }
      const institute = await Institute_default.findById(drive.institute).session(session);
      if (!institute) {
        throw new Error("Institute not found");
      }
      const interview = await Meet_default.findById(interviewConfig.interview).session(
        session
      );
      if (!interview) {
        throw new Error(
          `Interview record not found with ID ${interviewConfig.interview}`
        );
      }
      const candidates = await Candidate_default.find({
        _id: { $in: drive.candidates },
        "appliedDrives.drive": drive._id,
        "appliedDrives.status": { $ne: "rejected" }
      }).session(session);
      if (candidates.length === 0) {
        console.warn(
          `No eligible candidates found for interview "${step.name || "unknown"}"`
        );
        return;
      }
      await AppliedDrive_default.updateMany(
        {
          drive: drive._id,
          candidate: { $in: candidates.map((c2) => c2._id) },
          status: { $ne: "rejected" }
        },
        { $set: { status: "interview" } },
        { session }
      );
      const existingCandidateIds = interview.candidates.map(
        (id) => id.toString()
      );
      for (const candidate of candidates) {
        if (!existingCandidateIds.includes(candidate._id.toString())) {
          interview.candidates.push(candidate._id);
        }
      }
      let interviewer;
      const hiringManager = institute.members.find(
        (member) => member.role === "hiring_manager" && member.user
      );
      if (hiringManager?.user) {
        interviewer = hiringManager.user;
      } else if (userId) {
        interviewer = userId;
      } else {
        const admin = institute.members.find(
          (member) => (member.role === "admin" || member.role === "owner") && member.user
        );
        if (admin?.user) {
          interviewer = admin.user;
        }
      }
      if (interviewer) {
        if (!interview.interviewers.some(
          (id) => id.toString() === interviewer.toString()
        )) {
          interview.interviewers.push(new mongoose24.Types.ObjectId(interviewer));
        }
      }
      await interview.save({ session });
      const BATCH_SIZE = 50;
      for (let i2 = 0; i2 < candidates.length; i2 += BATCH_SIZE) {
        const batch = candidates.slice(i2, i2 + BATCH_SIZE);
        try {
          await Promise.all(
            batch.map(
              (candidate) => loops_default.sendTransactionalEmail({
                transactionalId: "cm84on6wm06v3e9gl6a2hm0j8",
                email: candidate.email,
                dataVariables: {
                  name: candidate.name,
                  driveName: drive.title,
                  interviewLink: `${process.env.MEET_FRONTEND_URL}/v3/${interview.code}`,
                  company: institute.name
                }
              }).catch((err) => {
                console.error(
                  `Failed to send interview invitation to ${candidate.email}:`,
                  err
                );
              })
            )
          );
          if (i2 + BATCH_SIZE < candidates.length) {
            await new Promise((resolve) => setTimeout(resolve, 2e3));
          }
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : "Unknown error";
          console.error("Error sending interview invitations:", error);
          throw new Error(`Failed to send interview invitations: ${errorMessage}`);
        }
      }
    };
    logWorkflowAdvance = async (c2, drive, perms, session) => {
      if (!perms.data?.institute?._id) {
        console.warn("Missing institute data for logging");
        return;
      }
      try {
        const authUserId = c2.get("auth").userId;
        if (!authUserId) {
          console.warn("Missing user ID for audit logging");
          return;
        }
        const clerkUser = await clerk_default.users.getUser(authUserId);
        const institute = await Institute_default.findById(
          perms.data.institute._id
        ).session(session);
        if (!institute) {
          console.warn(
            `Institute not found for logging: ${perms.data.institute._id}`
          );
          return;
        }
        const userName = `${clerkUser.firstName || ""} ${clerkUser.lastName || ""}`.trim() || "Unknown User";
        institute.auditLogs.push({
          action: `Advanced workflow for ${drive.title} to next step`,
          user: userName,
          userId: clerkUser.id,
          type: "info",
          timestamp: /* @__PURE__ */ new Date()
        });
        const notification = {
          title: "Workflow Advanced",
          description: `Workflow for ${drive.title} has been advanced to the next step`,
          date: /* @__PURE__ */ new Date(),
          read: false,
          id: v4_default()
        };
        institute.members.forEach((member) => {
          if (member.role && institute.roles.some(
            (r2) => r2.slug === member.role && Array.isArray(r2.permissions) && r2.permissions.includes("manage_drive")
          )) {
            if (!Array.isArray(member.notifications)) {
              member.notifications = [];
            }
            member.notifications.push(notification);
          }
        });
        await institute.save({ session });
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Unknown error";
        console.error("Error logging workflow advancement:", errorMessage, error);
      }
    };
    instituteWorkflowController_default = { advanceWorkflow };
  }
});

// src/controllers/campus/drives/driveAnalyticsController.ts
import mongoose25 from "mongoose";
var getDriveAnalytics2, driveAnalyticsController_default;
var init_driveAnalyticsController = __esm({
  "src/controllers/campus/drives/driveAnalyticsController.ts"() {
    "use strict";
    init_sendResponse();
    init_logger();
    init_checkInstitutePermission();
    init_Drive();
    init_AppliedDrive();
    init_Candidate();
    getDriveAnalytics2 = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const { id } = c2.req.param();
        if (!id || !mongoose25.Types.ObjectId.isValid(id)) {
          return sendError(c2, 400, "Invalid drive ID");
        }
        const drive = await Drive_default.findOne({
          _id: id,
          institute: perms.data?.institute?._id
        }).populate("company");
        if (!drive) {
          return sendError(c2, 404, "Drive not found");
        }
        const appliedDrives = await AppliedDrive_default.find({
          drive: new mongoose25.Types.ObjectId(id)
        }).populate("user");
        const analytics = {
          totalCandidates: drive.candidates?.length || 0,
          appliedCandidates: appliedDrives.length,
          inProgressCandidates: appliedDrives.filter(
            (ad) => ad.status === "inprogress"
          ).length,
          rejectedCandidates: appliedDrives.filter((ad) => ad.status === "rejected").length,
          hiredCandidates: appliedDrives.filter((ad) => ad.status === "hired").length,
          applicationRate: 0,
          conversionRate: 0,
          salary: {
            averageCTC: 0,
            highestCTC: 0,
            lowestCTC: 0,
            medianCTC: 0,
            totalCompensation: 0
          },
          stageAnalytics: []
        };
        if (drive.candidates?.length > 0) {
          analytics.applicationRate = appliedDrives.length / drive.candidates.length * 100;
        }
        if (appliedDrives.length > 0) {
          analytics.conversionRate = analytics.hiredCandidates / appliedDrives.length * 100;
        }
        const hiredApplicants = appliedDrives.filter(
          (ad) => ad.status === "hired" && ad.salary
        );
        if (hiredApplicants.length > 0) {
          const salaries = hiredApplicants.map((a2) => a2.salary || 0).filter((s2) => s2 > 0);
          if (salaries.length > 0) {
            analytics.salary.averageCTC = salaries.reduce((a2, b2) => a2 + b2, 0) / salaries.length;
            analytics.salary.highestCTC = Math.max(...salaries);
            analytics.salary.lowestCTC = Math.min(...salaries);
            analytics.salary.totalCompensation = salaries.reduce(
              (a2, b2) => a2 + b2,
              0
            );
            const sortedSalaries = [...salaries].sort((a2, b2) => a2 - b2);
            const mid = Math.floor(sortedSalaries.length / 2);
            analytics.salary.medianCTC = sortedSalaries.length % 2 === 0 ? (sortedSalaries[mid - 1] + sortedSalaries[mid]) / 2 : sortedSalaries[mid];
          }
        }
        if (drive.workflow && drive.workflow.steps) {
          const stages = drive.workflow.steps;
          let highestDropOffRate = 0;
          let bottleneckStage;
          for (let i2 = 0; i2 < stages.length; i2++) {
            const stage = stages[i2];
            const totalInStage = i2 === 0 ? appliedDrives.length : analytics.stageAnalytics[i2 - 1]?.passedCandidates || 0;
            const failedInStage = appliedDrives.filter(
              (ad) => ad.disqualifiedStage === stage.name
            ).length;
            const passedCandidates = totalInStage - failedInStage;
            const dropOffRate = totalInStage > 0 ? failedInStage / totalInStage * 100 : 0;
            const passRate = totalInStage > 0 ? passedCandidates / totalInStage * 100 : 0;
            const stageAnalytic = {
              stageName: stage.name,
              totalCandidates: totalInStage,
              passedCandidates,
              failedCandidates: failedInStage,
              passRate,
              dropOffRate,
              isBottleneck: false
            };
            analytics.stageAnalytics.push(stageAnalytic);
            if (dropOffRate > highestDropOffRate && totalInStage > 0) {
              highestDropOffRate = dropOffRate;
              bottleneckStage = stageAnalytic;
              stageAnalytic.isBottleneck = true;
            }
          }
          if (bottleneckStage) {
            analytics.bottleneckStage = bottleneckStage;
          }
        }
        if (appliedDrives.length > 0) {
          const candidates = await Candidate_default.find({
            _id: { $in: appliedDrives.map((ad) => ad.user) }
          });
          const genderCounts = {
            male: 0,
            female: 0,
            other: 0
          };
          candidates.forEach((candidate) => {
            if (candidate.gender?.toLowerCase() === "male") genderCounts.male++;
            else if (candidate.gender?.toLowerCase() === "female")
              genderCounts.female++;
            else genderCounts.other++;
          });
          const total = candidates.length;
          analytics.genderDistribution = {
            ...genderCounts,
            malePercentage: genderCounts.male / total * 100,
            femalePercentage: genderCounts.female / total * 100,
            otherPercentage: genderCounts.other / total * 100
          };
          const degreeTypes = {};
          const schools = {};
          candidates.forEach((candidate) => {
            candidate.education?.forEach((edu) => {
              if (edu.degree) {
                degreeTypes[edu.degree] = (degreeTypes[edu.degree] || 0) + 1;
              }
              if (edu.school) {
                schools[edu.school] = (schools[edu.school] || 0) + 1;
              }
            });
          });
          const topSchools = Object.entries(schools).map(([school, count]) => ({ school, count })).sort((a2, b2) => b2.count - a2.count).slice(0, 5);
          analytics.educationDistribution = {
            degreeTypes,
            topSchools
          };
          const hiredWithDates = appliedDrives.filter(
            (ad) => ad.status === "hired" && ad.createdAt && ad.updatedAt
          );
          if (hiredWithDates.length > 0) {
            const totalDays = hiredWithDates.reduce((sum, ad) => {
              const appliedDate = new Date(ad.createdAt);
              const hiredDate = new Date(ad.updatedAt);
              const diffTime = Math.abs(
                hiredDate.getTime() - appliedDate.getTime()
              );
              const diffDays = Math.ceil(diffTime / (1e3 * 60 * 60 * 24));
              return sum + diffDays;
            }, 0);
            analytics.timeToHire = totalDays / hiredWithDates.length;
          }
        }
        console.log(analytics);
        console.log(drive);
        return sendSuccess(c2, 200, "Drive analytics fetched successfully", {
          analytics,
          drive
        });
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    driveAnalyticsController_default = {
      getDriveAnalytics: getDriveAnalytics2
    };
  }
});

// src/routes/driveRoute.ts
import { Hono as Hono7 } from "hono";
var app7, driveRoute_default;
var init_driveRoute = __esm({
  "src/routes/driveRoute.ts"() {
    "use strict";
    init_driveController();
    init_instituteWorkflowController();
    init_candidatesController();
    init_driveAnalyticsController();
    app7 = new Hono7();
    app7.get("/", driveController_default.getDrives);
    app7.get("/:id", driveController_default.getDrive);
    app7.get("/slug/:slug", driveController_default.getDriveBySlug);
    app7.post("/create", driveController_default.createDrive);
    app7.post("/workflow/create", driveController_default.createWorkflow);
    app7.post("/ats", driveController_default.updateAts);
    app7.post("/assignment", driveController_default.updateAssignment);
    app7.post("/interview", driveController_default.updateInterview);
    app7.post("/publish", driveController_default.publishDrive);
    app7.post("/advance-workflow", instituteWorkflowController_default.advanceWorkflow);
    app7.delete("/:id", driveController_default.deleteDrive);
    app7.post("/", driveController_default.createDrive);
    app7.get("/:id/candidates", driveController_default.getCandidatesForDrive);
    app7.get("/candidate/:id/resume", candidatesController_default.getResume);
    app7.get("/candidate/:id", candidatesController_default.getCandidate);
    app7.put("/candidate/qualify", candidatesController_default.qualifyCandidateInCampus);
    app7.put("/candidate/disqualify", candidatesController_default.disqualifyCandidateInCampus);
    app7.put("/candidate/qualify/bulk", candidatesController_default.bulkQualifyInCampus);
    app7.put("/candidate/disqualify/bulk", candidatesController_default.bulkDisqualifyInCampus);
    app7.get("/:id/applied", driveController_default.getAppliedDrives);
    app7.post("/end-drive", driveController_default.endDrive);
    app7.post("/upload-offer-letter", driveController_default.uploadOfferLetter);
    app7.get("/:did/offer-letter/:id", driveController_default.getOfferLetter);
    app7.get("/:id/analytics", driveAnalyticsController_default.getDriveAnalytics);
    driveRoute_default = app7;
  }
});

// src/controllers/enterprise/postings/postingController.ts
import mongoose26 from "mongoose";
import { Upload as Upload5 } from "@aws-sdk/lib-storage";
import { GetObjectCommand as GetObjectCommand6 } from "@aws-sdk/client-s3";
import { getSignedUrl as getSignedUrl5 } from "@aws-sdk/s3-request-presigner";
var getPostings, getPosting, getPostingBySlug, createPosting, createWorkflow2, updateAts2, updateAssignment2, updateInterview2, publishPosting, deletePosting, getAssignment2, saveAssignmentSubmission2, gradeAssignment2, getAssignmentSubmission2, getAppliedPostings, postingController_default;
var init_postingController = __esm({
  "src/controllers/enterprise/postings/postingController.ts"() {
    "use strict";
    init_Posting();
    init_checkOrganizationPermission();
    init_sendResponse();
    init_logger();
    init_Organization();
    init_clerk();
    init_Meet();
    init_AssignmentSubmission();
    init_s3();
    init_loops();
    init_Candidate();
    init_AppliedPosting();
    getPostings = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, ["view_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const posting = await Posting_default.find({
          organizationId: perms.data?.organization?._id
        });
        const organization = await Organization_default.findById(
          perms.data?.organization?._id
        );
        return sendSuccess(c2, 200, "Posting fetched successfully", {
          postings: posting,
          departments: organization?.departments
        });
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    getPosting = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, ["view_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const posting = await Posting_default.findById(c2.req.param("id")).populate("mcqAssessments.assessmentId").populate("codeAssessments.assessmentId").populate("candidates").populate({
          path: "candidates",
          populate: {
            path: "appliedPostings",
            model: "AppliedPosting"
          }
        }).populate("organizationId").populate("assignments.submissions").populate("interviews.interview");
        if (!posting) {
          return sendError(c2, 404, "job not found");
        }
        return sendSuccess(c2, 200, "job fetched successfully", posting);
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    getPostingBySlug = async (c2) => {
      try {
        const posting = await Posting_default.findOne({ url: c2.req.param("slug") }).populate("mcqAssessments.assessmentId").populate("codeAssessments.assessmentId").populate("candidates").populate("organizationId").populate("assignments.submissions");
        if (!posting) {
          return sendError(c2, 404, "job not found");
        }
        return sendSuccess(c2, 200, "job fetched successfully", posting);
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    createPosting = async (c2) => {
      try {
        const posting = await c2.req.json();
        const perms = await checkOrganizationPermission_default.all(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        if (posting.additionalDetails) {
          Object.entries(posting.additionalDetails).forEach(
            ([category, fields]) => {
              Object.entries(fields).forEach(
                ([field, config]) => {
                  if (typeof config.required !== "boolean" || typeof config.allowEmpty !== "boolean") {
                    throw new Error(
                      `Invalid configuration for ${category}.${field}`
                    );
                  }
                }
              );
            }
          );
        }
        const newPosting = new Posting_default({
          ...posting,
          organizationId: perms.data?.organization?._id
        });
        await newPosting.save();
        const newPostingFetched = await Posting_default.findById(newPosting._id);
        if (!newPostingFetched) {
          return sendError(c2, 500, "Error creating posting");
        }
        const interviews = newPostingFetched?.workflow?.steps.filter(
          (step) => step.type === "INTERVIEW"
        );
        interviews?.forEach(async (step) => {
          const firstHalf = Math.random().toString(36).substring(7);
          const secondHalf = Math.random().toString(36).substring(7);
          const thirdHalf = Math.random().toString(36).substring(7);
          console.log(step);
          const meeting = new Meet_default({
            candidates: [],
            interviewers: [],
            code: `${firstHalf}-${secondHalf}-${thirdHalf}`
          });
          newPostingFetched.interviews.push({
            interview: meeting._id,
            workflowId: step._id
          });
          await meeting.save();
        });
        await newPostingFetched.save();
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const auditLog = {
          user: clerkUser.firstName + " " + clerkUser.lastName,
          userId: clerkUser.id,
          action: `Created New Job Posting: ${posting.title}`,
          type: "info"
        };
        await Organization_default.findByIdAndUpdate(perms.data?.organization?._id, {
          $push: {
            auditLogs: auditLog,
            postings: newPosting._id
          }
        });
        return sendSuccess(c2, 200, "job created successfully", newPosting);
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, `Error creating posting: ${e2.message}`);
      }
    };
    createWorkflow2 = async (c2) => {
      try {
        const { formattedData, _id } = await c2.req.json();
        const perms = await checkOrganizationPermission_default.all(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const posting = await Posting_default.findById(_id);
        if (!posting) {
          return sendError(c2, 404, "Posting not found");
        }
        posting.workflow = formattedData;
        await posting.save();
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const auditLog = {
          user: clerkUser.firstName + " " + clerkUser.lastName,
          userId: clerkUser.id,
          action: `Created New Workflow for Job Posting: ${posting.title}`,
          type: "info"
        };
        await Organization_default.findByIdAndUpdate(perms.data?.organization?._id, {
          $push: { auditLogs: auditLog }
        });
        return sendSuccess(c2, 201, "Workflow created successfully", posting);
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    updateAts2 = async (c2) => {
      try {
        const { minimumScore, negativePrompts, positivePrompts, _id } = await c2.req.json();
        const perms = await checkOrganizationPermission_default.all(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const posting = await Posting_default.findById(_id);
        if (!posting) {
          return sendError(c2, 404, "Posting not found");
        }
        if (!posting.ats) {
          posting.ats = {
            _id: new mongoose26.Types.ObjectId(),
            minimumScore,
            negativePrompts,
            positivePrompts,
            status: "pending",
            createdAt: /* @__PURE__ */ new Date(),
            updatedAt: /* @__PURE__ */ new Date()
          };
        } else {
          posting.ats.minimumScore = minimumScore;
          posting.ats.negativePrompts = negativePrompts;
          posting.ats.positivePrompts = positivePrompts;
        }
        if (!posting.workflow) {
          return sendError(c2, 400, "Workflow not found");
        }
        if (!posting.ats) {
          return sendError(c2, 400, "ATS not found");
        }
        const atsStep = posting.workflow.steps.filter(
          (step) => step.type === "RESUME_SCREENING"
        );
        if (posting.ats && posting.ats._id) {
          atsStep[0]._id = new mongoose26.Types.ObjectId(posting.ats._id.toString());
        }
        await posting.save();
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const auditLog = {
          user: clerkUser.firstName + " " + clerkUser.lastName,
          userId: clerkUser.id,
          action: `Updated ATS for Job Posting: ${posting.title}`,
          type: "info"
        };
        await Organization_default.findByIdAndUpdate(perms.data?.organization?._id, {
          $push: { auditLogs: auditLog }
        });
        return sendSuccess(c2, 201, "ATS updated successfully", posting);
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    updateAssignment2 = async (c2) => {
      try {
        const { name, description, postingId, step, submissionType } = await c2.req.json();
        const perms = await checkOrganizationPermission_default.all(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const posting = await Posting_default.findById(postingId);
        if (!posting) {
          return sendError(c2, 404, "job not found");
        }
        if (!posting.workflow) {
          return sendError(c2, 400, "Workflow not found");
        }
        const _id = new mongoose26.Types.ObjectId();
        const workflowId = posting.workflow.steps[step]._id;
        posting.assignments.push({
          _id,
          name,
          description,
          workflowId,
          submissionType
        });
        await posting.save();
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const auditLog = {
          user: clerkUser.firstName + " " + clerkUser.lastName,
          userId: clerkUser.id,
          action: `Created New Assignment for Job Posting: ${posting.title}`,
          type: "info"
        };
        await Organization_default.findByIdAndUpdate(perms.data?.organization?._id, {
          $push: { auditLogs: auditLog }
        });
        return sendSuccess(c2, 201, "Assignment created successfully", posting);
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    updateInterview2 = async (c2) => {
      try {
        const { postingId, step } = await c2.req.json();
        const perms = await checkOrganizationPermission_default.all(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const posting = await Posting_default.findById(postingId);
        if (!posting) {
          return sendError(c2, 404, "job not found");
        }
        if (!posting.workflow) {
          return sendError(c2, 400, "Workflow not found");
        }
        const _id = new mongoose26.Types.ObjectId();
        posting.workflow.steps[step].stepId = _id;
        await posting.save();
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const auditLog = {
          user: clerkUser.firstName + " " + clerkUser.lastName,
          userId: clerkUser.id,
          action: `Created New Interview for Job Posting: ${posting.title}`,
          type: "info"
        };
        await Organization_default.findByIdAndUpdate(perms.data?.organization?._id, {
          $push: { auditLogs: auditLog }
        });
        return sendSuccess(c2, 201, "Interview created successfully", posting);
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    publishPosting = async (c2) => {
      try {
        const { id } = await c2.req.json();
        const perms = await checkOrganizationPermission_default.all(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const posting = await Posting_default.findById(id);
        if (!posting) {
          return sendError(c2, 404, "job not found");
        }
        posting.published = true;
        posting.publishedOn = /* @__PURE__ */ new Date();
        const urlSlug = Math.random().toString(36).substring(7);
        posting.url = urlSlug;
        await posting.save();
        const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
        const auditLog = {
          user: clerkUser.firstName + " " + clerkUser.lastName,
          userId: clerkUser.id,
          action: `Published Job Posting: ${posting.title}`,
          type: "info"
        };
        await Organization_default.findByIdAndUpdate(perms.data?.organization?._id, {
          $push: { auditLogs: auditLog }
        });
        return sendSuccess(c2, 201, "Posting published successfully", posting);
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    deletePosting = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const posting = await Posting_default.findByIdAndDelete(c2.req.param("id"));
        if (!posting) {
          return sendError(c2, 404, "job not found");
        }
        await Organization_default.findByIdAndUpdate(perms.data?.organization?._id, {
          $pull: { postings: posting._id }
        });
        return sendSuccess(c2, 200, "job deleted successfully");
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    getAssignment2 = async (c2) => {
      try {
        const { id, aid } = c2.req.param();
        const posting = await Posting_default.findById(id);
        if (!posting) {
          return sendError(c2, 404, "job not found");
        }
        const assignment = posting.assignments.find(
          (a2) => a2._id?.toString() === aid
        );
        if (!assignment) {
          return sendError(c2, 404, "assignment not found");
        }
        return sendSuccess(c2, 200, "job fetched successfully", assignment);
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    saveAssignmentSubmission2 = async (c2) => {
      try {
        const { id, aid } = c2.req.param();
        let textSubmission, linkSubmission;
        if (c2.req.header("content-type")?.includes("application/json")) {
          const body = await c2.req.json();
          textSubmission = body.textSubmission;
          linkSubmission = body.linkSubmission;
        }
        if (!id || !aid) {
          return sendError(c2, 400, "Missing required parameters");
        }
        const posting = await Posting_default.findById(id);
        if (!posting) {
          return sendError(c2, 404, "Job posting not found");
        }
        const assignment = posting.assignments.find(
          (a2) => a2._id?.toString() === aid
        );
        if (!assignment) {
          return sendError(c2, 404, "Assignment not found");
        }
        const userId = c2.get("auth")._id;
        if (!userId) {
          return sendError(c2, 401, "Unauthorized");
        }
        const user = await Candidate_default.findOne({ userId });
        if (!user) {
          return sendError(c2, 404, "User not found");
        }
        const postingStep = posting.workflow?.steps.find(
          (step) => step._id?.toString() === assignment.workflowId?.toString()
        );
        if (!postingStep || postingStep.status !== "in-progress") {
          return sendError(c2, 400, "Submission deadline has passed");
        }
        const existingSubmission = await AssignmentSubmission_default.findOne({
          assignmentId: assignment._id,
          candidateId: userId
        });
        if (existingSubmission) {
          return sendError(c2, 409, "You have already submitted this assignment");
        }
        if (assignment.submissionType === "file") {
          const formData = await c2.req.formData();
          const file = formData.get("file");
          if (!file) {
            return sendError(c2, 400, "File is required for this assignment");
          }
          try {
            const uploadParams = {
              Bucket: process.env.R2_S3_ASSIGNMENT_BUCKET,
              Key: `${aid}/${c2.get("auth")._id}.zip`,
              Body: file,
              // @ts-expect-error - Type 'File' is not assignable to type 'Body'
              ContentType: file.type
            };
            const upload = new Upload5({
              client: s3_default,
              params: uploadParams
            });
            await upload.done();
          } catch (uploadError) {
            logger_default.error("File upload failed");
            return sendError(c2, 500, "Failed to upload file");
          }
        }
        const submission = new AssignmentSubmission_default({
          assignmentId: assignment._id,
          postingId: posting._id,
          candidateId: userId,
          textSubmission,
          linkSubmission,
          submittedAt: /* @__PURE__ */ new Date()
        });
        assignment.submissions.push(submission._id);
        try {
          await loops_default.sendTransactionalEmail({
            transactionalId: "cm13tu50l02mc80gpi76joqvy",
            email: user.email,
            dataVariables: {
              // @ts-expect-error - Type 'string' is not assignable to type 'DataVariables'
              organization: posting?.organizationId?.name || "the company"
            }
          });
        } catch (emailError) {
          logger_default.warn("Failed to send confirmation email");
        }
        await Promise.all([posting.save(), submission.save()]);
        return sendSuccess(c2, 201, "Submission saved successfully", submission);
      } catch (e2) {
        logger_default.error("Error saving assignment submission");
        return sendError(
          c2,
          500,
          "Something went wrong while processing your submission"
        );
      }
    };
    gradeAssignment2 = async (c2) => {
      try {
        const { id, aid } = c2.req.param();
        const { grade, cid } = await c2.req.json();
        console.log(grade, cid);
        const posting = await Posting_default.findById(id);
        if (!posting) {
          return sendError(c2, 404, "Job posting not found");
        }
        const assignment = posting.assignments.find(
          (a2) => a2._id?.toString() === aid
        );
        if (!assignment) {
          return sendError(c2, 404, "Assignment not found");
        }
        console.log(assignment._id, cid);
        const submission = await AssignmentSubmission_default.findOne({
          assignmentId: assignment._id,
          candidateId: cid
        });
        if (!submission) {
          return sendError(c2, 404, "Submission not found");
        }
        submission.grade = grade;
        console.log(submission);
        await submission.save();
        return sendSuccess(c2, 200, "Grade saved successfully", submission);
      } catch (e2) {
        logger_default.error("Error grading assignment submission");
        return sendError(
          c2,
          500,
          "Something went wrong while processing your submission"
        );
      }
    };
    getAssignmentSubmission2 = async (c2) => {
      try {
        const { id, aid, sid } = c2.req.param();
        const posting = await Posting_default.findById(id);
        if (!posting) {
          return sendError(c2, 404, "Job posting not found");
        }
        const assignment = posting.assignments.find(
          (a2) => a2._id?.toString() === aid
        );
        if (!assignment) {
          return sendError(c2, 404, "Assignment not found");
        }
        console.log(aid, sid);
        const command = new GetObjectCommand6({
          Bucket: process.env.R2_S3_ASSIGNMENT_BUCKET,
          Key: `${aid}/${sid}.zip`
        });
        const url = await getSignedUrl5(s3_default, command, { expiresIn: 600 });
        return sendSuccess(c2, 200, "File URL", { url });
      } catch (e2) {
        logger_default.error("Error getting assignment submission");
        return sendError(
          c2,
          500,
          "Something went wrong while processing your submission"
        );
      }
    };
    getAppliedPostings = async (c2) => {
      try {
        const perms = await checkOrganizationPermission_default.all(c2, ["view_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const postings = await AppliedPosting_default.find({
          posting: c2.req.param("id")
        }).populate("posting").populate("user");
        return sendSuccess(
          c2,
          200,
          "Applied postings fetched successfully",
          postings
        );
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    postingController_default = {
      getPostings,
      getPosting,
      createPosting,
      createWorkflow: createWorkflow2,
      updateAts: updateAts2,
      updateAssignment: updateAssignment2,
      updateInterview: updateInterview2,
      publishPosting,
      deletePosting,
      getPostingBySlug,
      getAssignment: getAssignment2,
      saveAssignmentSubmission: saveAssignmentSubmission2,
      gradeAssignment: gradeAssignment2,
      getAssignmentSubmission: getAssignmentSubmission2,
      getAppliedPostings
    };
  }
});

// src/controllers/enterprise/workflow/workflowController.ts
import { InvokeCommand as InvokeCommand3, LambdaClient as LambdaClient3 } from "@aws-sdk/client-lambda";
var REGION3, advanceWorkflow2, handleResumeScreening2, handleAssignmentRound2, handleAssessmentRound2, handleInterviewRound2, logWorkflowAdvance2, workflowController_default;
var init_workflowController = __esm({
  "src/controllers/enterprise/workflow/workflowController.ts"() {
    "use strict";
    init_loops();
    init_clerk();
    init_Posting();
    init_Organization();
    init_Candidate();
    init_sendResponse();
    init_checkOrganizationPermission();
    init_User();
    init_Meet();
    REGION3 = "ap-south-1";
    advanceWorkflow2 = async (c2) => {
      try {
        const { _id } = await c2.req.json();
        const perms = await checkOrganizationPermission_default.all(c2, ["manage_job"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const posting = await Posting_default.findById(_id).populate("candidates");
        if (!posting) {
          return sendError(c2, 404, "Posting not found");
        }
        const workflow = posting?.workflow;
        if (!workflow || workflow.steps.length === 0) {
          return sendError(c2, 400, "Invalid workflow");
        }
        const currentStepIndex = workflow.steps.findIndex(
          (step) => step.status === "in-progress"
        );
        if (currentStepIndex === -1 && workflow.steps.every((step) => step.status === "completed")) {
          return sendError(c2, 400, "Workflow already completed");
        }
        if (currentStepIndex === -1) {
          workflow.steps[0].status = "in-progress";
          workflow.steps[0].schedule = {
            ...workflow.steps[0].schedule
          };
          workflow.steps[0].startedBy = c2.get("auth")._id;
        } else {
          workflow.steps[currentStepIndex].status = "completed";
          workflow.steps[currentStepIndex + 1].status = "in-progress";
          workflow.steps[currentStepIndex].schedule = {
            ...workflow.steps[currentStepIndex].schedule,
            actualCompletionTime: /* @__PURE__ */ new Date()
          };
          workflow.steps[0].startedBy = c2.get("auth")._id;
        }
        const currentStep = workflow.steps[currentStepIndex === -1 ? 0 : currentStepIndex + 1];
        switch (currentStep.type) {
          case "RESUME_SCREENING":
            handleResumeScreening2(posting, perms.data.organization?._id);
            break;
          case "ASSIGNMENT":
            handleAssignmentRound2(posting, currentStep);
            break;
          case "CODING_ASSESSMENT":
          case "MCQ_ASSESSMENT":
            handleAssessmentRound2(posting, currentStep);
            break;
          case "INTERVIEW":
            handleInterviewRound2(posting, currentStep);
            break;
        }
        console.log("Workflow advanced to next step", currentStep.type);
        await posting.save();
        await logWorkflowAdvance2(c2, posting, perms);
        const updatedPosting = await Posting_default.findById(_id).populate("candidates").populate("organizationId");
        return sendSuccess(
          c2,
          200,
          "Workflow advanced successfully",
          updatedPosting
        );
      } catch (error) {
        console.error(error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    handleResumeScreening2 = async (posting, orgId) => {
      await Posting_default.findByIdAndUpdate(posting._id, {
        "ats.status": "processing"
      });
      const lambdaClient = new LambdaClient3({
        region: REGION3,
        credentials: {
          accessKeyId: process.env.AWS_LAMBDA_ACCESS_KEY_ID,
          secretAccessKey: process.env.AWS_LAMBDA_SECRET_ACCESS_KEY
        }
      });
      const resumes = await Promise.all(
        posting.candidates.map(async (candidateId) => {
          const candidate = await Candidate_default.findById(candidateId);
          if (!candidate) return null;
          return candidate ? {
            candidateId: candidate._id.toString(),
            resume: candidate.resumeExtract
          } : null;
        })
      );
      const org = await Organization_default.findById(orgId).populate("members.user");
      const step = posting.workflow.steps.find(
        (step2) => step2.type === "RESUME_SCREENING"
      );
      const user = org?.members.find(
        (member) => member.user._id.toString() === step?.startedBy.toString()
      );
      const dbUser = await User_default.findById(user?.user);
      if (!dbUser) return;
      const clerkUser = await clerk_default.users.getUser(dbUser?.clerkId);
      const event = {
        jobDescription: posting.description,
        skills: posting.skills?.join(","),
        negativePrompts: posting.ats?.negativePrompts?.join(","),
        positivePrompts: posting.ats?.positivePrompts?.join(","),
        postingId: posting._id.toString(),
        resumes: resumes.filter(Boolean),
        mailData: {
          name: clerkUser.firstName + " " + clerkUser.lastName,
          email: user?.email,
          posting: posting.title,
          resumeScreenUrl: `${process.env.ENTERPRISE_FRONTEND_URL}/jobs/${posting.url}/ats`
        }
      };
      await lambdaClient.send(
        new InvokeCommand3({
          FunctionName: "resume-screener",
          Payload: JSON.stringify(event)
        })
      );
    };
    handleAssignmentRound2 = async (posting, step) => {
      const assignment = posting.assignments?.find(
        (a2) => a2.name === step.name
      );
      const organization = await Organization_default.findById(posting.organizationId);
      if (!assignment || !organization) return;
      const candidates = await Candidate_default.find({
        _id: { $in: posting.candidates },
        "appliedPostings.status": { $ne: "rejected" }
      });
      await Promise.all(
        candidates.map(
          (candidate) => loops_default.sendTransactionalEmail({
            transactionalId: "cm0zk1vd900966e8e6czepc4d",
            email: candidate.email,
            dataVariables: {
              name: candidate.name,
              postingName: posting.title,
              company: organization.name,
              assignmentLink: `${process.env.CANDIDATE_FRONTEND_URL}/postings/${posting._id}/assignments/${assignment._id}`
            }
          })
        )
      );
    };
    handleAssessmentRound2 = async (posting, step) => {
      console.log("Detected assessment round");
      const assessment = posting.mcqAssessments?.find(
        (a2) => a2.workflowId.toString() === step._id.toString()
      ) || posting.codeAssessments?.find(
        (a2) => a2.workflowId.toString() === step._id.toString()
      );
      const organization = await Organization_default.findById(posting.organizationId);
      if (!assessment || !organization) return;
      const candidates = await Candidate_default.find({
        _id: { $in: posting.candidates },
        "appliedPostings.status": { $ne: "rejected" }
      });
      const assessmentType = step.type === "CODING_ASSESSMENT" ? "Coding" : "MCQ";
      const type = step.type === "CODING_ASSESSMENT" ? "c" : "m";
      console.log("Sending assessment emails");
      await Promise.all(
        candidates.map(
          (candidate) => loops_default.sendTransactionalEmail({
            transactionalId: "cm16lbamn012iyfq0agp9wl54",
            email: candidate.email,
            dataVariables: {
              name: candidate.name,
              postingName: posting.title,
              type: assessmentType,
              assessmentLink: `${process.env.SCRIPTOPIA_FRONTEND_URL}/assessments/${type}/${assessment.assessmentId}`,
              company: organization.name
            }
          })
        )
      );
    };
    handleInterviewRound2 = async (posting, step) => {
      console.log("Detected interview round");
      const organization = await Organization_default.findById(posting.organizationId);
      if (!organization) return;
      const candidates = await Candidate_default.find({
        _id: { $in: posting.candidates },
        "appliedPostings.status": { $ne: "rejected" }
      });
      const workflowStepId = posting.workflow.steps.find(
        (s2) => s2._id.toString() === step._id.toString()
      )._id;
      const interviewId = posting.interviews.find(
        (interview2) => interview2.workflowId.toString() === workflowStepId.toString()
      ).interview;
      console.log("Interview ID", interviewId);
      if (!interviewId) return;
      const interview = await Meet_default.findById(interviewId);
      if (!interview) return;
      await Promise.all(
        candidates.map((candidate) => {
          loops_default.sendTransactionalEmail({
            transactionalId: "cm84on6wm06v3e9gl6a2hm0j8",
            email: candidate.email,
            dataVariables: {
              name: candidate.name,
              postingName: posting.title,
              interviewLink: `${process.env.MEET_FRONTEND_URL}/v3/${interview.code}`,
              company: organization.name
            }
          });
          interview.candidates.push(candidate._id);
        })
      );
      const interviewer = organization.members.find(
        (member) => member.role === "hiring_manager"
      );
      if (interviewer && interviewer.user) {
        interview.interviewers.push(interviewer?.user);
      }
      await interview.save();
    };
    logWorkflowAdvance2 = async (c2, posting, perms) => {
      const clerkUser = await clerk_default.users.getUser(c2.get("auth").userId);
      const organization = await Organization_default.findById(
        perms.data.organization?._id
      );
      if (!organization) return;
      organization.auditLogs.push({
        action: `Advanced workflow for ${posting.title} to next step`,
        user: `${clerkUser.firstName} ${clerkUser.lastName}`,
        userId: clerkUser.id,
        type: "info"
      });
      const notification = {
        title: "Workflow Advanced",
        description: `Workflow for ${posting.title} has been advanced to the next step`,
        date: /* @__PURE__ */ new Date(),
        read: false
      };
      organization.members.forEach((member) => {
        if (member.role && organization.roles.some(
          (r2) => r2.slug === member.role && r2.permissions.includes("manage_job")
        )) {
          member.notifications.push(notification);
        }
      });
      await organization.save();
    };
    workflowController_default = { advanceWorkflow: advanceWorkflow2 };
  }
});

// src/controllers/candidate/candidatePostingController.ts
var PaginationSchema, SlugSchema, getPublicPostings, getPublicPostingBySlug, candidatePostingController_default;
var init_candidatePostingController = __esm({
  "src/controllers/candidate/candidatePostingController.ts"() {
    "use strict";
    init_esm();
    init_sendResponse();
    init_logger();
    init_Posting();
    PaginationSchema = external_exports.object({
      page: external_exports.coerce.number().int().positive().default(1),
      limit: external_exports.coerce.number().int().positive().max(100).default(10)
    });
    SlugSchema = external_exports.object({
      url: external_exports.string().trim().min(1).max(200)
    });
    getPublicPostings = async (c2) => {
      try {
        const validationResult = PaginationSchema.safeParse(c2.req.query());
        if (!validationResult.success) {
          return sendError(
            c2,
            400,
            "Invalid pagination parameters",
            validationResult.error.format()
          );
        }
        const { page, limit } = validationResult.data;
        const skip = (page - 1) * limit;
        const activePostings = await Posting_default.aggregate([
          // Match only published postings with valid application end dates
          {
            $match: {
              published: true,
              "applicationRange.end": { $gt: /* @__PURE__ */ new Date() }
            }
          },
          // Lookup organizations
          {
            $lookup: {
              from: "organizations",
              localField: "organizationId",
              foreignField: "_id",
              as: "organization"
            }
          },
          // Unwind the organization array (convert from array to object)
          { $unwind: "$organization" },
          // Lookup departments
          {
            $lookup: {
              from: "departments",
              localField: "department",
              foreignField: "_id",
              as: "departmentInfo"
            }
          },
          // Unwind the department array (may be empty if no department)
          {
            $unwind: {
              path: "$departmentInfo",
              preserveNullAndEmptyArrays: true
            }
          },
          // Project only the fields we need
          {
            $project: {
              _id: 1,
              title: 1,
              description: 1,
              location: 1,
              type: 1,
              salary: 1,
              openings: 1,
              skills: 1,
              publishedOn: 1,
              applicationRange: 1,
              url: 1,
              department: "$departmentInfo.name",
              organizationId: {
                name: "$organization.name",
                logo: { $ifNull: ["$organization.logo", ""] }
              }
            }
          },
          // Apply pagination
          { $skip: skip },
          { $limit: limit },
          // Sort by most recently published
          { $sort: { publishedOn: -1 } }
        ]);
        const totalCount = await Posting_default.countDocuments({
          published: true,
          "applicationRange.end": { $gt: /* @__PURE__ */ new Date() }
        });
        return sendSuccess(c2, 200, "Postings fetched successfully", {
          data: activePostings,
          pagination: {
            page,
            limit,
            totalItems: totalCount,
            totalPages: Math.ceil(totalCount / limit)
          }
        });
      } catch (error) {
        logger_default.error(`Error in getPublicPostings: ${error}`);
        return sendError(c2, 500, "Failed to fetch job postings", {
          error: process.env.NODE_ENV === "development" ? String(error) : void 0
        });
      }
    };
    getPublicPostingBySlug = async (c2) => {
      try {
        const validationResult = SlugSchema.safeParse(c2.req.param());
        if (!validationResult.success) {
          return sendError(
            c2,
            400,
            "Invalid URL parameter",
            validationResult.error.format()
          );
        }
        const { url } = validationResult.data;
        const posting = await Posting_default.findOne({
          url,
          published: true,
          "applicationRange.end": { $gt: /* @__PURE__ */ new Date() }
        }).populate("organizationId", "name logo description").populate("department", "name").lean();
        if (!posting) {
          return sendError(c2, 404, "Job posting not found");
        }
        const formattedPosting = {
          _id: posting._id,
          title: posting.title,
          description: posting.description,
          department: posting.department?.name || null,
          location: posting.location,
          type: posting.type,
          salary: posting.salary,
          openings: posting.openings,
          skills: posting.skills || [],
          publishedOn: posting.publishedOn,
          applicationRange: posting.applicationRange,
          organization: posting.organizationId ? {
            name: posting.organizationId.name,
            logo: posting.organizationId.logo || ""
          } : null
        };
        return sendSuccess(
          c2,
          200,
          "Posting fetched successfully",
          formattedPosting
        );
      } catch (error) {
        logger_default.error("Error in getPublicPostingBySlug");
        return sendError(c2, 500, "Failed to fetch job posting", {
          error: process.env.NODE_ENV === "development" ? String(error) : void 0
        });
      }
    };
    candidatePostingController_default = {
      getPublicPostings,
      getPublicPostingBySlug
    };
  }
});

// src/routes/postingRoute.ts
import { Hono as Hono8 } from "hono";
var app8, postingRoute_default;
var init_postingRoute = __esm({
  "src/routes/postingRoute.ts"() {
    "use strict";
    init_postingController();
    init_workflowController();
    init_candidatePostingController();
    init_candidatesController();
    app8 = new Hono8();
    app8.get("/", postingController_default.getPostings);
    app8.get("/:id", postingController_default.getPosting);
    app8.get("/slug/:slug", postingController_default.getPostingBySlug);
    app8.get("/candidate/postings", candidatePostingController_default.getPublicPostings);
    app8.get(
      "/candidate/postings/:slug",
      candidatePostingController_default.getPublicPostingBySlug
    );
    app8.post("/ats", postingController_default.updateAts);
    app8.post("/assignment", postingController_default.updateAssignment);
    app8.post("/interview", postingController_default.updateInterview);
    app8.post("/publish", postingController_default.publishPosting);
    app8.post("/advance-workflow", workflowController_default.advanceWorkflow);
    app8.post("/", postingController_default.createPosting);
    app8.delete("/:id", postingController_default.deletePosting);
    app8.get("/:id/assignment/:aid", postingController_default.getAssignment);
    app8.post("/:id/assignment/:aid", postingController_default.saveAssignmentSubmission);
    app8.post("/:id/assignment/:aid/grade", postingController_default.gradeAssignment);
    app8.get(
      "/:id/assignment/:aid/submission/:sid",
      postingController_default.getAssignmentSubmission
    );
    app8.get("/candidate/:id", candidatesController_default.getCandidate);
    app8.get("/candidate/:id/resume", candidatesController_default.getResume);
    app8.put("/candidate/qualify", candidatesController_default.qualifyCandidate);
    app8.put("/candidate/disqualify", candidatesController_default.disqualifyCandidate);
    app8.put("/candidate/qualify/bulk", candidatesController_default.bulkQualify);
    app8.put("/candidate/disqualify/bulk", candidatesController_default.bulkDisqualify);
    app8.get("/:id/applied", postingController_default.getAppliedPostings);
    postingRoute_default = app8;
  }
});

// src/controllers/candidate/candidateController.ts
import { GetObjectCommand as GetObjectCommand7 } from "@aws-sdk/client-s3";
import { Upload as Upload6 } from "@aws-sdk/lib-storage";
import { PDFExtract } from "pdf.js-extract";
import { getSignedUrl as getSignedUrl6 } from "@aws-sdk/s3-request-presigner";
import mongoose27 from "mongoose";
var MAX_RESUME_SIZE, ALLOWED_RESUME_MIME_TYPES, validateCandidate, sanitizeInput2, getCandidate3, getCandidateById, createCandidate, updateCandidate, updateResume, getResume3, apply, applyToDrive, extractTextFromResume, getAppliedPostings2, getAppliedDrives2, candidateController_default;
var init_candidateController = __esm({
  "src/controllers/candidate/candidateController.ts"() {
    "use strict";
    init_s3();
    init_Candidate();
    init_Organization();
    init_Posting();
    init_logger();
    init_sendResponse();
    init_AppliedPosting();
    init_AppliedDrive();
    init_Drive();
    init_Institute();
    init_Drive();
    init_clerk();
    init_PlacementGroup();
    init_getUserWithPermission();
    init_sendNotification();
    MAX_RESUME_SIZE = 5 * 1024 * 1024;
    ALLOWED_RESUME_MIME_TYPES = ["application/pdf"];
    validateCandidate = (data) => {
      const errors = [];
      if (data.name && typeof data.name !== "string") {
        errors.push("Name must be a string");
      }
      if (data.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
        errors.push("Invalid email format");
      }
      if (data.phoneNumber && !/^\+?[0-9]{10,15}$/.test(data.phoneNumber)) {
        errors.push("Invalid phone number format");
      }
      if (data.education && !Array.isArray(data.education)) {
        errors.push("Education must be an array");
      } else if (data.education) {
        data.education.forEach((edu, index) => {
          if (!edu.degree)
            errors.push(`Education ${index + 1}: Degree is required`);
        });
      }
      if (data.skills && !Array.isArray(data.skills)) {
        errors.push("Skills must be an array of strings");
      }
      return {
        isValid: errors.length === 0,
        errors
      };
    };
    sanitizeInput2 = (input) => {
      const sanitized = JSON.parse(JSON.stringify(input));
      const sanitizeObject = (obj) => {
        if (!obj || typeof obj !== "object") return;
        Object.keys(obj).forEach((key) => {
          if (typeof obj[key] === "string") {
            obj[key] = obj[key].replace(/<[^>]*>?/gm, "").trim();
          } else if (Array.isArray(obj[key])) {
            obj[key].forEach((item) => {
              if (typeof item === "object") sanitizeObject(item);
              if (typeof item === "string")
                item = item.replace(/<[^>]*>?/gm, "").trim();
            });
          } else if (typeof obj[key] === "object") {
            sanitizeObject(obj[key]);
          }
        });
      };
      sanitizeObject(sanitized);
      return sanitized;
    };
    getCandidate3 = async (c2) => {
      try {
        const auth = c2.get("auth");
        if (!auth || !auth._id) {
          return sendError(c2, 401, "Authentication required");
        }
        const candidate = await Candidate_default.findOne({ userId: auth._id }).populate({
          path: "appliedPostings",
          populate: {
            path: "posting",
            model: "Posting",
            populate: {
              path: "organizationId",
              model: "Organization",
              select: "name logo"
            },
            select: "title description applicationRange status"
          }
        }).populate({
          path: "appliedDrives",
          populate: {
            path: "drive",
            model: "Drive",
            select: "title description applicationRange status"
          }
        }).populate("userId", "email");
        if (!candidate) {
          return sendError(c2, 404, "Candidate profile not found");
        }
        const sanitizedCandidate = {
          ...candidate.toObject(),
          resumeExtract: void 0
          // Don't expose the full text extraction
        };
        return sendSuccess(
          c2,
          200,
          "Candidate profile retrieved",
          sanitizedCandidate
        );
      } catch (error) {
        logger_default.error(
          `Error in getCandidate: ${error instanceof Error ? error.message : String(error)}`
        );
        return sendError(
          c2,
          500,
          "An error occurred while retrieving candidate profile"
        );
      }
    };
    getCandidateById = async (c2) => {
      try {
        const auth = c2.get("auth");
        const candidateId = c2.req.param("id");
        if (!auth || !auth._id) {
          return sendError(c2, 401, "Authentication required");
        }
        if (!mongoose27.Types.ObjectId.isValid(candidateId)) {
          return sendError(c2, 400, "Invalid candidate ID format");
        }
        const requestingCandidate = await Candidate_default.findOne({ userId: auth._id });
        const isOwnProfile = requestingCandidate && requestingCandidate._id.toString() === candidateId;
        const isAdmin = auth.role === "admin";
        const hasOrgPermission = auth.organizationId && await AppliedPosting_default.exists({
          user: candidateId,
          posting: {
            $in: await Posting_default.find({
              organizationId: auth.organizationId
            }).distinct("_id")
          }
        });
        const hasInstitutePermission = auth.instituteId && await AppliedDrive_default.exists({
          user: candidateId,
          drive: {
            $in: await Drive_default.find({ institute: auth.instituteId }).distinct(
              "_id"
            )
          }
        });
        if (!isOwnProfile && !isAdmin && !hasOrgPermission && !hasInstitutePermission) {
          return sendError(
            c2,
            403,
            "You don't have permission to view this candidate profile"
          );
        }
        const candidate = await Candidate_default.findOne({ _id: candidateId }).populate({
          path: "appliedPostings",
          populate: {
            path: "posting",
            model: "Posting",
            populate: {
              path: "organizationId",
              model: "Organization",
              select: "name logo"
            },
            select: "title description applicationRange status"
          }
        }).populate("userId", "email");
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        const sanitizedCandidate = {
          ...candidate.toObject(),
          // Only include sensitive info for admins or self
          resumeExtract: isAdmin || isOwnProfile ? candidate.resumeExtract : void 0
        };
        return sendSuccess(
          c2,
          200,
          "Candidate profile retrieved",
          sanitizedCandidate
        );
      } catch (error) {
        logger_default.error(
          `Error in getCandidateById: ${error instanceof Error ? error.message : String(error)}`
        );
        return sendError(
          c2,
          500,
          "An error occurred while retrieving candidate profile"
        );
      }
    };
    createCandidate = async (c2) => {
      try {
        const auth = c2.get("auth");
        const body = await c2.req.json();
        if (!auth || !auth._id) {
          return sendError(c2, 401, "Authentication required");
        }
        const existingCandidate = await Candidate_default.findOne({ userId: auth._id });
        if (existingCandidate) {
          return sendError(c2, 409, "Candidate profile already exists");
        }
        let clerkUser;
        try {
          clerkUser = await clerk_default.users.getUser(auth.userId);
        } catch (clerkError) {
          logger_default.error(
            `Clerk API error: ${clerkError instanceof Error ? clerkError.message : String(clerkError)}`
          );
          return sendError(c2, 500, "Unable to verify user information");
        }
        if (!clerkUser) {
          return sendError(c2, 404, "User not found in authentication provider");
        }
        const sanitizedData = sanitizeInput2(body);
        const validationResult = validateCandidate(sanitizedData);
        if (!validationResult.isValid) {
          return sendError(
            c2,
            400,
            `Invalid candidate data: ${validationResult.errors.join(", ")}`
          );
        }
        const newCandidate = new Candidate_default({
          ...sanitizedData,
          name: clerkUser.fullName,
          userId: auth._id
        });
        await newCandidate.save();
        const sanitizedResponse = {
          _id: newCandidate._id,
          name: newCandidate.name,
          createdAt: newCandidate.createdAt
        };
        return sendSuccess(
          c2,
          201,
          "Candidate profile created successfully",
          sanitizedResponse
        );
      } catch (error) {
        logger_default.error(
          `Error in createCandidate: ${error instanceof Error ? error.message : String(error)}`
        );
        return sendError(
          c2,
          500,
          "An error occurred while creating candidate profile"
        );
      }
    };
    updateCandidate = async (c2) => {
      try {
        const auth = c2.get("auth");
        const body = await c2.req.json();
        if (!auth || !auth._id) {
          return sendError(c2, 401, "Authentication required");
        }
        const candidate = await Candidate_default.findOne({ userId: auth._id });
        if (!candidate) {
          return sendError(c2, 404, "Candidate profile not found");
        }
        const sanitizedData = sanitizeInput2(body);
        const validationResult = validateCandidate(sanitizedData);
        if (!validationResult.isValid) {
          return sendError(
            c2,
            400,
            `Invalid candidate data: ${validationResult.errors.join(", ")}`
          );
        }
        delete sanitizedData.userId;
        delete sanitizedData.resumeUrl;
        delete sanitizedData.resumeExtract;
        delete sanitizedData.appliedPostings;
        delete sanitizedData.appliedDrives;
        const updatedCandidate = await Candidate_default.findOneAndUpdate(
          { userId: auth._id },
          { $set: sanitizedData },
          { new: true, runValidators: true }
        );
        return sendSuccess(
          c2,
          200,
          "Candidate profile updated successfully",
          updatedCandidate
        );
      } catch (error) {
        logger_default.error(
          `Error in updateCandidate: ${error instanceof Error ? error.message : String(error)}`
        );
        return sendError(
          c2,
          500,
          "An error occurred while updating candidate profile"
        );
      }
    };
    updateResume = async (c2) => {
      try {
        const auth = c2.get("auth");
        if (!auth || !auth._id) {
          return sendError(c2, 401, "Authentication required");
        }
        const candidate = await Candidate_default.findOne({ userId: auth._id });
        if (!candidate) {
          return sendError(c2, 404, "Candidate profile not found");
        }
        const formData = await c2.req.formData();
        const resume = formData.get("resume");
        if (!resume) {
          return sendError(c2, 400, "No resume file provided");
        }
        if (resume.size > MAX_RESUME_SIZE) {
          return sendError(c2, 400, "Resume file exceeds maximum size limit of 5MB");
        }
        if (!ALLOWED_RESUME_MIME_TYPES.includes(resume.type)) {
          return sendError(c2, 400, "Only PDF files are accepted for resumes");
        }
        const fileKey = `${candidate._id}_${Date.now()}.pdf`;
        const uploadParams = {
          Bucket: process.env.R2_S3_RESUME_BUCKET,
          Key: fileKey,
          Body: Buffer.from(await resume.arrayBuffer()),
          ContentType: resume.type
        };
        try {
          const upload = new Upload6({
            client: s3_default,
            params: uploadParams
          });
          await upload.done();
          extractTextFromResume(resume, candidate._id.toString()).catch(
            (err) => logger_default.error(`Resume text extraction failed: ${err}`)
          );
          const bucketName = process.env.R2_S3_RESUME_BUCKET;
          const cdnUrl = process.env.R2_CDN_URL || `https://${bucketName}.r2.cloudflarestorage.com`;
          const resumeUrl = `${cdnUrl}/${fileKey}`;
          await Candidate_default.findByIdAndUpdate(candidate._id, {
            resumeUrl,
            // Track resume history if needed
            $push: {
              resumeHistory: { url: candidate.resumeUrl, replacedAt: /* @__PURE__ */ new Date() }
            }
          });
          return sendSuccess(c2, 200, "Resume uploaded successfully", {
            url: resumeUrl
          });
        } catch (uploadError) {
          logger_default.error(
            `S3 upload error: ${uploadError instanceof Error ? uploadError.message : String(uploadError)}`
          );
          return sendError(c2, 500, "Failed to upload resume");
        }
      } catch (error) {
        logger_default.error(
          `Error in updateResume: ${error instanceof Error ? error.message : String(error)}`
        );
        return sendError(c2, 500, "An error occurred while updating resume");
      }
    };
    getResume3 = async (c2) => {
      try {
        const auth = c2.get("auth");
        if (!auth || !auth._id) {
          return sendError(c2, 401, "Authentication required");
        }
        const candidateId = c2.req.query("candidateId");
        let targetCandidateId;
        if (candidateId) {
          if (!mongoose27.Types.ObjectId.isValid(candidateId)) {
            return sendError(c2, 400, "Invalid candidate ID format");
          }
          const requestingCandidate = await Candidate_default.findOne({ userId: auth._id });
          const isOwnResume = requestingCandidate && requestingCandidate._id.toString() === candidateId;
          const isAdmin = auth.role === "admin";
          const hasOrgPermission = auth.organizationId && await AppliedPosting_default.exists({
            user: candidateId,
            posting: {
              $in: await Posting_default.find({
                organizationId: auth.organizationId
              }).distinct("_id")
            }
          });
          if (!isOwnResume && !isAdmin && !hasOrgPermission) {
            return sendError(
              c2,
              403,
              "You don't have permission to access this resume"
            );
          }
          targetCandidateId = candidateId;
        } else {
          const candidate2 = await Candidate_default.findOne({ userId: auth._id });
          if (!candidate2) {
            return sendError(c2, 404, "Candidate profile not found");
          }
          targetCandidateId = candidate2._id.toString();
        }
        const candidate = await Candidate_default.findById(targetCandidateId);
        if (!candidate || !candidate.resumeUrl) {
          return sendError(c2, 404, "Resume not found");
        }
        const urlParts = candidate.resumeUrl.split("/");
        const fileKey = urlParts[urlParts.length - 1];
        const command = new GetObjectCommand7({
          Bucket: process.env.R2_S3_RESUME_BUCKET,
          Key: fileKey
        });
        const url = await getSignedUrl6(s3_default, command, { expiresIn: 600 });
        return sendSuccess(c2, 200, "Resume URL generated", { url });
      } catch (error) {
        logger_default.error(
          `Error in getResume: ${error instanceof Error ? error.message : String(error)}`
        );
        return sendError(c2, 500, "An error occurred while retrieving resume");
      }
    };
    apply = async (c2) => {
      const session = await mongoose27.startSession();
      session.startTransaction();
      try {
        const { postingId } = await c2.req.json();
        const auth = c2.get("auth");
        if (!auth || !auth._id) {
          return sendError(c2, 401, "Authentication required");
        }
        if (!postingId || !mongoose27.Types.ObjectId.isValid(postingId)) {
          return sendError(c2, 400, "Invalid posting ID");
        }
        const candidate = await Candidate_default.findOne({ userId: auth._id });
        if (!candidate) {
          return sendError(c2, 404, "Candidate profile not found");
        }
        const candId = candidate._id;
        const posting = await Posting_default.findById(postingId);
        if (!posting) {
          return sendError(c2, 404, "Job posting not found");
        }
        const today = /* @__PURE__ */ new Date();
        const startDate = posting.applicationRange?.start;
        const endDate = posting.applicationRange?.end;
        if (!startDate || !endDate) {
          return sendError(c2, 400, "Job posting has no valid application period");
        }
        if (today < startDate || today > endDate) {
          return sendError(
            c2,
            400,
            "Job posting is not open for applications at this time"
          );
        }
        const existingApplication = await AppliedPosting_default.findOne({
          posting: postingId,
          user: candId
        });
        if (existingApplication) {
          return sendError(c2, 409, "You have already applied to this position");
        }
        if (!candidate.resumeUrl) {
          return sendError(c2, 400, "You must upload a resume before applying");
        }
        const newApply = await AppliedPosting_default.create(
          [
            {
              posting: postingId,
              user: candId,
              appliedAt: /* @__PURE__ */ new Date()
            }
          ],
          { session }
        );
        await Posting_default.findByIdAndUpdate(
          postingId,
          { $addToSet: { candidates: candId } },
          { session, new: true }
        );
        const auditLog = {
          user: candidate.name || "Candidate",
          userId: candidate._id.toString(),
          action: `Applied for "${posting.title}"`,
          type: "info"
        };
        await Organization_default.findByIdAndUpdate(
          posting.organizationId,
          { $push: { auditLogs: auditLog } },
          { session }
        );
        await Candidate_default.findByIdAndUpdate(
          candId,
          { $addToSet: { appliedPostings: newApply[0]._id } },
          { session }
        );
        await session.commitTransaction();
        return sendSuccess(c2, 200, "Application submitted successfully");
      } catch (error) {
        await session.abortTransaction();
        logger_default.error(
          `Error in apply: ${error instanceof Error ? error.message : String(error)}`
        );
        return sendError(
          c2,
          500,
          "An error occurred while processing your application"
        );
      } finally {
        session.endSession();
      }
    };
    applyToDrive = async (c2) => {
      const session = await mongoose27.startSession();
      session.startTransaction();
      try {
        const { driveId } = await c2.req.json();
        const auth = c2.get("auth");
        if (!auth || !auth._id) {
          return sendError(c2, 401, "Authentication required");
        }
        if (!driveId || !mongoose27.Types.ObjectId.isValid(driveId)) {
          return sendError(c2, 400, "Invalid drive ID");
        }
        const candidate = await Candidate_default.findOne({ userId: auth._id });
        if (!candidate) {
          return sendError(c2, 404, "Candidate profile not found");
        }
        const candId = candidate._id;
        const drive = await Drive_default.findById(driveId);
        if (!drive) {
          return sendError(c2, 404, "Placement drive not found");
        }
        const today = /* @__PURE__ */ new Date();
        const startDate = drive.applicationRange?.start;
        const endDate = drive.applicationRange?.end;
        if (!startDate || !endDate) {
          return sendError(
            c2,
            400,
            "Placement drive has no valid application period"
          );
        }
        if (today < startDate || today > endDate) {
          return sendError(
            c2,
            400,
            "Placement drive is not open for applications at this time"
          );
        }
        const existingApplication = await AppliedDrive_default.findOne({
          drive: driveId,
          user: candId
        });
        if (existingApplication) {
          return sendError(c2, 409, "You have already applied to this drive");
        }
        if (!candidate.resumeUrl) {
          return sendError(c2, 400, "You must upload a resume before applying");
        }
        const placementGroups = await PlacementGroup_default.find({
          candidates: { $in: [candId] }
        });
        if (placementGroups.length === 0) {
          return sendError(
            c2,
            400,
            "You are not part of any eligible placement group"
          );
        }
        const allowed = placementGroups.map((group) => group._id).some(
          (groupId) => drive.placementGroup?.toString() === groupId.toString()
        );
        if (!allowed) {
          return sendError(c2, 403, "You are not eligible for this placement drive");
        }
        const newApply = await AppliedDrive_default.create(
          [
            {
              drive: driveId,
              user: candId,
              appliedAt: /* @__PURE__ */ new Date()
            }
          ],
          { session }
        );
        await Drive_default.findByIdAndUpdate(
          driveId,
          { $addToSet: { candidates: candId } },
          { session }
        );
        const auditLog = {
          user: candidate.name || "Candidate",
          userId: candidate._id.toString(),
          action: `Applied for drive "${drive.title}"`,
          type: "info"
        };
        await Institute_default.findByIdAndUpdate(
          drive.institute,
          { $push: { auditLogs: auditLog } },
          { session }
        );
        await Candidate_default.findByIdAndUpdate(
          candId,
          { $addToSet: { appliedDrives: newApply[0]._id } },
          { session }
        );
        await session.commitTransaction();
        const institute = await Institute_default.findById(drive.institute);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const notifyingUser = await getUserWithPermission_default({
          institute,
          permissions: ["manage_drive"]
        });
        if (notifyingUser.length > 0) {
          await sendNotificationToCampus({
            userIds: notifyingUser,
            title: `New Application for Drive "${drive.title}"`,
            message: `${candidate.name} has applied for the drive "${drive.title}".`
          });
        }
        return sendSuccess(c2, 200, "Application to drive submitted successfully");
      } catch (error) {
        await session.abortTransaction();
        logger_default.error(
          `Error in applyToDrive: ${error instanceof Error ? error.message : String(error)}`
        );
        return sendError(
          c2,
          500,
          "An error occurred while processing your application"
        );
      } finally {
        session.endSession();
      }
    };
    extractTextFromResume = async (resume, candidateId) => {
      try {
        const resumeBuffer = Buffer.from(await resume.arrayBuffer());
        const pdfExtract = new PDFExtract();
        return new Promise((resolve, reject) => {
          pdfExtract.extractBuffer(resumeBuffer, {}, async (err, data) => {
            if (err) {
              logger_default.error(`PDF extraction error: ${err}`);
              reject(err);
              return;
            }
            if (!data) {
              logger_default.error("PDF extraction returned no data");
              reject(new Error("Could not extract text from PDF"));
              return;
            }
            let extractedText = "";
            try {
              for (const page of data.pages) {
                for (const content of page.content) {
                  extractedText += content.str + " ";
                }
              }
              await Candidate_default.findByIdAndUpdate(candidateId, {
                resumeExtract: extractedText.trim()
              });
              resolve(extractedText);
            } catch (saveErr) {
              logger_default.error(`Error saving extracted text: ${saveErr}`);
              reject(saveErr);
            }
          });
        });
      } catch (error) {
        logger_default.error(
          `Error in extractTextFromResume: ${error instanceof Error ? error.message : String(error)}`
        );
        throw error;
      }
    };
    getAppliedPostings2 = async (c2) => {
      try {
        const auth = c2.get("auth");
        if (!auth || !auth._id) {
          return sendError(c2, 401, "Authentication required");
        }
        const candidate = await Candidate_default.findOne({ userId: auth._id });
        if (!candidate) {
          return sendError(c2, 404, "Candidate profile not found");
        }
        const appliedPostings = await AppliedPosting_default.find({ user: candidate._id }).populate({
          path: "posting",
          select: "title description applicationRange status organizationId",
          populate: {
            path: "organizationId",
            select: "name logo",
            model: "Organization"
          }
        }).select("createdAt status feedback").sort({ createdAt: -1 }).lean();
        return sendSuccess(c2, 200, "Applied postings retrieved", appliedPostings);
      } catch (error) {
        logger_default.error(
          `Error in getAppliedPostings: ${error instanceof Error ? error.message : String(error)}`
        );
        return sendError(
          c2,
          500,
          "An error occurred while retrieving applied postings"
        );
      }
    };
    getAppliedDrives2 = async (c2) => {
      try {
        const auth = c2.get("auth");
        if (!auth || !auth._id) {
          return sendError(c2, 401, "Authentication required");
        }
        const candidate = await Candidate_default.findOne({ userId: auth._id });
        if (!candidate) {
          return sendError(c2, 404, "Candidate profile not found");
        }
        const appliedDrives = await AppliedDrive_default.find({ user: candidate._id }).populate({
          path: "drive",
          select: "title description applicationRange status institute",
          populate: {
            path: "institute",
            select: "name logo",
            model: "Institute"
          }
        }).select("createdAt status feedback").sort({ createdAt: -1 }).lean();
        return sendSuccess(c2, 200, "Applied drives retrieved", appliedDrives);
      } catch (error) {
        logger_default.error(
          `Error in getAppliedDrives: ${error instanceof Error ? error.message : String(error)}`
        );
        return sendError(
          c2,
          500,
          "An error occurred while retrieving applied drives"
        );
      }
    };
    candidateController_default = {
      getCandidate: getCandidate3,
      createCandidate,
      updateResume,
      updateCandidate,
      apply,
      getResume: getResume3,
      getAppliedPostings: getAppliedPostings2,
      getCandidateById,
      applyToDrive,
      getAppliedDrives: getAppliedDrives2
    };
  }
});

// src/controllers/candidate/drives/driveController.ts
var getDrives2, getDrive2, driveController_default2;
var init_driveController2 = __esm({
  "src/controllers/candidate/drives/driveController.ts"() {
    "use strict";
    init_AppliedDrive();
    init_Candidate();
    init_Drive();
    init_Institute();
    init_logger();
    init_sendResponse();
    getDrives2 = async (c2) => {
      try {
        const authData = c2.get("auth");
        const _id = authData?._id;
        if (!_id) {
          return sendError(c2, 401, "Authentication required");
        }
        const page = parseInt(c2.req.query("page") || "1", 10);
        const limit = Math.min(parseInt(c2.req.query("limit") || "20", 10), 100);
        const skip = (page - 1) * limit;
        if (isNaN(page) || page < 1 || isNaN(limit) || limit < 1) {
          return sendError(c2, 400, "Invalid pagination parameters");
        }
        const candidate = await Candidate_default.findOne({ userId: _id });
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        const institute = await Institute_default.findById(candidate?.institute).select(
          "departments"
        );
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const totalDrives = await Drive_default.countDocuments({
          institute: candidate.institute,
          published: true
        });
        const drivesFromDb = await Drive_default.find({
          institute: candidate.institute,
          published: true
        }).select(
          "title company applicationRange url published publishedOn hasEnded description salary openings location type candidates"
        ).populate("company", "name logo").sort({ publishedOn: -1 }).skip(skip).limit(limit);
        const drives = [];
        for (const drive of drivesFromDb) {
          const driveData = drive.toObject();
          const appliedDrive = await AppliedDrive_default.findOne({
            candidate: candidate._id,
            drive: drive._id
          });
          const status = appliedDrive?.status || "rejected";
          drives.push({
            drive: { ...driveData, candidates: void 0 },
            status,
            totalCandidates: driveData.candidates.length
          });
        }
        return sendSuccess(c2, 200, "Drives fetched successfully", {
          drives,
          departments: institute?.departments || [],
          pagination: {
            total: totalDrives,
            page,
            pages: Math.ceil(totalDrives / limit),
            limit
          }
        });
      } catch (e2) {
        logger_default.error(`Error in getDrivesForCandidate: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    getDrive2 = async (c2) => {
      try {
        const authData = c2.get("auth");
        const _id = authData?._id;
        if (!_id) {
          return sendError(c2, 401, "Authentication required");
        }
        const driveId = c2.req.param("id");
        if (!driveId) {
          return sendError(c2, 400, "Drive ID is required");
        }
        const candidate = await Candidate_default.findOne({ userId: _id });
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        const drive = await Drive_default.findById(driveId).populate("company", "name logo").populate("institute", "name logo departments").lean();
        if (!drive) {
          return sendError(c2, 404, "Drive not found");
        }
        const appliedDrive = await AppliedDrive_default.findOne({
          candidate: candidate._id,
          drive: drive._id
        });
        const status = appliedDrive?.status || "rejected";
        return sendSuccess(c2, 200, "Drive fetched successfully", {
          drive: { ...drive, candidates: void 0 },
          status
        });
      } catch (e2) {
        logger_default.error(`Error in getDriveForCandidate: ${e2.message}`);
        return sendError(c2, 500, "Internal server error");
      }
    };
    driveController_default2 = { getDrives: getDrives2, getDrive: getDrive2 };
  }
});

// src/controllers/candidate/placementGroups/placementGroupController.ts
var getPlacementGroups, placementGroupController_default;
var init_placementGroupController = __esm({
  "src/controllers/candidate/placementGroups/placementGroupController.ts"() {
    "use strict";
    init_Candidate();
    init_PlacementGroup();
    init_sendResponse();
    getPlacementGroups = async (c2) => {
      try {
        const { _id } = c2.get("auth");
        const page = parseInt(c2.req.query("page") || "1");
        const limit = Math.min(parseInt(c2.req.query("limit") || "10"), 50);
        const skip = (page - 1) * limit;
        const candidate = await Candidate_default.findOne({ userId: _id });
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        const totalCount = await PlacementGroup_default.countDocuments({
          institute: candidate.institute,
          candidates: { $in: [candidate._id] }
        });
        const groups = await PlacementGroup_default.find({
          institute: candidate.institute,
          candidates: { $in: [candidate._id] }
        }).populate("departments", "name").populate("candidates", "name email").populate("createdBy", "name email").populate("pendingCandidates", "name email").sort({ createdAt: -1 }).skip(skip).limit(limit).lean();
        return sendSuccess(c2, 200, "Placement groups fetched successfully", {
          groups,
          pagination: {
            total: totalCount,
            page,
            pages: Math.ceil(totalCount / limit),
            limit
          }
        });
      } catch (err) {
        console.error(
          "Error fetching placement groups:",
          err instanceof Error ? err.message : "Unknown error"
        );
        return sendError(c2, 500, "Failed to fetch placement groups");
      }
    };
    placementGroupController_default = { getPlacementGroups };
  }
});

// src/routes/candidateRoute.ts
import { Hono as Hono9 } from "hono";
var app9, candidateRoute_default;
var init_candidateRoute = __esm({
  "src/routes/candidateRoute.ts"() {
    "use strict";
    init_candidateController();
    init_driveController2();
    init_placementGroupController();
    app9 = new Hono9();
    app9.get("candidate", candidateController_default.getCandidate);
    app9.get("candidate/:id", candidateController_default.getCandidateById);
    app9.get("/", candidateController_default.getCandidate);
    app9.post("candidate", candidateController_default.createCandidate);
    app9.put("candidate", candidateController_default.updateCandidate);
    app9.put("/resume", candidateController_default.updateResume);
    app9.get("resume", candidateController_default.getResume);
    app9.post("/apply", candidateController_default.apply);
    app9.post("/drive/apply", candidateController_default.applyToDrive);
    app9.get("/applied", candidateController_default.getAppliedPostings);
    app9.get("/applied/drives", candidateController_default.getAppliedDrives);
    app9.get("/drives", driveController_default2.getDrives);
    app9.get("/drives/:id", driveController_default2.getDrive);
    app9.get("/placement-groups", placementGroupController_default.getPlacementGroups);
    candidateRoute_default = app9;
  }
});

// src/controllers/code/walletController.ts
var getWallet, walletController_default;
var init_walletController = __esm({
  "src/controllers/code/walletController.ts"() {
    "use strict";
    init_blockchainService();
    init_User();
    init_sendResponse();
    getWallet = async (c2) => {
      try {
        const userId = c2.req.param("userId");
        console.log("Fetching wallet for userId:", userId);
        const user = await User_default.findOne({ clerkId: userId });
        console.log("User found:", !!user);
        if (!user) {
          return sendError(c2, 404, "User not found");
        }
        console.log("Existing user wallet:", user.wallet);
        if (!user.wallet || !user.wallet.address) {
          console.log("Creating new wallet for user");
          const newWallet = createWallet();
          user.wallet = {
            address: newWallet.address,
            privateKey: newWallet.privateKey,
            balance: 0
          };
          await user.save();
          console.log("New wallet created:", user.wallet);
        }
        try {
          const blockchainBalance = await getTokenBalance(user.wallet.address);
          const blockchainBalanceFloat = parseFloat(blockchainBalance);
          console.log("Blockchain balance:", blockchainBalance);
          console.log("Parsed blockchain balance:", blockchainBalanceFloat);
          if (!isNaN(blockchainBalanceFloat) && blockchainBalanceFloat !== user.wallet.balance) {
            console.log("Updated wallet balance:", user.wallet.balance);
          }
        } catch (error) {
          console.error("Error updating wallet balance:", error);
        }
        console.log("Returning wallet data:", {
          walletAddress: user.wallet.address,
          balance: user.wallet.balance.toString()
        });
        return sendSuccess(c2, 200, "Wallet retrieved successfully", {
          walletAddress: user.wallet.address,
          balance: user.wallet.balance.toString(),
          success: true
          // Explicitly add success flag
        });
      } catch (error) {
        console.error("Error retrieving wallet:", error);
        return sendError(c2, 500, "Internal Server Error", error);
      }
    };
    walletController_default = { getWallet };
  }
});

// src/routes/walletRoute.ts
import { Hono as Hono10 } from "hono";
var walletRoute, walletRoute_default;
var init_walletRoute = __esm({
  "src/routes/walletRoute.ts"() {
    "use strict";
    init_walletController();
    walletRoute = new Hono10();
    walletRoute.get("/:userId", walletController_default.getWallet);
    walletRoute_default = walletRoute;
  }
});

// src/controllers/campus/placementGroups/placementGroupsController.ts
import mongoose28 from "mongoose";
var PlacementGroupSchema, createPlacementGroup, getPlacementGroups2, getPlacementGroup, joinPlacementGroup, acceptCandidate2, rejectCandidate2, getCandidatePlacementGroups, updatePlacementGroup, deletePlacementGroup, placementGroupsController_default;
var init_placementGroupsController = __esm({
  "src/controllers/campus/placementGroups/placementGroupsController.ts"() {
    "use strict";
    init_Institute();
    init_sendResponse();
    init_clerk();
    init_checkInstitutePermission();
    init_PlacementGroup();
    init_Candidate();
    init_Drive();
    init_esm();
    init_getUserWithPermission();
    init_sendNotification();
    PlacementGroupSchema = external_exports.object({
      name: external_exports.string().min(1, "Name is required"),
      academicYear: external_exports.object({
        start: external_exports.string().min(1, "Start year is required"),
        end: external_exports.string().min(1, "End year is required")
      }),
      departments: external_exports.array(external_exports.string()).min(1, "At least one department is required"),
      purpose: external_exports.string().optional(),
      expiryDate: external_exports.string().optional(),
      candidates: external_exports.array(external_exports.string()).optional().default([]),
      criteria: external_exports.any().optional()
    });
    createPlacementGroup = async (c2) => {
      try {
        const body = await c2.req.json();
        console.log("Request body:", body);
        const validationResult = PlacementGroupSchema.safeParse(body);
        if (!validationResult.success) {
          console.error("Validation errors:", validationResult.error.errors);
          return sendError(c2, 400, validationResult.error.errors?.toString());
        }
        const validatedData = validationResult.data;
        const { userId, _id } = c2.get("auth");
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to create placement groups"
          );
        }
        const clerkUser = await clerk_default.users.getUser(userId);
        if (!clerkUser) {
          return sendError(c2, 403, "User not found");
        }
        const instituteId = clerkUser.publicMetadata.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute not associated with user");
        }
        const session = await mongoose28.startSession();
        session.startTransaction();
        try {
          const group = await PlacementGroup_default.create(
            [
              {
                name: validatedData.name,
                institute: instituteId,
                academicYear: validatedData.academicYear,
                criteria: validatedData.criteria || {},
                departments: validatedData.departments,
                purpose: validatedData.purpose || "",
                expiryDate: validatedData.expiryDate,
                candidates: validatedData.candidates || [],
                createdBy: _id,
                pendingCandidates: []
              }
            ],
            { session }
          );
          await Institute_default.findByIdAndUpdate(
            instituteId,
            {
              $push: {
                placementGroups: group[0]._id,
                auditLogs: {
                  action: "create_placement_group",
                  userId: _id,
                  user: clerkUser.fullName,
                  type: "info",
                  details: `Created placement group: ${validatedData.name}`,
                  timestamp: /* @__PURE__ */ new Date()
                }
              }
            },
            { session }
          );
          await session.commitTransaction();
          session.endSession();
          const institute = await Institute_default.findById(instituteId).lean();
          if (!institute) {
            return sendError(c2, 404, "Institute not found");
          }
          const notifyingUsers = await getUserWithPermission_default({
            institute,
            permissions: ["manage_drive"]
          });
          if (notifyingUsers.length > 0) {
            await sendNotificationToCampus({
              userIds: notifyingUsers,
              title: "New Placement Group Created",
              message: `A new placement group "${validatedData.name}" has been created.`
            });
          }
          return sendSuccess(
            c2,
            201,
            "Placement group created successfully",
            group[0]
          );
        } catch (error) {
          await session.abortTransaction();
          session.endSession();
          throw error;
        }
      } catch (err) {
        console.error(
          "Error creating placement group:",
          err instanceof Error ? err.message : "Unknown error"
        );
        return sendError(c2, 500, "Failed to create placement group");
      }
    };
    getPlacementGroups2 = async (c2) => {
      try {
        const { userId } = c2.get("auth");
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to view placement groups"
          );
        }
        const page = parseInt(c2.req.query("page") || "1");
        const limit = Math.min(parseInt(c2.req.query("limit") || "10"), 50);
        const skip = (page - 1) * limit;
        const clerkUser = await clerk_default.users.getUser(userId);
        if (!clerkUser) {
          return sendError(c2, 403, "User not found");
        }
        const instituteId = clerkUser.publicMetadata.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute not associated with user");
        }
        const totalCount = await PlacementGroup_default.countDocuments({
          institute: instituteId
        });
        const groups = await PlacementGroup_default.find({ institute: instituteId }).populate("departments", "name").populate("candidates", "name email createdAt instituteUid _id").populate("createdBy", "name email").populate("pendingCandidates", "name email").sort({ createdAt: -1 }).skip(skip).limit(limit).lean();
        return sendSuccess(c2, 200, "Placement groups fetched successfully", {
          groups,
          pagination: {
            total: totalCount,
            page,
            pages: Math.ceil(totalCount / limit),
            limit
          }
        });
      } catch (err) {
        console.error(
          "Error fetching placement groups:",
          err instanceof Error ? err.message : "Unknown error"
        );
        return sendError(c2, 500, "Failed to fetch placement groups");
      }
    };
    getPlacementGroup = async (c2) => {
      try {
        const { userId } = c2.get("auth");
        const groupId = c2.req.param("id");
        if (!mongoose28.Types.ObjectId.isValid(groupId)) {
          return sendError(c2, 400, "Invalid placement group ID");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to view placement groups"
          );
        }
        const clerkUser = await clerk_default.users.getUser(userId);
        if (!clerkUser) {
          return sendError(c2, 403, "User not found");
        }
        const instituteId = clerkUser.publicMetadata.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute not associated with user");
        }
        const group = await PlacementGroup_default.findOne({
          _id: groupId,
          institute: instituteId
        }).populate("departments", "name").populate("candidates", "name email instituteUid createdAt _id").populate("createdBy", "name email").lean();
        if (!group) {
          return sendError(
            c2,
            404,
            "Placement group not found or you don't have access to it"
          );
        }
        return sendSuccess(c2, 200, "Placement group fetched successfully", group);
      } catch (err) {
        console.error(
          "Error fetching placement group:",
          err instanceof Error ? err.message : "Unknown error"
        );
        return sendError(c2, 500, "Failed to fetch placement group");
      }
    };
    joinPlacementGroup = async (c2) => {
      try {
        const id = c2.req.param("id");
        const { _id } = c2.get("auth");
        if (!mongoose28.Types.ObjectId.isValid(id)) {
          return sendError(c2, 400, "Invalid placement group ID");
        }
        const user = await Candidate_default.findOne({ userId: _id }).lean();
        if (!user) {
          return sendError(c2, 404, "User not found");
        }
        const institute = await Institute_default.findById(user.institute).lean();
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        if (!institute.candidates.some(
          (candidateId) => candidateId.toString() === user._id.toString()
        )) {
          return sendError(
            c2,
            403,
            "You are not a registered candidate of this institute"
          );
        }
        const group = await PlacementGroup_default.findById(id);
        if (!group) {
          return sendError(c2, 404, "Placement group not found");
        }
        if (group.institute.toString() !== institute._id.toString()) {
          return sendError(c2, 403, "You don't have access to this placement group");
        }
        if (group.candidates.some(
          (candidateId) => candidateId.toString() === user._id.toString()
        )) {
          return sendError(c2, 400, "You are already a member of this group");
        }
        if (group.pendingCandidates.some(
          (candidateId) => candidateId.toString() === user._id.toString()
        )) {
          return sendError(
            c2,
            400,
            "Your request to join this group is already pending"
          );
        }
        const accessType = group.get("accessType") || "private";
        if (accessType === "public") {
          group.candidates.push(user._id);
        } else {
          group.pendingCandidates.push(user._id);
        }
        await group.save();
        await Institute_default.findByIdAndUpdate(institute._id, {
          $push: {
            auditLogs: {
              action: accessType === "public" ? "joined_group" : "requested_join_group",
              userId: _id,
              user: user.name || "Candidate",
              type: "info",
              details: `${accessType === "public" ? "Joined" : "Requested to join"} placement group: ${group.name}`,
              timestamp: /* @__PURE__ */ new Date()
            }
          }
        });
        return sendSuccess(
          c2,
          200,
          accessType === "public" ? "Successfully joined the placement group" : "Request to join placement group has been submitted",
          { group: group._id }
        );
      } catch (err) {
        console.error(
          "Error joining placement group:",
          err instanceof Error ? err.message : "Unknown error"
        );
        return sendError(c2, 500, "Failed to join placement group");
      }
    };
    acceptCandidate2 = async (c2) => {
      try {
        const groupId = c2.req.param("id");
        const { candidateId } = await c2.req.json();
        const { userId, _id } = c2.get("auth");
        if (!mongoose28.Types.ObjectId.isValid(groupId) || !mongoose28.Types.ObjectId.isValid(candidateId)) {
          return sendError(c2, 400, "Invalid group or candidate ID");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to manage placement groups"
          );
        }
        const clerkUser = await clerk_default.users.getUser(userId);
        if (!clerkUser) {
          return sendError(c2, 403, "User not found");
        }
        const instituteId = clerkUser.publicMetadata.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute not associated with user");
        }
        const group = await PlacementGroup_default.findOne({
          _id: groupId,
          institute: instituteId
        });
        if (!group) {
          return sendError(
            c2,
            404,
            "Placement group not found or you don't have access to it"
          );
        }
        const candidate = await Candidate_default.findById(candidateId);
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        if (!group.pendingCandidates.some((id) => id.toString() === candidateId)) {
          return sendError(c2, 400, "Candidate not in the pending list");
        }
        group.candidates.push(candidateId);
        group.pendingCandidates = group.pendingCandidates.filter(
          (id) => id.toString() !== candidateId
        );
        await group.save();
        await Institute_default.findByIdAndUpdate(instituteId, {
          $push: {
            auditLogs: {
              action: "accept_candidate",
              userId: _id,
              user: clerkUser.fullName,
              type: "info",
              details: `Accepted candidate ${candidate.name} to group: ${group.name}`,
              timestamp: /* @__PURE__ */ new Date()
            }
          }
        });
        return sendSuccess(c2, 200, "Candidate accepted successfully", {
          groupId: group._id,
          candidateId
        });
      } catch (err) {
        console.error(
          "Error accepting candidate:",
          err instanceof Error ? err.message : "Unknown error"
        );
        return sendError(c2, 500, "Failed to accept candidate");
      }
    };
    rejectCandidate2 = async (c2) => {
      try {
        const groupId = c2.req.param("id");
        const { candidateId } = await c2.req.json();
        const { userId, _id } = c2.get("auth");
        if (!mongoose28.Types.ObjectId.isValid(groupId) || !mongoose28.Types.ObjectId.isValid(candidateId)) {
          return sendError(c2, 400, "Invalid group or candidate ID");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to manage placement groups"
          );
        }
        const clerkUser = await clerk_default.users.getUser(userId);
        if (!clerkUser) {
          return sendError(c2, 403, "User not found");
        }
        const instituteId = clerkUser.publicMetadata.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute not associated with user");
        }
        const group = await PlacementGroup_default.findOne({
          _id: groupId,
          institute: instituteId
        });
        if (!group) {
          return sendError(
            c2,
            404,
            "Placement group not found or you don't have access to it"
          );
        }
        const candidate = await Candidate_default.findById(candidateId);
        if (!candidate) {
          return sendError(c2, 404, "Candidate not found");
        }
        if (!group.pendingCandidates.some((id) => id.toString() === candidateId)) {
          return sendError(c2, 400, "Candidate not in the pending list");
        }
        group.pendingCandidates = group.pendingCandidates.filter(
          (id) => id.toString() !== candidateId
        );
        await group.save();
        await Institute_default.findByIdAndUpdate(instituteId, {
          $push: {
            auditLogs: {
              action: "reject_candidate",
              userId: _id,
              user: clerkUser.fullName,
              type: "info",
              details: `Rejected candidate ${candidate.name} from group: ${group.name}`,
              timestamp: /* @__PURE__ */ new Date()
            }
          }
        });
        return sendSuccess(c2, 200, "Candidate rejected successfully", {
          groupId: group._id,
          candidateId
        });
      } catch (err) {
        console.error(
          "Error rejecting candidate:",
          err instanceof Error ? err.message : "Unknown error"
        );
        return sendError(c2, 500, "Failed to reject candidate");
      }
    };
    getCandidatePlacementGroups = async (c2) => {
      try {
        const { _id } = c2.get("auth");
        const page = parseInt(c2.req.query("page") || "1");
        const limit = Math.min(parseInt(c2.req.query("limit") || "10"), 50);
        const skip = (page - 1) * limit;
        const user = await Candidate_default.findOne({ userId: _id }).lean();
        if (!user) {
          return sendError(c2, 404, "User not found");
        }
        const totalCount = await PlacementGroup_default.countDocuments({
          $or: [{ candidates: user._id }, { pendingCandidates: user._id }]
        });
        const groups = await PlacementGroup_default.find({
          $or: [{ candidates: user._id }, { pendingCandidates: user._id }]
        }).populate("departments", "name").populate("candidates", "name email").populate("createdBy", "name email").sort({ createdAt: -1 }).skip(skip).limit(limit).lean();
        const groupsWithStatus = groups.map((group) => {
          let status = "none";
          if (group.candidates.some((c3) => c3._id?.toString() === user._id.toString())) {
            status = "member";
          } else if (group.pendingCandidates.some(
            (c3) => c3.toString() === user._id.toString()
          )) {
            status = "pending";
          }
          return {
            ...group,
            membershipStatus: status
          };
        });
        return sendSuccess(c2, 200, "Placement groups fetched successfully", {
          groups: groupsWithStatus,
          pagination: {
            total: totalCount,
            page,
            pages: Math.ceil(totalCount / limit),
            limit
          }
        });
      } catch (err) {
        console.error(
          "Error fetching candidate placement groups:",
          err instanceof Error ? err.message : "Unknown error"
        );
        return sendError(c2, 500, "Failed to fetch placement groups");
      }
    };
    updatePlacementGroup = async (c2) => {
      try {
        const { userId } = c2.get("auth");
        const groupId = c2.req.param("id");
        if (!mongoose28.Types.ObjectId.isValid(groupId)) {
          return sendError(c2, 400, "Invalid placement group ID");
        }
        const body = await c2.req.json();
        const updateSchema = PlacementGroupSchema.partial();
        const validationResult = updateSchema.safeParse(body);
        if (!validationResult.success) {
          return sendError(
            c2,
            400,
            "Invalid request body",
            validationResult.error.errors
          );
        }
        const validatedData = validationResult.data;
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to update placement groups"
          );
        }
        const clerkUser = await clerk_default.users.getUser(userId);
        if (!clerkUser) {
          return sendError(c2, 403, "User not found");
        }
        const instituteId = clerkUser.publicMetadata.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute not associated with user");
        }
        const existingGroup = await PlacementGroup_default.findOne({
          _id: groupId,
          institute: instituteId
        });
        if (!existingGroup) {
          return sendError(
            c2,
            404,
            "Placement group not found or you don't have access to it"
          );
        }
        const session = await mongoose28.startSession();
        session.startTransaction();
        try {
          const updateData = {};
          for (const [key, value] of Object.entries(validatedData)) {
            if (value !== void 0) {
              updateData[key] = value;
            }
          }
          const updatedGroup = await PlacementGroup_default.findByIdAndUpdate(
            groupId,
            { $set: updateData },
            { new: true, session }
          ).populate("departments", "name").populate("candidates", "name email").populate("createdBy", "name email");
          await Institute_default.findByIdAndUpdate(
            instituteId,
            {
              $push: {
                auditLogs: {
                  action: "update_placement_group",
                  userId,
                  user: clerkUser.fullName,
                  type: "info",
                  details: `Updated placement group: ${existingGroup.name}`,
                  timestamp: /* @__PURE__ */ new Date()
                }
              }
            },
            { session }
          );
          await session.commitTransaction();
          session.endSession();
          return sendSuccess(
            c2,
            200,
            "Placement group updated successfully",
            updatedGroup
          );
        } catch (error) {
          await session.abortTransaction();
          session.endSession();
          throw error;
        }
      } catch (err) {
        console.error(
          "Error updating placement group:",
          err instanceof Error ? err.message : "Unknown error"
        );
        return sendError(c2, 500, "Failed to update placement group");
      }
    };
    deletePlacementGroup = async (c2) => {
      try {
        const { userId } = c2.get("auth");
        const groupId = c2.req.param("id");
        if (!mongoose28.Types.ObjectId.isValid(groupId)) {
          return sendError(c2, 400, "Invalid placement group ID");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_institute"]);
        if (!perms.allowed) {
          return sendError(
            c2,
            403,
            "You don't have permission to delete placement groups"
          );
        }
        const clerkUser = await clerk_default.users.getUser(userId);
        if (!clerkUser) {
          return sendError(c2, 403, "User not found");
        }
        const instituteId = clerkUser.publicMetadata.institute?._id;
        if (!instituteId) {
          return sendError(c2, 400, "Institute not associated with user");
        }
        const existingGroup = await PlacementGroup_default.findOne({
          _id: groupId,
          institute: instituteId
        });
        if (!existingGroup) {
          return sendError(
            c2,
            404,
            "Placement group not found or you don't have access to it"
          );
        }
        const session = await mongoose28.startSession();
        session.startTransaction();
        let committed = false;
        try {
          const drives = await Drive_default.find({
            placementGroup: groupId
          }).lean();
          const activeDrives = drives.filter(
            (drive) => drive.published === true || drive.hasEnded === false
          );
          if (activeDrives.length > 0) {
            await session.abortTransaction();
            return sendError(
              c2,
              400,
              "Cannot delete group with active drives. Please end all drives first."
            );
          }
          await Drive_default.deleteMany(
            {
              placementGroup: groupId
            },
            { session }
          );
          await Institute_default.findByIdAndUpdate(
            instituteId,
            {
              $pull: { placementGroups: groupId },
              $push: {
                auditLogs: {
                  action: "delete_placement_group",
                  userId,
                  user: clerkUser.fullName,
                  type: "warning",
                  details: `Deleted placement group: ${existingGroup.name}`,
                  timestamp: /* @__PURE__ */ new Date()
                }
              }
            },
            { session }
          );
          await PlacementGroup_default.findByIdAndDelete(groupId, { session });
          await session.commitTransaction();
          committed = true;
          session.endSession();
          const groupName = existingGroup.name;
          const groupInstitute = existingGroup.institute;
          const response = sendSuccess(
            c2,
            200,
            "Placement group deleted successfully"
          );
          try {
            const notifyingUsers = await getUserWithPermission_default({
              institute: groupInstitute,
              permissions: ["manage_drive"]
            });
            if (notifyingUsers.length > 0) {
              sendNotificationToCampus({
                userIds: notifyingUsers,
                title: "Placement Group Deleted",
                message: `The placement group "${groupName}" has been deleted.`
              }).catch((err) => {
                console.error(
                  "Failed to send notification after placement group deletion:",
                  err
                );
              });
            }
          } catch (notificationErr) {
            console.error("Error preparing notifications:", notificationErr);
          }
          return response;
        } catch (error) {
          if (!committed) {
            await session.abortTransaction();
          }
          session.endSession();
          throw error;
        }
      } catch (err) {
        console.error(
          "Error deleting placement group:",
          err instanceof Error ? err.message : "Unknown error"
        );
        return sendError(c2, 500, "Failed to delete placement group");
      }
    };
    placementGroupsController_default = {
      createPlacementGroup,
      getPlacementGroups: getPlacementGroups2,
      getPlacementGroup,
      joinPlacementGroup,
      acceptCandidate: acceptCandidate2,
      rejectCandidate: rejectCandidate2,
      getCandidatePlacementGroups,
      updatePlacementGroup,
      deletePlacementGroup
    };
  }
});

// src/routes/placementGroupsroute.ts
import { Hono as Hono11 } from "hono";
var app10, placementGroupsroute_default;
var init_placementGroupsroute = __esm({
  "src/routes/placementGroupsroute.ts"() {
    "use strict";
    init_placementGroupsController();
    app10 = new Hono11();
    app10.post("/", placementGroupsController_default.createPlacementGroup);
    app10.get("/", placementGroupsController_default.getPlacementGroups);
    app10.get("/candidate", placementGroupsController_default.getCandidatePlacementGroups);
    app10.get("/:id", placementGroupsController_default.getPlacementGroup);
    app10.put("/:id", placementGroupsController_default.updatePlacementGroup);
    app10.post("/:id/join", placementGroupsController_default.joinPlacementGroup);
    app10.post("/:id/accept", placementGroupsController_default.acceptCandidate);
    app10.post("/:id/reject", placementGroupsController_default.rejectCandidate);
    app10.delete("/:id", placementGroupsController_default.deletePlacementGroup);
    placementGroupsroute_default = app10;
  }
});

// src/controllers/campus/company/companyController.ts
import mongoose29 from "mongoose";
var createAuditLog2, getCompanies, getCompany, createCompany, updateCompany, archiveCompany, deleteCompany, companyController_default;
var init_companyController = __esm({
  "src/controllers/campus/company/companyController.ts"() {
    "use strict";
    init_Company();
    init_Institute();
    init_checkInstitutePermission();
    init_sendResponse();
    init_logger();
    init_clerk();
    init_Drive();
    init_Candidate();
    init_AppliedDrive();
    createAuditLog2 = async (c2, instituteId, action, type = "info") => {
      try {
        const authData = c2.get("auth");
        if (!authData || !authData.userId) {
          logger_default.error("Missing auth data for audit log");
          return;
        }
        const clerkUser = await clerk_default.users.getUser(authData.userId);
        const auditLog = {
          user: `${clerkUser.firstName || ""} ${clerkUser.lastName || ""}`.trim(),
          userId: clerkUser.id,
          action,
          type
        };
        await Institute_default.findByIdAndUpdate(instituteId, {
          $push: { auditLogs: auditLog }
        });
        logger_default.info(`Audit log created: ${action}`);
      } catch (error) {
        logger_default.error(
          `Failed to create audit log: ${error instanceof Error ? error.message : String(error)}`
        );
      }
    };
    getCompanies = async (c2) => {
      try {
        const authData = c2.get("auth");
        if (!authData) {
          return sendError(c2, 401, "Authentication data missing");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          logger_default.warn(
            `Unauthorized access attempt to view companies by user ${authData.userId}`
          );
          return sendError(c2, 403, "You don't have permission to view companies");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 404, "Institute not found");
        }
        const page = Math.max(1, parseInt(c2.req.query("page") || "1", 10));
        const pageSize = Math.min(
          100,
          // MAX_PAGE_SIZE
          Math.max(1, parseInt(c2.req.query("pageSize") || "20", 10))
        );
        const skipCount = (page - 1) * pageSize;
        const institute = await Institute_default.findById(instituteId);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const totalCount = await Company_default.countDocuments({
          _id: { $in: institute.companies },
          deleted: { $ne: true }
          // Using softDelete plugin
        });
        const companies = await Company_default.find({
          _id: { $in: institute.companies },
          deleted: { $ne: true }
          // Using softDelete plugin
        }).skip(skipCount).limit(pageSize).sort({ createdAt: -1 }).lean().exec();
        const formattedCompanies = companies.map((company) => ({
          _id: company._id?.toString(),
          name: company.name,
          description: company.description,
          generalInfo: company.generalInfo,
          hrContact: company.hrContact,
          createdAt: company.createdAt,
          updatedAt: company.updatedAt,
          isArchived: company.isArchived || false
        }));
        return sendSuccess(c2, 200, "Companies fetched successfully", {
          companies: formattedCompanies,
          pagination: {
            page,
            pageSize,
            totalItems: totalCount,
            totalPages: Math.ceil(totalCount / pageSize),
            hasNextPage: page * pageSize < totalCount,
            hasPrevPage: page > 1
          }
        });
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        logger_default.error(`Error fetching companies: ${errorMessage}`);
        return sendError(c2, 500, "Something went wrong while fetching companies");
      }
    };
    getCompany = async (c2) => {
      try {
        const authData = c2.get("auth");
        if (!authData) {
          return sendError(c2, 401, "Authentication data missing");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          logger_default.warn(
            `Unauthorized access attempt to view company by user ${authData.userId}`
          );
          return sendError(c2, 403, "You don't have permission to view companies");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 404, "Institute not found");
        }
        const companyId = c2.req.param("id");
        if (!companyId) {
          return sendError(c2, 400, "Company ID is required");
        }
        const institute = await Institute_default.findById(instituteId);
        if (!institute) {
          return sendError(c2, 404, "Institute not found");
        }
        const isCompanyInInstitute = institute.companies.some(
          (id) => id.toString() === companyId
        );
        if (!isCompanyInInstitute) {
          return sendError(c2, 404, "Company not found in this institute");
        }
        const company = await Company_default.findOne({
          _id: companyId,
          deleted: { $ne: true }
          // Using softDelete plugin
        }).lean().exec();
        if (!company) {
          return sendError(c2, 404, "Company not found");
        }
        const formattedCompany = {
          _id: company._id?.toString(),
          name: company.name,
          description: company.description,
          generalInfo: company.generalInfo,
          hrContact: company.hrContact,
          createdAt: company.createdAt,
          updatedAt: company.updatedAt,
          isArchived: company.isArchived || false
        };
        const companyDrives = await Drive_default.find({
          company: companyId,
          deleted: { $ne: true }
          // Using softDelete plugin
        });
        const candidateIds = companyDrives.map((drive) => drive.candidates).flat();
        const companyAppliedDrives = await AppliedDrive_default.find({
          drive: { $in: companyDrives.map((drive) => drive._id) }
        });
        const hiredCandidateIds = companyAppliedDrives.filter((appliedDrive) => appliedDrive.status === "hired").map((appliedDrive) => appliedDrive.user);
        const candidates = await Candidate_default.find({
          _id: { $in: candidateIds }
        }).select("userId name email instituteUid institute instituteDepartment");
        const finalCandidates = candidates.map((candidate) => ({
          _id: candidate._id?.toString(),
          name: candidate.name,
          email: candidate.email,
          uid: candidate.instituteUid,
          department: candidate.instituteDepartment,
          placed: hiredCandidateIds.includes(candidate._id)
        }));
        return sendSuccess(c2, 200, "Company fetched successfully", {
          company: formattedCompany,
          candidates: finalCandidates
        });
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        logger_default.error(`Error fetching company: ${errorMessage}`);
        return sendError(c2, 500, "Something went wrong while fetching the company");
      }
    };
    createCompany = async (c2) => {
      const session = await mongoose29.startSession();
      session.startTransaction();
      try {
        const authData = c2.get("auth");
        if (!authData) {
          return sendError(c2, 401, "Authentication data missing");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          logger_default.warn(
            `Unauthorized access attempt to create company by user ${authData.userId}`
          );
          return sendError(c2, 403, "You don't have permission to create companies");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 404, "Institute not found");
        }
        const companyData = await c2.req.json().catch(() => ({}));
        console.log(companyData);
        const {
          name,
          description = "",
          generalInfo = {},
          hrContact = {}
        } = companyData;
        if (!name || typeof name !== "string" || name.trim().length === 0) {
          await session.abortTransaction();
          return sendError(
            c2,
            400,
            "Company name is required and must be a non-empty string"
          );
        }
        if (!generalInfo || typeof generalInfo !== "object") {
          await session.abortTransaction();
          return sendError(c2, 400, "generalInfo must be an object");
        }
        let yearStatsArray = [];
        if (generalInfo.yearStats && Array.isArray(generalInfo.yearStats)) {
          for (const yearStat of generalInfo.yearStats) {
            if (!yearStat.year || !yearStat.hired || !yearStat.highest || !yearStat.average) {
              await session.abortTransaction();
              return sendError(
                c2,
                400,
                "Each yearStat must include year, hired, highest, and average values"
              );
            }
            const hiredNum = Number(yearStat.hired);
            const highestNum = Number(yearStat.highest);
            const averageNum = Number(yearStat.average);
            if (isNaN(hiredNum) || hiredNum < 0) {
              await session.abortTransaction();
              return sendError(c2, 400, "hired must be a non-negative number");
            }
            if (isNaN(highestNum) || highestNum < 0) {
              await session.abortTransaction();
              return sendError(c2, 400, "highest must be a non-negative number");
            }
            if (isNaN(averageNum) || averageNum < 0) {
              await session.abortTransaction();
              return sendError(c2, 400, "average must be a non-negative number");
            }
            yearStatsArray.push({
              year: yearStat.year,
              hired: hiredNum,
              highest: highestNum,
              average: averageNum
            });
          }
        } else if (generalInfo.studentsHired !== void 0 || generalInfo.averagePackage !== void 0 || generalInfo.highestPackage !== void 0) {
          const currentYear = (/* @__PURE__ */ new Date()).getFullYear().toString();
          const studentsHiredNum = Number(generalInfo.studentsHired || 0);
          const averagePackageNum = Number(generalInfo.averagePackage || 0);
          const highestPackageNum = Number(generalInfo.highestPackage || 0);
          if (isNaN(studentsHiredNum) || studentsHiredNum < 0) {
            await session.abortTransaction();
            return sendError(c2, 400, "studentsHired must be a non-negative number");
          }
          if (isNaN(averagePackageNum) || averagePackageNum < 0) {
            await session.abortTransaction();
            return sendError(
              c2,
              400,
              "averagePackage must be a non-negative number"
            );
          }
          if (isNaN(highestPackageNum) || highestPackageNum < 0) {
            await session.abortTransaction();
            return sendError(
              c2,
              400,
              "highestPackage must be a non-negative number"
            );
          }
          yearStatsArray.push({
            year: currentYear,
            hired: studentsHiredNum,
            highest: highestPackageNum,
            average: averagePackageNum
          });
        }
        const processedGeneralInfo = {
          industry: Array.isArray(generalInfo.industry) ? generalInfo.industry : [],
          yearStats: yearStatsArray,
          rolesOffered: Array.isArray(generalInfo.rolesOffered) ? generalInfo.rolesOffered : []
        };
        const processedHrContact = {
          name: hrContact.name || "",
          phone: hrContact.phone || "",
          email: hrContact.email || "",
          website: hrContact.website || ""
        };
        const institute = await Institute_default.findById(instituteId).session(session);
        if (!institute) {
          await session.abortTransaction();
          return sendError(c2, 404, "Institute not found");
        }
        const existingCompany = await Company_default.findOne({
          name: {
            $regex: new RegExp(
              `^${name.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}$`,
              "i"
            )
          },
          deleted: { $ne: true }
          // Using softDelete plugin
        }).session(session);
        if (existingCompany) {
          await session.abortTransaction();
          return sendError(c2, 409, "A company with this name already exists");
        }
        const newCompany = new Company_default({
          name: name.trim(),
          description: description ? description.trim() : "",
          generalInfo: processedGeneralInfo,
          hrContact: processedHrContact,
          isArchived: false
        });
        await newCompany.save({ session });
        await Institute_default.findByIdAndUpdate(
          new mongoose29.Types.ObjectId(instituteId),
          { $push: { companies: newCompany._id } },
          { session }
        );
        await session.commitTransaction();
        await createAuditLog2(
          c2,
          new mongoose29.Types.ObjectId(instituteId),
          `Created new company profile: ${name}`
        );
        return sendSuccess(c2, 201, "Company created successfully", {
          _id: newCompany._id,
          name: newCompany.name,
          description: newCompany.description,
          generalInfo: newCompany.generalInfo,
          hrContact: newCompany.hrContact,
          isArchived: newCompany.isArchived,
          createdAt: newCompany.createdAt,
          updatedAt: newCompany.updatedAt
        });
      } catch (error) {
        await session.abortTransaction();
        const errorMessage = error instanceof Error ? error.message : String(error);
        logger_default.error(`Error creating company: ${errorMessage}`);
        return sendError(c2, 500, "Something went wrong while creating the company");
      } finally {
        session.endSession();
      }
    };
    updateCompany = async (c2) => {
      const session = await mongoose29.startSession();
      session.startTransaction();
      try {
        const authData = c2.get("auth");
        if (!authData) {
          return sendError(c2, 401, "Authentication data missing");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          logger_default.warn(
            `Unauthorized access attempt to update company by user ${authData.userId}`
          );
          return sendError(c2, 403, "You don't have permission to update companies");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 404, "Institute not found");
        }
        const companyData = await c2.req.json().catch(() => ({}));
        const { _id, name, description, generalInfo, hrContact } = companyData;
        if (!_id) {
          await session.abortTransaction();
          return sendError(c2, 400, "Company ID is required");
        }
        const institute = await Institute_default.findById(instituteId).session(session);
        if (!institute) {
          await session.abortTransaction();
          return sendError(c2, 404, "Institute not found");
        }
        const isCompanyInInstitute = institute.companies.some(
          (companyId) => companyId.toString() === _id.toString()
        );
        if (!isCompanyInInstitute) {
          await session.abortTransaction();
          return sendError(c2, 404, "Company not found in this institute");
        }
        const company = await Company_default.findOne({
          _id: new mongoose29.Types.ObjectId(_id),
          deleted: { $ne: true }
          // Using softDelete plugin
        }).session(session);
        if (!company) {
          await session.abortTransaction();
          return sendError(c2, 404, "Company not found");
        }
        if (company.isArchived) {
          await session.abortTransaction();
          return sendError(c2, 403, "Archived companies cannot be modified");
        }
        if (name && name !== company.name) {
          const existingCompany = await Company_default.findOne({
            _id: { $ne: _id },
            name: {
              $regex: new RegExp(
                `^${name.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}$`,
                "i"
              )
            },
            deleted: { $ne: true }
            // Using softDelete plugin
          }).session(session);
          if (existingCompany) {
            await session.abortTransaction();
            return sendError(c2, 409, "A company with this name already exists");
          }
        }
        if (name) company.name = name.trim();
        if (description !== void 0) company.description = description.trim();
        if (generalInfo) {
          if (typeof generalInfo !== "object") {
            await session.abortTransaction();
            return sendError(c2, 400, "generalInfo must be an object");
          }
          if (!company.generalInfo) {
            company.generalInfo = {
              industry: [],
              rolesOffered: []
            };
          }
          if (generalInfo.industry !== void 0) {
            if (!Array.isArray(generalInfo.industry)) {
              await session.abortTransaction();
              return sendError(c2, 400, "industry must be an array");
            }
            company.generalInfo.industry = generalInfo.industry;
          }
          if (generalInfo.rolesOffered !== void 0) {
            if (!Array.isArray(generalInfo.rolesOffered)) {
              await session.abortTransaction();
              return sendError(c2, 400, "rolesOffered must be an array");
            }
            company.generalInfo.rolesOffered = generalInfo.rolesOffered;
          }
          if (generalInfo.yearStats !== void 0) {
            if (!Array.isArray(generalInfo.yearStats)) {
              await session.abortTransaction();
              return sendError(c2, 400, "yearStats must be an array");
            }
            const updatedYearStats = [];
            for (const yearStat of generalInfo.yearStats) {
              if (!yearStat.year || yearStat.hired === void 0 || yearStat.highest === void 0 || yearStat.average === void 0) {
                await session.abortTransaction();
                return sendError(
                  c2,
                  400,
                  "Each yearStat must include year, hired, highest, and average values"
                );
              }
              const hiredNum = Number(yearStat.hired);
              const highestNum = Number(yearStat.highest);
              const averageNum = Number(yearStat.average);
              if (isNaN(hiredNum) || hiredNum < 0) {
                await session.abortTransaction();
                return sendError(c2, 400, "hired must be a non-negative number");
              }
              if (isNaN(highestNum) || highestNum < 0) {
                await session.abortTransaction();
                return sendError(c2, 400, "highest must be a non-negative number");
              }
              if (isNaN(averageNum) || averageNum < 0) {
                await session.abortTransaction();
                return sendError(c2, 400, "average must be a non-negative number");
              }
              updatedYearStats.push({
                year: yearStat.year,
                hired: hiredNum,
                highest: highestNum,
                average: averageNum
              });
            }
            company.generalInfo.yearStats = updatedYearStats;
          }
          if (generalInfo.studentsHired !== void 0 || generalInfo.averagePackage !== void 0 || generalInfo.highestPackage !== void 0) {
            const currentYear = (/* @__PURE__ */ new Date()).getFullYear().toString();
            const studentsHiredNum = Number(generalInfo.studentsHired || 0);
            const averagePackageNum = Number(generalInfo.averagePackage || 0);
            const highestPackageNum = Number(generalInfo.highestPackage || 0);
            if (isNaN(studentsHiredNum) || studentsHiredNum < 0) {
              await session.abortTransaction();
              return sendError(
                c2,
                400,
                "studentsHired must be a non-negative number"
              );
            }
            if (isNaN(averagePackageNum) || averagePackageNum < 0) {
              await session.abortTransaction();
              return sendError(
                c2,
                400,
                "averagePackage must be a non-negative number"
              );
            }
            if (isNaN(highestPackageNum) || highestPackageNum < 0) {
              await session.abortTransaction();
              return sendError(
                c2,
                400,
                "highestPackage must be a non-negative number"
              );
            }
            const yearStats = Array.isArray(company.generalInfo.yearStats) ? [...company.generalInfo.yearStats] : [];
            const existingYearIndex = yearStats.findIndex(
              (stat) => stat.year === currentYear
            );
            if (existingYearIndex >= 0) {
              yearStats[existingYearIndex] = {
                year: currentYear,
                hired: studentsHiredNum,
                highest: highestPackageNum,
                average: averagePackageNum
              };
            } else {
              yearStats.push({
                year: currentYear,
                hired: studentsHiredNum,
                highest: highestPackageNum,
                average: averagePackageNum
              });
            }
            company.generalInfo.yearStats = yearStats;
          }
        }
        if (hrContact !== void 0) {
          if (typeof hrContact !== "object") {
            await session.abortTransaction();
            return sendError(c2, 400, "hrContact must be an object");
          }
          company.hrContact = {
            name: hrContact.name || company.hrContact?.name || "",
            phone: hrContact.phone || company.hrContact?.phone || "",
            email: hrContact.email || company.hrContact?.email || "",
            website: hrContact.website || company.hrContact?.website || ""
          };
        }
        await company.save({ session });
        await session.commitTransaction();
        await createAuditLog2(
          c2,
          new mongoose29.Types.ObjectId(instituteId),
          `Updated company profile: ${company.name}`
        );
        return sendSuccess(c2, 200, "Company updated successfully", {
          _id: company._id,
          name: company.name,
          description: company.description,
          generalInfo: company.generalInfo,
          hrContact: company.hrContact,
          isArchived: company.isArchived,
          createdAt: company.createdAt,
          updatedAt: company.updatedAt
        });
      } catch (error) {
        await session.abortTransaction();
        const errorMessage = error instanceof Error ? error.message : String(error);
        logger_default.error(`Error updating company: ${errorMessage}`);
        return sendError(c2, 500, "Something went wrong while updating the company");
      } finally {
        session.endSession();
      }
    };
    archiveCompany = async (c2) => {
      const session = await mongoose29.startSession();
      session.startTransaction();
      try {
        const authData = c2.get("auth");
        if (!authData) {
          return sendError(c2, 401, "Authentication data missing");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          logger_default.warn(
            `Unauthorized access attempt to archive company by user ${authData.userId}`
          );
          return sendError(
            c2,
            403,
            "You don't have permission to archive/unarchive companies"
          );
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 404, "Institute not found");
        }
        const reqData = await c2.req.json().catch(() => ({}));
        const { id } = reqData;
        if (!id) {
          await session.abortTransaction();
          return sendError(c2, 400, "Company ID is required");
        }
        const institute = await Institute_default.findById(instituteId).session(session);
        if (!institute) {
          await session.abortTransaction();
          return sendError(c2, 404, "Institute not found");
        }
        const isCompanyInInstitute = institute.companies.some(
          (companyId) => companyId.toString() === id.toString()
        );
        if (!isCompanyInInstitute) {
          await session.abortTransaction();
          return sendError(c2, 404, "Company not found in this institute");
        }
        const company = await Company_default.findOne({
          _id: new mongoose29.Types.ObjectId(id),
          deleted: { $ne: true }
          // Using softDelete plugin
        }).session(session);
        if (!company) {
          await session.abortTransaction();
          return sendError(c2, 404, "Company not found");
        }
        company.isArchived = !company.isArchived;
        await company.save({ session });
        const status = company.isArchived ? "Archived" : "Unarchived";
        await session.commitTransaction();
        await createAuditLog2(
          c2,
          new mongoose29.Types.ObjectId(instituteId),
          `${status} company: ${company.name}`
        );
        return sendSuccess(c2, 200, `Company ${status.toLowerCase()} successfully`, {
          _id: company._id,
          name: company.name,
          isArchived: company.isArchived
        });
      } catch (error) {
        await session.abortTransaction();
        const errorMessage = error instanceof Error ? error.message : String(error);
        logger_default.error(`Error archiving company: ${errorMessage}`);
        return sendError(
          c2,
          500,
          "Something went wrong while changing company archive status"
        );
      } finally {
        session.endSession();
      }
    };
    deleteCompany = async (c2) => {
      const session = await mongoose29.startSession();
      let transactionCommitted = false;
      session.startTransaction();
      try {
        const authData = c2.get("auth");
        if (!authData) {
          return sendError(c2, 401, "Authentication data missing");
        }
        const perms = await checkInstitutePermission_default.all(c2, ["manage_drive"]);
        if (!perms.allowed) {
          logger_default.warn(
            `Unauthorized access attempt to delete company by user ${authData.userId}`
          );
          return sendError(c2, 403, "You don't have permission to delete companies");
        }
        const instituteId = perms.data?.institute?._id;
        if (!instituteId) {
          return sendError(c2, 404, "Institute not found");
        }
        const companyId = c2.req.param("id");
        if (!companyId) {
          await session.abortTransaction();
          return sendError(c2, 400, "Company ID is required");
        }
        const institute = await Institute_default.findById(instituteId).session(session);
        if (!institute) {
          await session.abortTransaction();
          return sendError(c2, 404, "Institute not found");
        }
        const isCompanyInInstitute = institute.companies.some(
          (id) => id.toString() === companyId
        );
        if (!isCompanyInInstitute) {
          await session.abortTransaction();
          return sendError(c2, 404, "Company not found in this institute");
        }
        const company = await Company_default.findOne({
          _id: companyId,
          deleted: { $ne: true }
          // Using softDelete plugin
        }).session(session);
        if (!company) {
          await session.abortTransaction();
          return sendError(c2, 404, "Company not found");
        }
        const companyName = company.name;
        await Institute_default.findByIdAndUpdate(
          new mongoose29.Types.ObjectId(instituteId),
          { $pull: { companies: companyId } },
          { session }
        );
        await company.deleteOne();
        await session.commitTransaction();
        transactionCommitted = true;
        await createAuditLog2(
          c2,
          new mongoose29.Types.ObjectId(instituteId),
          `Deleted company: ${companyName}`,
          "warning"
        );
        return sendSuccess(c2, 200, "Company deleted successfully");
      } catch (error) {
        if (!transactionCommitted) {
          await session.abortTransaction();
        }
        const errorMessage = error instanceof Error ? error.message : String(error);
        logger_default.error(`Error deleting company: ${errorMessage}`);
        return sendError(c2, 500, "Something went wrong while deleting the company");
      } finally {
        session.endSession();
      }
    };
    companyController_default = {
      getCompanies,
      createCompany,
      updateCompany,
      archiveCompany,
      deleteCompany,
      getCompany
    };
  }
});

// src/controllers/campus/company/companyAnalyticsController.ts
import mongoose30 from "mongoose";
var getCompanyAnalytics2, getCompanyHiringTrends, getCompanySkillDemand, getCompanyCandidateSources, generateCompanyAnalytics, generateYearwiseStats, generateEducationStats, generateSkillStats, generateWorkStats, generateDriveStats, generateInstituteStats, generateApplicationFunnelStats, generateSalaryStats, generateTopScoringCandidates, generateYearwiseTrends, generateSkillDemandAnalytics, generateCandidateSourceAnalytics, companyAnalyticsController_default;
var init_companyAnalyticsController = __esm({
  "src/controllers/campus/company/companyAnalyticsController.ts"() {
    "use strict";
    init_sendResponse();
    init_logger();
    init_checkInstitutePermission();
    init_Company();
    init_Drive();
    init_AppliedDrive();
    init_Candidate();
    init_Institute();
    getCompanyAnalytics2 = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const { id } = c2.req.param();
        if (!id || !mongoose30.Types.ObjectId.isValid(id)) {
          return sendError(c2, 400, "Invalid company ID");
        }
        const company = await Company_default.findById(id);
        if (!company) {
          return sendError(c2, 404, "Company not found");
        }
        const drives = await Drive_default.find({ company: id }).lean();
        const driveIds = drives.map((drive) => drive._id);
        const appliedDrives = await AppliedDrive_default.find({
          drive: { $in: driveIds }
        }).populate("user", "name email").lean();
        const candidateIds = appliedDrives.map(
          (application) => application.user._id
        );
        const candidates = await Candidate_default.find({
          _id: { $in: candidateIds }
        }).lean();
        const instituteIds = [...new Set(drives.map((drive) => drive.institute))];
        const institutes = await Institute_default.find({
          _id: { $in: instituteIds }
        }).lean();
        const analytics = await generateCompanyAnalytics(
          drives,
          appliedDrives,
          candidates,
          institutes
        );
        return sendSuccess(
          c2,
          200,
          "Company analytics fetched successfully",
          analytics
        );
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    getCompanyHiringTrends = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const { id } = c2.req.param();
        if (!id || !mongoose30.Types.ObjectId.isValid(id)) {
          return sendError(c2, 400, "Invalid company ID");
        }
        const company = await Company_default.findById(id);
        if (!company) {
          return sendError(c2, 404, "Company not found");
        }
        const drives = await Drive_default.find({ company: id }).lean();
        const driveIds = drives.map((drive) => drive._id);
        const appliedDrives = await AppliedDrive_default.find({
          drive: { $in: driveIds }
        }).lean();
        const yearwiseTrends = await generateYearwiseTrends(appliedDrives);
        return sendSuccess(
          c2,
          200,
          "Hiring trends fetched successfully",
          yearwiseTrends
        );
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    getCompanySkillDemand = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const { id } = c2.req.param();
        if (!id || !mongoose30.Types.ObjectId.isValid(id)) {
          return sendError(c2, 400, "Invalid company ID");
        }
        const company = await Company_default.findById(id);
        if (!company) {
          return sendError(c2, 404, "Company not found");
        }
        const drives = await Drive_default.find({ company: id }).lean();
        const driveIds = drives.map((drive) => drive._id);
        const appliedDrives = await AppliedDrive_default.find({
          drive: { $in: driveIds },
          status: "hired"
        }).lean();
        const hiredCandidateIds = appliedDrives.map((app15) => app15.user);
        const hiredCandidates = await Candidate_default.find({
          _id: { $in: hiredCandidateIds }
        }).lean();
        const skillDemandAnalytics = generateSkillDemandAnalytics(
          drives,
          hiredCandidates
        );
        return sendSuccess(
          c2,
          200,
          "Skill demand analytics fetched successfully",
          skillDemandAnalytics
        );
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    getCompanyCandidateSources = async (c2) => {
      try {
        const perms = await checkInstitutePermission_default.all(c2, ["view_drive"]);
        if (!perms.allowed) {
          return sendError(c2, 401, "Unauthorized");
        }
        const { id } = c2.req.param();
        if (!id || !mongoose30.Types.ObjectId.isValid(id)) {
          return sendError(c2, 400, "Invalid company ID");
        }
        const company = await Company_default.findById(id);
        if (!company) {
          return sendError(c2, 404, "Company not found");
        }
        const drives = await Drive_default.find({ company: id }).lean();
        const driveIds = drives.map((drive) => drive._id);
        const appliedDrives = await AppliedDrive_default.find({
          drive: { $in: driveIds }
        }).lean();
        const candidateIds = appliedDrives.map((app15) => app15.user);
        const candidates = await Candidate_default.find({
          _id: { $in: candidateIds }
        }).lean();
        const instituteIds = [
          ...new Set(candidates.map((c3) => c3.institute).filter(Boolean))
        ];
        const institutes = await Institute_default.find({
          _id: { $in: instituteIds }
        }).select("name").lean();
        const candidateSourceAnalytics = generateCandidateSourceAnalytics(
          appliedDrives,
          candidates,
          institutes
        );
        return sendSuccess(
          c2,
          200,
          "Candidate source analytics fetched successfully",
          candidateSourceAnalytics
        );
      } catch (e2) {
        logger_default.error(e2);
        return sendError(c2, 500, "Something went wrong");
      }
    };
    generateCompanyAnalytics = async (drives, appliedDrives, candidates, institutes) => {
      const hiredApplications = appliedDrives.filter(
        (app15) => app15.status === "hired"
      );
      const totalHired = hiredApplications.length;
      const totalApplicants = appliedDrives.length;
      const overallAcceptanceRate = totalApplicants > 0 ? totalHired / totalApplicants * 100 : 0;
      const salaryData = hiredApplications.filter((app15) => app15.salary && app15.salary > 0).map((app15) => app15.salary);
      const averageSalary = salaryData.length > 0 ? salaryData.reduce((sum, salary) => sum + salary, 0) / salaryData.length : 0;
      const highestSalary = salaryData.length > 0 ? Math.max(...salaryData) : 0;
      const yearwiseStats = await generateYearwiseStats(hiredApplications);
      const candidateEducationStats = generateEducationStats(
        candidates,
        hiredApplications
      );
      const candidateSkillStats = generateSkillStats(candidates, hiredApplications);
      const candidateWorkStats = generateWorkStats(candidates, hiredApplications);
      const driveStats = generateDriveStats(drives, appliedDrives);
      const instituteRelationStats = generateInstituteStats(
        institutes,
        drives,
        hiredApplications,
        appliedDrives
      );
      const applicationFunnelStats = generateApplicationFunnelStats(
        appliedDrives,
        drives
      );
      const salaryStats = generateSalaryStats(hiredApplications, drives);
      const topScoringCandidates = generateTopScoringCandidates(
        appliedDrives,
        candidates,
        institutes
      );
      return {
        overview: {
          totalHired,
          totalApplicants,
          overallAcceptanceRate,
          totalDrives: drives.length,
          averageSalary,
          highestSalary
        },
        yearwiseStats,
        candidateEducationStats,
        candidateSkillStats,
        candidateWorkStats,
        driveStats,
        instituteRelationStats,
        applicationFunnelStats,
        salaryStats,
        topScoringCandidates
      };
    };
    generateYearwiseStats = async (allApplications) => {
      const yearStats = {};
      allApplications.forEach((app15) => {
        const year = new Date(app15.createdAt).getFullYear().toString();
        if (!yearStats[year]) {
          yearStats[year] = {
            year,
            hired: 0,
            totalApplicants: 0,
            applicationRate: 0,
            offerAcceptanceRate: 0,
            averageSalary: 0,
            highestSalary: 0
          };
        }
        yearStats[year].totalApplicants++;
        if (app15.status === "hired") {
          yearStats[year].hired++;
          if (app15.salary) {
            const currentTotal = yearStats[year].averageSalary * (yearStats[year].hired - 1);
            yearStats[year].averageSalary = (currentTotal + app15.salary) / yearStats[year].hired;
            if (app15.salary > yearStats[year].highestSalary) {
              yearStats[year].highestSalary = app15.salary;
            }
          }
        }
      });
      Object.values(yearStats).forEach((stats) => {
        stats.applicationRate = stats.totalApplicants > 0 ? stats.hired / stats.totalApplicants * 100 : 0;
        stats.offerAcceptanceRate = stats.hired > 0 ? 80 : 0;
      });
      return Object.values(yearStats).sort(
        (a2, b2) => parseInt(a2.year) - parseInt(b2.year)
      );
    };
    generateEducationStats = (candidates, hiredApplications) => {
      const degreeDistribution = {};
      const schoolDistribution = {};
      const branchDistribution = {};
      let totalPercentage = 0;
      let validPercentageCount = 0;
      const hiredCandidateIds = new Set(
        hiredApplications.map((app15) => app15.user._id.toString())
      );
      candidates.filter((candidate) => hiredCandidateIds.has(candidate._id.toString())).forEach((candidate) => {
        if (candidate.education && candidate.education.length > 0) {
          const latestEducation = candidate.education.sort(
            (a2, b2) => new Date(b2.endYear || 9999).getTime() - new Date(a2.endYear || 9999).getTime()
          )[0];
          degreeDistribution[latestEducation.degree] = (degreeDistribution[latestEducation.degree] || 0) + 1;
          schoolDistribution[latestEducation.school] = (schoolDistribution[latestEducation.school] || 0) + 1;
          branchDistribution[latestEducation.branch] = (branchDistribution[latestEducation.branch] || 0) + 1;
          if (latestEducation.percentage) {
            totalPercentage += latestEducation.percentage;
            validPercentageCount++;
          }
        }
      });
      const averagePercentage = validPercentageCount > 0 ? totalPercentage / validPercentageCount : 0;
      return {
        degreeDistribution,
        schoolDistribution,
        branchDistribution,
        averagePercentage
      };
    };
    generateSkillStats = (candidates, hiredApplications) => {
      const skillCounts = {};
      const skillProficiencySum = {};
      const skillProficiencyCount = {};
      const hiredCandidateIds = new Set(
        hiredApplications.map((app15) => app15.user._id.toString())
      );
      candidates.filter((candidate) => hiredCandidateIds.has(candidate._id.toString())).forEach((candidate) => {
        if (candidate.technicalSkills && candidate.technicalSkills.length > 0) {
          candidate.technicalSkills.forEach((skillData) => {
            const skillName = skillData.skill;
            skillCounts[skillName] = (skillCounts[skillName] || 0) + 1;
            if (skillData.proficiency) {
              skillProficiencySum[skillName] = (skillProficiencySum[skillName] || 0) + skillData.proficiency;
              skillProficiencyCount[skillName] = (skillProficiencyCount[skillName] || 0) + 1;
            }
          });
        }
      });
      const averageProficiency = {};
      Object.keys(skillProficiencySum).forEach((skill) => {
        averageProficiency[skill] = skillProficiencyCount[skill] > 0 ? skillProficiencySum[skill] / skillProficiencyCount[skill] : 0;
      });
      const topSkills = Object.entries(skillCounts).map(([skill, count]) => ({ skill, count })).sort((a2, b2) => b2.count - a2.count).slice(0, 10);
      return {
        topSkills,
        skillDistribution: skillCounts,
        averageProficiency
      };
    };
    generateWorkStats = (candidates, hiredApplications) => {
      const companyCount = {};
      const workTypeCount = {};
      let totalExperience = 0;
      let candidatesWithExperience = 0;
      const hiredCandidateIds = new Set(
        hiredApplications.map((app15) => app15.user._id.toString())
      );
      candidates.filter((candidate) => hiredCandidateIds.has(candidate._id.toString())).forEach((candidate) => {
        if (candidate.workExperience && candidate.workExperience.length > 0) {
          let candidateExperience = 0;
          candidate.workExperience.forEach((work) => {
            companyCount[work.company] = (companyCount[work.company] || 0) + 1;
            workTypeCount[work.type] = (workTypeCount[work.type] || 0) + 1;
            const startDate = new Date(work.startDate);
            const endDate = work.current ? /* @__PURE__ */ new Date() : new Date(work.endDate);
            const experienceYears = (endDate.getTime() - startDate.getTime()) / (1e3 * 60 * 60 * 24 * 365);
            candidateExperience += experienceYears;
          });
          totalExperience += candidateExperience;
          candidatesWithExperience++;
        }
      });
      const averageWorkExperience = candidatesWithExperience > 0 ? totalExperience / candidatesWithExperience : 0;
      const previousCompanies = Object.entries(companyCount).map(([company, count]) => ({ company, count })).sort((a2, b2) => b2.count - a2.count).slice(0, 10);
      return {
        previousCompanies,
        averageWorkExperience,
        workTypeDistribution: workTypeCount
      };
    };
    generateDriveStats = (drives, appliedDrives) => {
      const driveTypeCount = {};
      const skillsRequired = {};
      let totalDriveDuration = 0;
      let activeDriveCount = 0;
      let completedDriveCount = 0;
      drives.forEach((drive) => {
        driveTypeCount[drive.type] = (driveTypeCount[drive.type] || 0) + 1;
        if (drive.skills && drive.skills.length > 0) {
          drive.skills.forEach((skill) => {
            skillsRequired[skill] = (skillsRequired[skill] || 0) + 1;
          });
        }
        if (drive.applicationRange && drive.applicationRange.start && drive.applicationRange.end) {
          const startDate = new Date(drive.applicationRange.start);
          const endDate = new Date(drive.applicationRange.end);
          const driveDurationDays = (endDate.getTime() - startDate.getTime()) / (1e3 * 60 * 60 * 24);
          totalDriveDuration += driveDurationDays;
        }
        const currentDate = /* @__PURE__ */ new Date();
        if (drive.applicationRange) {
          const endDate = drive.applicationRange.end ? new Date(drive.applicationRange.end) : null;
          if (endDate && endDate < currentDate) {
            completedDriveCount++;
          } else {
            activeDriveCount++;
          }
        }
      });
      const applicationsPerDrive = {};
      const hiresPerDrive = {};
      appliedDrives.forEach((app15) => {
        const driveId = app15.drive.toString();
        applicationsPerDrive[driveId] = (applicationsPerDrive[driveId] || 0) + 1;
        if (app15.status === "hired") {
          hiresPerDrive[driveId] = (hiresPerDrive[driveId] || 0) + 1;
        }
      });
      const totalDrives = drives.length;
      const averageApplicationsPerDrive = totalDrives > 0 ? Object.values(applicationsPerDrive).reduce(
        (sum, count) => sum + count,
        0
      ) / totalDrives : 0;
      const averageHiresPerDrive = totalDrives > 0 ? Object.values(hiresPerDrive).reduce((sum, count) => sum + count, 0) / totalDrives : 0;
      const averageDriveDuration = totalDrives > 0 ? totalDriveDuration / totalDrives : 0;
      const mostCommonSkillsRequired = Object.entries(skillsRequired).map(([skill, count]) => ({ skill, count })).sort((a2, b2) => b2.count - a2.count).slice(0, 10);
      return {
        totalDrives,
        activeCount: activeDriveCount,
        completedCount: completedDriveCount,
        averageApplicationsPerDrive,
        averageHiresPerDrive,
        driveTypesDistribution: driveTypeCount,
        averageDriveDuration,
        mostCommonSkillsRequired
      };
    };
    generateInstituteStats = (institutes, drives, hiredApplications, allApplications) => {
      const instituteHireCount = {};
      const instituteApplicationCount = {};
      const instituteDriveCount = {};
      const instituteIdToName = {};
      institutes.forEach((institute) => {
        instituteIdToName[institute._id.toString()] = institute.name;
      });
      drives.forEach((drive) => {
        if (drive.institute) {
          const instituteId = drive.institute.toString();
          if (!instituteDriveCount[instituteId]) {
            instituteDriveCount[instituteId] = {
              count: 0,
              instituteId: drive.institute,
              name: instituteIdToName[instituteId] || "Unknown Institute"
            };
          }
          instituteDriveCount[instituteId].count++;
        }
      });
      allApplications.forEach((app15) => {
        const driveInfo = drives.find((d2) => d2._id.equals(app15.drive));
        if (driveInfo && driveInfo.institute) {
          const instituteId = driveInfo.institute.toString();
          instituteApplicationCount[instituteId] = (instituteApplicationCount[instituteId] || 0) + 1;
        }
      });
      hiredApplications.forEach((app15) => {
        const driveInfo = drives.find((d2) => d2._id.equals(app15.drive));
        if (driveInfo && driveInfo.institute) {
          const instituteId = driveInfo.institute.toString();
          instituteHireCount[instituteId] = (instituteHireCount[instituteId] || 0) + 1;
        }
      });
      const institutePlacementRate = {};
      Object.keys(instituteApplicationCount).forEach((instituteId) => {
        const applications = instituteApplicationCount[instituteId] || 0;
        const hires = instituteHireCount[instituteId] || 0;
        institutePlacementRate[instituteIdToName[instituteId] || instituteId] = applications > 0 ? hires / applications * 100 : 0;
      });
      const topInstitutes = Object.entries(instituteHireCount).map(([instituteId, count]) => ({
        institute: instituteIdToName[instituteId] || "Unknown Institute",
        hiredCount: count,
        instituteId: new mongoose30.Types.ObjectId(instituteId)
      })).sort((a2, b2) => b2.hiredCount - a2.hiredCount).slice(0, 10);
      return {
        topInstitutes,
        institutePlacementRate
      };
    };
    generateApplicationFunnelStats = (appliedDrives, drives) => {
      const stageCount = {};
      const stageStartCounts = {};
      const stageEndCounts = {};
      const stageDurations = {};
      appliedDrives.forEach((app15) => {
        const drive = drives.find((d2) => d2._id.equals(app15.drive));
        if (drive && drive.workflow && drive.workflow.steps) {
          const workflowSteps = drive.workflow.steps;
          let currentStageIndex = -1;
          if (app15.disqualifiedStage) {
            const stageIndex = workflowSteps.findIndex(
              (step) => step._id.toString() === app15.disqualifiedStage
            );
            if (stageIndex !== -1) {
              currentStageIndex = stageIndex;
              const stageName = workflowSteps[stageIndex].name;
              stageCount[stageName] = (stageCount[stageName] || 0) + 1;
            }
          } else if (app15.status === "hired") {
            workflowSteps.forEach((step) => {
              const stageName = step.name;
              stageCount[stageName] = (stageCount[stageName] || 0) + 1;
            });
            currentStageIndex = workflowSteps.length - 1;
          } else if (app15.scores && app15.scores.length > 0) {
            const scoredStageIds = new Set(
              app15.scores.map((score) => score.stageId.toString())
            );
            workflowSteps.forEach((step, index) => {
              const stepId = step._id.toString();
              if (scoredStageIds.has(stepId)) {
                currentStageIndex = Math.max(currentStageIndex, index);
                const stageName = step.name;
                stageCount[stageName] = (stageCount[stageName] || 0) + 1;
              }
            });
          }
          for (let i2 = 0; i2 <= currentStageIndex && i2 < workflowSteps.length; i2++) {
            const step = workflowSteps[i2];
            const stageName = step.name;
            stageStartCounts[stageName] = (stageStartCounts[stageName] || 0) + 1;
            if (app15.status !== "hired" && i2 === currentStageIndex) {
              stageEndCounts[stageName] = (stageEndCounts[stageName] || 0) + 1;
            }
            if (step.schedule && step.schedule.startTime && step.schedule.endTime) {
              const startTime = new Date(step.schedule.startTime);
              const endTime = new Date(step.schedule.endTime);
              const durationDays = (endTime.getTime() - startTime.getTime()) / (1e3 * 60 * 60 * 24);
              if (!stageDurations[stageName]) {
                stageDurations[stageName] = [];
              }
              stageDurations[stageName].push(durationDays);
            }
          }
          if (app15.status === "hired") {
            const lastStageName = workflowSteps[workflowSteps.length - 1].name;
            stageEndCounts[lastStageName] = (stageEndCounts[lastStageName] || 0) + 1;
          }
        }
      });
      const stageConversionRates = {};
      Object.keys(stageStartCounts).forEach((stageName) => {
        const started = stageStartCounts[stageName] || 0;
        const ended = stageEndCounts[stageName] || 0;
        stageConversionRates[stageName] = started > 0 ? (started - ended) / started * 100 : 0;
      });
      const averageTimeInStage = {};
      Object.keys(stageDurations).forEach((stageName) => {
        const durations = stageDurations[stageName];
        averageTimeInStage[stageName] = durations.length > 0 ? durations.reduce((sum, duration) => sum + duration, 0) / durations.length : 0;
      });
      return {
        total: appliedDrives.length,
        byStage: stageCount,
        stageConversionRates,
        averageTimeInStage
      };
    };
    generateSalaryStats = (hiredApplications, drives) => {
      const salaryData = hiredApplications.filter(
        (app15) => app15.salary && app15.salary > 0
      );
      const salaries = salaryData.map((app15) => app15.salary);
      const overallAverage = salaries.length > 0 ? salaries.reduce((sum, salary) => sum + salary, 0) / salaries.length : 0;
      let overallMedian = 0;
      if (salaries.length > 0) {
        const sortedSalaries = [...salaries].sort((a2, b2) => a2 - b2);
        const middleIndex = Math.floor(sortedSalaries.length / 2);
        if (sortedSalaries.length % 2 === 0) {
          overallMedian = (sortedSalaries[middleIndex - 1] + sortedSalaries[middleIndex]) / 2;
        } else {
          overallMedian = sortedSalaries[middleIndex];
        }
      }
      const byYear = {};
      salaryData.forEach((app15) => {
        const year = new Date(app15.createdAt).getFullYear().toString();
        if (!byYear[year]) {
          byYear[year] = {
            salaries: [],
            average: 0,
            highest: 0,
            lowest: Infinity
          };
        }
        byYear[year].salaries.push(app15.salary);
      });
      const yearStatistics = {};
      Object.entries(byYear).forEach(([year, data]) => {
        const average = data.salaries.reduce((sum, salary) => sum + salary, 0) / data.salaries.length;
        const highest = Math.max(...data.salaries);
        const lowest = Math.min(...data.salaries);
        yearStatistics[year] = { average, highest, lowest };
      });
      const byRole = {};
      salaryData.forEach((app15) => {
        const drive = drives.find((d2) => d2._id.equals(app15.drive));
        if (drive) {
          const role = drive.title || "Unknown";
          if (!byRole[role]) {
            byRole[role] = {
              salaries: [],
              average: 0,
              highest: 0,
              lowest: Infinity
            };
          }
          byRole[role].salaries.push(app15.salary);
        }
      });
      const roleStatistics = {};
      Object.entries(byRole).forEach(([role, data]) => {
        const average = data.salaries.reduce((sum, salary) => sum + salary, 0) / data.salaries.length;
        const highest = Math.max(...data.salaries);
        const lowest = Math.min(...data.salaries);
        roleStatistics[role] = { average, highest, lowest };
      });
      return {
        overallAverage,
        overallMedian,
        byYear: yearStatistics,
        byRole: roleStatistics
      };
    };
    generateTopScoringCandidates = (appliedDrives, candidates, institutes) => {
      const instituteIdToName = {};
      institutes.forEach((institute) => {
        instituteIdToName[institute._id.toString()] = institute.name;
      });
      const candidateMap = {};
      candidates.forEach((candidate) => {
        candidateMap[candidate._id.toString()] = candidate;
      });
      const candidateScores = {};
      appliedDrives.forEach((app15) => {
        const candidateId = app15.user._id.toString();
        if (!candidateScores[candidateId]) {
          candidateScores[candidateId] = {
            totalScore: 0,
            scoreCount: 0,
            hired: app15.status === "hired",
            candidateId: app15.user._id
          };
        }
        if (app15.status === "hired") {
          candidateScores[candidateId].hired = true;
        }
        if (app15.scores && app15.scores.length > 0) {
          app15.scores.forEach((scoreData) => {
            if (typeof scoreData.score === "number") {
              candidateScores[candidateId].totalScore += scoreData.score;
              candidateScores[candidateId].scoreCount++;
            }
          });
        }
      });
      const candidateAverageScores = Object.entries(candidateScores).map(([candidateId, scoreData]) => {
        const candidate = candidateMap[candidateId];
        if (!candidate) {
          return null;
        }
        const averageScore = scoreData.scoreCount > 0 ? scoreData.totalScore / scoreData.scoreCount : 0;
        return {
          id: scoreData.candidateId,
          name: candidate.name,
          email: candidate.email,
          score: averageScore,
          hired: scoreData.hired,
          institute: instituteIdToName[candidate.institute?.toString()] || "Unknown"
        };
      }).filter((item) => item !== null).sort((a2, b2) => b2.score - a2.score).slice(0, 20);
      return candidateAverageScores;
    };
    generateYearwiseTrends = async (appliedDrives) => {
      const monthlyData = {};
      const yearlyData = {};
      appliedDrives.forEach((app15) => {
        const date = new Date(app15.createdAt);
        const year = date.getFullYear().toString();
        const month = date.getMonth() + 1;
        const yearMonth = `${year}-${month.toString().padStart(2, "0")}`;
        if (!yearlyData[year]) {
          yearlyData[year] = {
            year,
            applications: 0,
            hired: 0,
            rejected: 0,
            inProgress: 0,
            averageSalary: 0,
            totalSalary: 0,
            hiredCount: 0
          };
        }
        if (!monthlyData[yearMonth]) {
          monthlyData[yearMonth] = {
            year,
            month,
            applications: 0,
            hired: 0,
            rejected: 0,
            inProgress: 0
          };
        }
        yearlyData[year].applications++;
        monthlyData[yearMonth].applications++;
        switch (app15.status) {
          case "hired":
            yearlyData[year].hired++;
            monthlyData[yearMonth].hired++;
            if (app15.salary && app15.salary > 0) {
              yearlyData[year].totalSalary += app15.salary;
              yearlyData[year].hiredCount++;
            }
            break;
          case "rejected":
            yearlyData[year].rejected++;
            monthlyData[yearMonth].rejected++;
            break;
          case "inprogress":
            yearlyData[year].inProgress++;
            monthlyData[yearMonth].inProgress++;
            break;
        }
      });
      Object.values(yearlyData).forEach((data) => {
        data.averageSalary = data.hiredCount > 0 ? data.totalSalary / data.hiredCount : 0;
        delete data.totalSalary;
        delete data.hiredCount;
      });
      const monthlyTrends = Object.values(monthlyData).sort((a2, b2) => {
        if (a2.year !== b2.year) {
          return parseInt(a2.year) - parseInt(b2.year);
        }
        return a2.month - b2.month;
      });
      const yearlyTrends = Object.values(yearlyData).sort(
        (a2, b2) => parseInt(a2.year) - parseInt(b2.year)
      );
      return {
        monthly: monthlyTrends,
        yearly: yearlyTrends
      };
    };
    generateSkillDemandAnalytics = (drives, hiredCandidates) => {
      const requiredSkillCounts = {};
      let totalDrives = 0;
      drives.forEach((drive) => {
        if (drive.skills && drive.skills.length > 0) {
          totalDrives++;
          drive.skills.forEach((skill) => {
            requiredSkillCounts[skill] = (requiredSkillCounts[skill] || 0) + 1;
          });
        }
      });
      const skillDemandPercentage = {};
      Object.entries(requiredSkillCounts).forEach(([skill, count]) => {
        skillDemandPercentage[skill] = totalDrives > 0 ? count / totalDrives * 100 : 0;
      });
      const hiredCandidateSkillCounts = {};
      let totalHiredCandidates = hiredCandidates.length;
      hiredCandidates.forEach((candidate) => {
        if (candidate.technicalSkills && candidate.technicalSkills.length > 0) {
          candidate.technicalSkills.forEach((skillData) => {
            const skillName = skillData.skill;
            hiredCandidateSkillCounts[skillName] = (hiredCandidateSkillCounts[skillName] || 0) + 1;
          });
        }
      });
      const hiredSkillPercentage = {};
      Object.entries(hiredCandidateSkillCounts).forEach(([skill, count]) => {
        hiredSkillPercentage[skill] = totalHiredCandidates > 0 ? count / totalHiredCandidates * 100 : 0;
      });
      const skillGaps = [];
      Object.entries(skillDemandPercentage).forEach(([skill, demandPercentage]) => {
        const availabilityPercentage = hiredSkillPercentage[skill] || 0;
        const gap = demandPercentage - availabilityPercentage;
        if (gap > 0) {
          skillGaps.push({
            skill,
            demandPercentage,
            availabilityPercentage,
            gap
          });
        }
      });
      skillGaps.sort((a2, b2) => b2.gap - a2.gap);
      const skillCategories = {
        "Programming Languages": [
          "JavaScript",
          "Python",
          "Java",
          "C++",
          "C#",
          "Ruby",
          "PHP",
          "Swift",
          "Kotlin",
          "Go",
          "Rust",
          "TypeScript"
        ],
        "Web Development": [
          "HTML",
          "CSS",
          "React",
          "Angular",
          "Vue",
          "Node.js",
          "Express.js",
          "Django",
          "Flask",
          "Ruby on Rails",
          "Bootstrap",
          "Tailwind CSS"
        ],
        "Data Science": [
          "SQL",
          "R",
          "Pandas",
          "NumPy",
          "SciPy",
          "TensorFlow",
          "PyTorch",
          "Machine Learning",
          "Deep Learning",
          "Data Analysis",
          "Data Visualization"
        ],
        DevOps: [
          "AWS",
          "Azure",
          "GCP",
          "Docker",
          "Kubernetes",
          "Jenkins",
          "CI/CD",
          "Git",
          "GitHub",
          "GitLab",
          "Terraform",
          "Ansible"
        ],
        "Mobile Development": [
          "Android",
          "iOS",
          "React Native",
          "Flutter",
          "Swift",
          "Kotlin",
          "Xamarin"
        ],
        Database: [
          "SQL",
          "MySQL",
          "PostgreSQL",
          "MongoDB",
          "Firebase",
          "Redis",
          "Oracle",
          "DynamoDB",
          "Cassandra",
          "Neo4j",
          "SQLite"
        ],
        Other: []
      };
      const categorizedSkills = {};
      Object.entries(skillDemandPercentage).forEach(([skill, percentage]) => {
        let category = "Other";
        for (const [cat, skills] of Object.entries(skillCategories)) {
          if (skills.some((s2) => skill.toLowerCase().includes(s2.toLowerCase()))) {
            category = cat;
            break;
          }
        }
        if (!categorizedSkills[category]) {
          categorizedSkills[category] = [];
        }
        categorizedSkills[category].push({
          skill,
          count: requiredSkillCounts[skill] || 0,
          percentage
        });
      });
      Object.values(categorizedSkills).forEach((skills) => {
        skills.sort((a2, b2) => b2.percentage - a2.percentage);
      });
      const currentYear = (/* @__PURE__ */ new Date()).getFullYear();
      const top10Skills = Object.entries(requiredSkillCounts).sort(([, a2], [, b2]) => b2 - a2).slice(0, 10).map(([skill]) => skill);
      const skillTrends = {};
      top10Skills.forEach((skill) => {
        skillTrends[skill] = Array.from({ length: 3 }, (_2, i2) => {
          const year = currentYear - 2 + i2;
          let percentage = year === currentYear ? skillDemandPercentage[skill] : skillDemandPercentage[skill] * (0.7 + Math.random() * 0.5);
          return { year, percentage };
        });
      });
      return {
        topSkills: Object.entries(requiredSkillCounts).map(([skill, count]) => ({
          skill,
          count,
          percentage: skillDemandPercentage[skill]
        })).sort((a2, b2) => b2.count - a2.count).slice(0, 15),
        skillGaps: skillGaps.slice(0, 10),
        categorizedSkills,
        skillTrends
      };
    };
    generateCandidateSourceAnalytics = (appliedDrives, candidates, institutes) => {
      const instituteIdToName = {};
      institutes.forEach((institute) => {
        instituteIdToName[institute._id.toString()] = institute.name;
      });
      const candidateToInstitute = {};
      candidates.forEach((candidate) => {
        if (candidate.institute) {
          candidateToInstitute[candidate._id.toString()] = candidate.institute.toString();
        }
      });
      const instituteCount = {};
      appliedDrives.forEach((app15) => {
        const candidateId = app15.user.toString();
        const instituteId = candidateToInstitute[candidateId];
        if (instituteId) {
          if (!instituteCount[instituteId]) {
            instituteCount[instituteId] = { total: 0, hired: 0 };
          }
          instituteCount[instituteId].total++;
          if (app15.status === "hired") {
            instituteCount[instituteId].hired++;
          }
        }
      });
      const instituteSources = Object.entries(instituteCount).map(([instituteId, counts]) => ({
        name: instituteIdToName[instituteId] || "Unknown Institute",
        id: instituteId,
        totalCandidates: counts.total,
        hiredCandidates: counts.hired,
        hireRate: counts.total > 0 ? counts.hired / counts.total * 100 : 0
      })).sort((a2, b2) => b2.hiredCandidates - a2.hiredCandidates);
      const applicationCycleTimes = {
        "< 1 week": [],
        "1-2 weeks": [],
        "2-4 weeks": [],
        "1-2 months": [],
        "> 2 months": []
      };
      appliedDrives.forEach((app15) => {
        if (app15.status === "hired" && app15.createdAt && app15.updatedAt) {
          const startDate = new Date(app15.createdAt);
          const endDate = new Date(app15.updatedAt);
          const durationDays = (endDate.getTime() - startDate.getTime()) / (1e3 * 60 * 60 * 24);
          if (durationDays < 7) {
            applicationCycleTimes["< 1 week"].push(durationDays);
          } else if (durationDays < 14) {
            applicationCycleTimes["1-2 weeks"].push(durationDays);
          } else if (durationDays < 30) {
            applicationCycleTimes["2-4 weeks"].push(durationDays);
          } else if (durationDays < 60) {
            applicationCycleTimes["1-2 months"].push(durationDays);
          } else {
            applicationCycleTimes["> 2 months"].push(durationDays);
          }
        }
      });
      const hiringCycleTimes = Object.entries(applicationCycleTimes).map(([range, durations]) => ({
        timeRange: range,
        count: durations.length,
        averageDays: durations.length > 0 ? durations.reduce((sum, days) => sum + days, 0) / durations.length : 0
      })).sort((a2, b2) => {
        const ranges = [
          "< 1 week",
          "1-2 weeks",
          "2-4 weeks",
          "1-2 months",
          "> 2 months"
        ];
        return ranges.indexOf(a2.timeRange) - ranges.indexOf(b2.timeRange);
      });
      return {
        instituteSources,
        hiringCycleTimes,
        topSources: instituteSources.slice(0, 5),
        totalCandidates: candidates.length,
        totalHired: appliedDrives.filter((app15) => app15.status === "hired").length,
        overallHireRate: candidates.length > 0 ? appliedDrives.filter((app15) => app15.status === "hired").length / candidates.length * 100 : 0
      };
    };
    companyAnalyticsController_default = {
      getCompanyAnalytics: getCompanyAnalytics2,
      getCompanyHiringTrends,
      getCompanySkillDemand,
      getCompanyCandidateSources
    };
  }
});

// src/routes/companyRoute.ts
import { Hono as Hono12 } from "hono";
var app11, companyRoute_default;
var init_companyRoute = __esm({
  "src/routes/companyRoute.ts"() {
    "use strict";
    init_companyController();
    init_companyAnalyticsController();
    app11 = new Hono12();
    app11.get("/", companyController_default.getCompanies);
    app11.get("/:id", companyController_default.getCompany);
    app11.post("/create", companyController_default.createCompany);
    app11.put("/update", companyController_default.updateCompany);
    app11.post("/archive", companyController_default.archiveCompany);
    app11.delete("/:id", companyController_default.deleteCompany);
    app11.get("/analytics/:id", companyAnalyticsController_default.getCompanyAnalytics);
    app11.get("/analytics/hiring-trends/:id", companyAnalyticsController_default.getCompanyHiringTrends);
    app11.get("/analytics/skill-demand/:id", companyAnalyticsController_default.getCompanySkillDemand);
    app11.get("/analytics/candidate-sources/:id", companyAnalyticsController_default.getCompanyCandidateSources);
    companyRoute_default = app11;
  }
});

// src/config/stream.ts
import { StreamClient } from "@stream-io/node-sdk";
var apiKey, secret, streamClient, stream_default;
var init_stream = __esm({
  "src/config/stream.ts"() {
    "use strict";
    apiKey = process.env.STREAM_ACCESS_KEY;
    secret = process.env.STREAM_SECRET_KEY;
    streamClient = new StreamClient(apiKey, secret);
    stream_default = streamClient;
  }
});

// src/controllers/meet/meetController.ts
import jwt3 from "jsonwebtoken";
async function getIoServer2() {
  const { ioServer: ioServer2 } = await Promise.resolve().then(() => (init_init(), init_exports));
  return ioServer2;
}
var decodeJWT, getMeetJWT, getStreamJWT, getMeet, updateCurrentCandidate, updateCompletedCandidates, meetController_default;
var init_meetController = __esm({
  "src/controllers/meet/meetController.ts"() {
    "use strict";
    init_stream();
    init_checkOrganizationPermission();
    init_AppliedPosting();
    init_Candidate();
    init_Meet();
    init_Organization();
    init_Posting();
    init_sendResponse();
    decodeJWT = (token) => {
      try {
        const decoded = jwt3.verify(
          token,
          process.env.JWT_SECRET
        );
        return decoded;
      } catch (e2) {
        return null;
      }
    };
    getIoServer2().then((server2) => {
      server2.on("connection", (socket) => {
        socket.on("meet/user-joined", async (data) => {
          if (!data) return;
          const { token } = data;
          const decoded = decodeJWT(token);
          if (!decoded) return;
          socket.join(decoded.code);
          if (decoded.isInterviewer) {
            server2.to(decoded.code).emit("meet/interviewer-joined");
            return;
          }
          server2.to(decoded.code).emit("meet/user-joined/callback", { decoded, socketId: socket.id });
        });
        socket.on("meet/accept-user", async (data) => {
          if (!data) return;
          console.log("Received accept-user", data);
          const { userId, token } = data;
          const decoded = decodeJWT(token);
          if (!decoded) return;
          if (!decoded.isInterviewer) return;
          server2.to(decoded.code).emit("meet/accept-user/callback", { userId });
        });
        socket.on("meet/user-answered-call", async (data) => {
          if (!data) return;
          console.log("User answered call", data);
          const { token } = data;
          const decoded = decodeJWT(token);
          if (!decoded) return;
          if (!decoded.isCandidate) return;
          console.log("Emitting user-answered-call/callback", decoded.userId);
          server2.to(decoded.code).emit("meet/user-answered-call/callback", {
            userId: decoded.userId
          });
        });
        socket.on("disconnect", () => {
          console.log("User left. Calling", socket.id);
          server2.emit("meet/user-left/callback", { socketId: socket.id });
        });
      });
    });
    getMeetJWT = async (c2) => {
      const clerkId = await c2.get("auth").userId;
      const userId = await c2.get("auth")._id;
      console.log("Meet JWT", userId, clerkId);
      if (!clerkId) return sendError(c2, 401, "Unauthorized");
      let name = "";
      let isInterviewer = false;
      let isCandidate = false;
      console.log("Here 1", userId, clerkId);
      const orgPerms = await checkOrganizationPermission_default.all(c2, ["manage_job"]);
      if (orgPerms.allowed) {
        const organization = await Organization_default.findOne({
          _id: orgPerms.data?.organization?._id
        });
        console.log("Org perms", orgPerms, organization);
        if (!organization) return sendError(c2, 401, "Unauthorized");
        const memberIdMap = organization.members.map((m3) => m3.user?.toString());
        console.log("Member ID Map", memberIdMap, userId, clerkId);
        if (!memberIdMap.includes(userId)) return sendError(c2, 401, "Unauthorized");
        console.log("Here 2", userId, clerkId);
        isInterviewer = true;
        name = "Interviewer";
      }
      const { postingId } = await c2.req.json();
      console.log("Here 3", userId, postingId);
      const posting = await Posting_default.findOne({
        _id: postingId
      }).populate("interviews.interview");
      console.log("Posting", posting);
      if (!posting) return sendError(c2, 401, "Unauthorized");
      const currentStep = posting?.workflow?.steps.find(
        (step) => step.status === "in-progress"
      );
      console.log("Current step", currentStep);
      if (!currentStep) return sendError(c2, 401, "Unauthorized");
      const interview = posting.interviews.find(
        (i2) => i2.workflowId?.toString() === currentStep._id?.toString()
      );
      console.log("Interview", interview);
      if (!interview) return sendError(c2, 401, "Unauthorized");
      const code = interview.interview?.code;
      if (!isInterviewer) {
        const candidate = await Candidate_default.findOne({ userId });
        console.log("Candidate", candidate);
        if (!candidate) return sendError(c2, 401, "Unauthorized");
        if (!posting.candidates.includes(candidate._id)) {
          return sendError(c2, 401, "Unauthorized");
        }
        const appliedPosting = await AppliedPosting_default.findOne({
          posting: postingId,
          user: candidate._id
        });
        if (!appliedPosting) return sendError(c2, 401, "Unauthorized");
        if (appliedPosting.status === "rejected") {
          return sendError(c2, 401, "Unauthorized");
        }
        name = candidate.name;
        isCandidate = true;
      }
      const token = jwt3.sign(
        {
          userId,
          name,
          isInterviewer,
          isCandidate,
          code
        },
        process.env.JWT_SECRET
      );
      return sendSuccess(c2, 200, "Meet JWT generated", {
        token
      });
    };
    getStreamJWT = async (c2) => {
      try {
        const { _id } = await c2.get("auth");
        const { token } = await c2.req.json();
        console.log("Stream JWT", token, _id);
        if (!token || !_id) return sendError(c2, 401, "Unauthorized");
        const decoded = jwt3.verify(
          token,
          process.env.JWT_SECRET
        );
        console.log("Decoded JWT", decoded);
        if (!decoded) return sendError(c2, 401, "Unauthorized");
        let streamToken = "";
        if (decoded.isInterviewer) {
          streamToken = await stream_default.generateCallToken({
            user_id: _id,
            call_cids: [`interview:${decoded.code}`],
            role: "interviewer"
          });
        } else if (decoded.isCandidate) {
          streamToken = await stream_default.generateCallToken({
            user_id: _id,
            call_cids: [`interview:${decoded.code}`],
            role: "interviewee"
          });
        }
        const role = decoded.isInterviewer ? "interviewer" : decoded.isCandidate ? "candidate" : "guest";
        const meet = await Meet_default.findOne({
          code: decoded.code
        });
        if (!meet) return sendError(c2, 404, "Meet not found");
        const current = meet.current;
        let isDisconnected = false;
        if (current?.toString() === _id) {
          isDisconnected = true;
        }
        ``;
        return sendSuccess(c2, 200, "Stream JWT generated", {
          token: streamToken,
          role,
          userId: _id,
          name: decoded.name,
          disconnected: isDisconnected
        });
      } catch (e2) {
        return sendError(c2, 500, "Internal server error");
      }
    };
    getMeet = async (c2) => {
      try {
        const code = c2.req.param("code");
        const { _id } = await c2.get("auth");
        console.log("Meet code", code, _id);
        if (!_id) return sendError(c2, 401, "Unauthorized");
        const meet = await Meet_default.findOne({
          code
        }).populate("interviewers").populate("current").populate("completed").populate("candidates");
        if (!meet) return sendError(c2, 404, "Meet not found");
        const isInterviewer = meet.interviewers.some(
          (i2) => i2._id.toString() === _id
        );
        if (!isInterviewer) {
          console.log("Not an interviewer");
          return sendError(c2, 401, "Unauthorized");
        }
        return sendSuccess(c2, 200, "Meet found", {
          meet
        });
      } catch (e2) {
        return sendError(c2, 500, "Internal server error");
        console.error(e2);
      }
    };
    updateCurrentCandidate = async (c2) => {
      try {
        const _id = c2.req.param("id");
        const { current } = await c2.req.json();
        const meet = await Meet_default.findOne({
          _id
        });
        if (!meet) return sendError(c2, 404, "Meet not found");
        const candidate = await Candidate_default.findOne({
          userId: current
        });
        if (!candidate) return sendError(c2, 404, "Candidate not found");
        meet.current = candidate._id;
        await meet.save();
        return sendSuccess(c2, 200, "Current candidate updated", {
          meet
        });
      } catch (e2) {
        console.error(e2);
        return sendError(c2, 500, "Internal server error");
      }
    };
    updateCompletedCandidates = async (c2) => {
      try {
        const _id = c2.req.param("id");
        const { completed } = await c2.req.json();
        const meet = await Meet_default.findOne({
          _id
        });
        if (!meet) return sendError(c2, 404, "Meet not found");
        const candidate = await Candidate_default.findOne({
          userId: completed
        });
        if (!candidate) return sendError(c2, 404, "Candidate not found");
        meet.completed.push(candidate._id);
        await meet.save();
        return sendSuccess(c2, 200, "Completed candidates updated", {
          meet
        });
      } catch (e2) {
        return sendError(c2, 500, "Internal server error");
      }
    };
    meetController_default = {
      getMeetJWT,
      getStreamJWT,
      getMeet,
      updateCurrentCandidate,
      updateCompletedCandidates
    };
  }
});

// src/routes/meetRoutes.ts
import { Hono as Hono13 } from "hono";
var app12, meetRoutes_default;
var init_meetRoutes = __esm({
  "src/routes/meetRoutes.ts"() {
    "use strict";
    init_meetController();
    app12 = new Hono13();
    app12.get("/:code", meetController_default.getMeet);
    app12.post("/", meetController_default.getMeetJWT);
    app12.post("/stream", meetController_default.getStreamJWT);
    app12.post(":id/current", meetController_default.updateCurrentCandidate);
    app12.post(":id/completed", meetController_default.updateCompletedCandidates);
    meetRoutes_default = app12;
  }
});

// src/controllers/code/userController.ts
var userCreated, userDeleted, userUpdated, getNotificationsForUser, markNotificationAsRead, userController_default;
var init_userController = __esm({
  "src/controllers/code/userController.ts"() {
    "use strict";
    init_User();
    init_sendResponse();
    init_logger();
    init_clerk();
    init_Notification();
    userCreated = async (c2) => {
      const { data } = await c2.req.json();
      const { id, primary_email_address_id } = data;
      const email = data.email_addresses.find(
        (email2) => email2.id === primary_email_address_id
      );
      const cUser = await clerk_default.users.getUser(id);
      const publicMetadata = cUser.publicMetadata;
      const privateMetadata = cUser.privateMetadata;
      try {
        const user = await User_default.create({
          clerkId: id,
          email: email.email_address,
          isSample: privateMetadata?.isSample || false,
          sampleInstituteId: privateMetadata?.sampleInstituteId || void 0
        });
        await clerk_default.users.updateUser(id, {
          publicMetadata: { ...publicMetadata, _id: user._id }
        });
        return sendSuccess(c2, 200, "User created successfully");
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to create user");
      }
    };
    userDeleted = async (c2) => {
      const { data } = await c2.req.json();
      const { id } = data;
      try {
        const u2 = await User_default.findOne({ clerkId: id });
        if (u2) {
          await u2.deleteOne();
        }
        return sendSuccess(c2, 200, "User deleted successfully");
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to delete user");
      }
    };
    userUpdated = async (c2) => {
      const { data } = await c2.req.json();
      const { id, primary_email_address_id } = data;
      const email = data.email_addresses.find(
        (email2) => email2.id === primary_email_address_id
      );
      try {
        const u2 = await User_default.findOne({ clerkId: id });
        if (!u2) {
          sendError(c2, 404, "User not found");
          return;
        }
        await u2.updateOne({
          email: email.email_address
        });
        return sendSuccess(c2, 200, "User updated successfully");
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to update user");
      }
    };
    getNotificationsForUser = async (c2) => {
      try {
        const platform = c2.req.query("platform");
        const userId = c2.get("auth")._id;
        if (!platform) {
          return sendError(c2, 400, "Platform is required");
        }
        const notifications = await Notification_default.find({
          userIds: { $in: [userId] },
          platform
        }).sort({ createdAt: -1 }).limit(50).lean();
        if (notifications.length === 0) {
          return sendSuccess(c2, 200, "No notifications found", []);
        }
        const filteredNotifications = notifications.map((notification) => {
          const { userIds, readBy, ...rest } = notification;
          return {
            ...rest,
            userId: [userIds.find((id) => id.toString() === userId)],
            readBy: [readBy.find((id) => id.toString() === userId)]
          };
        });
        return sendSuccess(
          c2,
          200,
          "Notifications fetched successfully",
          filteredNotifications
        );
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to fetch notifications");
      }
    };
    markNotificationAsRead = async (c2) => {
      const { id } = await c2.req.param();
      const userId = c2.get("auth")._id;
      if (!id) {
        return sendError(c2, 400, "Notification ID is required");
      }
      try {
        const notification = await Notification_default.findById(id);
        if (!notification) {
          return sendError(c2, 404, "Notification not found");
        }
        if (notification.userIds.includes(userId)) {
          await Notification_default.updateOne(
            { _id: id },
            { $addToSet: { readBy: userId } }
          );
        }
        return sendSuccess(c2, 200, "Notification marked as read successfully");
      } catch (error) {
        logger_default.error(error);
        return sendError(c2, 500, "Failed to mark notification as read");
      }
    };
    userController_default = {
      userCreated,
      userDeleted,
      userUpdated,
      getNotificationsForUser,
      markNotificationAsRead
    };
  }
});

// src/routes/userRoute.ts
import { Hono as Hono14 } from "hono";
var app13, userRoute_default;
var init_userRoute = __esm({
  "src/routes/userRoute.ts"() {
    "use strict";
    init_userController();
    app13 = new Hono14();
    app13.post("/create", userController_default.userCreated);
    app13.post("/delete", userController_default.userDeleted);
    app13.post("/update", userController_default.userUpdated);
    app13.get("/notifications", userController_default.getNotificationsForUser);
    app13.post("/notifications/:id", userController_default.markNotificationAsRead);
    userRoute_default = app13;
  }
});

// src/middlewares/routeTracker.ts
import Redis from "ioredis";
var redis, REDIS_KEY, getCurrentTimestamp, trackRouteHits;
var init_routeTracker = __esm({
  "src/middlewares/routeTracker.ts"() {
    "use strict";
    redis = new Redis(process.env.UPSTASH_HITS_REDIS_STRING, {
      lazyConnect: true
    });
    REDIS_KEY = "hono:route-hits";
    getCurrentTimestamp = () => {
      const now = /* @__PURE__ */ new Date();
      return now.toISOString().replace("T", " ").replace(/\.\d+Z$/, "");
    };
    trackRouteHits = () => {
      return async (c2, next) => {
        const path = c2.req.path;
        const method = c2.req.method;
        const routeKey = `${method} ${path}`;
        try {
          let routeHits = {};
          const existingData = await redis.get(REDIS_KEY);
          if (existingData) {
            routeHits = JSON.parse(existingData);
          }
          if (!routeHits[routeKey]) {
            routeHits[routeKey] = {
              method,
              path,
              hits: 0,
              lastAccessed: null
            };
          }
          routeHits[routeKey].hits++;
          routeHits[routeKey].lastAccessed = getCurrentTimestamp();
          await redis.set(REDIS_KEY, JSON.stringify(routeHits));
        } catch (error) {
          console.error("Error tracking route hits:", error);
        }
        await next();
      };
    };
  }
});

// src/config/init.ts
var init_exports = {};
__export(init_exports, {
  default: () => init_default,
  ioServer: () => ioServer
});
import "dotenv/config";
import { Hono as Hono15 } from "hono";
import { prettyJSON } from "hono/pretty-json";
import { cors } from "hono/cors";
import { clerkMiddleware } from "@hono/clerk-auth";
import { Server } from "socket.io";
import { serve } from "@hono/node-server";
var port, app14, server, ioServer, init_default;
var init_init = __esm({
  "src/config/init.ts"() {
    "use strict";
    init_performanceMiddleware();
    init_authMiddleware();
    init_logger();
    init_db();
    init_loops();
    init_clerk();
    init_homeRoute();
    init_problemsRoute();
    init_assessmentRoute();
    init_submissionRoute();
    init_organizationRoute();
    init_instituteRoute();
    init_driveRoute();
    init_postingRoute();
    init_candidateRoute();
    init_walletRoute();
    init_placementGroupsroute();
    init_companyRoute();
    init_meetRoutes();
    init_userRoute();
    init_routeTracker();
    init_logger();
    port = parseInt(process.env.PORT);
    app14 = new Hono15();
    server = serve({
      fetch: app14.fetch,
      port
    });
    ioServer = new Server(server, {
      path: "/socket.io",
      serveClient: false,
      allowEIO3: true,
      cors: {
        origin: "*"
      }
    });
    ioServer.on("error", (err) => {
      logger_default.error(err);
    });
    app14.use("*", clerkMiddleware());
    app14.use(trackRouteHits());
    app14.use(prettyJSON());
    app14.use(cors());
    app14.use(performanceMiddleware_default);
    app14.use(authMiddleware_default);
    app14.route("/home", homeRoute_default);
    app14.route("/problems", problemsRoute_default);
    app14.route("/assessments", assessmentRoute_default);
    app14.route("/submissions", submissionRoute_default);
    app14.route("/users", userRoute_default);
    app14.route("/organizations", organizationRoute_default);
    app14.route("/postings", postingRoute_default);
    app14.route("/candidates", candidateRoute_default);
    app14.route("/institutes", instituteRoute_default);
    app14.route("/drives", driveRoute_default);
    app14.route("/placement-groups", placementGroupsroute_default);
    app14.route("/companies", companyRoute_default);
    app14.route("/wallet", walletRoute_default);
    app14.route("/meet", meetRoutes_default);
    init_default = app14;
  }
});

// src/index.ts
init_init();
init_logger();
import "dotenv/config";
var port2 = parseInt(process.env.PORT);
init_default.get("/health", (c2) => {
  return c2.json({ status: "ok", version: "alpha_0.0.9" });
});
init_default.get("/*", (c2) => {
  return c2.json({ status: "not found" }, 404);
});
logger_default.info(`Server is running on port ${port2}`);
//# sourceMappingURL=index.js.map
